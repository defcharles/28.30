#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimCoreRuntime

#include "Basic.hpp"

#include "PilgrimCoreRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "EpicMediaBasePlayer_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"
#include "Harmonix_structs.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "CommonInput_structs.hpp"
#include "MetasoundEngine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PlayspaceSystem_structs.hpp"
#include "FMCoreRuntime_structs.hpp"


namespace SDK::Params
{

// Function PilgrimCoreRuntime.NetworkedMusicClockManager.OnBar
// 0x0004 (0x0004 - 0x0000)
struct NetworkedMusicClockManager_OnBar final
{
public:
	int32                                         BarNumber;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkedMusicClockManager_OnBar) == 0x000004, "Wrong alignment on NetworkedMusicClockManager_OnBar");
static_assert(sizeof(NetworkedMusicClockManager_OnBar) == 0x000004, "Wrong size on NetworkedMusicClockManager_OnBar");
static_assert(offsetof(NetworkedMusicClockManager_OnBar, BarNumber) == 0x000000, "Member 'NetworkedMusicClockManager_OnBar::BarNumber' has a wrong offset!");

// Function PilgrimCoreRuntime.NetworkedMusicClockManager.OnBeat
// 0x0008 (0x0008 - 0x0000)
struct NetworkedMusicClockManager_OnBeat final
{
public:
	int32                                         BeatNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatInBar;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkedMusicClockManager_OnBeat) == 0x000004, "Wrong alignment on NetworkedMusicClockManager_OnBeat");
static_assert(sizeof(NetworkedMusicClockManager_OnBeat) == 0x000008, "Wrong size on NetworkedMusicClockManager_OnBeat");
static_assert(offsetof(NetworkedMusicClockManager_OnBeat, BeatNumber) == 0x000000, "Member 'NetworkedMusicClockManager_OnBeat::BeatNumber' has a wrong offset!");
static_assert(offsetof(NetworkedMusicClockManager_OnBeat, BeatInBar) == 0x000004, "Member 'NetworkedMusicClockManager_OnBeat::BeatInBar' has a wrong offset!");

// Function PilgrimCoreRuntime.NetworkedMusicClockManager.PlayServerAuthoritativeSong
// 0x0008 (0x0008 - 0x0000)
struct NetworkedMusicClockManager_PlayServerAuthoritativeSong final
{
public:
	class UPilgrimSongMetadata*                   SongToPlay;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkedMusicClockManager_PlayServerAuthoritativeSong) == 0x000008, "Wrong alignment on NetworkedMusicClockManager_PlayServerAuthoritativeSong");
static_assert(sizeof(NetworkedMusicClockManager_PlayServerAuthoritativeSong) == 0x000008, "Wrong size on NetworkedMusicClockManager_PlayServerAuthoritativeSong");
static_assert(offsetof(NetworkedMusicClockManager_PlayServerAuthoritativeSong, SongToPlay) == 0x000000, "Member 'NetworkedMusicClockManager_PlayServerAuthoritativeSong::SongToPlay' has a wrong offset!");

// Function PilgrimCoreRuntime.NetworkedMusicClockManager.SetClientAudioComponentsToUse
// 0x0010 (0x0010 - 0x0000)
struct NetworkedMusicClockManager_SetClientAudioComponentsToUse final
{
public:
	class UAudioComponent*                        InMetasoundPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        InMetasoundMixer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkedMusicClockManager_SetClientAudioComponentsToUse) == 0x000008, "Wrong alignment on NetworkedMusicClockManager_SetClientAudioComponentsToUse");
static_assert(sizeof(NetworkedMusicClockManager_SetClientAudioComponentsToUse) == 0x000010, "Wrong size on NetworkedMusicClockManager_SetClientAudioComponentsToUse");
static_assert(offsetof(NetworkedMusicClockManager_SetClientAudioComponentsToUse, InMetasoundPlayer) == 0x000000, "Member 'NetworkedMusicClockManager_SetClientAudioComponentsToUse::InMetasoundPlayer' has a wrong offset!");
static_assert(offsetof(NetworkedMusicClockManager_SetClientAudioComponentsToUse, InMetasoundMixer) == 0x000008, "Member 'NetworkedMusicClockManager_SetClientAudioComponentsToUse::InMetasoundMixer' has a wrong offset!");

// Function PilgrimCoreRuntime.NetworkedMusicClockManager.GetOwnedMusicClock
// 0x0008 (0x0008 - 0x0000)
struct NetworkedMusicClockManager_GetOwnedMusicClock final
{
public:
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkedMusicClockManager_GetOwnedMusicClock) == 0x000008, "Wrong alignment on NetworkedMusicClockManager_GetOwnedMusicClock");
static_assert(sizeof(NetworkedMusicClockManager_GetOwnedMusicClock) == 0x000008, "Wrong size on NetworkedMusicClockManager_GetOwnedMusicClock");
static_assert(offsetof(NetworkedMusicClockManager_GetOwnedMusicClock, ReturnValue) == 0x000000, "Member 'NetworkedMusicClockManager_GetOwnedMusicClock::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAbilityTask_WaitForBars.WaitForBars
// 0x0018 (0x0018 - 0x0000)
struct PilgrimAbilityTask_WaitForBars_WaitForBars final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BarsToWaitFor;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopFor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimAbilityTask_WaitForBars*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAbilityTask_WaitForBars_WaitForBars) == 0x000008, "Wrong alignment on PilgrimAbilityTask_WaitForBars_WaitForBars");
static_assert(sizeof(PilgrimAbilityTask_WaitForBars_WaitForBars) == 0x000018, "Wrong size on PilgrimAbilityTask_WaitForBars_WaitForBars");
static_assert(offsetof(PilgrimAbilityTask_WaitForBars_WaitForBars, OwningAbility) == 0x000000, "Member 'PilgrimAbilityTask_WaitForBars_WaitForBars::OwningAbility' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBars_WaitForBars, BarsToWaitFor) == 0x000008, "Member 'PilgrimAbilityTask_WaitForBars_WaitForBars::BarsToWaitFor' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBars_WaitForBars, LoopFor) == 0x00000C, "Member 'PilgrimAbilityTask_WaitForBars_WaitForBars::LoopFor' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBars_WaitForBars, ReturnValue) == 0x000010, "Member 'PilgrimAbilityTask_WaitForBars_WaitForBars::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAbilityTask_WaitForBeats.WaitForBeats
// 0x0018 (0x0018 - 0x0000)
struct PilgrimAbilityTask_WaitForBeats_WaitForBeats final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatsToWaitFor;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopFor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimAbilityTask_WaitForBeats*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAbilityTask_WaitForBeats_WaitForBeats) == 0x000008, "Wrong alignment on PilgrimAbilityTask_WaitForBeats_WaitForBeats");
static_assert(sizeof(PilgrimAbilityTask_WaitForBeats_WaitForBeats) == 0x000018, "Wrong size on PilgrimAbilityTask_WaitForBeats_WaitForBeats");
static_assert(offsetof(PilgrimAbilityTask_WaitForBeats_WaitForBeats, OwningAbility) == 0x000000, "Member 'PilgrimAbilityTask_WaitForBeats_WaitForBeats::OwningAbility' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBeats_WaitForBeats, BeatsToWaitFor) == 0x000008, "Member 'PilgrimAbilityTask_WaitForBeats_WaitForBeats::BeatsToWaitFor' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBeats_WaitForBeats, LoopFor) == 0x00000C, "Member 'PilgrimAbilityTask_WaitForBeats_WaitForBeats::LoopFor' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForBeats_WaitForBeats, ReturnValue) == 0x000010, "Member 'PilgrimAbilityTask_WaitForBeats_WaitForBeats::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAbilityTask_WaitForSection.WaitForSection
// 0x0028 (0x0028 - 0x0000)
struct PilgrimAbilityTask_WaitForSection_WaitForSection final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWaitForNextSection;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimAbilityTask_WaitForSection*     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAbilityTask_WaitForSection_WaitForSection) == 0x000008, "Wrong alignment on PilgrimAbilityTask_WaitForSection_WaitForSection");
static_assert(sizeof(PilgrimAbilityTask_WaitForSection_WaitForSection) == 0x000028, "Wrong size on PilgrimAbilityTask_WaitForSection_WaitForSection");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_WaitForSection, OwningAbility) == 0x000000, "Member 'PilgrimAbilityTask_WaitForSection_WaitForSection::OwningAbility' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_WaitForSection, bShouldWaitForNextSection) == 0x000008, "Member 'PilgrimAbilityTask_WaitForSection_WaitForSection::bShouldWaitForNextSection' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_WaitForSection, SectionName) == 0x000010, "Member 'PilgrimAbilityTask_WaitForSection_WaitForSection::SectionName' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_WaitForSection, ReturnValue) == 0x000020, "Member 'PilgrimAbilityTask_WaitForSection_WaitForSection::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAbilityTask_WaitForSection.OnSectionEvent
// 0x0018 (0x0018 - 0x0000)
struct PilgrimAbilityTask_WaitForSection_OnSectionEvent final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionStartMs;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionLengthMs;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAbilityTask_WaitForSection_OnSectionEvent) == 0x000008, "Wrong alignment on PilgrimAbilityTask_WaitForSection_OnSectionEvent");
static_assert(sizeof(PilgrimAbilityTask_WaitForSection_OnSectionEvent) == 0x000018, "Wrong size on PilgrimAbilityTask_WaitForSection_OnSectionEvent");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_OnSectionEvent, SectionName) == 0x000000, "Member 'PilgrimAbilityTask_WaitForSection_OnSectionEvent::SectionName' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_OnSectionEvent, SectionStartMs) == 0x000010, "Member 'PilgrimAbilityTask_WaitForSection_OnSectionEvent::SectionStartMs' has a wrong offset!");
static_assert(offsetof(PilgrimAbilityTask_WaitForSection_OnSectionEvent, SectionLengthMs) == 0x000014, "Member 'PilgrimAbilityTask_WaitForSection_OnSectionEvent::SectionLengthMs' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimActorPool.InitPool
// 0x0010 (0x0010 - 0x0000)
struct PilgrimActorPool_InitPool final
{
public:
	struct FPilgrimActorPoolParams                PilgrimActorPoolParams;                            // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimActorPool_InitPool) == 0x000008, "Wrong alignment on PilgrimActorPool_InitPool");
static_assert(sizeof(PilgrimActorPool_InitPool) == 0x000010, "Wrong size on PilgrimActorPool_InitPool");
static_assert(offsetof(PilgrimActorPool_InitPool, PilgrimActorPoolParams) == 0x000000, "Member 'PilgrimActorPool_InitPool::PilgrimActorPoolParams' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimActorPool.TryReturnItem
// 0x0010 (0x0010 - 0x0000)
struct PilgrimActorPool_TryReturnItem final
{
public:
	class AActor*                                 ActorToPutBack;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimActorPool_TryReturnItem) == 0x000008, "Wrong alignment on PilgrimActorPool_TryReturnItem");
static_assert(sizeof(PilgrimActorPool_TryReturnItem) == 0x000010, "Wrong size on PilgrimActorPool_TryReturnItem");
static_assert(offsetof(PilgrimActorPool_TryReturnItem, ActorToPutBack) == 0x000000, "Member 'PilgrimActorPool_TryReturnItem::ActorToPutBack' has a wrong offset!");
static_assert(offsetof(PilgrimActorPool_TryReturnItem, ReturnValue) == 0x000008, "Member 'PilgrimActorPool_TryReturnItem::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimActorPool.GetNumAvailableItems
// 0x0004 (0x0004 - 0x0000)
struct PilgrimActorPool_GetNumAvailableItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimActorPool_GetNumAvailableItems) == 0x000004, "Wrong alignment on PilgrimActorPool_GetNumAvailableItems");
static_assert(sizeof(PilgrimActorPool_GetNumAvailableItems) == 0x000004, "Wrong size on PilgrimActorPool_GetNumAvailableItems");
static_assert(offsetof(PilgrimActorPool_GetNumAvailableItems, ReturnValue) == 0x000000, "Member 'PilgrimActorPool_GetNumAvailableItems::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimActorPool.GetNumInUseItems
// 0x0004 (0x0004 - 0x0000)
struct PilgrimActorPool_GetNumInUseItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimActorPool_GetNumInUseItems) == 0x000004, "Wrong alignment on PilgrimActorPool_GetNumInUseItems");
static_assert(sizeof(PilgrimActorPool_GetNumInUseItems) == 0x000004, "Wrong size on PilgrimActorPool_GetNumInUseItems");
static_assert(offsetof(PilgrimActorPool_GetNumInUseItems, ReturnValue) == 0x000000, "Member 'PilgrimActorPool_GetNumInUseItems::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAsyncAction_RequestLeaderboard.PilgrimRequestLeaderboard
// 0x0048 (0x0048 - 0x0000)
struct PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpotlightGroup;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  RequestingPlayer;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendsOnly;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCenteredOnRequestingPlayer;                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Page;                                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpotlightCompetition;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimAsyncAction_RequestLeaderboard* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard) == 0x000008, "Wrong alignment on PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard");
static_assert(sizeof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard) == 0x000048, "Wrong size on PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, WorldContextObject) == 0x000000, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, SongShortName) == 0x000008, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, SpotlightGroup) == 0x000010, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::SpotlightGroup' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, LeaderboardType) == 0x000020, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, RequestingPlayer) == 0x000028, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, bFriendsOnly) == 0x000030, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::bFriendsOnly' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, bCenteredOnRequestingPlayer) == 0x000031, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::bCenteredOnRequestingPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, Page) == 0x000034, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::Page' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, bIsSpotlightCompetition) == 0x000038, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::bIsSpotlightCompetition' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, bUseCache) == 0x000039, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::bUseCache' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard, ReturnValue) == 0x000040, "Member 'PilgrimAsyncAction_RequestLeaderboard_PilgrimRequestLeaderboard::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAsyncAction_RequestPersonalBest.PilgrimRequestPersonalBest
// 0x0060 (0x0060 - 0x0000)
struct PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  RequestingPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BandSize;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimAsyncAction_RequestPersonalBest* ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest) == 0x000008, "Wrong alignment on PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest");
static_assert(sizeof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest) == 0x000060, "Wrong size on PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, WorldContextObject) == 0x000000, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, RequestingPlayer) == 0x000008, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, PlayerAccountId) == 0x000010, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, SongShortName) == 0x000040, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, InstrumentType) == 0x000044, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::InstrumentType' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, BandSize) == 0x000048, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::BandSize' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, SetlistIndex) == 0x00004C, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, bUseCache) == 0x000050, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::bUseCache' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest, ReturnValue) == 0x000058, "Member 'PilgrimAsyncAction_RequestPersonalBest_PilgrimRequestPersonalBest::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimAsyncAction_RequestPlayerFeed.PilgrimRequestPlayerFeed
// 0x00A0 (0x00A0 - 0x0000)
struct PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  RequestingPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SongQuery;                                         // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  SongShortNameMatcher;                              // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EPilgrimLeaderboardType>               Leaderboards;                                      // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               FriendIds;                                         // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPilgrimPlayerFeedSortType                    SortType;                                          // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllScores;                                        // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequirePlayerScore;                               // 0x0092(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimAsyncAction_RequestPlayerFeed*  ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed) == 0x000008, "Wrong alignment on PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed");
static_assert(sizeof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed) == 0x0000A0, "Wrong size on PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, WorldContextObject) == 0x000000, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, RequestingPlayer) == 0x000008, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, SongQuery) == 0x000010, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::SongQuery' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, SongShortNameMatcher) == 0x000058, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::SongShortNameMatcher' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, Leaderboards) == 0x000070, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::Leaderboards' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, FriendIds) == 0x000080, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::FriendIds' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, SortType) == 0x000090, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::SortType' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, bAllScores) == 0x000091, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::bAllScores' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, bRequirePlayerScore) == 0x000092, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::bRequirePlayerScore' has a wrong offset!");
static_assert(offsetof(PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed, ReturnValue) == 0x000098, "Member 'PilgrimAsyncAction_RequestPlayerFeed_PilgrimRequestPlayerFeed::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimBeatMarker.SetupNumLanes
// 0x0004 (0x0004 - 0x0000)
struct PilgrimBeatMarker_SetupNumLanes final
{
public:
	int32                                         NumLanes;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimBeatMarker_SetupNumLanes) == 0x000004, "Wrong alignment on PilgrimBeatMarker_SetupNumLanes");
static_assert(sizeof(PilgrimBeatMarker_SetupNumLanes) == 0x000004, "Wrong size on PilgrimBeatMarker_SetupNumLanes");
static_assert(offsetof(PilgrimBeatMarker_SetupNumLanes, NumLanes) == 0x000000, "Member 'PilgrimBeatMarker_SetupNumLanes::NumLanes' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimBeatValidatedAbility.OnBeatAbilityActivated
// 0x0001 (0x0001 - 0x0000)
struct PilgrimBeatValidatedAbility_OnBeatAbilityActivated final
{
public:
	bool                                          bOnBeat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimBeatValidatedAbility_OnBeatAbilityActivated) == 0x000001, "Wrong alignment on PilgrimBeatValidatedAbility_OnBeatAbilityActivated");
static_assert(sizeof(PilgrimBeatValidatedAbility_OnBeatAbilityActivated) == 0x000001, "Wrong size on PilgrimBeatValidatedAbility_OnBeatAbilityActivated");
static_assert(offsetof(PilgrimBeatValidatedAbility_OnBeatAbilityActivated, bOnBeat) == 0x000000, "Member 'PilgrimBeatValidatedAbility_OnBeatAbilityActivated::bOnBeat' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.SetSelectedGeneralControllerPreset
// 0x0010 (0x0010 - 0x0000)
struct PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset final
{
public:
	class FString                                 NewSelectedGeneralControllerPreset;                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset) == 0x000008, "Wrong alignment on PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset");
static_assert(sizeof(PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset) == 0x000010, "Wrong size on PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset");
static_assert(offsetof(PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset, NewSelectedGeneralControllerPreset) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_SetSelectedGeneralControllerPreset::NewSelectedGeneralControllerPreset' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.SetTrackBackgroundOpacity
// 0x0004 (0x0004 - 0x0000)
struct PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity final
{
public:
	float                                         NewOpacity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity) == 0x000004, "Wrong alignment on PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity");
static_assert(sizeof(PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity) == 0x000004, "Wrong size on PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity");
static_assert(offsetof(PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity, NewOpacity) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_SetTrackBackgroundOpacity::NewOpacity' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.SetTrackSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier final
{
public:
	float                                         NewMultiplier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier) == 0x000004, "Wrong alignment on PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier");
static_assert(sizeof(PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier) == 0x000004, "Wrong size on PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier");
static_assert(offsetof(PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier, NewMultiplier) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_SetTrackSpeedMultiplier::NewMultiplier' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.SetUseAlternative5LaneTouchLayout
// 0x0001 (0x0001 - 0x0000)
struct PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout final
{
public:
	bool                                          NewUseAlternative5LaneTouchLayout;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout) == 0x000001, "Wrong alignment on PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout");
static_assert(sizeof(PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout) == 0x000001, "Wrong size on PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout");
static_assert(offsetof(PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout, NewUseAlternative5LaneTouchLayout) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_SetUseAlternative5LaneTouchLayout::NewUseAlternative5LaneTouchLayout' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.GetSelectedGeneralControllerPreset
// 0x0010 (0x0010 - 0x0000)
struct PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset) == 0x000008, "Wrong alignment on PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset");
static_assert(sizeof(PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset) == 0x000010, "Wrong size on PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset");
static_assert(offsetof(PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset, ReturnValue) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_GetSelectedGeneralControllerPreset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.GetTrackBackgroundOpacity
// 0x0004 (0x0004 - 0x0000)
struct PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity) == 0x000004, "Wrong alignment on PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity");
static_assert(sizeof(PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity) == 0x000004, "Wrong size on PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity");
static_assert(offsetof(PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity, ReturnValue) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_GetTrackBackgroundOpacity::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.GetTrackSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier) == 0x000004, "Wrong alignment on PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier");
static_assert(sizeof(PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier) == 0x000004, "Wrong size on PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier");
static_assert(offsetof(PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier, ReturnValue) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_GetTrackSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimClientSettingRecordPartition.GetUseAlternative5LaneTouchLayout
// 0x0001 (0x0001 - 0x0000)
struct PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout) == 0x000001, "Wrong alignment on PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout");
static_assert(sizeof(PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout) == 0x000001, "Wrong size on PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout");
static_assert(offsetof(PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout, ReturnValue) == 0x000000, "Member 'PilgrimClientSettingRecordPartition_GetUseAlternative5LaneTouchLayout::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCoreBandStateComponent.GetCurrentSong
// 0x0008 (0x0008 - 0x0000)
struct PilgrimCoreBandStateComponent_GetCurrentSong final
{
public:
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCoreBandStateComponent_GetCurrentSong) == 0x000008, "Wrong alignment on PilgrimCoreBandStateComponent_GetCurrentSong");
static_assert(sizeof(PilgrimCoreBandStateComponent_GetCurrentSong) == 0x000008, "Wrong size on PilgrimCoreBandStateComponent_GetCurrentSong");
static_assert(offsetof(PilgrimCoreBandStateComponent_GetCurrentSong, ReturnValue) == 0x000000, "Member 'PilgrimCoreBandStateComponent_GetCurrentSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCoreBandStateComponent.GetNextSong
// 0x0008 (0x0008 - 0x0000)
struct PilgrimCoreBandStateComponent_GetNextSong final
{
public:
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCoreBandStateComponent_GetNextSong) == 0x000008, "Wrong alignment on PilgrimCoreBandStateComponent_GetNextSong");
static_assert(sizeof(PilgrimCoreBandStateComponent_GetNextSong) == 0x000008, "Wrong size on PilgrimCoreBandStateComponent_GetNextSong");
static_assert(offsetof(PilgrimCoreBandStateComponent_GetNextSong, ReturnValue) == 0x000000, "Member 'PilgrimCoreBandStateComponent_GetNextSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCoreBandStateComponent.GetSongAtIndex
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCoreBandStateComponent_GetSongAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCoreBandStateComponent_GetSongAtIndex) == 0x000008, "Wrong alignment on PilgrimCoreBandStateComponent_GetSongAtIndex");
static_assert(sizeof(PilgrimCoreBandStateComponent_GetSongAtIndex) == 0x000010, "Wrong size on PilgrimCoreBandStateComponent_GetSongAtIndex");
static_assert(offsetof(PilgrimCoreBandStateComponent_GetSongAtIndex, Index_0) == 0x000000, "Member 'PilgrimCoreBandStateComponent_GetSongAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PilgrimCoreBandStateComponent_GetSongAtIndex, ReturnValue) == 0x000008, "Member 'PilgrimCoreBandStateComponent_GetSongAtIndex::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetPilgrimCorePlayerStateComponent
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimCorePlayerStateComponent*       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent) == 0x000008, "Wrong alignment on PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent) == 0x000010, "Wrong size on PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent, PlayerState) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent, ReturnValue) == 0x000008, "Member 'PilgrimCorePlayerStateComponent_GetPilgrimCorePlayerStateComponent::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.OnRep_InstrumentChoice
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice final
{
public:
	EPilgrimTrackType                             PrevInstrument;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice");
static_assert(sizeof(PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice");
static_assert(offsetof(PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice, PrevInstrument) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_OnRep_InstrumentChoice::PrevInstrument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.OnRep_IsReady
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_OnRep_IsReady final
{
public:
	bool                                          bPrevIsReady;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_OnRep_IsReady) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_OnRep_IsReady");
static_assert(sizeof(PilgrimCorePlayerStateComponent_OnRep_IsReady) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_OnRep_IsReady");
static_assert(offsetof(PilgrimCorePlayerStateComponent_OnRep_IsReady, bPrevIsReady) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_OnRep_IsReady::bPrevIsReady' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.OnRep_SongDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_OnRep_SongDifficulty final
{
public:
	EPilgrimSongDifficulty                        PrevDifficulty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_OnRep_SongDifficulty) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_OnRep_SongDifficulty");
static_assert(sizeof(PilgrimCorePlayerStateComponent_OnRep_SongDifficulty) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_OnRep_SongDifficulty");
static_assert(offsetof(PilgrimCorePlayerStateComponent_OnRep_SongDifficulty, PrevDifficulty) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_OnRep_SongDifficulty::PrevDifficulty' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.ServerSetIsReady
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_ServerSetIsReady final
{
public:
	bool                                          bInIsReady;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_ServerSetIsReady) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_ServerSetIsReady");
static_assert(sizeof(PilgrimCorePlayerStateComponent_ServerSetIsReady) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_ServerSetIsReady");
static_assert(offsetof(PilgrimCorePlayerStateComponent_ServerSetIsReady, bInIsReady) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_ServerSetIsReady::bInIsReady' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.ServerSetIsUsingPlasticInstruments
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments final
{
public:
	bool                                          bIsPlasticAvailable;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments");
static_assert(sizeof(PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments");
static_assert(offsetof(PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments, bIsPlasticAvailable) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_ServerSetIsUsingPlasticInstruments::bIsPlasticAvailable' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.SetInstrumentChoice
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_SetInstrumentChoice final
{
public:
	EPilgrimTrackType                             Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_SetInstrumentChoice) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_SetInstrumentChoice");
static_assert(sizeof(PilgrimCorePlayerStateComponent_SetInstrumentChoice) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_SetInstrumentChoice");
static_assert(offsetof(PilgrimCorePlayerStateComponent_SetInstrumentChoice, Instrument) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_SetInstrumentChoice::Instrument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.SetSongDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_SetSongDifficulty final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_SetSongDifficulty) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_SetSongDifficulty");
static_assert(sizeof(PilgrimCorePlayerStateComponent_SetSongDifficulty) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_SetSongDifficulty");
static_assert(offsetof(PilgrimCorePlayerStateComponent_SetSongDifficulty, Difficulty) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_SetSongDifficulty::Difficulty' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetInstrumentChoice
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetInstrumentChoice final
{
public:
	EPilgrimTrackType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetInstrumentChoice) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_GetInstrumentChoice");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetInstrumentChoice) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_GetInstrumentChoice");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetInstrumentChoice, ReturnValue) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetInstrumentChoice::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetIsPlasticInstrumentAvailable
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable, ReturnValue) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetIsPlasticInstrumentAvailable::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetIsReady
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetIsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetIsReady) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_GetIsReady");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetIsReady) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_GetIsReady");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetIsReady, ReturnValue) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetIsReady::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetSongDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetSongDifficulty final
{
public:
	EPilgrimSongDifficulty                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetSongDifficulty) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_GetSongDifficulty");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetSongDifficulty) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_GetSongDifficulty");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetSongDifficulty, ReturnValue) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetSongDifficulty::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCorePlayerStateComponent.GetTrackTypeForGameplay
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay final
{
public:
	EPilgrimTrackType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay) == 0x000001, "Wrong alignment on PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay");
static_assert(sizeof(PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay) == 0x000001, "Wrong size on PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay");
static_assert(offsetof(PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay, ReturnValue) == 0x000000, "Member 'PilgrimCorePlayerStateComponent_GetTrackTypeForGameplay::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.GetPlatformTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct PilgrimCore_BPFL_GetPlatformTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCore_BPFL_GetPlatformTimeSeconds) == 0x000004, "Wrong alignment on PilgrimCore_BPFL_GetPlatformTimeSeconds");
static_assert(sizeof(PilgrimCore_BPFL_GetPlatformTimeSeconds) == 0x000004, "Wrong size on PilgrimCore_BPFL_GetPlatformTimeSeconds");
static_assert(offsetof(PilgrimCore_BPFL_GetPlatformTimeSeconds, ReturnValue) == 0x000000, "Member 'PilgrimCore_BPFL_GetPlatformTimeSeconds::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.InstrumentTypesAreEqual
// 0x0003 (0x0003 - 0x0000)
struct PilgrimCore_BPFL_InstrumentTypesAreEqual final
{
public:
	ESparksInstrumentType                         SparksType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             PilgrimType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCore_BPFL_InstrumentTypesAreEqual) == 0x000001, "Wrong alignment on PilgrimCore_BPFL_InstrumentTypesAreEqual");
static_assert(sizeof(PilgrimCore_BPFL_InstrumentTypesAreEqual) == 0x000003, "Wrong size on PilgrimCore_BPFL_InstrumentTypesAreEqual");
static_assert(offsetof(PilgrimCore_BPFL_InstrumentTypesAreEqual, SparksType) == 0x000000, "Member 'PilgrimCore_BPFL_InstrumentTypesAreEqual::SparksType' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_InstrumentTypesAreEqual, PilgrimType) == 0x000001, "Member 'PilgrimCore_BPFL_InstrumentTypesAreEqual::PilgrimType' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_InstrumentTypesAreEqual, ReturnValue) == 0x000002, "Member 'PilgrimCore_BPFL_InstrumentTypesAreEqual::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.MidiTrackNameToPilgrimTrackType
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType final
{
public:
	class FString                                 MidiTrackName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType) == 0x000008, "Wrong alignment on PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType");
static_assert(sizeof(PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType) == 0x000018, "Wrong size on PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType");
static_assert(offsetof(PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType, MidiTrackName) == 0x000000, "Member 'PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType::MidiTrackName' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType, ReturnValue) == 0x000010, "Member 'PilgrimCore_BPFL_MidiTrackNameToPilgrimTrackType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.PilgrimTrackTypeToMidiTrackName
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName final
{
public:
	EPilgrimTrackType                             PilgrimType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName) == 0x000008, "Wrong alignment on PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName");
static_assert(sizeof(PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName) == 0x000018, "Wrong size on PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName");
static_assert(offsetof(PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName, PilgrimType) == 0x000000, "Member 'PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName::PilgrimType' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName, ReturnValue) == 0x000008, "Member 'PilgrimCore_BPFL_PilgrimTrackTypeToMidiTrackName::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.PilgrimTrackTypeToSparksInstrument
// 0x0002 (0x0002 - 0x0000)
struct PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument final
{
public:
	EPilgrimTrackType                             PilgrimType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument) == 0x000001, "Wrong alignment on PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument");
static_assert(sizeof(PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument) == 0x000002, "Wrong size on PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument");
static_assert(offsetof(PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument, PilgrimType) == 0x000000, "Member 'PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument::PilgrimType' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument, ReturnValue) == 0x000001, "Member 'PilgrimCore_BPFL_PilgrimTrackTypeToSparksInstrument::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.ShouldUseTouchUIForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer) == 0x000008, "Wrong alignment on PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer");
static_assert(sizeof(PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer) == 0x000010, "Wrong size on PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer");
static_assert(offsetof(PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer, WorldContextObject) == 0x000000, "Member 'PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer, ReturnValue) == 0x000008, "Member 'PilgrimCore_BPFL_ShouldUseTouchUIForLocalPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCore_BPFL.SparksInstrumentToPilgrimTrackType
// 0x0002 (0x0002 - 0x0000)
struct PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType final
{
public:
	ESparksInstrumentType                         SparksType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType) == 0x000001, "Wrong alignment on PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType");
static_assert(sizeof(PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType) == 0x000002, "Wrong size on PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType");
static_assert(offsetof(PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType, SparksType) == 0x000000, "Member 'PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType::SparksType' has a wrong offset!");
static_assert(offsetof(PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType, ReturnValue) == 0x000001, "Member 'PilgrimCore_BPFL_SparksInstrumentToPilgrimTrackType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.OnRep_MaxSongsPerPlayer
// 0x0004 (0x0004 - 0x0000)
struct PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer final
{
public:
	int32                                         PrevMax;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer) == 0x000004, "Wrong alignment on PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer");
static_assert(sizeof(PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer) == 0x000004, "Wrong size on PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer");
static_assert(offsetof(PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer, PrevMax) == 0x000000, "Member 'PilgrimCustomSetlist_OnRep_MaxSongsPerPlayer::PrevMax' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerAddSongForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCustomSetlist_ServerAddSongForPlayer final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_ServerAddSongForPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_ServerAddSongForPlayer");
static_assert(sizeof(PilgrimCustomSetlist_ServerAddSongForPlayer) == 0x000010, "Wrong size on PilgrimCustomSetlist_ServerAddSongForPlayer");
static_assert(offsetof(PilgrimCustomSetlist_ServerAddSongForPlayer, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_ServerAddSongForPlayer::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_ServerAddSongForPlayer, Player) == 0x000008, "Member 'PilgrimCustomSetlist_ServerAddSongForPlayer::Player' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerRemoveAllSongsForPlayer
// 0x0008 (0x0008 - 0x0000)
struct PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer");
static_assert(sizeof(PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer) == 0x000008, "Wrong size on PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer, Player) == 0x000000, "Member 'PilgrimCustomSetlist_ServerRemoveAllSongsForPlayer::Player' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerRemoveSongAtIndex
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCustomSetlist_ServerRemoveSongAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_ServerRemoveSongAtIndex) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_ServerRemoveSongAtIndex");
static_assert(sizeof(PilgrimCustomSetlist_ServerRemoveSongAtIndex) == 0x000010, "Wrong size on PilgrimCustomSetlist_ServerRemoveSongAtIndex");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongAtIndex, Index_0) == 0x000000, "Member 'PilgrimCustomSetlist_ServerRemoveSongAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongAtIndex, SongShortName) == 0x000004, "Member 'PilgrimCustomSetlist_ServerRemoveSongAtIndex::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongAtIndex, Player) == 0x000008, "Member 'PilgrimCustomSetlist_ServerRemoveSongAtIndex::Player' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerRemoveSongForPlayer
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_ServerRemoveSongForPlayer final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAll;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCustomSetlist_ServerRemoveSongForPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_ServerRemoveSongForPlayer");
static_assert(sizeof(PilgrimCustomSetlist_ServerRemoveSongForPlayer) == 0x000018, "Wrong size on PilgrimCustomSetlist_ServerRemoveSongForPlayer");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongForPlayer, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_ServerRemoveSongForPlayer::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongForPlayer, Player) == 0x000008, "Member 'PilgrimCustomSetlist_ServerRemoveSongForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_ServerRemoveSongForPlayer, bRemoveAll) == 0x000010, "Member 'PilgrimCustomSetlist_ServerRemoveSongForPlayer::bRemoveAll' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerSetIsSetlistLocked
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCustomSetlist_ServerSetIsSetlistLocked final
{
public:
	bool                                          bInIsLocked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_ServerSetIsSetlistLocked) == 0x000001, "Wrong alignment on PilgrimCustomSetlist_ServerSetIsSetlistLocked");
static_assert(sizeof(PilgrimCustomSetlist_ServerSetIsSetlistLocked) == 0x000001, "Wrong size on PilgrimCustomSetlist_ServerSetIsSetlistLocked");
static_assert(offsetof(PilgrimCustomSetlist_ServerSetIsSetlistLocked, bInIsLocked) == 0x000000, "Member 'PilgrimCustomSetlist_ServerSetIsSetlistLocked::bInIsLocked' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.ServerSetMaxSongsPerPlayer
// 0x0004 (0x0004 - 0x0000)
struct PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer final
{
public:
	int32                                         NewMax;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer) == 0x000004, "Wrong alignment on PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer");
static_assert(sizeof(PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer) == 0x000004, "Wrong size on PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer");
static_assert(offsetof(PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer, NewMax) == 0x000000, "Member 'PilgrimCustomSetlist_ServerSetMaxSongsPerPlayer::NewMax' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.CanAddSongForPlayer
// 0x0028 (0x0028 - 0x0000)
struct PilgrimCustomSetlist_CanAddSongForPlayer final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimCantAddSongReason                     OutReason;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           OutAddedByPlayer;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCustomSetlist_CanAddSongForPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_CanAddSongForPlayer");
static_assert(sizeof(PilgrimCustomSetlist_CanAddSongForPlayer) == 0x000028, "Wrong size on PilgrimCustomSetlist_CanAddSongForPlayer");
static_assert(offsetof(PilgrimCustomSetlist_CanAddSongForPlayer, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_CanAddSongForPlayer::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_CanAddSongForPlayer, Player) == 0x000008, "Member 'PilgrimCustomSetlist_CanAddSongForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_CanAddSongForPlayer, OutReason) == 0x000010, "Member 'PilgrimCustomSetlist_CanAddSongForPlayer::OutReason' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_CanAddSongForPlayer, OutAddedByPlayer) == 0x000018, "Member 'PilgrimCustomSetlist_CanAddSongForPlayer::OutAddedByPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_CanAddSongForPlayer, ReturnValue) == 0x000020, "Member 'PilgrimCustomSetlist_CanAddSongForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.FindEntriesForPlayer
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_FindEntriesForPlayer final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutMatchingEntryIndicies;                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_FindEntriesForPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_FindEntriesForPlayer");
static_assert(sizeof(PilgrimCustomSetlist_FindEntriesForPlayer) == 0x000018, "Wrong size on PilgrimCustomSetlist_FindEntriesForPlayer");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForPlayer, Player) == 0x000000, "Member 'PilgrimCustomSetlist_FindEntriesForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForPlayer, OutMatchingEntryIndicies) == 0x000008, "Member 'PilgrimCustomSetlist_FindEntriesForPlayer::OutMatchingEntryIndicies' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.FindEntriesForSong
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_FindEntriesForSong final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutMatchingEntryIndicies;                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_FindEntriesForSong) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_FindEntriesForSong");
static_assert(sizeof(PilgrimCustomSetlist_FindEntriesForSong) == 0x000018, "Wrong size on PilgrimCustomSetlist_FindEntriesForSong");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForSong, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_FindEntriesForSong::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForSong, OutMatchingEntryIndicies) == 0x000008, "Member 'PilgrimCustomSetlist_FindEntriesForSong::OutMatchingEntryIndicies' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.FindEntriesForSongAndPlayer
// 0x0020 (0x0020 - 0x0000)
struct PilgrimCustomSetlist_FindEntriesForSongAndPlayer final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutMatchingEntryIndicies;                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_FindEntriesForSongAndPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_FindEntriesForSongAndPlayer");
static_assert(sizeof(PilgrimCustomSetlist_FindEntriesForSongAndPlayer) == 0x000020, "Wrong size on PilgrimCustomSetlist_FindEntriesForSongAndPlayer");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForSongAndPlayer, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_FindEntriesForSongAndPlayer::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForSongAndPlayer, Player) == 0x000008, "Member 'PilgrimCustomSetlist_FindEntriesForSongAndPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_FindEntriesForSongAndPlayer, OutMatchingEntryIndicies) == 0x000010, "Member 'PilgrimCustomSetlist_FindEntriesForSongAndPlayer::OutMatchingEntryIndicies' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.GetIsSetlistLocked
// 0x0001 (0x0001 - 0x0000)
struct PilgrimCustomSetlist_GetIsSetlistLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_GetIsSetlistLocked) == 0x000001, "Wrong alignment on PilgrimCustomSetlist_GetIsSetlistLocked");
static_assert(sizeof(PilgrimCustomSetlist_GetIsSetlistLocked) == 0x000001, "Wrong size on PilgrimCustomSetlist_GetIsSetlistLocked");
static_assert(offsetof(PilgrimCustomSetlist_GetIsSetlistLocked, ReturnValue) == 0x000000, "Member 'PilgrimCustomSetlist_GetIsSetlistLocked::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.GetMaxSongsPerPlayer
// 0x0004 (0x0004 - 0x0000)
struct PilgrimCustomSetlist_GetMaxSongsPerPlayer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_GetMaxSongsPerPlayer) == 0x000004, "Wrong alignment on PilgrimCustomSetlist_GetMaxSongsPerPlayer");
static_assert(sizeof(PilgrimCustomSetlist_GetMaxSongsPerPlayer) == 0x000004, "Wrong size on PilgrimCustomSetlist_GetMaxSongsPerPlayer");
static_assert(offsetof(PilgrimCustomSetlist_GetMaxSongsPerPlayer, ReturnValue) == 0x000000, "Member 'PilgrimCustomSetlist_GetMaxSongsPerPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.GetSetlistEntryAtIndex
// 0x0010 (0x0010 - 0x0000)
struct PilgrimCustomSetlist_GetSetlistEntryAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutSongShortName;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           OutAddedByPlayer;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_GetSetlistEntryAtIndex) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_GetSetlistEntryAtIndex");
static_assert(sizeof(PilgrimCustomSetlist_GetSetlistEntryAtIndex) == 0x000010, "Wrong size on PilgrimCustomSetlist_GetSetlistEntryAtIndex");
static_assert(offsetof(PilgrimCustomSetlist_GetSetlistEntryAtIndex, Index_0) == 0x000000, "Member 'PilgrimCustomSetlist_GetSetlistEntryAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_GetSetlistEntryAtIndex, OutSongShortName) == 0x000004, "Member 'PilgrimCustomSetlist_GetSetlistEntryAtIndex::OutSongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_GetSetlistEntryAtIndex, OutAddedByPlayer) == 0x000008, "Member 'PilgrimCustomSetlist_GetSetlistEntryAtIndex::OutAddedByPlayer' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.GetSongsAddedByPlayer
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_GetSongsAddedByPlayer final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimCustomSetlist_GetSongsAddedByPlayer) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_GetSongsAddedByPlayer");
static_assert(sizeof(PilgrimCustomSetlist_GetSongsAddedByPlayer) == 0x000018, "Wrong size on PilgrimCustomSetlist_GetSongsAddedByPlayer");
static_assert(offsetof(PilgrimCustomSetlist_GetSongsAddedByPlayer, Player) == 0x000000, "Member 'PilgrimCustomSetlist_GetSongsAddedByPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_GetSongsAddedByPlayer, ReturnValue) == 0x000008, "Member 'PilgrimCustomSetlist_GetSongsAddedByPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.HasAnyoneAddedSong
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_HasAnyoneAddedSong final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           OutAddedByPlayer;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCustomSetlist_HasAnyoneAddedSong) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_HasAnyoneAddedSong");
static_assert(sizeof(PilgrimCustomSetlist_HasAnyoneAddedSong) == 0x000018, "Wrong size on PilgrimCustomSetlist_HasAnyoneAddedSong");
static_assert(offsetof(PilgrimCustomSetlist_HasAnyoneAddedSong, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_HasAnyoneAddedSong::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_HasAnyoneAddedSong, OutAddedByPlayer) == 0x000008, "Member 'PilgrimCustomSetlist_HasAnyoneAddedSong::OutAddedByPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_HasAnyoneAddedSong, ReturnValue) == 0x000010, "Member 'PilgrimCustomSetlist_HasAnyoneAddedSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimCustomSetlist.HasPlayerAddedSong
// 0x0018 (0x0018 - 0x0000)
struct PilgrimCustomSetlist_HasPlayerAddedSong final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimCustomSetlist_HasPlayerAddedSong) == 0x000008, "Wrong alignment on PilgrimCustomSetlist_HasPlayerAddedSong");
static_assert(sizeof(PilgrimCustomSetlist_HasPlayerAddedSong) == 0x000018, "Wrong size on PilgrimCustomSetlist_HasPlayerAddedSong");
static_assert(offsetof(PilgrimCustomSetlist_HasPlayerAddedSong, SongShortName) == 0x000000, "Member 'PilgrimCustomSetlist_HasPlayerAddedSong::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_HasPlayerAddedSong, Player) == 0x000008, "Member 'PilgrimCustomSetlist_HasPlayerAddedSong::Player' has a wrong offset!");
static_assert(offsetof(PilgrimCustomSetlist_HasPlayerAddedSong, ReturnValue) == 0x000010, "Member 'PilgrimCustomSetlist_HasPlayerAddedSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimDelayUntilTimeBeforeMidiTick.PilgrimDelayUntilTimeBeforeMidiTick
// 0x0028 (0x0028 - 0x0000)
struct PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick final
{
public:
	class UObject*                                PassthroughObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimGame*                           PilgrimGameContext;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MidiTick;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsBeforeTick;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimDelayUntilTimeBeforeMidiTick*   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick) == 0x000008, "Wrong alignment on PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick");
static_assert(sizeof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick) == 0x000028, "Wrong size on PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, PassthroughObject) == 0x000000, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::PassthroughObject' has a wrong offset!");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, PilgrimGameContext) == 0x000008, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::PilgrimGameContext' has a wrong offset!");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, MidiTick) == 0x000010, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::MidiTick' has a wrong offset!");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, SecondsBeforeTick) == 0x000014, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::SecondsBeforeTick' has a wrong offset!");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, Timebase) == 0x000018, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::Timebase' has a wrong offset!");
static_assert(offsetof(PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick, ReturnValue) == 0x000020, "Member 'PilgrimDelayUntilTimeBeforeMidiTick_PilgrimDelayUntilTimeBeforeMidiTick::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimEventRouterLibrary.GetGameplayEventRouter
// 0x0010 (0x0010 - 0x0000)
struct PilgrimEventRouterLibrary_GetGameplayEventRouter final
{
public:
	class AActor*                                 ContextActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEventRouterComponent*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimEventRouterLibrary_GetGameplayEventRouter) == 0x000008, "Wrong alignment on PilgrimEventRouterLibrary_GetGameplayEventRouter");
static_assert(sizeof(PilgrimEventRouterLibrary_GetGameplayEventRouter) == 0x000010, "Wrong size on PilgrimEventRouterLibrary_GetGameplayEventRouter");
static_assert(offsetof(PilgrimEventRouterLibrary_GetGameplayEventRouter, ContextActor) == 0x000000, "Member 'PilgrimEventRouterLibrary_GetGameplayEventRouter::ContextActor' has a wrong offset!");
static_assert(offsetof(PilgrimEventRouterLibrary_GetGameplayEventRouter, ReturnValue) == 0x000008, "Member 'PilgrimEventRouterLibrary_GetGameplayEventRouter::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.AddTrack
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_AddTrack final
{
public:
	class APilgrimTrack*                          Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_AddTrack) == 0x000008, "Wrong alignment on PilgrimGame_AddTrack");
static_assert(sizeof(PilgrimGame_AddTrack) == 0x000008, "Wrong size on PilgrimGame_AddTrack");
static_assert(offsetof(PilgrimGame_AddTrack, Track) == 0x000000, "Member 'PilgrimGame_AddTrack::Track' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.ApplySettingsFromConfig
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_ApplySettingsFromConfig final
{
public:
	const class UPilgrimGameConfig*               GameConfig;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_ApplySettingsFromConfig) == 0x000008, "Wrong alignment on PilgrimGame_ApplySettingsFromConfig");
static_assert(sizeof(PilgrimGame_ApplySettingsFromConfig) == 0x000008, "Wrong size on PilgrimGame_ApplySettingsFromConfig");
static_assert(offsetof(PilgrimGame_ApplySettingsFromConfig, GameConfig) == 0x000000, "Member 'PilgrimGame_ApplySettingsFromConfig::GameConfig' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.CheatSetJumpMarkers
// 0x0020 (0x0020 - 0x0000)
struct PilgrimGame_CheatSetJumpMarkers final
{
public:
	class FString                                 FromTime;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToTime;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_CheatSetJumpMarkers) == 0x000008, "Wrong alignment on PilgrimGame_CheatSetJumpMarkers");
static_assert(sizeof(PilgrimGame_CheatSetJumpMarkers) == 0x000020, "Wrong size on PilgrimGame_CheatSetJumpMarkers");
static_assert(offsetof(PilgrimGame_CheatSetJumpMarkers, FromTime) == 0x000000, "Member 'PilgrimGame_CheatSetJumpMarkers::FromTime' has a wrong offset!");
static_assert(offsetof(PilgrimGame_CheatSetJumpMarkers, ToTime) == 0x000010, "Member 'PilgrimGame_CheatSetJumpMarkers::ToTime' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.CheatSetPerformanceData
// 0x000C (0x000C - 0x0000)
struct PilgrimGame_CheatSetPerformanceData final
{
public:
	struct FPilgrimCheatPerformanceArgument       PerformanceArgument;                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_CheatSetPerformanceData) == 0x000004, "Wrong alignment on PilgrimGame_CheatSetPerformanceData");
static_assert(sizeof(PilgrimGame_CheatSetPerformanceData) == 0x00000C, "Wrong size on PilgrimGame_CheatSetPerformanceData");
static_assert(offsetof(PilgrimGame_CheatSetPerformanceData, PerformanceArgument) == 0x000000, "Member 'PilgrimGame_CheatSetPerformanceData::PerformanceArgument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.EndGame
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_EndGame final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutDurationSeconds;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_EndGame) == 0x000004, "Wrong alignment on PilgrimGame_EndGame");
static_assert(sizeof(PilgrimGame_EndGame) == 0x000008, "Wrong size on PilgrimGame_EndGame");
static_assert(offsetof(PilgrimGame_EndGame, bFadeOut) == 0x000000, "Member 'PilgrimGame_EndGame::bFadeOut' has a wrong offset!");
static_assert(offsetof(PilgrimGame_EndGame, FadeOutDurationSeconds) == 0x000004, "Member 'PilgrimGame_EndGame::FadeOutDurationSeconds' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetGameConfigSettings
// 0x02F0 (0x02F0 - 0x0000)
struct PilgrimGame_GetGameConfigSettings final
{
public:
	struct FPilgrimGameConfigSettings             ReturnValue;                                       // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetGameConfigSettings) == 0x000008, "Wrong alignment on PilgrimGame_GetGameConfigSettings");
static_assert(sizeof(PilgrimGame_GetGameConfigSettings) == 0x0002F0, "Wrong size on PilgrimGame_GetGameConfigSettings");
static_assert(offsetof(PilgrimGame_GetGameConfigSettings, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetGameConfigSettings::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetNumLanes
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_GetNumLanes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetNumLanes) == 0x000004, "Wrong alignment on PilgrimGame_GetNumLanes");
static_assert(sizeof(PilgrimGame_GetNumLanes) == 0x000004, "Wrong size on PilgrimGame_GetNumLanes");
static_assert(offsetof(PilgrimGame_GetNumLanes, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetNumLanes::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_OnInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_OnInputMethodChanged) == 0x000001, "Wrong alignment on PilgrimGame_OnInputMethodChanged");
static_assert(sizeof(PilgrimGame_OnInputMethodChanged) == 0x000001, "Wrong size on PilgrimGame_OnInputMethodChanged");
static_assert(offsetof(PilgrimGame_OnInputMethodChanged, CurrentInputType) == 0x000000, "Member 'PilgrimGame_OnInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.PlaySong
// 0x0020 (0x0020 - 0x0000)
struct PilgrimGame_PlaySong final
{
public:
	class UAudioComponent*                        InMetasoundPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        InMetasoundMixer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   InMusicClock;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   InSong;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_PlaySong) == 0x000008, "Wrong alignment on PilgrimGame_PlaySong");
static_assert(sizeof(PilgrimGame_PlaySong) == 0x000020, "Wrong size on PilgrimGame_PlaySong");
static_assert(offsetof(PilgrimGame_PlaySong, InMetasoundPlayer) == 0x000000, "Member 'PilgrimGame_PlaySong::InMetasoundPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySong, InMetasoundMixer) == 0x000008, "Member 'PilgrimGame_PlaySong::InMetasoundMixer' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySong, InMusicClock) == 0x000010, "Member 'PilgrimGame_PlaySong::InMusicClock' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySong, InSong) == 0x000018, "Member 'PilgrimGame_PlaySong::InSong' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.PlaySongStreamed
// 0x0020 (0x0020 - 0x0000)
struct PilgrimGame_PlaySongStreamed final
{
public:
	class UAudioComponent*                        InMetasoundPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        InMetasoundMixer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   InMusicClock;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimMediaStreamer*                  InStreamer;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_PlaySongStreamed) == 0x000008, "Wrong alignment on PilgrimGame_PlaySongStreamed");
static_assert(sizeof(PilgrimGame_PlaySongStreamed) == 0x000020, "Wrong size on PilgrimGame_PlaySongStreamed");
static_assert(offsetof(PilgrimGame_PlaySongStreamed, InMetasoundPlayer) == 0x000000, "Member 'PilgrimGame_PlaySongStreamed::InMetasoundPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySongStreamed, InMetasoundMixer) == 0x000008, "Member 'PilgrimGame_PlaySongStreamed::InMetasoundMixer' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySongStreamed, InMusicClock) == 0x000010, "Member 'PilgrimGame_PlaySongStreamed::InMusicClock' has a wrong offset!");
static_assert(offsetof(PilgrimGame_PlaySongStreamed, InStreamer) == 0x000018, "Member 'PilgrimGame_PlaySongStreamed::InStreamer' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.ProcessSwing
// 0x0002 (0x0002 - 0x0000)
struct PilgrimGame_ProcessSwing final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPress;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_ProcessSwing) == 0x000001, "Wrong alignment on PilgrimGame_ProcessSwing");
static_assert(sizeof(PilgrimGame_ProcessSwing) == 0x000002, "Wrong size on PilgrimGame_ProcessSwing");
static_assert(offsetof(PilgrimGame_ProcessSwing, Lane) == 0x000000, "Member 'PilgrimGame_ProcessSwing::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimGame_ProcessSwing, bIsPress) == 0x000001, "Member 'PilgrimGame_ProcessSwing::bIsPress' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.SeekToTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_SeekToTime final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_SeekToTime) == 0x000004, "Wrong alignment on PilgrimGame_SeekToTime");
static_assert(sizeof(PilgrimGame_SeekToTime) == 0x000004, "Wrong size on PilgrimGame_SeekToTime");
static_assert(offsetof(PilgrimGame_SeekToTime, Milliseconds) == 0x000000, "Member 'PilgrimGame_SeekToTime::Milliseconds' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.SetDifficultyAndTrackType
// 0x0002 (0x0002 - 0x0000)
struct PilgrimGame_SetDifficultyAndTrackType final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_SetDifficultyAndTrackType) == 0x000001, "Wrong alignment on PilgrimGame_SetDifficultyAndTrackType");
static_assert(sizeof(PilgrimGame_SetDifficultyAndTrackType) == 0x000002, "Wrong size on PilgrimGame_SetDifficultyAndTrackType");
static_assert(offsetof(PilgrimGame_SetDifficultyAndTrackType, Difficulty) == 0x000000, "Member 'PilgrimGame_SetDifficultyAndTrackType::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGame_SetDifficultyAndTrackType, TrackType) == 0x000001, "Member 'PilgrimGame_SetDifficultyAndTrackType::TrackType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.SetJumpMarkers
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_SetJumpMarkers final
{
public:
	int32                                         FromMillisecnods;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToMilliseconds;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_SetJumpMarkers) == 0x000004, "Wrong alignment on PilgrimGame_SetJumpMarkers");
static_assert(sizeof(PilgrimGame_SetJumpMarkers) == 0x000008, "Wrong size on PilgrimGame_SetJumpMarkers");
static_assert(offsetof(PilgrimGame_SetJumpMarkers, FromMillisecnods) == 0x000000, "Member 'PilgrimGame_SetJumpMarkers::FromMillisecnods' has a wrong offset!");
static_assert(offsetof(PilgrimGame_SetJumpMarkers, ToMilliseconds) == 0x000004, "Member 'PilgrimGame_SetJumpMarkers::ToMilliseconds' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.SetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_SetLocalPlayer final
{
public:
	class APlayerController*                      OwnerPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_SetLocalPlayer) == 0x000008, "Wrong alignment on PilgrimGame_SetLocalPlayer");
static_assert(sizeof(PilgrimGame_SetLocalPlayer) == 0x000008, "Wrong size on PilgrimGame_SetLocalPlayer");
static_assert(offsetof(PilgrimGame_SetLocalPlayer, OwnerPC) == 0x000000, "Member 'PilgrimGame_SetLocalPlayer::OwnerPC' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetCurrentMeasureBeatTick
// 0x000C (0x000C - 0x0000)
struct PilgrimGame_GetCurrentMeasureBeatTick final
{
public:
	struct FPilgrimSongMeasurePosition            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetCurrentMeasureBeatTick) == 0x000004, "Wrong alignment on PilgrimGame_GetCurrentMeasureBeatTick");
static_assert(sizeof(PilgrimGame_GetCurrentMeasureBeatTick) == 0x00000C, "Wrong size on PilgrimGame_GetCurrentMeasureBeatTick");
static_assert(offsetof(PilgrimGame_GetCurrentMeasureBeatTick, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetCurrentMeasureBeatTick::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetCurrentODValue
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_GetCurrentODValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetCurrentODValue) == 0x000004, "Wrong alignment on PilgrimGame_GetCurrentODValue");
static_assert(sizeof(PilgrimGame_GetCurrentODValue) == 0x000004, "Wrong size on PilgrimGame_GetCurrentODValue");
static_assert(offsetof(PilgrimGame_GetCurrentODValue, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetCurrentODValue::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetCurrentSongMs
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetCurrentSongMs final
{
public:
	ECalibratedMusicTimebase                      InTimebase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetCurrentSongMs) == 0x000004, "Wrong alignment on PilgrimGame_GetCurrentSongMs");
static_assert(sizeof(PilgrimGame_GetCurrentSongMs) == 0x000008, "Wrong size on PilgrimGame_GetCurrentSongMs");
static_assert(offsetof(PilgrimGame_GetCurrentSongMs, InTimebase) == 0x000000, "Member 'PilgrimGame_GetCurrentSongMs::InTimebase' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetCurrentSongMs, ReturnValue) == 0x000004, "Member 'PilgrimGame_GetCurrentSongMs::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetCurrentSongTick
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetCurrentSongTick final
{
public:
	ECalibratedMusicTimebase                      InTimebase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetCurrentSongTick) == 0x000004, "Wrong alignment on PilgrimGame_GetCurrentSongTick");
static_assert(sizeof(PilgrimGame_GetCurrentSongTick) == 0x000008, "Wrong size on PilgrimGame_GetCurrentSongTick");
static_assert(offsetof(PilgrimGame_GetCurrentSongTick, InTimebase) == 0x000000, "Member 'PilgrimGame_GetCurrentSongTick::InTimebase' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetCurrentSongTick, ReturnValue) == 0x000004, "Member 'PilgrimGame_GetCurrentSongTick::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetGemBreakForTrackDifficulty
// 0x0058 (0x0058 - 0x0000)
struct PilgrimGame_GetGemBreakForTrackDifficulty final
{
public:
	EPilgrimTrackType                             Track;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGemBreak                       FoundBreak;                                        // 0x0004(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BarsLeftInBreak;                                   // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGemBreak                       NextBreak;                                         // 0x002C(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BarsTillNextBreak;                                 // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimGame_GetGemBreakForTrackDifficulty) == 0x000004, "Wrong alignment on PilgrimGame_GetGemBreakForTrackDifficulty");
static_assert(sizeof(PilgrimGame_GetGemBreakForTrackDifficulty) == 0x000058, "Wrong size on PilgrimGame_GetGemBreakForTrackDifficulty");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, Track) == 0x000000, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::Track' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, Difficulty) == 0x000001, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, FoundBreak) == 0x000004, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::FoundBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, BarsLeftInBreak) == 0x000028, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::BarsLeftInBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, NextBreak) == 0x00002C, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::NextBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, BarsTillNextBreak) == 0x000050, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::BarsTillNextBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetGemBreakForTrackDifficulty, ReturnValue) == 0x000054, "Member 'PilgrimGame_GetGemBreakForTrackDifficulty::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetHitOffsetAverage
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_GetHitOffsetAverage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetHitOffsetAverage) == 0x000004, "Wrong alignment on PilgrimGame_GetHitOffsetAverage");
static_assert(sizeof(PilgrimGame_GetHitOffsetAverage) == 0x000004, "Wrong size on PilgrimGame_GetHitOffsetAverage");
static_assert(offsetof(PilgrimGame_GetHitOffsetAverage, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetHitOffsetAverage::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetInputNameForLane
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetInputNameForLane final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetInputNameForLane) == 0x000004, "Wrong alignment on PilgrimGame_GetInputNameForLane");
static_assert(sizeof(PilgrimGame_GetInputNameForLane) == 0x000008, "Wrong size on PilgrimGame_GetInputNameForLane");
static_assert(offsetof(PilgrimGame_GetInputNameForLane, Lane) == 0x000000, "Member 'PilgrimGame_GetInputNameForLane::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetInputNameForLane, ReturnValue) == 0x000004, "Member 'PilgrimGame_GetInputNameForLane::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetKeyBoundToLane
// 0x0020 (0x0020 - 0x0000)
struct PilgrimGame_GetKeyBoundToLane final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetKeyBoundToLane) == 0x000008, "Wrong alignment on PilgrimGame_GetKeyBoundToLane");
static_assert(sizeof(PilgrimGame_GetKeyBoundToLane) == 0x000020, "Wrong size on PilgrimGame_GetKeyBoundToLane");
static_assert(offsetof(PilgrimGame_GetKeyBoundToLane, Lane) == 0x000000, "Member 'PilgrimGame_GetKeyBoundToLane::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimGame_GetKeyBoundToLane, ReturnValue) == 0x000008, "Member 'PilgrimGame_GetKeyBoundToLane::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetLocalPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetLocalPlayerController) == 0x000008, "Wrong alignment on PilgrimGame_GetLocalPlayerController");
static_assert(sizeof(PilgrimGame_GetLocalPlayerController) == 0x000008, "Wrong size on PilgrimGame_GetLocalPlayerController");
static_assert(offsetof(PilgrimGame_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetMainTrack
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetMainTrack final
{
public:
	class APilgrimTrack*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetMainTrack) == 0x000008, "Wrong alignment on PilgrimGame_GetMainTrack");
static_assert(sizeof(PilgrimGame_GetMainTrack) == 0x000008, "Wrong size on PilgrimGame_GetMainTrack");
static_assert(offsetof(PilgrimGame_GetMainTrack, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetMainTrack::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetMusicClock
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGame_GetMusicClock final
{
public:
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetMusicClock) == 0x000008, "Wrong alignment on PilgrimGame_GetMusicClock");
static_assert(sizeof(PilgrimGame_GetMusicClock) == 0x000008, "Wrong size on PilgrimGame_GetMusicClock");
static_assert(offsetof(PilgrimGame_GetMusicClock, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetMusicClock::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetSelectedDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_GetSelectedDifficulty final
{
public:
	EPilgrimSongDifficulty                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetSelectedDifficulty) == 0x000001, "Wrong alignment on PilgrimGame_GetSelectedDifficulty");
static_assert(sizeof(PilgrimGame_GetSelectedDifficulty) == 0x000001, "Wrong size on PilgrimGame_GetSelectedDifficulty");
static_assert(offsetof(PilgrimGame_GetSelectedDifficulty, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetSelectedDifficulty::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetSelectedTrackType
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_GetSelectedTrackType final
{
public:
	EPilgrimTrackType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetSelectedTrackType) == 0x000001, "Wrong alignment on PilgrimGame_GetSelectedTrackType");
static_assert(sizeof(PilgrimGame_GetSelectedTrackType) == 0x000001, "Wrong size on PilgrimGame_GetSelectedTrackType");
static_assert(offsetof(PilgrimGame_GetSelectedTrackType, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetSelectedTrackType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetSongLengthMs
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_GetSongLengthMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetSongLengthMs) == 0x000004, "Wrong alignment on PilgrimGame_GetSongLengthMs");
static_assert(sizeof(PilgrimGame_GetSongLengthMs) == 0x000004, "Wrong size on PilgrimGame_GetSongLengthMs");
static_assert(offsetof(PilgrimGame_GetSongLengthMs, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetSongLengthMs::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.GetTotalSecondsSinceGameEnd
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGame_GetTotalSecondsSinceGameEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_GetTotalSecondsSinceGameEnd) == 0x000004, "Wrong alignment on PilgrimGame_GetTotalSecondsSinceGameEnd");
static_assert(sizeof(PilgrimGame_GetTotalSecondsSinceGameEnd) == 0x000004, "Wrong size on PilgrimGame_GetTotalSecondsSinceGameEnd");
static_assert(offsetof(PilgrimGame_GetTotalSecondsSinceGameEnd, ReturnValue) == 0x000000, "Member 'PilgrimGame_GetTotalSecondsSinceGameEnd::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.IsAutoplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_IsAutoplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_IsAutoplayEnabled) == 0x000001, "Wrong alignment on PilgrimGame_IsAutoplayEnabled");
static_assert(sizeof(PilgrimGame_IsAutoplayEnabled) == 0x000001, "Wrong size on PilgrimGame_IsAutoplayEnabled");
static_assert(offsetof(PilgrimGame_IsAutoplayEnabled, ReturnValue) == 0x000000, "Member 'PilgrimGame_IsAutoplayEnabled::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.IsDisableMissEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_IsDisableMissEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_IsDisableMissEnabled) == 0x000001, "Wrong alignment on PilgrimGame_IsDisableMissEnabled");
static_assert(sizeof(PilgrimGame_IsDisableMissEnabled) == 0x000001, "Wrong size on PilgrimGame_IsDisableMissEnabled");
static_assert(offsetof(PilgrimGame_IsDisableMissEnabled, ReturnValue) == 0x000000, "Member 'PilgrimGame_IsDisableMissEnabled::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.IsGameEnded
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_IsGameEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_IsGameEnded) == 0x000001, "Wrong alignment on PilgrimGame_IsGameEnded");
static_assert(sizeof(PilgrimGame_IsGameEnded) == 0x000001, "Wrong size on PilgrimGame_IsGameEnded");
static_assert(offsetof(PilgrimGame_IsGameEnded, ReturnValue) == 0x000000, "Member 'PilgrimGame_IsGameEnded::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGame.IsInputSpecificGemShapesEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGame_IsInputSpecificGemShapesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGame_IsInputSpecificGemShapesEnabled) == 0x000001, "Wrong alignment on PilgrimGame_IsInputSpecificGemShapesEnabled");
static_assert(sizeof(PilgrimGame_IsInputSpecificGemShapesEnabled) == 0x000001, "Wrong size on PilgrimGame_IsInputSpecificGemShapesEnabled");
static_assert(offsetof(PilgrimGame_IsInputSpecificGemShapesEnabled, ReturnValue) == 0x000000, "Member 'PilgrimGame_IsInputSpecificGemShapesEnabled::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGameUserSettings.SetSelectedInstrument
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGameUserSettings_SetSelectedInstrument final
{
public:
	EPilgrimTrackType                             NewInstrument;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGameUserSettings_SetSelectedInstrument) == 0x000001, "Wrong alignment on PilgrimGameUserSettings_SetSelectedInstrument");
static_assert(sizeof(PilgrimGameUserSettings_SetSelectedInstrument) == 0x000001, "Wrong size on PilgrimGameUserSettings_SetSelectedInstrument");
static_assert(offsetof(PilgrimGameUserSettings_SetSelectedInstrument, NewInstrument) == 0x000000, "Member 'PilgrimGameUserSettings_SetSelectedInstrument::NewInstrument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGameUserSettings.SetSongDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGameUserSettings_SetSongDifficulty final
{
public:
	EPilgrimSongDifficulty                        NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGameUserSettings_SetSongDifficulty) == 0x000001, "Wrong alignment on PilgrimGameUserSettings_SetSongDifficulty");
static_assert(sizeof(PilgrimGameUserSettings_SetSongDifficulty) == 0x000001, "Wrong size on PilgrimGameUserSettings_SetSongDifficulty");
static_assert(offsetof(PilgrimGameUserSettings_SetSongDifficulty, NewDifficulty) == 0x000000, "Member 'PilgrimGameUserSettings_SetSongDifficulty::NewDifficulty' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGameUserSettings.GetSelectedInstrument
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGameUserSettings_GetSelectedInstrument final
{
public:
	EPilgrimTrackType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGameUserSettings_GetSelectedInstrument) == 0x000001, "Wrong alignment on PilgrimGameUserSettings_GetSelectedInstrument");
static_assert(sizeof(PilgrimGameUserSettings_GetSelectedInstrument) == 0x000001, "Wrong size on PilgrimGameUserSettings_GetSelectedInstrument");
static_assert(offsetof(PilgrimGameUserSettings_GetSelectedInstrument, ReturnValue) == 0x000000, "Member 'PilgrimGameUserSettings_GetSelectedInstrument::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGameUserSettings.GetSongDifficulty
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGameUserSettings_GetSongDifficulty final
{
public:
	EPilgrimSongDifficulty                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGameUserSettings_GetSongDifficulty) == 0x000001, "Wrong alignment on PilgrimGameUserSettings_GetSongDifficulty");
static_assert(sizeof(PilgrimGameUserSettings_GetSongDifficulty) == 0x000001, "Wrong size on PilgrimGameUserSettings_GetSongDifficulty");
static_assert(offsetof(PilgrimGameUserSettings_GetSongDifficulty, ReturnValue) == 0x000000, "Member 'PilgrimGameUserSettings_GetSongDifficulty::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGem.AllowHitByInput
// 0x0003 (0x0003 - 0x0000)
struct PilgrimGem_AllowHitByInput final
{
public:
	bool                                          bIsPressInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackLane                             Lane;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGem_AllowHitByInput) == 0x000001, "Wrong alignment on PilgrimGem_AllowHitByInput");
static_assert(sizeof(PilgrimGem_AllowHitByInput) == 0x000003, "Wrong size on PilgrimGem_AllowHitByInput");
static_assert(offsetof(PilgrimGem_AllowHitByInput, bIsPressInput) == 0x000000, "Member 'PilgrimGem_AllowHitByInput::bIsPressInput' has a wrong offset!");
static_assert(offsetof(PilgrimGem_AllowHitByInput, Lane) == 0x000001, "Member 'PilgrimGem_AllowHitByInput::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimGem_AllowHitByInput, ReturnValue) == 0x000002, "Member 'PilgrimGem_AllowHitByInput::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGem.OnGemInputUpdated
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGem_OnGemInputUpdated final
{
public:
	struct FKey                                   BoundKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGem_OnGemInputUpdated) == 0x000008, "Wrong alignment on PilgrimGem_OnGemInputUpdated");
static_assert(sizeof(PilgrimGem_OnGemInputUpdated) == 0x000018, "Wrong size on PilgrimGem_OnGemInputUpdated");
static_assert(offsetof(PilgrimGem_OnGemInputUpdated, BoundKey) == 0x000000, "Member 'PilgrimGem_OnGemInputUpdated::BoundKey' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGem.OnLaneSet
// 0x0030 (0x0030 - 0x0000)
struct PilgrimGem_OnLaneSet final
{
public:
	struct FTrackItemInfo                         Gem;                                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGem_OnLaneSet) == 0x000004, "Wrong alignment on PilgrimGem_OnLaneSet");
static_assert(sizeof(PilgrimGem_OnLaneSet) == 0x000030, "Wrong size on PilgrimGem_OnLaneSet");
static_assert(offsetof(PilgrimGem_OnLaneSet, Gem) == 0x000000, "Member 'PilgrimGem_OnLaneSet::Gem' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGem.GetLane
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGem_GetLane final
{
public:
	EPilgrimTrackLane                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGem_GetLane) == 0x000001, "Wrong alignment on PilgrimGem_GetLane");
static_assert(sizeof(PilgrimGem_GetLane) == 0x000001, "Wrong size on PilgrimGem_GetLane");
static_assert(offsetof(PilgrimGem_GetLane, ReturnValue) == 0x000000, "Member 'PilgrimGem_GetLane::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGem.IsOverdriveGem
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGem_IsOverdriveGem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGem_IsOverdriveGem) == 0x000001, "Wrong alignment on PilgrimGem_IsOverdriveGem");
static_assert(sizeof(PilgrimGem_IsOverdriveGem) == 0x000001, "Wrong size on PilgrimGem_IsOverdriveGem");
static_assert(offsetof(PilgrimGem_IsOverdriveGem, ReturnValue) == 0x000000, "Member 'PilgrimGem_IsOverdriveGem::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetPilgrimGemAnalyzer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimGemAnalyzer_GetPilgrimGemAnalyzer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimGemAnalyzer*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetPilgrimGemAnalyzer) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetPilgrimGemAnalyzer");
static_assert(sizeof(PilgrimGemAnalyzer_GetPilgrimGemAnalyzer) == 0x000010, "Wrong size on PilgrimGemAnalyzer_GetPilgrimGemAnalyzer");
static_assert(offsetof(PilgrimGemAnalyzer_GetPilgrimGemAnalyzer, WorldContextObject) == 0x000000, "Member 'PilgrimGemAnalyzer_GetPilgrimGemAnalyzer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetPilgrimGemAnalyzer, ReturnValue) == 0x000008, "Member 'PilgrimGemAnalyzer_GetPilgrimGemAnalyzer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetPilgrimSongData
// 0x0010 (0x0010 - 0x0000)
struct PilgrimGemAnalyzer_GetPilgrimSongData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPilgrimSongData*                 ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetPilgrimSongData) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetPilgrimSongData");
static_assert(sizeof(PilgrimGemAnalyzer_GetPilgrimSongData) == 0x000010, "Wrong size on PilgrimGemAnalyzer_GetPilgrimSongData");
static_assert(offsetof(PilgrimGemAnalyzer_GetPilgrimSongData, WorldContextObject) == 0x000000, "Member 'PilgrimGemAnalyzer_GetPilgrimSongData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetPilgrimSongData, ReturnValue) == 0x000008, "Member 'PilgrimGemAnalyzer_GetPilgrimSongData::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemBreaks
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemAnalyzer_GetGemBreaks final
{
public:
	EPilgrimTrackType                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPilgrimGemBreak>               OutGemBreaks;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemBreaks) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetGemBreaks");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemBreaks) == 0x000018, "Wrong size on PilgrimGemAnalyzer_GetGemBreaks");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreaks, TrackType) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemBreaks::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreaks, Difficulty) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemBreaks::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreaks, OutGemBreaks) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemBreaks::OutGemBreaks' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemDensityDataForAllGameplaySections
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPilgrimGemDensityData>         OutGemDensityData;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections) == 0x000018, "Wrong size on PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections, Difficulty) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections, TrackType) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections, OutGemDensityData) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllGameplaySections::OutGemDensityData' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemDensityDataForAllSongSections
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPilgrimGemDensityData>         OutGemDensityData;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections) == 0x000018, "Wrong size on PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections, Difficulty) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections, TrackType) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections, OutGemDensityData) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForAllSongSections::OutGemDensityData' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemDensityDataForGameplaySection
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionIndexToFind;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGemDensityData                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection) == 0x000018, "Wrong size on PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection, Difficulty) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection, TrackType) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection, SectionIndexToFind) == 0x000004, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection::SectionIndexToFind' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection, ReturnValue) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForGameplaySection::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemDensityDataForSongSection
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemAnalyzer_GetGemDensityDataForSongSection final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionIndexToFind;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGemDensityData                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetGemDensityDataForSongSection");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection) == 0x000018, "Wrong size on PilgrimGemAnalyzer_GetGemDensityDataForSongSection");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection, Difficulty) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForSongSection::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection, TrackType) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForSongSection::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection, SectionIndexToFind) == 0x000004, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForSongSection::SectionIndexToFind' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemDensityDataForSongSection, ReturnValue) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemDensityDataForSongSection::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetGemBreakForTrackDifficultyMs
// 0x0054 (0x0054 - 0x0000)
struct PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs final
{
public:
	EPilgrimTrackType                             Track;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SongMs;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGemBreak                       FoundBreak;                                        // 0x0008(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPilgrimGemBreak                       NextBreak;                                         // 0x002C(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs) == 0x000004, "Wrong alignment on PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs");
static_assert(sizeof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs) == 0x000054, "Wrong size on PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, Track) == 0x000000, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::Track' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, Difficulty) == 0x000001, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::Difficulty' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, SongMs) == 0x000004, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::SongMs' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, FoundBreak) == 0x000008, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::FoundBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, NextBreak) == 0x00002C, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::NextBreak' has a wrong offset!");
static_assert(offsetof(PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs, ReturnValue) == 0x000050, "Member 'PilgrimGemAnalyzer_GetGemBreakForTrackDifficultyMs::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemAnalyzer.GetSongData
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGemAnalyzer_GetSongData final
{
public:
	const class UPilgrimSongData*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemAnalyzer_GetSongData) == 0x000008, "Wrong alignment on PilgrimGemAnalyzer_GetSongData");
static_assert(sizeof(PilgrimGemAnalyzer_GetSongData) == 0x000008, "Wrong size on PilgrimGemAnalyzer_GetSongData");
static_assert(offsetof(PilgrimGemAnalyzer_GetSongData, ReturnValue) == 0x000000, "Member 'PilgrimGemAnalyzer_GetSongData::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemSmasher.BeginSustainHoldEffect
// 0x0001 (0x0001 - 0x0000)
struct PilgrimGemSmasher_BeginSustainHoldEffect final
{
public:
	bool                                          bIsOverdrive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemSmasher_BeginSustainHoldEffect) == 0x000001, "Wrong alignment on PilgrimGemSmasher_BeginSustainHoldEffect");
static_assert(sizeof(PilgrimGemSmasher_BeginSustainHoldEffect) == 0x000001, "Wrong size on PilgrimGemSmasher_BeginSustainHoldEffect");
static_assert(offsetof(PilgrimGemSmasher_BeginSustainHoldEffect, bIsOverdrive) == 0x000000, "Member 'PilgrimGemSmasher_BeginSustainHoldEffect::bIsOverdrive' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemSmasher.OnInputUpdated
// 0x0018 (0x0018 - 0x0000)
struct PilgrimGemSmasher_OnInputUpdated final
{
public:
	struct FKey                                   BoundKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemSmasher_OnInputUpdated) == 0x000008, "Wrong alignment on PilgrimGemSmasher_OnInputUpdated");
static_assert(sizeof(PilgrimGemSmasher_OnInputUpdated) == 0x000018, "Wrong size on PilgrimGemSmasher_OnInputUpdated");
static_assert(offsetof(PilgrimGemSmasher_OnInputUpdated, BoundKey) == 0x000000, "Member 'PilgrimGemSmasher_OnInputUpdated::BoundKey' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimGemTrackItemMgr.OnGemSmashFinished
// 0x0008 (0x0008 - 0x0000)
struct PilgrimGemTrackItemMgr_OnGemSmashFinished final
{
public:
	class APilgrimGem*                            Gem;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGemTrackItemMgr_OnGemSmashFinished) == 0x000008, "Wrong alignment on PilgrimGemTrackItemMgr_OnGemSmashFinished");
static_assert(sizeof(PilgrimGemTrackItemMgr_OnGemSmashFinished) == 0x000008, "Wrong size on PilgrimGemTrackItemMgr_OnGemSmashFinished");
static_assert(offsetof(PilgrimGemTrackItemMgr_OnGemSmashFinished, Gem) == 0x000000, "Member 'PilgrimGemTrackItemMgr_OnGemSmashFinished::Gem' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.BandLeaderboardTypeFromSize
// 0x0008 (0x0008 - 0x0000)
struct PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize) == 0x000004, "Wrong alignment on PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize");
static_assert(sizeof(PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize) == 0x000008, "Wrong size on PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize");
static_assert(offsetof(PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize, Size) == 0x000000, "Member 'PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize::Size' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize, ReturnValue) == 0x000004, "Member 'PilgrimLeaderboardLibrary_BandLeaderboardTypeFromSize::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.BandSizeFromLeaderboardType
// 0x0008 (0x0008 - 0x0000)
struct PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType final
{
public:
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType) == 0x000004, "Wrong alignment on PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType");
static_assert(sizeof(PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType) == 0x000008, "Wrong size on PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType");
static_assert(offsetof(PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType, LeaderboardType) == 0x000000, "Member 'PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType, ReturnValue) == 0x000004, "Member 'PilgrimLeaderboardLibrary_BandSizeFromLeaderboardType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.GetGameplayTagFromInstrument
// 0x0008 (0x0008 - 0x0000)
struct PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument final
{
public:
	EPilgrimTrackType                             Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument) == 0x000004, "Wrong alignment on PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument");
static_assert(sizeof(PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument) == 0x000008, "Wrong size on PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument");
static_assert(offsetof(PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument, Instrument) == 0x000000, "Member 'PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument::Instrument' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument, ReturnValue) == 0x000004, "Member 'PilgrimLeaderboardLibrary_GetGameplayTagFromInstrument::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.GetInstrumentFromGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag final
{
public:
	struct FGameplayTag                           InstrumentGametag;                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag) == 0x000004, "Wrong alignment on PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag");
static_assert(sizeof(PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag) == 0x000008, "Wrong size on PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag");
static_assert(offsetof(PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag, InstrumentGametag) == 0x000000, "Member 'PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag::InstrumentGametag' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag, ReturnValue) == 0x000004, "Member 'PilgrimLeaderboardLibrary_GetInstrumentFromGameplayTag::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.InstrumentFromSoloLeaderboardType
// 0x0002 (0x0002 - 0x0000)
struct PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType final
{
public:
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType) == 0x000001, "Wrong alignment on PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType");
static_assert(sizeof(PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType) == 0x000002, "Wrong size on PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType");
static_assert(offsetof(PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType, LeaderboardType) == 0x000000, "Member 'PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType, ReturnValue) == 0x000001, "Member 'PilgrimLeaderboardLibrary_InstrumentFromSoloLeaderboardType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.IsBandLeaderboard
// 0x0002 (0x0002 - 0x0000)
struct PilgrimLeaderboardLibrary_IsBandLeaderboard final
{
public:
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_IsBandLeaderboard) == 0x000001, "Wrong alignment on PilgrimLeaderboardLibrary_IsBandLeaderboard");
static_assert(sizeof(PilgrimLeaderboardLibrary_IsBandLeaderboard) == 0x000002, "Wrong size on PilgrimLeaderboardLibrary_IsBandLeaderboard");
static_assert(offsetof(PilgrimLeaderboardLibrary_IsBandLeaderboard, LeaderboardType) == 0x000000, "Member 'PilgrimLeaderboardLibrary_IsBandLeaderboard::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_IsBandLeaderboard, ReturnValue) == 0x000001, "Member 'PilgrimLeaderboardLibrary_IsBandLeaderboard::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.IsSoloLeaderboard
// 0x0002 (0x0002 - 0x0000)
struct PilgrimLeaderboardLibrary_IsSoloLeaderboard final
{
public:
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_IsSoloLeaderboard) == 0x000001, "Wrong alignment on PilgrimLeaderboardLibrary_IsSoloLeaderboard");
static_assert(sizeof(PilgrimLeaderboardLibrary_IsSoloLeaderboard) == 0x000002, "Wrong size on PilgrimLeaderboardLibrary_IsSoloLeaderboard");
static_assert(offsetof(PilgrimLeaderboardLibrary_IsSoloLeaderboard, LeaderboardType) == 0x000000, "Member 'PilgrimLeaderboardLibrary_IsSoloLeaderboard::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_IsSoloLeaderboard, ReturnValue) == 0x000001, "Member 'PilgrimLeaderboardLibrary_IsSoloLeaderboard::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.LeaderboardTypeFromString
// 0x0018 (0x0018 - 0x0000)
struct PilgrimLeaderboardLibrary_LeaderboardTypeFromString final
{
public:
	class FString                                 LeaderboardString;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardLibrary_LeaderboardTypeFromString) == 0x000008, "Wrong alignment on PilgrimLeaderboardLibrary_LeaderboardTypeFromString");
static_assert(sizeof(PilgrimLeaderboardLibrary_LeaderboardTypeFromString) == 0x000018, "Wrong size on PilgrimLeaderboardLibrary_LeaderboardTypeFromString");
static_assert(offsetof(PilgrimLeaderboardLibrary_LeaderboardTypeFromString, LeaderboardString) == 0x000000, "Member 'PilgrimLeaderboardLibrary_LeaderboardTypeFromString::LeaderboardString' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_LeaderboardTypeFromString, ReturnValue) == 0x000010, "Member 'PilgrimLeaderboardLibrary_LeaderboardTypeFromString::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.LeaderboardTypeToString
// 0x0018 (0x0018 - 0x0000)
struct PilgrimLeaderboardLibrary_LeaderboardTypeToString final
{
public:
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_LeaderboardTypeToString) == 0x000008, "Wrong alignment on PilgrimLeaderboardLibrary_LeaderboardTypeToString");
static_assert(sizeof(PilgrimLeaderboardLibrary_LeaderboardTypeToString) == 0x000018, "Wrong size on PilgrimLeaderboardLibrary_LeaderboardTypeToString");
static_assert(offsetof(PilgrimLeaderboardLibrary_LeaderboardTypeToString, LeaderboardType) == 0x000000, "Member 'PilgrimLeaderboardLibrary_LeaderboardTypeToString::LeaderboardType' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_LeaderboardTypeToString, ReturnValue) == 0x000008, "Member 'PilgrimLeaderboardLibrary_LeaderboardTypeToString::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardLibrary.SoloLeaderboardTypeFromInstrument
// 0x0002 (0x0002 - 0x0000)
struct PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument final
{
public:
	EPilgrimTrackType                             Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument) == 0x000001, "Wrong alignment on PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument");
static_assert(sizeof(PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument) == 0x000002, "Wrong size on PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument");
static_assert(offsetof(PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument, Instrument) == 0x000000, "Member 'PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument::Instrument' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument, ReturnValue) == 0x000001, "Member 'PilgrimLeaderboardLibrary_SoloLeaderboardTypeFromInstrument::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.CheckPlayerScoreForFriendSurpasser
// 0x0004 (0x0004 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser final
{
public:
	int32                                         CurrentScore;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser) == 0x000004, "Wrong alignment on PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser) == 0x000004, "Wrong size on PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser, CurrentScore) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_CheckPlayerScoreForFriendSurpasser::CurrentScore' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.ClientCachePlayerFriendsHistoryComplete
// 0x00B8 (0x00B8 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete final
{
public:
	struct FPilgrimPlayerHistoryParams            HistoryParams;                                     // 0x0000(0x00A0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimPlayerHistoryResult>    Results;                                           // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete) == 0x0000B8, "Wrong size on PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete, HistoryParams) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete::HistoryParams' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete, Results) == 0x0000A0, "Member 'PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete::Results' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete, RequestID) == 0x0000B0, "Member 'PilgrimLeaderboardPlayerComponent_ClientCachePlayerFriendsHistoryComplete::RequestID' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.ClientRequestSpotlightCompetitionsComplete
// 0x0080 (0x0080 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete final
{
public:
	struct FPilgrimSpotlightCompetitionParams     Params_0;                                          // 0x0000(0x0068)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimSpotlightCompetition>   SpotlightCompetitions;                             // 0x0068(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete) == 0x000080, "Wrong size on PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete, Params_0) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete::Params_0' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete, SpotlightCompetitions) == 0x000068, "Member 'PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete::SpotlightCompetitions' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete, RequestID) == 0x000078, "Member 'PilgrimLeaderboardPlayerComponent_ClientRequestSpotlightCompetitionsComplete::RequestID' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.GetPostMatchFriendRankAndDelta
// 0x000C (0x000C - 0x0000)
struct PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta final
{
public:
	int32                                         FinalScore;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRank;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDelta;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta) == 0x000004, "Wrong alignment on PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta) == 0x00000C, "Wrong size on PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta, FinalScore) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta::FinalScore' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta, OutRank) == 0x000004, "Member 'PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta::OutRank' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta, OutDelta) == 0x000008, "Member 'PilgrimLeaderboardPlayerComponent_GetPostMatchFriendRankAndDelta::OutDelta' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.ServerCachePlayerFriendsHistory
// 0x00B8 (0x00B8 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory final
{
public:
	struct FPilgrimPlayerHistoryParams            HistoryParams;                                     // 0x0000(0x00A0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               FriendAccountIds;                                  // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory) == 0x0000B8, "Wrong size on PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory, HistoryParams) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory::HistoryParams' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory, FriendAccountIds) == 0x0000A0, "Member 'PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory::FriendAccountIds' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory, RequestID) == 0x0000B0, "Member 'PilgrimLeaderboardPlayerComponent_ServerCachePlayerFriendsHistory::RequestID' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.ServerRequestSpotlightCompetitions
// 0x0070 (0x0070 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions final
{
public:
	struct FPilgrimSpotlightCompetitionParams     Params_0;                                          // 0x0000(0x0068)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions) == 0x000070, "Wrong size on PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions, Params_0) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions::Params_0' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions, RequestID) == 0x000068, "Member 'PilgrimLeaderboardPlayerComponent_ServerRequestSpotlightCompetitions::RequestID' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.SetCurrentSetlistInfo
// 0x0008 (0x0008 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             Instrument;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo) == 0x000004, "Wrong alignment on PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo) == 0x000008, "Wrong size on PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo, SongShortName) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo, Instrument) == 0x000004, "Member 'PilgrimLeaderboardPlayerComponent_SetCurrentSetlistInfo::Instrument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.SetFriendFeedCache
// 0x0020 (0x0020 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_SetFriendFeedCache final
{
public:
	struct FPilgrimPlayerFeedResult               FeedResult;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_SetFriendFeedCache) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_SetFriendFeedCache");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_SetFriendFeedCache) == 0x000020, "Wrong size on PilgrimLeaderboardPlayerComponent_SetFriendFeedCache");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_SetFriendFeedCache, FeedResult) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_SetFriendFeedCache::FeedResult' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.GetSpotlightCompetitions
// 0x0028 (0x0028 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions final
{
public:
	struct FPilgrimGetSpotlightParams             SpotlightParams;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimSpotlightCompetition>   OutCompetitions;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions) == 0x000008, "Wrong alignment on PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions) == 0x000028, "Wrong size on PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions, SpotlightParams) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions::SpotlightParams' has a wrong offset!");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions, OutCompetitions) == 0x000018, "Member 'PilgrimLeaderboardPlayerComponent_GetSpotlightCompetitions::OutCompetitions' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent.IsBandFriendLeaderboardEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled) == 0x000001, "Wrong alignment on PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled");
static_assert(sizeof(PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled) == 0x000001, "Wrong size on PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled");
static_assert(offsetof(PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled, ReturnValue) == 0x000000, "Member 'PilgrimLeaderboardPlayerComponent_IsBandFriendLeaderboardEnabled::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMediaStreamer.OnSongDataDownloaded
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMediaStreamer_OnSongDataDownloaded final
{
public:
	class UCatalogData*                           CatalogData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMediaStreamer_OnSongDataDownloaded) == 0x000008, "Wrong alignment on PilgrimMediaStreamer_OnSongDataDownloaded");
static_assert(sizeof(PilgrimMediaStreamer_OnSongDataDownloaded) == 0x000010, "Wrong size on PilgrimMediaStreamer_OnSongDataDownloaded");
static_assert(offsetof(PilgrimMediaStreamer_OnSongDataDownloaded, CatalogData) == 0x000000, "Member 'PilgrimMediaStreamer_OnSongDataDownloaded::CatalogData' has a wrong offset!");
static_assert(offsetof(PilgrimMediaStreamer_OnSongDataDownloaded, bSuccess) == 0x000008, "Member 'PilgrimMediaStreamer_OnSongDataDownloaded::bSuccess' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMediaStreamer.OnVideoError
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMediaStreamer_OnVideoError final
{
public:
	EBaseMediaTerminalErrorReason                 Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMediaStreamer_OnVideoError) == 0x000001, "Wrong alignment on PilgrimMediaStreamer_OnVideoError");
static_assert(sizeof(PilgrimMediaStreamer_OnVideoError) == 0x000001, "Wrong size on PilgrimMediaStreamer_OnVideoError");
static_assert(offsetof(PilgrimMediaStreamer_OnVideoError, Reason) == 0x000000, "Member 'PilgrimMediaStreamer_OnVideoError::Reason' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMediaStreamer.OnVideoOpened
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMediaStreamer_OnVideoOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMediaStreamer_OnVideoOpened) == 0x000008, "Wrong alignment on PilgrimMediaStreamer_OnVideoOpened");
static_assert(sizeof(PilgrimMediaStreamer_OnVideoOpened) == 0x000010, "Wrong size on PilgrimMediaStreamer_OnVideoOpened");
static_assert(offsetof(PilgrimMediaStreamer_OnVideoOpened, OpenedUrl) == 0x000000, "Member 'PilgrimMediaStreamer_OnVideoOpened::OpenedUrl' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMediaStreamer.OnVideoOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMediaStreamer_OnVideoOpenFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMediaStreamer_OnVideoOpenFailed) == 0x000008, "Wrong alignment on PilgrimMediaStreamer_OnVideoOpenFailed");
static_assert(sizeof(PilgrimMediaStreamer_OnVideoOpenFailed) == 0x000010, "Wrong size on PilgrimMediaStreamer_OnVideoOpenFailed");
static_assert(offsetof(PilgrimMediaStreamer_OnVideoOpenFailed, FailedUrl) == 0x000000, "Member 'PilgrimMediaStreamer_OnVideoOpenFailed::FailedUrl' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMediaStreamer.PrepareSong
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMediaStreamer_PrepareSong final
{
public:
	class UPilgrimSongMetadata*                   InSong;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMediaStreamer_PrepareSong) == 0x000008, "Wrong alignment on PilgrimMediaStreamer_PrepareSong");
static_assert(sizeof(PilgrimMediaStreamer_PrepareSong) == 0x000008, "Wrong size on PilgrimMediaStreamer_PrepareSong");
static_assert(offsetof(PilgrimMediaStreamer_PrepareSong, InSong) == 0x000000, "Member 'PilgrimMediaStreamer_PrepareSong::InSong' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.AddMusicBattlePlayers
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_AddMusicBattlePlayers final
{
public:
	TArray<class AFortPlayerStateAthena*>         NewPlayers;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_AddMusicBattlePlayers) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_AddMusicBattlePlayers");
static_assert(sizeof(PilgrimMusicBattleInstance_AddMusicBattlePlayers) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_AddMusicBattlePlayers");
static_assert(offsetof(PilgrimMusicBattleInstance_AddMusicBattlePlayers, NewPlayers) == 0x000000, "Member 'PilgrimMusicBattleInstance_AddMusicBattlePlayers::NewPlayers' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.AddToBandScore
// 0x0004 (0x0004 - 0x0000)
struct PilgrimMusicBattleInstance_AddToBandScore final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_AddToBandScore) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_AddToBandScore");
static_assert(sizeof(PilgrimMusicBattleInstance_AddToBandScore) == 0x000004, "Wrong size on PilgrimMusicBattleInstance_AddToBandScore");
static_assert(offsetof(PilgrimMusicBattleInstance_AddToBandScore, Score) == 0x000000, "Member 'PilgrimMusicBattleInstance_AddToBandScore::Score' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.Client_DoMultiplayerDamageEffect
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect final
{
public:
	int32                                         DamagingPlayerId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagedPlayerId;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect");
static_assert(sizeof(PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect");
static_assert(offsetof(PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect, DamagingPlayerId) == 0x000000, "Member 'PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect::DamagingPlayerId' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect, DamagedPlayerId) == 0x000004, "Member 'PilgrimMusicBattleInstance_Client_DoMultiplayerDamageEffect::DamagedPlayerId' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.ConnectFFTAnalysis
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_ConnectFFTAnalysis final
{
public:
	class UAudioComponent*                        AudioComponentWithAnalyzer;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_ConnectFFTAnalysis) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_ConnectFFTAnalysis");
static_assert(sizeof(PilgrimMusicBattleInstance_ConnectFFTAnalysis) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_ConnectFFTAnalysis");
static_assert(offsetof(PilgrimMusicBattleInstance_ConnectFFTAnalysis, AudioComponentWithAnalyzer) == 0x000000, "Member 'PilgrimMusicBattleInstance_ConnectFFTAnalysis::AudioComponentWithAnalyzer' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.DoEndGameCheat
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_DoEndGameCheat final
{
public:
	bool                                          bIsWin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_DoEndGameCheat) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_DoEndGameCheat");
static_assert(sizeof(PilgrimMusicBattleInstance_DoEndGameCheat) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_DoEndGameCheat");
static_assert(offsetof(PilgrimMusicBattleInstance_DoEndGameCheat, bIsWin) == 0x000000, "Member 'PilgrimMusicBattleInstance_DoEndGameCheat::bIsWin' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.DoMultiplayerDamage
// 0x0074 (0x0074 - 0x0000)
struct PilgrimMusicBattleInstance_DoMultiplayerDamage final
{
public:
	int32                                         DamagingPlayerId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagedPlayerId;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGameProgress                   GameUpdateThatDidDamage;                           // 0x0008(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_DoMultiplayerDamage) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_DoMultiplayerDamage");
static_assert(sizeof(PilgrimMusicBattleInstance_DoMultiplayerDamage) == 0x000074, "Wrong size on PilgrimMusicBattleInstance_DoMultiplayerDamage");
static_assert(offsetof(PilgrimMusicBattleInstance_DoMultiplayerDamage, DamagingPlayerId) == 0x000000, "Member 'PilgrimMusicBattleInstance_DoMultiplayerDamage::DamagingPlayerId' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_DoMultiplayerDamage, DamagedPlayerId) == 0x000004, "Member 'PilgrimMusicBattleInstance_DoMultiplayerDamage::DamagedPlayerId' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_DoMultiplayerDamage, GameUpdateThatDidDamage) == 0x000008, "Member 'PilgrimMusicBattleInstance_DoMultiplayerDamage::GameUpdateThatDidDamage' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.FireLocalPlayerBeam
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_FireLocalPlayerBeam final
{
public:
	EMusicBattleProjectileType                    ProjectileType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_FireLocalPlayerBeam) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_FireLocalPlayerBeam");
static_assert(sizeof(PilgrimMusicBattleInstance_FireLocalPlayerBeam) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_FireLocalPlayerBeam");
static_assert(offsetof(PilgrimMusicBattleInstance_FireLocalPlayerBeam, ProjectileType) == 0x000000, "Member 'PilgrimMusicBattleInstance_FireLocalPlayerBeam::ProjectileType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetEventRouter
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetEventRouter final
{
public:
	class UGameplayEventRouterComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetEventRouter) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetEventRouter");
static_assert(sizeof(PilgrimMusicBattleInstance_GetEventRouter) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetEventRouter");
static_assert(offsetof(PilgrimMusicBattleInstance_GetEventRouter, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetEventRouter::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetScoreDensityForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_GetScoreDensityForPlayer final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_GetScoreDensityForPlayer) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetScoreDensityForPlayer");
static_assert(sizeof(PilgrimMusicBattleInstance_GetScoreDensityForPlayer) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_GetScoreDensityForPlayer");
static_assert(offsetof(PilgrimMusicBattleInstance_GetScoreDensityForPlayer, PlayerState) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetScoreDensityForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetScoreDensityForPlayer, ReturnValue) == 0x000008, "Member 'PilgrimMusicBattleInstance_GetScoreDensityForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_GetTeam final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetTeam) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_GetTeam");
static_assert(sizeof(PilgrimMusicBattleInstance_GetTeam) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_GetTeam");
static_assert(offsetof(PilgrimMusicBattleInstance_GetTeam, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetTeam::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.NetMulticast_CheatSeekToTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime");
static_assert(sizeof(PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime) == 0x000004, "Wrong size on PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime");
static_assert(offsetof(PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime, Milliseconds) == 0x000000, "Member 'PilgrimMusicBattleInstance_NetMulticast_CheatSeekToTime::Milliseconds' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.NetMulticast_CheatSetPerformanceData
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData final
{
public:
	class FString                                 PerformanceArgument;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData");
static_assert(sizeof(PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData");
static_assert(offsetof(PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData, PerformanceArgument) == 0x000000, "Member 'PilgrimMusicBattleInstance_NetMulticast_CheatSetPerformanceData::PerformanceArgument' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.NetMulticast_DoMultiplayerDamageEffect
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect final
{
public:
	int32                                         DamagingPlayerId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagedPlayerId;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect");
static_assert(sizeof(PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect");
static_assert(offsetof(PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect, DamagingPlayerId) == 0x000000, "Member 'PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect::DamagingPlayerId' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect, DamagedPlayerId) == 0x000004, "Member 'PilgrimMusicBattleInstance_NetMulticast_DoMultiplayerDamageEffect::DamagedPlayerId' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.OnClientReceivedSongToPlay
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_OnClientReceivedSongToPlay final
{
public:
	class UPilgrimSongMetadata*                   Song;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_OnClientReceivedSongToPlay) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_OnClientReceivedSongToPlay");
static_assert(sizeof(PilgrimMusicBattleInstance_OnClientReceivedSongToPlay) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_OnClientReceivedSongToPlay");
static_assert(offsetof(PilgrimMusicBattleInstance_OnClientReceivedSongToPlay, Song) == 0x000000, "Member 'PilgrimMusicBattleInstance_OnClientReceivedSongToPlay::Song' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.OnPlayerReachedZeroHp
// 0x0004 (0x0004 - 0x0000)
struct PilgrimMusicBattleInstance_OnPlayerReachedZeroHp final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_OnPlayerReachedZeroHp) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_OnPlayerReachedZeroHp");
static_assert(sizeof(PilgrimMusicBattleInstance_OnPlayerReachedZeroHp) == 0x000004, "Wrong size on PilgrimMusicBattleInstance_OnPlayerReachedZeroHp");
static_assert(offsetof(PilgrimMusicBattleInstance_OnPlayerReachedZeroHp, PlayerId) == 0x000000, "Member 'PilgrimMusicBattleInstance_OnPlayerReachedZeroHp::PlayerId' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.OnRep_MusicBattleData
// 0x0048 (0x0048 - 0x0000)
struct PilgrimMusicBattleInstance_OnRep_MusicBattleData final
{
public:
	struct FPilgrimMusicBattleData                PreviousMusicBattleData;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_OnRep_MusicBattleData) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_OnRep_MusicBattleData");
static_assert(sizeof(PilgrimMusicBattleInstance_OnRep_MusicBattleData) == 0x000048, "Wrong size on PilgrimMusicBattleInstance_OnRep_MusicBattleData");
static_assert(offsetof(PilgrimMusicBattleInstance_OnRep_MusicBattleData, PreviousMusicBattleData) == 0x000000, "Member 'PilgrimMusicBattleInstance_OnRep_MusicBattleData::PreviousMusicBattleData' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.OnStartedPlayingSong
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_OnStartedPlayingSong final
{
public:
	class UPilgrimSongMetadata*                   Song;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_OnStartedPlayingSong) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_OnStartedPlayingSong");
static_assert(sizeof(PilgrimMusicBattleInstance_OnStartedPlayingSong) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_OnStartedPlayingSong");
static_assert(offsetof(PilgrimMusicBattleInstance_OnStartedPlayingSong, Song) == 0x000000, "Member 'PilgrimMusicBattleInstance_OnStartedPlayingSong::Song' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.OnTrackHiddenChanged
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_OnTrackHiddenChanged final
{
public:
	bool                                          bHideTrack;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_OnTrackHiddenChanged) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_OnTrackHiddenChanged");
static_assert(sizeof(PilgrimMusicBattleInstance_OnTrackHiddenChanged) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_OnTrackHiddenChanged");
static_assert(offsetof(PilgrimMusicBattleInstance_OnTrackHiddenChanged, bHideTrack) == 0x000000, "Member 'PilgrimMusicBattleInstance_OnTrackHiddenChanged::bHideTrack' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.PlayerDisconnected
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_PlayerDisconnected final
{
public:
	const class UPilgrimPlayerControllerComponent* ControllerComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_PlayerDisconnected) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_PlayerDisconnected");
static_assert(sizeof(PilgrimMusicBattleInstance_PlayerDisconnected) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_PlayerDisconnected");
static_assert(offsetof(PilgrimMusicBattleInstance_PlayerDisconnected, ControllerComponent) == 0x000000, "Member 'PilgrimMusicBattleInstance_PlayerDisconnected::ControllerComponent' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.ServerOnClientUpdateReceived
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_ServerOnClientUpdateReceived final
{
public:
	class UPilgrimPlayerControllerComponent*      PlayerControllerComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicBattleClientUpdate                      ClientUpdate;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_ServerOnClientUpdateReceived) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_ServerOnClientUpdateReceived");
static_assert(sizeof(PilgrimMusicBattleInstance_ServerOnClientUpdateReceived) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_ServerOnClientUpdateReceived");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnClientUpdateReceived, PlayerControllerComponent) == 0x000000, "Member 'PilgrimMusicBattleInstance_ServerOnClientUpdateReceived::PlayerControllerComponent' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnClientUpdateReceived, ClientUpdate) == 0x000008, "Member 'PilgrimMusicBattleInstance_ServerOnClientUpdateReceived::ClientUpdate' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.ServerOnTeamQuickplayScoreChanged
// 0x0078 (0x0078 - 0x0000)
struct PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged final
{
public:
	class UPilgrimPlayerControllerComponent*      PlayerControllerComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGameProgress                   NextScoreForCurrentPlayer;                         // 0x0008(0x006C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LastInputTimeMs;                                   // 0x0074(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged");
static_assert(sizeof(PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged) == 0x000078, "Wrong size on PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged, PlayerControllerComponent) == 0x000000, "Member 'PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged::PlayerControllerComponent' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged, NextScoreForCurrentPlayer) == 0x000008, "Member 'PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged::NextScoreForCurrentPlayer' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged, LastInputTimeMs) == 0x000074, "Member 'PilgrimMusicBattleInstance_ServerOnTeamQuickplayScoreChanged::LastInputTimeMs' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.ServerOnTimedInputReceived
// 0x0018 (0x0018 - 0x0000)
struct PilgrimMusicBattleInstance_ServerOnTimedInputReceived final
{
public:
	class UPilgrimPlayerControllerComponent*      PlayerControllerComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimTimedInput                     TimedInput;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_ServerOnTimedInputReceived) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_ServerOnTimedInputReceived");
static_assert(sizeof(PilgrimMusicBattleInstance_ServerOnTimedInputReceived) == 0x000018, "Wrong size on PilgrimMusicBattleInstance_ServerOnTimedInputReceived");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnTimedInputReceived, PlayerControllerComponent) == 0x000000, "Member 'PilgrimMusicBattleInstance_ServerOnTimedInputReceived::PlayerControllerComponent' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_ServerOnTimedInputReceived, TimedInput) == 0x000008, "Member 'PilgrimMusicBattleInstance_ServerOnTimedInputReceived::TimedInput' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.SetMusicBattleType
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_SetMusicBattleType final
{
public:
	EMusicBattleType                              NewMusicBattleType;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_SetMusicBattleType) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_SetMusicBattleType");
static_assert(sizeof(PilgrimMusicBattleInstance_SetMusicBattleType) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_SetMusicBattleType");
static_assert(offsetof(PilgrimMusicBattleInstance_SetMusicBattleType, NewMusicBattleType) == 0x000000, "Member 'PilgrimMusicBattleInstance_SetMusicBattleType::NewMusicBattleType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.SubtractFromBandScore
// 0x0004 (0x0004 - 0x0000)
struct PilgrimMusicBattleInstance_SubtractFromBandScore final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_SubtractFromBandScore) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_SubtractFromBandScore");
static_assert(sizeof(PilgrimMusicBattleInstance_SubtractFromBandScore) == 0x000004, "Wrong size on PilgrimMusicBattleInstance_SubtractFromBandScore");
static_assert(offsetof(PilgrimMusicBattleInstance_SubtractFromBandScore, Score) == 0x000000, "Member 'PilgrimMusicBattleInstance_SubtractFromBandScore::Score' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.UpdateLocalPlayerScore
// 0x006C (0x006C - 0x0000)
struct PilgrimMusicBattleInstance_UpdateLocalPlayerScore final
{
public:
	struct FPilgrimGameProgress                   LocalPlayerGameProgress;                           // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_UpdateLocalPlayerScore) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_UpdateLocalPlayerScore");
static_assert(sizeof(PilgrimMusicBattleInstance_UpdateLocalPlayerScore) == 0x00006C, "Wrong size on PilgrimMusicBattleInstance_UpdateLocalPlayerScore");
static_assert(offsetof(PilgrimMusicBattleInstance_UpdateLocalPlayerScore, LocalPlayerGameProgress) == 0x000000, "Member 'PilgrimMusicBattleInstance_UpdateLocalPlayerScore::LocalPlayerGameProgress' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.Debug_IsTrackHidden
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_Debug_IsTrackHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_Debug_IsTrackHidden) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_Debug_IsTrackHidden");
static_assert(sizeof(PilgrimMusicBattleInstance_Debug_IsTrackHidden) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_Debug_IsTrackHidden");
static_assert(offsetof(PilgrimMusicBattleInstance_Debug_IsTrackHidden, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_Debug_IsTrackHidden::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetConfig
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetConfig final
{
public:
	const class UPilgrimGameConfig*               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetConfig) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetConfig");
static_assert(sizeof(PilgrimMusicBattleInstance_GetConfig) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetConfig");
static_assert(offsetof(PilgrimMusicBattleInstance_GetConfig, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetConfig::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetCurrentLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetCurrentLocalPlayer final
{
public:
	class AFortPlayerStateAthena*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetCurrentLocalPlayer) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetCurrentLocalPlayer");
static_assert(sizeof(PilgrimMusicBattleInstance_GetCurrentLocalPlayer) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetCurrentLocalPlayer");
static_assert(offsetof(PilgrimMusicBattleInstance_GetCurrentLocalPlayer, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetCurrentLocalPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetDifficultyAndTrackType
// 0x0002 (0x0002 - 0x0000)
struct PilgrimMusicBattleInstance_GetDifficultyAndTrackType final
{
public:
	EPilgrimSongDifficulty                        OutSongDifficulty;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             OutSongTrackType;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetDifficultyAndTrackType) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_GetDifficultyAndTrackType");
static_assert(sizeof(PilgrimMusicBattleInstance_GetDifficultyAndTrackType) == 0x000002, "Wrong size on PilgrimMusicBattleInstance_GetDifficultyAndTrackType");
static_assert(offsetof(PilgrimMusicBattleInstance_GetDifficultyAndTrackType, OutSongDifficulty) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetDifficultyAndTrackType::OutSongDifficulty' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetDifficultyAndTrackType, OutSongTrackType) == 0x000001, "Member 'PilgrimMusicBattleInstance_GetDifficultyAndTrackType::OutSongTrackType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetLocalPilgrimGame
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetLocalPilgrimGame final
{
public:
	class UPilgrimGame*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetLocalPilgrimGame) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetLocalPilgrimGame");
static_assert(sizeof(PilgrimMusicBattleInstance_GetLocalPilgrimGame) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetLocalPilgrimGame");
static_assert(offsetof(PilgrimMusicBattleInstance_GetLocalPilgrimGame, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetLocalPilgrimGame::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetMusicBattleData
// 0x0048 (0x0048 - 0x0000)
struct PilgrimMusicBattleInstance_GetMusicBattleData final
{
public:
	struct FPilgrimMusicBattleData                ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetMusicBattleData) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetMusicBattleData");
static_assert(sizeof(PilgrimMusicBattleInstance_GetMusicBattleData) == 0x000048, "Wrong size on PilgrimMusicBattleInstance_GetMusicBattleData");
static_assert(offsetof(PilgrimMusicBattleInstance_GetMusicBattleData, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetMusicBattleData::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetMusicClock
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetMusicClock final
{
public:
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetMusicClock) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetMusicClock");
static_assert(sizeof(PilgrimMusicBattleInstance_GetMusicClock) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetMusicClock");
static_assert(offsetof(PilgrimMusicBattleInstance_GetMusicClock, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetMusicClock::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetNextSongToPlay
// 0x0008 (0x0008 - 0x0000)
struct PilgrimMusicBattleInstance_GetNextSongToPlay final
{
public:
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetNextSongToPlay) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetNextSongToPlay");
static_assert(sizeof(PilgrimMusicBattleInstance_GetNextSongToPlay) == 0x000008, "Wrong size on PilgrimMusicBattleInstance_GetNextSongToPlay");
static_assert(offsetof(PilgrimMusicBattleInstance_GetNextSongToPlay, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetNextSongToPlay::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetPlayedTrackTypesInCurrentSong
// 0x0050 (0x0050 - 0x0000)
struct PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong final
{
public:
	TSet<EPilgrimTrackType>                       ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong");
static_assert(sizeof(PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong) == 0x000050, "Wrong size on PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong");
static_assert(offsetof(PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetPlayedTrackTypesInCurrentSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetPlayerFromIndex
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_GetPlayerFromIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetPlayerFromIndex) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetPlayerFromIndex");
static_assert(sizeof(PilgrimMusicBattleInstance_GetPlayerFromIndex) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_GetPlayerFromIndex");
static_assert(offsetof(PilgrimMusicBattleInstance_GetPlayerFromIndex, PlayerIndex) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetPlayerFromIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetPlayerFromIndex, ReturnValue) == 0x000008, "Member 'PilgrimMusicBattleInstance_GetPlayerFromIndex::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetSongDifficultyForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_GetSongDifficultyForPlayer final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_GetSongDifficultyForPlayer) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetSongDifficultyForPlayer");
static_assert(sizeof(PilgrimMusicBattleInstance_GetSongDifficultyForPlayer) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_GetSongDifficultyForPlayer");
static_assert(offsetof(PilgrimMusicBattleInstance_GetSongDifficultyForPlayer, Player) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetSongDifficultyForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetSongDifficultyForPlayer, ReturnValue) == 0x000008, "Member 'PilgrimMusicBattleInstance_GetSongDifficultyForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetSongPlayMethod
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_GetSongPlayMethod final
{
public:
	EPilgrimSongPlayMethod                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetSongPlayMethod) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_GetSongPlayMethod");
static_assert(sizeof(PilgrimMusicBattleInstance_GetSongPlayMethod) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_GetSongPlayMethod");
static_assert(offsetof(PilgrimMusicBattleInstance_GetSongPlayMethod, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetSongPlayMethod::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetStartingInstrumentForTrackInCurrentSong
// 0x0002 (0x0002 - 0x0000)
struct PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong final
{
public:
	EPilgrimTrackType                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong");
static_assert(sizeof(PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong) == 0x000002, "Wrong size on PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong");
static_assert(offsetof(PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong, TrackType) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong, ReturnValue) == 0x000001, "Member 'PilgrimMusicBattleInstance_GetStartingInstrumentForTrackInCurrentSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetStreakMultiplier
// 0x0070 (0x0070 - 0x0000)
struct PilgrimMusicBattleInstance_GetStreakMultiplier final
{
public:
	struct FPilgrimGameProgress                   LocalPlayerGameProgress;                           // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetStreakMultiplier) == 0x000004, "Wrong alignment on PilgrimMusicBattleInstance_GetStreakMultiplier");
static_assert(sizeof(PilgrimMusicBattleInstance_GetStreakMultiplier) == 0x000070, "Wrong size on PilgrimMusicBattleInstance_GetStreakMultiplier");
static_assert(offsetof(PilgrimMusicBattleInstance_GetStreakMultiplier, LocalPlayerGameProgress) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetStreakMultiplier::LocalPlayerGameProgress' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetStreakMultiplier, ReturnValue) == 0x00006C, "Member 'PilgrimMusicBattleInstance_GetStreakMultiplier::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetTrackTypeForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_GetTrackTypeForPlayer final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_GetTrackTypeForPlayer) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetTrackTypeForPlayer");
static_assert(sizeof(PilgrimMusicBattleInstance_GetTrackTypeForPlayer) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_GetTrackTypeForPlayer");
static_assert(offsetof(PilgrimMusicBattleInstance_GetTrackTypeForPlayer, Player) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetTrackTypeForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_GetTrackTypeForPlayer, ReturnValue) == 0x000008, "Member 'PilgrimMusicBattleInstance_GetTrackTypeForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.GetUnplayedTrackTypesInCurrentSong
// 0x0050 (0x0050 - 0x0000)
struct PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong final
{
public:
	TSet<EPilgrimTrackType>                       ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong");
static_assert(sizeof(PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong) == 0x000050, "Wrong size on PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong");
static_assert(offsetof(PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_GetUnplayedTrackTypesInCurrentSong::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.HandleNewFFTResults
// 0x0018 (0x0018 - 0x0000)
struct PilgrimMusicBattleInstance_HandleNewFFTResults final
{
public:
	class FName                                   OutputName;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetaSoundOutput                       Output;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_HandleNewFFTResults) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_HandleNewFFTResults");
static_assert(sizeof(PilgrimMusicBattleInstance_HandleNewFFTResults) == 0x000018, "Wrong size on PilgrimMusicBattleInstance_HandleNewFFTResults");
static_assert(offsetof(PilgrimMusicBattleInstance_HandleNewFFTResults, OutputName) == 0x000000, "Member 'PilgrimMusicBattleInstance_HandleNewFFTResults::OutputName' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_HandleNewFFTResults, Output) == 0x000008, "Member 'PilgrimMusicBattleInstance_HandleNewFFTResults::Output' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsHardStopAllowed
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsHardStopAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsHardStopAllowed) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsHardStopAllowed");
static_assert(sizeof(PilgrimMusicBattleInstance_IsHardStopAllowed) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsHardStopAllowed");
static_assert(offsetof(PilgrimMusicBattleInstance_IsHardStopAllowed, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsHardStopAllowed::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsHardStopped
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsHardStopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsHardStopped) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsHardStopped");
static_assert(sizeof(PilgrimMusicBattleInstance_IsHardStopped) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsHardStopped");
static_assert(offsetof(PilgrimMusicBattleInstance_IsHardStopped, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsHardStopped::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsLocalPlayerInBattleParticipants
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants");
static_assert(sizeof(PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants");
static_assert(offsetof(PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsLocalPlayerInBattleParticipants::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsLocalPlayerRoaming
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsLocalPlayerRoaming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsLocalPlayerRoaming) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsLocalPlayerRoaming");
static_assert(sizeof(PilgrimMusicBattleInstance_IsLocalPlayerRoaming) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsLocalPlayerRoaming");
static_assert(offsetof(PilgrimMusicBattleInstance_IsLocalPlayerRoaming, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsLocalPlayerRoaming::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsPlayerInBattleParticipants
// 0x0010 (0x0010 - 0x0000)
struct PilgrimMusicBattleInstance_IsPlayerInBattleParticipants final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimMusicBattleInstance_IsPlayerInBattleParticipants) == 0x000008, "Wrong alignment on PilgrimMusicBattleInstance_IsPlayerInBattleParticipants");
static_assert(sizeof(PilgrimMusicBattleInstance_IsPlayerInBattleParticipants) == 0x000010, "Wrong size on PilgrimMusicBattleInstance_IsPlayerInBattleParticipants");
static_assert(offsetof(PilgrimMusicBattleInstance_IsPlayerInBattleParticipants, PlayerState) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsPlayerInBattleParticipants::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimMusicBattleInstance_IsPlayerInBattleParticipants, ReturnValue) == 0x000008, "Member 'PilgrimMusicBattleInstance_IsPlayerInBattleParticipants::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsRestartAllowed
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsRestartAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsRestartAllowed) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsRestartAllowed");
static_assert(sizeof(PilgrimMusicBattleInstance_IsRestartAllowed) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsRestartAllowed");
static_assert(offsetof(PilgrimMusicBattleInstance_IsRestartAllowed, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsRestartAllowed::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsSinglePlayerBattleAgainstPrimitiveAI
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI");
static_assert(sizeof(PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI");
static_assert(offsetof(PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsSinglePlayerBattleAgainstPrimitiveAI::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.IsTwoPlayerBattleWithBeams
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams");
static_assert(sizeof(PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams");
static_assert(offsetof(PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_IsTwoPlayerBattleWithBeams::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimMusicBattleInstance.ShouldUseTouchUIForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer) == 0x000001, "Wrong alignment on PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer");
static_assert(sizeof(PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer) == 0x000001, "Wrong size on PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer");
static_assert(offsetof(PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer, ReturnValue) == 0x000000, "Member 'PilgrimMusicBattleInstance_ShouldUseTouchUIForLocalPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimNowBar.SetGemSmasher
// 0x0010 (0x0010 - 0x0000)
struct PilgrimNowBar_SetGemSmasher final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   Smasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimNowBar_SetGemSmasher) == 0x000008, "Wrong alignment on PilgrimNowBar_SetGemSmasher");
static_assert(sizeof(PilgrimNowBar_SetGemSmasher) == 0x000010, "Wrong size on PilgrimNowBar_SetGemSmasher");
static_assert(offsetof(PilgrimNowBar_SetGemSmasher, Lane) == 0x000000, "Member 'PilgrimNowBar_SetGemSmasher::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimNowBar_SetGemSmasher, Smasher) == 0x000008, "Member 'PilgrimNowBar_SetGemSmasher::Smasher' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.HandleOverdriveActiveChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent final
{
public:
	struct FPilgrimEvent_Scoring_OverdriveActiveChanged Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent) == 0x000008, "Wrong alignment on PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent) == 0x000010, "Wrong size on PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent, Payload) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_HandleOverdriveActiveChangedEvent::Payload' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetAverage
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetAverage final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetAverage) == 0x000004, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetAverage");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetAverage) == 0x000008, "Wrong size on PilgrimPerformanceTrackerComponent_GetAverage");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetAverage, Timebase) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetAverage::Timebase' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetAverage, ReturnValue) == 0x000004, "Member 'PilgrimPerformanceTrackerComponent_GetAverage::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetLaneOffsets
// 0x0018 (0x0018 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetLaneOffsets final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetLaneOffsets) == 0x000008, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetLaneOffsets");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetLaneOffsets) == 0x000018, "Wrong size on PilgrimPerformanceTrackerComponent_GetLaneOffsets");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetLaneOffsets, Lane) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetLaneOffsets::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetLaneOffsets, Timebase) == 0x000001, "Member 'PilgrimPerformanceTrackerComponent_GetLaneOffsets::Timebase' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetLaneOffsets, ReturnValue) == 0x000008, "Member 'PilgrimPerformanceTrackerComponent_GetLaneOffsets::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetResultData
// 0x00A8 (0x00A8 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetResultData final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimEvent_Scoring_PerformanceDataResult ReturnValue;                                       // 0x0008(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetResultData) == 0x000008, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetResultData");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetResultData) == 0x0000A8, "Wrong size on PilgrimPerformanceTrackerComponent_GetResultData");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetResultData, Timebase) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetResultData::Timebase' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetResultData, ReturnValue) == 0x000008, "Member 'PilgrimPerformanceTrackerComponent_GetResultData::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetSampleAverage
// 0x0018 (0x0018 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetSampleAverage final
{
public:
	TArray<float>                                 Samples;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetSampleAverage) == 0x000008, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetSampleAverage");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetSampleAverage) == 0x000018, "Wrong size on PilgrimPerformanceTrackerComponent_GetSampleAverage");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetSampleAverage, Samples) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetSampleAverage::Samples' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetSampleAverage, ReturnValue) == 0x000010, "Member 'PilgrimPerformanceTrackerComponent_GetSampleAverage::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetSampleDeviation
// 0x0018 (0x0018 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetSampleDeviation final
{
public:
	TArray<float>                                 Samples;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsPopulation;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetSampleDeviation) == 0x000008, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetSampleDeviation");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetSampleDeviation) == 0x000018, "Wrong size on PilgrimPerformanceTrackerComponent_GetSampleDeviation");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetSampleDeviation, Samples) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetSampleDeviation::Samples' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetSampleDeviation, IsPopulation) == 0x000010, "Member 'PilgrimPerformanceTrackerComponent_GetSampleDeviation::IsPopulation' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetSampleDeviation, ReturnValue) == 0x000014, "Member 'PilgrimPerformanceTrackerComponent_GetSampleDeviation::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent.GetTotalDeviation
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPerformanceTrackerComponent_GetTotalDeviation final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPerformanceTrackerComponent_GetTotalDeviation) == 0x000004, "Wrong alignment on PilgrimPerformanceTrackerComponent_GetTotalDeviation");
static_assert(sizeof(PilgrimPerformanceTrackerComponent_GetTotalDeviation) == 0x000008, "Wrong size on PilgrimPerformanceTrackerComponent_GetTotalDeviation");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetTotalDeviation, Timebase) == 0x000000, "Member 'PilgrimPerformanceTrackerComponent_GetTotalDeviation::Timebase' has a wrong offset!");
static_assert(offsetof(PilgrimPerformanceTrackerComponent_GetTotalDeviation, ReturnValue) == 0x000004, "Member 'PilgrimPerformanceTrackerComponent_GetTotalDeviation::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetHoldSecondsToSwitchNumLanes
// 0x0004 (0x0004 - 0x0000)
struct PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes) == 0x000004, "Wrong alignment on PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes) == 0x000004, "Wrong size on PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetHoldSecondsToSwitchNumLanes::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetPilgrimGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings final
{
public:
	class UPilgrimGameUserSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetPilgrimGameUserSettings::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.OnPilgrimGameEnd
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_OnPilgrimGameEnd final
{
public:
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_OnPilgrimGameEnd) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_OnPilgrimGameEnd");
static_assert(sizeof(PilgrimPlayerControllerComponent_OnPilgrimGameEnd) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_OnPilgrimGameEnd");
static_assert(offsetof(PilgrimPlayerControllerComponent_OnPilgrimGameEnd, PilgrimGame) == 0x000000, "Member 'PilgrimPlayerControllerComponent_OnPilgrimGameEnd::PilgrimGame' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.OnPilgrimGameStart
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_OnPilgrimGameStart final
{
public:
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_OnPilgrimGameStart) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_OnPilgrimGameStart");
static_assert(sizeof(PilgrimPlayerControllerComponent_OnPilgrimGameStart) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_OnPilgrimGameStart");
static_assert(offsetof(PilgrimPlayerControllerComponent_OnPilgrimGameStart, PilgrimGame) == 0x000000, "Member 'PilgrimPlayerControllerComponent_OnPilgrimGameStart::PilgrimGame' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.SendUpdateToMusicBattle
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_SendUpdateToMusicBattle final
{
public:
	EMusicBattleClientUpdate                      MusicBattleUpdate;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_SendUpdateToMusicBattle) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_SendUpdateToMusicBattle");
static_assert(sizeof(PilgrimPlayerControllerComponent_SendUpdateToMusicBattle) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_SendUpdateToMusicBattle");
static_assert(offsetof(PilgrimPlayerControllerComponent_SendUpdateToMusicBattle, MusicBattleUpdate) == 0x000000, "Member 'PilgrimPlayerControllerComponent_SendUpdateToMusicBattle::MusicBattleUpdate' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.ServerHandleStateMachineRequest
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest final
{
public:
	EPilgrimStateMachineMessage                   StateMachineMessage;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest");
static_assert(sizeof(PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest");
static_assert(offsetof(PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest, StateMachineMessage) == 0x000000, "Member 'PilgrimPlayerControllerComponent_ServerHandleStateMachineRequest::StateMachineMessage' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.ServerHandleUpdateMusicBattle
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle final
{
public:
	EMusicBattleClientUpdate                      MusicBattleUpdate;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle");
static_assert(sizeof(PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle");
static_assert(offsetof(PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle, MusicBattleUpdate) == 0x000000, "Member 'PilgrimPlayerControllerComponent_ServerHandleUpdateMusicBattle::MusicBattleUpdate' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.ServerSendTimedInput
// 0x000C (0x000C - 0x0000)
struct PilgrimPlayerControllerComponent_ServerSendTimedInput final
{
public:
	struct FPilgrimTimedInput                     TimedInput;                                        // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_ServerSendTimedInput) == 0x000004, "Wrong alignment on PilgrimPlayerControllerComponent_ServerSendTimedInput");
static_assert(sizeof(PilgrimPlayerControllerComponent_ServerSendTimedInput) == 0x00000C, "Wrong size on PilgrimPlayerControllerComponent_ServerSendTimedInput");
static_assert(offsetof(PilgrimPlayerControllerComponent_ServerSendTimedInput, TimedInput) == 0x000000, "Member 'PilgrimPlayerControllerComponent_ServerSendTimedInput::TimedInput' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.ServerSetPlasticInstrumentsPluggedIn
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn final
{
public:
	bool                                          bIsPlasticPluggedIn;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn");
static_assert(sizeof(PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn");
static_assert(offsetof(PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn, bIsPlasticPluggedIn) == 0x000000, "Member 'PilgrimPlayerControllerComponent_ServerSetPlasticInstrumentsPluggedIn::bIsPlasticPluggedIn' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.SetDesiredInputMappingContext
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayerControllerComponent_SetDesiredInputMappingContext final
{
public:
	class UFortInputMappingContext*               NewContext;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHardwareDevicePrimaryType                    DeviceType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUpdateSettings;                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPlayerControllerComponent_SetDesiredInputMappingContext) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_SetDesiredInputMappingContext");
static_assert(sizeof(PilgrimPlayerControllerComponent_SetDesiredInputMappingContext) == 0x000010, "Wrong size on PilgrimPlayerControllerComponent_SetDesiredInputMappingContext");
static_assert(offsetof(PilgrimPlayerControllerComponent_SetDesiredInputMappingContext, NewContext) == 0x000000, "Member 'PilgrimPlayerControllerComponent_SetDesiredInputMappingContext::NewContext' has a wrong offset!");
static_assert(offsetof(PilgrimPlayerControllerComponent_SetDesiredInputMappingContext, DeviceType) == 0x000008, "Member 'PilgrimPlayerControllerComponent_SetDesiredInputMappingContext::DeviceType' has a wrong offset!");
static_assert(offsetof(PilgrimPlayerControllerComponent_SetDesiredInputMappingContext, bShouldUpdateSettings) == 0x000009, "Member 'PilgrimPlayerControllerComponent_SetDesiredInputMappingContext::bShouldUpdateSettings' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.SetNumInputLanes
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_SetNumInputLanes final
{
public:
	uint8                                         NumLanes;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_SetNumInputLanes) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_SetNumInputLanes");
static_assert(sizeof(PilgrimPlayerControllerComponent_SetNumInputLanes) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_SetNumInputLanes");
static_assert(offsetof(PilgrimPlayerControllerComponent_SetNumInputLanes, NumLanes) == 0x000000, "Member 'PilgrimPlayerControllerComponent_SetNumInputLanes::NumLanes' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.AreSelectedInputMappingContextsActive
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive");
static_assert(sizeof(PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive");
static_assert(offsetof(PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_AreSelectedInputMappingContextsActive::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.FindFirstPresetMatchingCurrentKeybinds
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds final
{
public:
	class UFortInputMappingContext*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds");
static_assert(sizeof(PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds");
static_assert(offsetof(PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_FindFirstPresetMatchingCurrentKeybinds::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetCurrentPresetIndex
// 0x0004 (0x0004 - 0x0000)
struct PilgrimPlayerControllerComponent_GetCurrentPresetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetCurrentPresetIndex) == 0x000004, "Wrong alignment on PilgrimPlayerControllerComponent_GetCurrentPresetIndex");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetCurrentPresetIndex) == 0x000004, "Wrong size on PilgrimPlayerControllerComponent_GetCurrentPresetIndex");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetCurrentPresetIndex, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetCurrentPresetIndex::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetLastSelectedPreset
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetLastSelectedPreset final
{
public:
	class UFortInputMappingContext*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetLastSelectedPreset) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetLastSelectedPreset");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetLastSelectedPreset) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetLastSelectedPreset");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetLastSelectedPreset, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetLastSelectedPreset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetNumRelevantInputPresets
// 0x0004 (0x0004 - 0x0000)
struct PilgrimPlayerControllerComponent_GetNumRelevantInputPresets final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetNumRelevantInputPresets) == 0x000004, "Wrong alignment on PilgrimPlayerControllerComponent_GetNumRelevantInputPresets");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetNumRelevantInputPresets) == 0x000004, "Wrong size on PilgrimPlayerControllerComponent_GetNumRelevantInputPresets");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetNumRelevantInputPresets, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetNumRelevantInputPresets::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetPilgrimClientSettingRecordPartition
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition final
{
public:
	class UPilgrimClientSettingRecordPartition*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetPilgrimClientSettingRecordPartition::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetSelectedConsoleBeamatchInputMappingContext
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext final
{
public:
	class UFortInputMappingContext*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetSelectedConsoleBeamatchInputMappingContext::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetSelectedPCBeamatchInputMappingContext
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext final
{
public:
	class UFortInputMappingContext*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetSelectedPCBeamatchInputMappingContext::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetSelectedPreset
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayerControllerComponent_GetSelectedPreset final
{
public:
	class UFortInputMappingContext*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetSelectedPreset) == 0x000008, "Wrong alignment on PilgrimPlayerControllerComponent_GetSelectedPreset");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetSelectedPreset) == 0x000008, "Wrong size on PilgrimPlayerControllerComponent_GetSelectedPreset");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetSelectedPreset, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetSelectedPreset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.GetTouchBrushForInputAction
// 0x00D0 (0x00D0 - 0x0000)
struct PilgrimPlayerControllerComponent_GetTouchBrushForInputAction final
{
public:
	struct FSlateBrush                            OutBrush;                                          // 0x0000(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x00C0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPlayerControllerComponent_GetTouchBrushForInputAction) == 0x000010, "Wrong alignment on PilgrimPlayerControllerComponent_GetTouchBrushForInputAction");
static_assert(sizeof(PilgrimPlayerControllerComponent_GetTouchBrushForInputAction) == 0x0000D0, "Wrong size on PilgrimPlayerControllerComponent_GetTouchBrushForInputAction");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetTouchBrushForInputAction, OutBrush) == 0x000000, "Member 'PilgrimPlayerControllerComponent_GetTouchBrushForInputAction::OutBrush' has a wrong offset!");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetTouchBrushForInputAction, InputAction) == 0x0000C0, "Member 'PilgrimPlayerControllerComponent_GetTouchBrushForInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(PilgrimPlayerControllerComponent_GetTouchBrushForInputAction, ReturnValue) == 0x0000C8, "Member 'PilgrimPlayerControllerComponent_GetTouchBrushForInputAction::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_IsLocallyControlled) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_IsLocallyControlled");
static_assert(sizeof(PilgrimPlayerControllerComponent_IsLocallyControlled) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_IsLocallyControlled");
static_assert(offsetof(PilgrimPlayerControllerComponent_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayerControllerComponent.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayerControllerComponent_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayerControllerComponent_IsUsingGamepad) == 0x000001, "Wrong alignment on PilgrimPlayerControllerComponent_IsUsingGamepad");
static_assert(sizeof(PilgrimPlayerControllerComponent_IsUsingGamepad) == 0x000001, "Wrong size on PilgrimPlayerControllerComponent_IsUsingGamepad");
static_assert(offsetof(PilgrimPlayerControllerComponent_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'PilgrimPlayerControllerComponent_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetMusicClock
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetMusicClock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetMusicClock) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetMusicClock");
static_assert(sizeof(PilgrimPlayspace_GetMusicClock) == 0x000010, "Wrong size on PilgrimPlayspace_GetMusicClock");
static_assert(offsetof(PilgrimPlayspace_GetMusicClock, WorldContextObject) == 0x000000, "Member 'PilgrimPlayspace_GetMusicClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_GetMusicClock, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_GetMusicClock::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetNetworkedMusicClockManager
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetNetworkedMusicClockManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetworkedMusicClockManager*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetNetworkedMusicClockManager) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetNetworkedMusicClockManager");
static_assert(sizeof(PilgrimPlayspace_GetNetworkedMusicClockManager) == 0x000010, "Wrong size on PilgrimPlayspace_GetNetworkedMusicClockManager");
static_assert(offsetof(PilgrimPlayspace_GetNetworkedMusicClockManager, WorldContextObject) == 0x000000, "Member 'PilgrimPlayspace_GetNetworkedMusicClockManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_GetNetworkedMusicClockManager, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_GetNetworkedMusicClockManager::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.AddMusicBattleInstance
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayspace_AddMusicBattleInstance final
{
public:
	class APilgrimMusicBattleInstance*            MusicBattleInstance;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_AddMusicBattleInstance) == 0x000008, "Wrong alignment on PilgrimPlayspace_AddMusicBattleInstance");
static_assert(sizeof(PilgrimPlayspace_AddMusicBattleInstance) == 0x000008, "Wrong size on PilgrimPlayspace_AddMusicBattleInstance");
static_assert(offsetof(PilgrimPlayspace_AddMusicBattleInstance, MusicBattleInstance) == 0x000000, "Member 'PilgrimPlayspace_AddMusicBattleInstance::MusicBattleInstance' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.BroadcastCameraDirectorDynamicEvent
// 0x0030 (0x0030 - 0x0000)
struct PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent final
{
public:
	struct FGameplayTagContainer                  TagsToSend;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotTimeLength;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForTransition;                                // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent) == 0x000008, "Wrong alignment on PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent");
static_assert(sizeof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent) == 0x000030, "Wrong size on PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent");
static_assert(offsetof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent, TagsToSend) == 0x000000, "Member 'PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent::TagsToSend' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent, Target) == 0x000020, "Member 'PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent::Target' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent, ShotTimeLength) == 0x000028, "Member 'PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent::ShotTimeLength' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent, bWaitForTransition) == 0x00002C, "Member 'PilgrimPlayspace_BroadcastCameraDirectorDynamicEvent::bWaitForTransition' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.BroadcastCameraDirectorIntermissionEvent
// 0x0020 (0x0020 - 0x0000)
struct PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent final
{
public:
	struct FGameplayTagContainer                  TagsToSend;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent) == 0x000008, "Wrong alignment on PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent");
static_assert(sizeof(PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent) == 0x000020, "Wrong size on PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent");
static_assert(offsetof(PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent, TagsToSend) == 0x000000, "Member 'PilgrimPlayspace_BroadcastCameraDirectorIntermissionEvent::TagsToSend' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetAllMusicBattleInstances
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetAllMusicBattleInstances final
{
public:
	TArray<class APilgrimMusicBattleInstance*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetAllMusicBattleInstances) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetAllMusicBattleInstances");
static_assert(sizeof(PilgrimPlayspace_GetAllMusicBattleInstances) == 0x000010, "Wrong size on PilgrimPlayspace_GetAllMusicBattleInstances");
static_assert(offsetof(PilgrimPlayspace_GetAllMusicBattleInstances, ReturnValue) == 0x000000, "Member 'PilgrimPlayspace_GetAllMusicBattleInstances::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetConfig
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayspace_GetConfig final
{
public:
	const class UPilgrimGameConfig*               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetConfig) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetConfig");
static_assert(sizeof(PilgrimPlayspace_GetConfig) == 0x000008, "Wrong size on PilgrimPlayspace_GetConfig");
static_assert(offsetof(PilgrimPlayspace_GetConfig, ReturnValue) == 0x000000, "Member 'PilgrimPlayspace_GetConfig::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetMusicBattleInstanceForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetMusicBattleInstanceForPlayer final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APilgrimMusicBattleInstance*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetMusicBattleInstanceForPlayer) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetMusicBattleInstanceForPlayer");
static_assert(sizeof(PilgrimPlayspace_GetMusicBattleInstanceForPlayer) == 0x000010, "Wrong size on PilgrimPlayspace_GetMusicBattleInstanceForPlayer");
static_assert(offsetof(PilgrimPlayspace_GetMusicBattleInstanceForPlayer, Controller) == 0x000000, "Member 'PilgrimPlayspace_GetMusicBattleInstanceForPlayer::Controller' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_GetMusicBattleInstanceForPlayer, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_GetMusicBattleInstanceForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetMusicBattleInstanceForTeam
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetMusicBattleInstanceForTeam final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APilgrimMusicBattleInstance*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetMusicBattleInstanceForTeam) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetMusicBattleInstanceForTeam");
static_assert(sizeof(PilgrimPlayspace_GetMusicBattleInstanceForTeam) == 0x000010, "Wrong size on PilgrimPlayspace_GetMusicBattleInstanceForTeam");
static_assert(offsetof(PilgrimPlayspace_GetMusicBattleInstanceForTeam, Team) == 0x000000, "Member 'PilgrimPlayspace_GetMusicBattleInstanceForTeam::Team' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_GetMusicBattleInstanceForTeam, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_GetMusicBattleInstanceForTeam::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetPilgrimGameForTeam
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetPilgrimGameForTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimGame*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetPilgrimGameForTeam) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetPilgrimGameForTeam");
static_assert(sizeof(PilgrimPlayspace_GetPilgrimGameForTeam) == 0x000010, "Wrong size on PilgrimPlayspace_GetPilgrimGameForTeam");
static_assert(offsetof(PilgrimPlayspace_GetPilgrimGameForTeam, TeamIndex) == 0x000000, "Member 'PilgrimPlayspace_GetPilgrimGameForTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_GetPilgrimGameForTeam, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_GetPilgrimGameForTeam::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetStandinPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetStandinPlayerPawns final
{
public:
	TArray<class AFortPlayerPawnAthena*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetStandinPlayerPawns) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetStandinPlayerPawns");
static_assert(sizeof(PilgrimPlayspace_GetStandinPlayerPawns) == 0x000010, "Wrong size on PilgrimPlayspace_GetStandinPlayerPawns");
static_assert(offsetof(PilgrimPlayspace_GetStandinPlayerPawns, ReturnValue) == 0x000000, "Member 'PilgrimPlayspace_GetStandinPlayerPawns::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.GetStandinPlayerStates
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_GetStandinPlayerStates final
{
public:
	TArray<class AFortPlayerStateAthena*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_GetStandinPlayerStates) == 0x000008, "Wrong alignment on PilgrimPlayspace_GetStandinPlayerStates");
static_assert(sizeof(PilgrimPlayspace_GetStandinPlayerStates) == 0x000010, "Wrong size on PilgrimPlayspace_GetStandinPlayerStates");
static_assert(offsetof(PilgrimPlayspace_GetStandinPlayerStates, ReturnValue) == 0x000000, "Member 'PilgrimPlayspace_GetStandinPlayerStates::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.HasAnotherSongToPlay
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayspace_HasAnotherSongToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_HasAnotherSongToPlay) == 0x000001, "Wrong alignment on PilgrimPlayspace_HasAnotherSongToPlay");
static_assert(sizeof(PilgrimPlayspace_HasAnotherSongToPlay) == 0x000001, "Wrong size on PilgrimPlayspace_HasAnotherSongToPlay");
static_assert(offsetof(PilgrimPlayspace_HasAnotherSongToPlay, ReturnValue) == 0x000000, "Member 'PilgrimPlayspace_HasAnotherSongToPlay::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.TryGetMusicBattleInstanceForTeam
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_TryGetMusicBattleInstanceForTeam final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APilgrimMusicBattleInstance*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_TryGetMusicBattleInstanceForTeam) == 0x000008, "Wrong alignment on PilgrimPlayspace_TryGetMusicBattleInstanceForTeam");
static_assert(sizeof(PilgrimPlayspace_TryGetMusicBattleInstanceForTeam) == 0x000010, "Wrong size on PilgrimPlayspace_TryGetMusicBattleInstanceForTeam");
static_assert(offsetof(PilgrimPlayspace_TryGetMusicBattleInstanceForTeam, Team) == 0x000000, "Member 'PilgrimPlayspace_TryGetMusicBattleInstanceForTeam::Team' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_TryGetMusicBattleInstanceForTeam, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_TryGetMusicBattleInstanceForTeam::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.TryGetPilgrimGameForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_TryGetPilgrimGameForPlayer final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimGame*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_TryGetPilgrimGameForPlayer) == 0x000008, "Wrong alignment on PilgrimPlayspace_TryGetPilgrimGameForPlayer");
static_assert(sizeof(PilgrimPlayspace_TryGetPilgrimGameForPlayer) == 0x000010, "Wrong size on PilgrimPlayspace_TryGetPilgrimGameForPlayer");
static_assert(offsetof(PilgrimPlayspace_TryGetPilgrimGameForPlayer, Controller) == 0x000000, "Member 'PilgrimPlayspace_TryGetPilgrimGameForPlayer::Controller' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_TryGetPilgrimGameForPlayer, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_TryGetPilgrimGameForPlayer::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspace.TryGetPilgrimGameForTeam
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspace_TryGetPilgrimGameForTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimGame*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspace_TryGetPilgrimGameForTeam) == 0x000008, "Wrong alignment on PilgrimPlayspace_TryGetPilgrimGameForTeam");
static_assert(sizeof(PilgrimPlayspace_TryGetPilgrimGameForTeam) == 0x000010, "Wrong size on PilgrimPlayspace_TryGetPilgrimGameForTeam");
static_assert(offsetof(PilgrimPlayspace_TryGetPilgrimGameForTeam, TeamIndex) == 0x000000, "Member 'PilgrimPlayspace_TryGetPilgrimGameForTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspace_TryGetPilgrimGameForTeam, ReturnValue) == 0x000008, "Member 'PilgrimPlayspace_TryGetPilgrimGameForTeam::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPresetConfiguration.GetDeviceInputMappingContexts
// 0x0018 (0x0018 - 0x0000)
struct PilgrimPresetConfiguration_GetDeviceInputMappingContexts final
{
public:
	int32                                         NumLanes;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHardwareDevicePrimaryType                    DeviceType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortInputMappingContext*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPresetConfiguration_GetDeviceInputMappingContexts) == 0x000008, "Wrong alignment on PilgrimPresetConfiguration_GetDeviceInputMappingContexts");
static_assert(sizeof(PilgrimPresetConfiguration_GetDeviceInputMappingContexts) == 0x000018, "Wrong size on PilgrimPresetConfiguration_GetDeviceInputMappingContexts");
static_assert(offsetof(PilgrimPresetConfiguration_GetDeviceInputMappingContexts, NumLanes) == 0x000000, "Member 'PilgrimPresetConfiguration_GetDeviceInputMappingContexts::NumLanes' has a wrong offset!");
static_assert(offsetof(PilgrimPresetConfiguration_GetDeviceInputMappingContexts, DeviceType) == 0x000004, "Member 'PilgrimPresetConfiguration_GetDeviceInputMappingContexts::DeviceType' has a wrong offset!");
static_assert(offsetof(PilgrimPresetConfiguration_GetDeviceInputMappingContexts, ReturnValue) == 0x000008, "Member 'PilgrimPresetConfiguration_GetDeviceInputMappingContexts::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimQuestLibrary.GetFilteredQuests
// 0x00C8 (0x00C8 - 0x0000)
struct PilgrimQuestLibrary_GetFilteredQuests final
{
public:
	TArray<TScriptInterface<class IQuestInstanceInterface>> OutQuests;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	const class APlayerState*                     Player;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimQuestFilter                    Filter;                                            // 0x0018(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuestLibrary_GetFilteredQuests) == 0x000008, "Wrong alignment on PilgrimQuestLibrary_GetFilteredQuests");
static_assert(sizeof(PilgrimQuestLibrary_GetFilteredQuests) == 0x0000C8, "Wrong size on PilgrimQuestLibrary_GetFilteredQuests");
static_assert(offsetof(PilgrimQuestLibrary_GetFilteredQuests, OutQuests) == 0x000000, "Member 'PilgrimQuestLibrary_GetFilteredQuests::OutQuests' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_GetFilteredQuests, Player) == 0x000010, "Member 'PilgrimQuestLibrary_GetFilteredQuests::Player' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_GetFilteredQuests, Filter) == 0x000018, "Member 'PilgrimQuestLibrary_GetFilteredQuests::Filter' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimQuestLibrary.GetQuestDisplayInfo
// 0x00A8 (0x00A8 - 0x0000)
struct PilgrimQuestLibrary_GetQuestDisplayInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IQuestInstanceInterface> Quest;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimQuestDisplayInfo               ReturnValue;                                       // 0x0018(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuestLibrary_GetQuestDisplayInfo) == 0x000008, "Wrong alignment on PilgrimQuestLibrary_GetQuestDisplayInfo");
static_assert(sizeof(PilgrimQuestLibrary_GetQuestDisplayInfo) == 0x0000A8, "Wrong size on PilgrimQuestLibrary_GetQuestDisplayInfo");
static_assert(offsetof(PilgrimQuestLibrary_GetQuestDisplayInfo, WorldContextObject) == 0x000000, "Member 'PilgrimQuestLibrary_GetQuestDisplayInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_GetQuestDisplayInfo, Quest) == 0x000008, "Member 'PilgrimQuestLibrary_GetQuestDisplayInfo::Quest' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_GetQuestDisplayInfo, ReturnValue) == 0x000018, "Member 'PilgrimQuestLibrary_GetQuestDisplayInfo::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimQuestLibrary.QuestPassesFilter
// 0x00C8 (0x00C8 - 0x0000)
struct PilgrimQuestLibrary_QuestPassesFilter final
{
public:
	TScriptInterface<class IQuestInstanceInterface> QuestInterface;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimQuestFilter                    QuestFilter;                                       // 0x0010(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuestLibrary_QuestPassesFilter) == 0x000008, "Wrong alignment on PilgrimQuestLibrary_QuestPassesFilter");
static_assert(sizeof(PilgrimQuestLibrary_QuestPassesFilter) == 0x0000C8, "Wrong size on PilgrimQuestLibrary_QuestPassesFilter");
static_assert(offsetof(PilgrimQuestLibrary_QuestPassesFilter, QuestInterface) == 0x000000, "Member 'PilgrimQuestLibrary_QuestPassesFilter::QuestInterface' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_QuestPassesFilter, QuestFilter) == 0x000010, "Member 'PilgrimQuestLibrary_QuestPassesFilter::QuestFilter' has a wrong offset!");
static_assert(offsetof(PilgrimQuestLibrary_QuestPassesFilter, ReturnValue) == 0x0000C0, "Member 'PilgrimQuestLibrary_QuestPassesFilter::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimRandomSetlist.PopulateRandomSongs
// 0x0008 (0x0008 - 0x0000)
struct PilgrimRandomSetlist_PopulateRandomSongs final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimRandomSetlist_PopulateRandomSongs) == 0x000008, "Wrong alignment on PilgrimRandomSetlist_PopulateRandomSongs");
static_assert(sizeof(PilgrimRandomSetlist_PopulateRandomSongs) == 0x000008, "Wrong size on PilgrimRandomSetlist_PopulateRandomSongs");
static_assert(offsetof(PilgrimRandomSetlist_PopulateRandomSongs, WorldContextObject) == 0x000000, "Member 'PilgrimRandomSetlist_PopulateRandomSongs::WorldContextObject' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimRenderTargetComponent.CropTargetAndGetProjectionMatrix
// 0x00A0 (0x00A0 - 0x0000)
struct PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix final
{
public:
	struct FVector4f                              InLeftTopRightBottom;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0020(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix) == 0x000010, "Wrong alignment on PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix");
static_assert(sizeof(PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix) == 0x0000A0, "Wrong size on PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix");
static_assert(offsetof(PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix, InLeftTopRightBottom) == 0x000000, "Member 'PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix::InLeftTopRightBottom' has a wrong offset!");
static_assert(offsetof(PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix, FOV) == 0x000010, "Member 'PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix::FOV' has a wrong offset!");
static_assert(offsetof(PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix, ReturnValue) == 0x000020, "Member 'PilgrimRenderTargetComponent_CropTargetAndGetProjectionMatrix::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimRenderTargetComponent.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct PilgrimRenderTargetComponent_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimRenderTargetComponent_GetRenderTarget) == 0x000008, "Wrong alignment on PilgrimRenderTargetComponent_GetRenderTarget");
static_assert(sizeof(PilgrimRenderTargetComponent_GetRenderTarget) == 0x000008, "Wrong size on PilgrimRenderTargetComponent_GetRenderTarget");
static_assert(offsetof(PilgrimRenderTargetComponent_GetRenderTarget, ReturnValue) == 0x000000, "Member 'PilgrimRenderTargetComponent_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimRenderTargetComponent.GetLeftTopRightBottom
// 0x0010 (0x0010 - 0x0000)
struct PilgrimRenderTargetComponent_GetLeftTopRightBottom final
{
public:
	struct FVector4f                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimRenderTargetComponent_GetLeftTopRightBottom) == 0x000010, "Wrong alignment on PilgrimRenderTargetComponent_GetLeftTopRightBottom");
static_assert(sizeof(PilgrimRenderTargetComponent_GetLeftTopRightBottom) == 0x000010, "Wrong size on PilgrimRenderTargetComponent_GetLeftTopRightBottom");
static_assert(offsetof(PilgrimRenderTargetComponent_GetLeftTopRightBottom, ReturnValue) == 0x000000, "Member 'PilgrimRenderTargetComponent_GetLeftTopRightBottom::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimRenderTargetComponent.GetUVScaleOffset
// 0x0010 (0x0010 - 0x0000)
struct PilgrimRenderTargetComponent_GetUVScaleOffset final
{
public:
	struct FVector4f                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimRenderTargetComponent_GetUVScaleOffset) == 0x000010, "Wrong alignment on PilgrimRenderTargetComponent_GetUVScaleOffset");
static_assert(sizeof(PilgrimRenderTargetComponent_GetUVScaleOffset) == 0x000010, "Wrong size on PilgrimRenderTargetComponent_GetUVScaleOffset");
static_assert(offsetof(PilgrimRenderTargetComponent_GetUVScaleOffset, ReturnValue) == 0x000000, "Member 'PilgrimRenderTargetComponent_GetUVScaleOffset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeMaxScore
// 0x0020 (0x0020 - 0x0000)
struct PilgrimScoringModel_ComputeMaxScore final
{
public:
	TArray<struct FTrackItemInfo>                 Gems;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPilgrimSongData*                 SongData;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimScoringModel_ComputeMaxScore) == 0x000008, "Wrong alignment on PilgrimScoringModel_ComputeMaxScore");
static_assert(sizeof(PilgrimScoringModel_ComputeMaxScore) == 0x000020, "Wrong size on PilgrimScoringModel_ComputeMaxScore");
static_assert(offsetof(PilgrimScoringModel_ComputeMaxScore, Gems) == 0x000000, "Member 'PilgrimScoringModel_ComputeMaxScore::Gems' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeMaxScore, SongData) == 0x000010, "Member 'PilgrimScoringModel_ComputeMaxScore::SongData' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeMaxScore, ReturnValue) == 0x000018, "Member 'PilgrimScoringModel_ComputeMaxScore::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeAccuracyMultiplier
// 0x0040 (0x0040 - 0x0000)
struct PilgrimScoringModel_ComputeAccuracyMultiplier final
{
public:
	EPilgrimScoringMode                           ScoringMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGemHitAccuracy                 Accuracy;                                          // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimScoringModel_ComputeAccuracyMultiplier) == 0x000008, "Wrong alignment on PilgrimScoringModel_ComputeAccuracyMultiplier");
static_assert(sizeof(PilgrimScoringModel_ComputeAccuracyMultiplier) == 0x000040, "Wrong size on PilgrimScoringModel_ComputeAccuracyMultiplier");
static_assert(offsetof(PilgrimScoringModel_ComputeAccuracyMultiplier, ScoringMode) == 0x000000, "Member 'PilgrimScoringModel_ComputeAccuracyMultiplier::ScoringMode' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeAccuracyMultiplier, Accuracy) == 0x000008, "Member 'PilgrimScoringModel_ComputeAccuracyMultiplier::Accuracy' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeAccuracyMultiplier, ReturnValue) == 0x000038, "Member 'PilgrimScoringModel_ComputeAccuracyMultiplier::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeGemBaseScoreValue
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModel_ComputeGemBaseScoreValue final
{
public:
	EPilgrimScoringMode                           ScoringMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModel_ComputeGemBaseScoreValue) == 0x000004, "Wrong alignment on PilgrimScoringModel_ComputeGemBaseScoreValue");
static_assert(sizeof(PilgrimScoringModel_ComputeGemBaseScoreValue) == 0x000008, "Wrong size on PilgrimScoringModel_ComputeGemBaseScoreValue");
static_assert(offsetof(PilgrimScoringModel_ComputeGemBaseScoreValue, ScoringMode) == 0x000000, "Member 'PilgrimScoringModel_ComputeGemBaseScoreValue::ScoringMode' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeGemBaseScoreValue, ReturnValue) == 0x000004, "Member 'PilgrimScoringModel_ComputeGemBaseScoreValue::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeOverdriveMultiplier
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModel_ComputeOverdriveMultiplier final
{
public:
	EPilgrimScoringMode                           ScoringMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModel_ComputeOverdriveMultiplier) == 0x000004, "Wrong alignment on PilgrimScoringModel_ComputeOverdriveMultiplier");
static_assert(sizeof(PilgrimScoringModel_ComputeOverdriveMultiplier) == 0x000008, "Wrong size on PilgrimScoringModel_ComputeOverdriveMultiplier");
static_assert(offsetof(PilgrimScoringModel_ComputeOverdriveMultiplier, ScoringMode) == 0x000000, "Member 'PilgrimScoringModel_ComputeOverdriveMultiplier::ScoringMode' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeOverdriveMultiplier, ReturnValue) == 0x000004, "Member 'PilgrimScoringModel_ComputeOverdriveMultiplier::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeStreakMultiplier
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModel_ComputeStreakMultiplier final
{
public:
	EPilgrimScoringMode                           ScoringMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModel_ComputeStreakMultiplier) == 0x000004, "Wrong alignment on PilgrimScoringModel_ComputeStreakMultiplier");
static_assert(sizeof(PilgrimScoringModel_ComputeStreakMultiplier) == 0x000008, "Wrong size on PilgrimScoringModel_ComputeStreakMultiplier");
static_assert(offsetof(PilgrimScoringModel_ComputeStreakMultiplier, ScoringMode) == 0x000000, "Member 'PilgrimScoringModel_ComputeStreakMultiplier::ScoringMode' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeStreakMultiplier, ReturnValue) == 0x000004, "Member 'PilgrimScoringModel_ComputeStreakMultiplier::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.ComputeSustainScorePerBeat
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModel_ComputeSustainScorePerBeat final
{
public:
	EPilgrimScoringMode                           ScoringMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModel_ComputeSustainScorePerBeat) == 0x000004, "Wrong alignment on PilgrimScoringModel_ComputeSustainScorePerBeat");
static_assert(sizeof(PilgrimScoringModel_ComputeSustainScorePerBeat) == 0x000008, "Wrong size on PilgrimScoringModel_ComputeSustainScorePerBeat");
static_assert(offsetof(PilgrimScoringModel_ComputeSustainScorePerBeat, ScoringMode) == 0x000000, "Member 'PilgrimScoringModel_ComputeSustainScorePerBeat::ScoringMode' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_ComputeSustainScorePerBeat, ReturnValue) == 0x000004, "Member 'PilgrimScoringModel_ComputeSustainScorePerBeat::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModel.GetScoreRequiredForStar
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModel_GetScoreRequiredForStar final
{
public:
	int32                                         Stars;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModel_GetScoreRequiredForStar) == 0x000004, "Wrong alignment on PilgrimScoringModel_GetScoreRequiredForStar");
static_assert(sizeof(PilgrimScoringModel_GetScoreRequiredForStar) == 0x000008, "Wrong size on PilgrimScoringModel_GetScoreRequiredForStar");
static_assert(offsetof(PilgrimScoringModel_GetScoreRequiredForStar, Stars) == 0x000000, "Member 'PilgrimScoringModel_GetScoreRequiredForStar::Stars' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModel_GetScoreRequiredForStar, ReturnValue) == 0x000004, "Member 'PilgrimScoringModel_GetScoreRequiredForStar::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimScoringModifier.Apply
// 0x0008 (0x0008 - 0x0000)
struct PilgrimScoringModifier_Apply final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimScoringModifier_Apply) == 0x000004, "Wrong alignment on PilgrimScoringModifier_Apply");
static_assert(sizeof(PilgrimScoringModifier_Apply) == 0x000008, "Wrong size on PilgrimScoringModifier_Apply");
static_assert(offsetof(PilgrimScoringModifier_Apply, InputValue) == 0x000000, "Member 'PilgrimScoringModifier_Apply::InputValue' has a wrong offset!");
static_assert(offsetof(PilgrimScoringModifier_Apply, ReturnValue) == 0x000004, "Member 'PilgrimScoringModifier_Apply::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSetlistInterface.RemoveUnavailableSongs
// 0x0060 (0x0060 - 0x0000)
struct PilgrimSetlistInterface_RemoveUnavailableSongs final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayspaceUser                         ExcludedUser;                                      // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSetlistInterface_RemoveUnavailableSongs) == 0x000008, "Wrong alignment on PilgrimSetlistInterface_RemoveUnavailableSongs");
static_assert(sizeof(PilgrimSetlistInterface_RemoveUnavailableSongs) == 0x000060, "Wrong size on PilgrimSetlistInterface_RemoveUnavailableSongs");
static_assert(offsetof(PilgrimSetlistInterface_RemoveUnavailableSongs, WorldContextObject) == 0x000000, "Member 'PilgrimSetlistInterface_RemoveUnavailableSongs::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_RemoveUnavailableSongs, ExcludedUser) == 0x000008, "Member 'PilgrimSetlistInterface_RemoveUnavailableSongs::ExcludedUser' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSetlistInterface.GetNumSongs
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSetlistInterface_GetNumSongs final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimSetlistInterface_GetNumSongs) == 0x000008, "Wrong alignment on PilgrimSetlistInterface_GetNumSongs");
static_assert(sizeof(PilgrimSetlistInterface_GetNumSongs) == 0x000010, "Wrong size on PilgrimSetlistInterface_GetNumSongs");
static_assert(offsetof(PilgrimSetlistInterface_GetNumSongs, WorldContextObject) == 0x000000, "Member 'PilgrimSetlistInterface_GetNumSongs::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_GetNumSongs, ReturnValue) == 0x000008, "Member 'PilgrimSetlistInterface_GetNumSongs::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSetlistInterface.GetSetlistDuration
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSetlistInterface_GetSetlistDuration final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSetlistInterface_GetSetlistDuration) == 0x000008, "Wrong alignment on PilgrimSetlistInterface_GetSetlistDuration");
static_assert(sizeof(PilgrimSetlistInterface_GetSetlistDuration) == 0x000010, "Wrong size on PilgrimSetlistInterface_GetSetlistDuration");
static_assert(offsetof(PilgrimSetlistInterface_GetSetlistDuration, WorldContextObject) == 0x000000, "Member 'PilgrimSetlistInterface_GetSetlistDuration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_GetSetlistDuration, ReturnValue) == 0x000008, "Member 'PilgrimSetlistInterface_GetSetlistDuration::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSetlistInterface.GetSongAtIndex
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSetlistInterface_GetSongAtIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSetlistInterface_GetSongAtIndex) == 0x000008, "Wrong alignment on PilgrimSetlistInterface_GetSongAtIndex");
static_assert(sizeof(PilgrimSetlistInterface_GetSongAtIndex) == 0x000018, "Wrong size on PilgrimSetlistInterface_GetSongAtIndex");
static_assert(offsetof(PilgrimSetlistInterface_GetSongAtIndex, WorldContextObject) == 0x000000, "Member 'PilgrimSetlistInterface_GetSongAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_GetSongAtIndex, Index_0) == 0x000008, "Member 'PilgrimSetlistInterface_GetSongAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_GetSongAtIndex, ReturnValue) == 0x000010, "Member 'PilgrimSetlistInterface_GetSongAtIndex::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSetlistInterface.GetSongList
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSetlistInterface_GetSongList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPilgrimSongMetadata*>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSetlistInterface_GetSongList) == 0x000008, "Wrong alignment on PilgrimSetlistInterface_GetSongList");
static_assert(sizeof(PilgrimSetlistInterface_GetSongList) == 0x000018, "Wrong size on PilgrimSetlistInterface_GetSongList");
static_assert(offsetof(PilgrimSetlistInterface_GetSongList, WorldContextObject) == 0x000000, "Member 'PilgrimSetlistInterface_GetSongList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSetlistInterface_GetSongList, ReturnValue) == 0x000008, "Member 'PilgrimSetlistInterface_GetSongList::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.GetPilgrimSongCatalog
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongCatalog_GetPilgrimSongCatalog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongCatalog*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_GetPilgrimSongCatalog) == 0x000008, "Wrong alignment on PilgrimSongCatalog_GetPilgrimSongCatalog");
static_assert(sizeof(PilgrimSongCatalog_GetPilgrimSongCatalog) == 0x000010, "Wrong size on PilgrimSongCatalog_GetPilgrimSongCatalog");
static_assert(offsetof(PilgrimSongCatalog_GetPilgrimSongCatalog, WorldContextObject) == 0x000000, "Member 'PilgrimSongCatalog_GetPilgrimSongCatalog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetPilgrimSongCatalog, ReturnValue) == 0x000008, "Member 'PilgrimSongCatalog_GetPilgrimSongCatalog::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.PlayerHasSongEntitlement
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSongCatalog_PlayerHasSongEntitlement final
{
public:
	const class AFortPlayerController*            Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPilgrimSongMetadata*             Song;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimSongCatalog_PlayerHasSongEntitlement) == 0x000008, "Wrong alignment on PilgrimSongCatalog_PlayerHasSongEntitlement");
static_assert(sizeof(PilgrimSongCatalog_PlayerHasSongEntitlement) == 0x000018, "Wrong size on PilgrimSongCatalog_PlayerHasSongEntitlement");
static_assert(offsetof(PilgrimSongCatalog_PlayerHasSongEntitlement, Player) == 0x000000, "Member 'PilgrimSongCatalog_PlayerHasSongEntitlement::Player' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_PlayerHasSongEntitlement, Song) == 0x000008, "Member 'PilgrimSongCatalog_PlayerHasSongEntitlement::Song' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_PlayerHasSongEntitlement, ReturnValue) == 0x000010, "Member 'PilgrimSongCatalog_PlayerHasSongEntitlement::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.OnCMSCatalogRetrieved
// 0x0001 (0x0001 - 0x0000)
struct PilgrimSongCatalog_OnCMSCatalogRetrieved final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_OnCMSCatalogRetrieved) == 0x000001, "Wrong alignment on PilgrimSongCatalog_OnCMSCatalogRetrieved");
static_assert(sizeof(PilgrimSongCatalog_OnCMSCatalogRetrieved) == 0x000001, "Wrong size on PilgrimSongCatalog_OnCMSCatalogRetrieved");
static_assert(offsetof(PilgrimSongCatalog_OnCMSCatalogRetrieved, bSuccess) == 0x000000, "Member 'PilgrimSongCatalog_OnCMSCatalogRetrieved::bSuccess' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.GetRandomSongList
// 0x0060 (0x0060 - 0x0000)
struct PilgrimSongCatalog_GetRandomSongList final
{
public:
	int32                                         NumSongs;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPilgrimSongMetadata*>           ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_GetRandomSongList) == 0x000008, "Wrong alignment on PilgrimSongCatalog_GetRandomSongList");
static_assert(sizeof(PilgrimSongCatalog_GetRandomSongList) == 0x000060, "Wrong size on PilgrimSongCatalog_GetRandomSongList");
static_assert(offsetof(PilgrimSongCatalog_GetRandomSongList, NumSongs) == 0x000000, "Member 'PilgrimSongCatalog_GetRandomSongList::NumSongs' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetRandomSongList, TagQuery) == 0x000008, "Member 'PilgrimSongCatalog_GetRandomSongList::TagQuery' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetRandomSongList, ReturnValue) == 0x000050, "Member 'PilgrimSongCatalog_GetRandomSongList::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.GetSongByMcpTemplateId
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSongCatalog_GetSongByMcpTemplateId final
{
public:
	class FString                                 McpTemplateId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_GetSongByMcpTemplateId) == 0x000008, "Wrong alignment on PilgrimSongCatalog_GetSongByMcpTemplateId");
static_assert(sizeof(PilgrimSongCatalog_GetSongByMcpTemplateId) == 0x000018, "Wrong size on PilgrimSongCatalog_GetSongByMcpTemplateId");
static_assert(offsetof(PilgrimSongCatalog_GetSongByMcpTemplateId, McpTemplateId) == 0x000000, "Member 'PilgrimSongCatalog_GetSongByMcpTemplateId::McpTemplateId' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetSongByMcpTemplateId, ReturnValue) == 0x000010, "Member 'PilgrimSongCatalog_GetSongByMcpTemplateId::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.GetSongByShortName
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongCatalog_GetSongByShortName final
{
public:
	class FName                                   ShortName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_GetSongByShortName) == 0x000008, "Wrong alignment on PilgrimSongCatalog_GetSongByShortName");
static_assert(sizeof(PilgrimSongCatalog_GetSongByShortName) == 0x000010, "Wrong size on PilgrimSongCatalog_GetSongByShortName");
static_assert(offsetof(PilgrimSongCatalog_GetSongByShortName, ShortName) == 0x000000, "Member 'PilgrimSongCatalog_GetSongByShortName::ShortName' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetSongByShortName, ReturnValue) == 0x000008, "Member 'PilgrimSongCatalog_GetSongByShortName::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.GetSortedSongList
// 0x0060 (0x0060 - 0x0000)
struct PilgrimSongCatalog_GetSortedSongList final
{
public:
	EPilgrimSongSortMethod                        SortMethod;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongSortDirection                     SortDirection;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPilgrimSongMetadata*>           ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongCatalog_GetSortedSongList) == 0x000008, "Wrong alignment on PilgrimSongCatalog_GetSortedSongList");
static_assert(sizeof(PilgrimSongCatalog_GetSortedSongList) == 0x000060, "Wrong size on PilgrimSongCatalog_GetSortedSongList");
static_assert(offsetof(PilgrimSongCatalog_GetSortedSongList, SortMethod) == 0x000000, "Member 'PilgrimSongCatalog_GetSortedSongList::SortMethod' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetSortedSongList, SortDirection) == 0x000001, "Member 'PilgrimSongCatalog_GetSortedSongList::SortDirection' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetSortedSongList, TagQuery) == 0x000008, "Member 'PilgrimSongCatalog_GetSortedSongList::TagQuery' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_GetSortedSongList, ReturnValue) == 0x000050, "Member 'PilgrimSongCatalog_GetSortedSongList::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongCatalog.IsSongShared
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongCatalog_IsSongShared final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimSongCatalog_IsSongShared) == 0x000008, "Wrong alignment on PilgrimSongCatalog_IsSongShared");
static_assert(sizeof(PilgrimSongCatalog_IsSongShared) == 0x000010, "Wrong size on PilgrimSongCatalog_IsSongShared");
static_assert(offsetof(PilgrimSongCatalog_IsSongShared, Player) == 0x000000, "Member 'PilgrimSongCatalog_IsSongShared::Player' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_IsSongShared, SongShortName) == 0x000008, "Member 'PilgrimSongCatalog_IsSongShared::SongShortName' has a wrong offset!");
static_assert(offsetof(PilgrimSongCatalog_IsSongShared, ReturnValue) == 0x00000C, "Member 'PilgrimSongCatalog_IsSongShared::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetAdditionalTags
// 0x0020 (0x0020 - 0x0000)
struct PilgrimSongMetadata_GetAdditionalTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetAdditionalTags) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetAdditionalTags");
static_assert(sizeof(PilgrimSongMetadata_GetAdditionalTags) == 0x000020, "Wrong size on PilgrimSongMetadata_GetAdditionalTags");
static_assert(offsetof(PilgrimSongMetadata_GetAdditionalTags, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetAdditionalTags::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetAlbumArt
// 0x0020 (0x0020 - 0x0000)
struct PilgrimSongMetadata_GetAlbumArt final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetAlbumArt) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetAlbumArt");
static_assert(sizeof(PilgrimSongMetadata_GetAlbumArt) == 0x000020, "Wrong size on PilgrimSongMetadata_GetAlbumArt");
static_assert(offsetof(PilgrimSongMetadata_GetAlbumArt, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetAlbumArt::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetAlbumArtUrl
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongMetadata_GetAlbumArtUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetAlbumArtUrl) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetAlbumArtUrl");
static_assert(sizeof(PilgrimSongMetadata_GetAlbumArtUrl) == 0x000010, "Wrong size on PilgrimSongMetadata_GetAlbumArtUrl");
static_assert(offsetof(PilgrimSongMetadata_GetAlbumArtUrl, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetAlbumArtUrl::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetArtist
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSongMetadata_GetArtist final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetArtist) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetArtist");
static_assert(sizeof(PilgrimSongMetadata_GetArtist) == 0x000018, "Wrong size on PilgrimSongMetadata_GetArtist");
static_assert(offsetof(PilgrimSongMetadata_GetArtist, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetArtist::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct PilgrimSongMetadata_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetDuration) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetDuration");
static_assert(sizeof(PilgrimSongMetadata_GetDuration) == 0x000008, "Wrong size on PilgrimSongMetadata_GetDuration");
static_assert(offsetof(PilgrimSongMetadata_GetDuration, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetDuration::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetIntensityPerInstrument
// 0x0050 (0x0050 - 0x0000)
struct PilgrimSongMetadata_GetIntensityPerInstrument final
{
public:
	TMap<EPilgrimTrackType, int32>                ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetIntensityPerInstrument) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetIntensityPerInstrument");
static_assert(sizeof(PilgrimSongMetadata_GetIntensityPerInstrument) == 0x000050, "Wrong size on PilgrimSongMetadata_GetIntensityPerInstrument");
static_assert(offsetof(PilgrimSongMetadata_GetIntensityPerInstrument, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetIntensityPerInstrument::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetLipSyncAnimAsset
// 0x0020 (0x0020 - 0x0000)
struct PilgrimSongMetadata_GetLipSyncAnimAsset final
{
public:
	TSoftObjectPtr<class UAnimSequence>           ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetLipSyncAnimAsset) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetLipSyncAnimAsset");
static_assert(sizeof(PilgrimSongMetadata_GetLipSyncAnimAsset) == 0x000020, "Wrong size on PilgrimSongMetadata_GetLipSyncAnimAsset");
static_assert(offsetof(PilgrimSongMetadata_GetLipSyncAnimAsset, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetLipSyncAnimAsset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetMappedIntensity
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongMetadata_GetMappedIntensity final
{
public:
	EPilgrimTrackType                             Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Min;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetMappedIntensity) == 0x000004, "Wrong alignment on PilgrimSongMetadata_GetMappedIntensity");
static_assert(sizeof(PilgrimSongMetadata_GetMappedIntensity) == 0x000010, "Wrong size on PilgrimSongMetadata_GetMappedIntensity");
static_assert(offsetof(PilgrimSongMetadata_GetMappedIntensity, Instrument) == 0x000000, "Member 'PilgrimSongMetadata_GetMappedIntensity::Instrument' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetMappedIntensity, Min) == 0x000004, "Member 'PilgrimSongMetadata_GetMappedIntensity::Min' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetMappedIntensity, Max) == 0x000008, "Member 'PilgrimSongMetadata_GetMappedIntensity::Max' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetMappedIntensity, ReturnValue) == 0x00000C, "Member 'PilgrimSongMetadata_GetMappedIntensity::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetMusicKey
// 0x0001 (0x0001 - 0x0000)
struct PilgrimSongMetadata_GetMusicKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetMusicKey) == 0x000001, "Wrong alignment on PilgrimSongMetadata_GetMusicKey");
static_assert(sizeof(PilgrimSongMetadata_GetMusicKey) == 0x000001, "Wrong size on PilgrimSongMetadata_GetMusicKey");
static_assert(offsetof(PilgrimSongMetadata_GetMusicKey, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetMusicKey::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetMusicMode
// 0x0001 (0x0001 - 0x0000)
struct PilgrimSongMetadata_GetMusicMode final
{
public:
	EMusicKeyMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetMusicMode) == 0x000001, "Wrong alignment on PilgrimSongMetadata_GetMusicMode");
static_assert(sizeof(PilgrimSongMetadata_GetMusicMode) == 0x000001, "Wrong size on PilgrimSongMetadata_GetMusicMode");
static_assert(offsetof(PilgrimSongMetadata_GetMusicMode, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetMusicMode::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetPreviewVUID
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongMetadata_GetPreviewVUID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetPreviewVUID) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetPreviewVUID");
static_assert(sizeof(PilgrimSongMetadata_GetPreviewVUID) == 0x000010, "Wrong size on PilgrimSongMetadata_GetPreviewVUID");
static_assert(offsetof(PilgrimSongMetadata_GetPreviewVUID, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetPreviewVUID::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetRawIntensity
// 0x0008 (0x0008 - 0x0000)
struct PilgrimSongMetadata_GetRawIntensity final
{
public:
	EPilgrimTrackType                             Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetRawIntensity) == 0x000004, "Wrong alignment on PilgrimSongMetadata_GetRawIntensity");
static_assert(sizeof(PilgrimSongMetadata_GetRawIntensity) == 0x000008, "Wrong size on PilgrimSongMetadata_GetRawIntensity");
static_assert(offsetof(PilgrimSongMetadata_GetRawIntensity, Instrument) == 0x000000, "Member 'PilgrimSongMetadata_GetRawIntensity::Instrument' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetRawIntensity, ReturnValue) == 0x000004, "Member 'PilgrimSongMetadata_GetRawIntensity::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetShortName
// 0x0004 (0x0004 - 0x0000)
struct PilgrimSongMetadata_GetShortName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetShortName) == 0x000004, "Wrong alignment on PilgrimSongMetadata_GetShortName");
static_assert(sizeof(PilgrimSongMetadata_GetShortName) == 0x000004, "Wrong size on PilgrimSongMetadata_GetShortName");
static_assert(offsetof(PilgrimSongMetadata_GetShortName, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetShortName::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetSparksCatalogData
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongMetadata_GetSparksCatalogData final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCatalogData*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetSparksCatalogData) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetSparksCatalogData");
static_assert(sizeof(PilgrimSongMetadata_GetSparksCatalogData) == 0x000010, "Wrong size on PilgrimSongMetadata_GetSparksCatalogData");
static_assert(offsetof(PilgrimSongMetadata_GetSparksCatalogData, WorldContext) == 0x000000, "Member 'PilgrimSongMetadata_GetSparksCatalogData::WorldContext' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetSparksCatalogData, ReturnValue) == 0x000008, "Member 'PilgrimSongMetadata_GetSparksCatalogData::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetStartingInstrumentType
// 0x0002 (0x0002 - 0x0000)
struct PilgrimSongMetadata_GetStartingInstrumentType final
{
public:
	EPilgrimTrackType                             TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetStartingInstrumentType) == 0x000001, "Wrong alignment on PilgrimSongMetadata_GetStartingInstrumentType");
static_assert(sizeof(PilgrimSongMetadata_GetStartingInstrumentType) == 0x000002, "Wrong size on PilgrimSongMetadata_GetStartingInstrumentType");
static_assert(offsetof(PilgrimSongMetadata_GetStartingInstrumentType, TrackType) == 0x000000, "Member 'PilgrimSongMetadata_GetStartingInstrumentType::TrackType' has a wrong offset!");
static_assert(offsetof(PilgrimSongMetadata_GetStartingInstrumentType, ReturnValue) == 0x000001, "Member 'PilgrimSongMetadata_GetStartingInstrumentType::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetStemmedMusicAsset
// 0x0020 (0x0020 - 0x0000)
struct PilgrimSongMetadata_GetStemmedMusicAsset final
{
public:
	TSoftObjectPtr<class UStemmedMusicAsset>      ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetStemmedMusicAsset) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetStemmedMusicAsset");
static_assert(sizeof(PilgrimSongMetadata_GetStemmedMusicAsset) == 0x000020, "Wrong size on PilgrimSongMetadata_GetStemmedMusicAsset");
static_assert(offsetof(PilgrimSongMetadata_GetStemmedMusicAsset, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetStemmedMusicAsset::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetStreamingVUID
// 0x0010 (0x0010 - 0x0000)
struct PilgrimSongMetadata_GetStreamingVUID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetStreamingVUID) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetStreamingVUID");
static_assert(sizeof(PilgrimSongMetadata_GetStreamingVUID) == 0x000010, "Wrong size on PilgrimSongMetadata_GetStreamingVUID");
static_assert(offsetof(PilgrimSongMetadata_GetStreamingVUID, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetStreamingVUID::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct PilgrimSongMetadata_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetTitle) == 0x000008, "Wrong alignment on PilgrimSongMetadata_GetTitle");
static_assert(sizeof(PilgrimSongMetadata_GetTitle) == 0x000018, "Wrong size on PilgrimSongMetadata_GetTitle");
static_assert(offsetof(PilgrimSongMetadata_GetTitle, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetTitle::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimSongMetadata.GetYear
// 0x0004 (0x0004 - 0x0000)
struct PilgrimSongMetadata_GetYear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimSongMetadata_GetYear) == 0x000004, "Wrong alignment on PilgrimSongMetadata_GetYear");
static_assert(sizeof(PilgrimSongMetadata_GetYear) == 0x000004, "Wrong size on PilgrimSongMetadata_GetYear");
static_assert(offsetof(PilgrimSongMetadata_GetYear, ReturnValue) == 0x000000, "Member 'PilgrimSongMetadata_GetYear::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimPlayspaceComponent_SongPreloader.NetMulticast_LoadSong
// 0x0004 (0x0004 - 0x0000)
struct PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong final
{
public:
	class FName                                   Song;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong) == 0x000004, "Wrong alignment on PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong");
static_assert(sizeof(PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong) == 0x000004, "Wrong size on PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong");
static_assert(offsetof(PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong, Song) == 0x000000, "Member 'PilgrimPlayspaceComponent_SongPreloader_NetMulticast_LoadSong::Song' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimControllerComponent_SongPreloader.ServerFinishedLoadingSong
// 0x0004 (0x0004 - 0x0000)
struct PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong final
{
public:
	class FName                                   Song;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong) == 0x000004, "Wrong alignment on PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong");
static_assert(sizeof(PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong) == 0x000004, "Wrong size on PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong");
static_assert(offsetof(PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong, Song) == 0x000000, "Member 'PilgrimControllerComponent_SongPreloader_ServerFinishedLoadingSong::Song' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimControllerComponent_SongPreloader.ServerKickPlayerForNetworkIssues
// 0x0018 (0x0018 - 0x0000)
struct PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues) == 0x000008, "Wrong alignment on PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues");
static_assert(sizeof(PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues) == 0x000018, "Wrong size on PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues");
static_assert(offsetof(PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues, Reason) == 0x000000, "Member 'PilgrimControllerComponent_SongPreloader_ServerKickPlayerForNetworkIssues::Reason' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTouchButtonBase.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct PilgrimTouchButtonBase_HandleInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTouchButtonBase_HandleInputMethodChanged) == 0x000001, "Wrong alignment on PilgrimTouchButtonBase_HandleInputMethodChanged");
static_assert(sizeof(PilgrimTouchButtonBase_HandleInputMethodChanged) == 0x000001, "Wrong size on PilgrimTouchButtonBase_HandleInputMethodChanged");
static_assert(offsetof(PilgrimTouchButtonBase_HandleInputMethodChanged, CurrentInputType) == 0x000000, "Member 'PilgrimTouchButtonBase_HandleInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrack.AddActorItemToScene
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrack_AddActorItemToScene final
{
public:
	class AActor*                                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrack_AddActorItemToScene) == 0x000008, "Wrong alignment on PilgrimTrack_AddActorItemToScene");
static_assert(sizeof(PilgrimTrack_AddActorItemToScene) == 0x000008, "Wrong size on PilgrimTrack_AddActorItemToScene");
static_assert(offsetof(PilgrimTrack_AddActorItemToScene, Item) == 0x000000, "Member 'PilgrimTrack_AddActorItemToScene::Item' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrack.OnGemSmashed
// 0x0040 (0x0040 - 0x0000)
struct PilgrimTrack_OnGemSmashed final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGemHitAccuracy                 Accuracy;                                          // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsOverdrive;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimTrack_OnGemSmashed) == 0x000008, "Wrong alignment on PilgrimTrack_OnGemSmashed");
static_assert(sizeof(PilgrimTrack_OnGemSmashed) == 0x000040, "Wrong size on PilgrimTrack_OnGemSmashed");
static_assert(offsetof(PilgrimTrack_OnGemSmashed, Lane) == 0x000000, "Member 'PilgrimTrack_OnGemSmashed::Lane' has a wrong offset!");
static_assert(offsetof(PilgrimTrack_OnGemSmashed, Accuracy) == 0x000008, "Member 'PilgrimTrack_OnGemSmashed::Accuracy' has a wrong offset!");
static_assert(offsetof(PilgrimTrack_OnGemSmashed, bIsOverdrive) == 0x000038, "Member 'PilgrimTrack_OnGemSmashed::bIsOverdrive' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrack.UpdateBeatmarkerVisibility
// 0x0001 (0x0001 - 0x0000)
struct PilgrimTrack_UpdateBeatmarkerVisibility final
{
public:
	bool                                          bNewIsVisible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrack_UpdateBeatmarkerVisibility) == 0x000001, "Wrong alignment on PilgrimTrack_UpdateBeatmarkerVisibility");
static_assert(sizeof(PilgrimTrack_UpdateBeatmarkerVisibility) == 0x000001, "Wrong size on PilgrimTrack_UpdateBeatmarkerVisibility");
static_assert(offsetof(PilgrimTrack_UpdateBeatmarkerVisibility, bNewIsVisible) == 0x000000, "Member 'PilgrimTrack_UpdateBeatmarkerVisibility::bNewIsVisible' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackCaptureComponent.IncludeActor
// 0x0010 (0x0010 - 0x0000)
struct PilgrimTrackCaptureComponent_IncludeActor final
{
public:
	class AActor*                                 TrackActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFromChildActors;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimTrackCaptureComponent_IncludeActor) == 0x000008, "Wrong alignment on PilgrimTrackCaptureComponent_IncludeActor");
static_assert(sizeof(PilgrimTrackCaptureComponent_IncludeActor) == 0x000010, "Wrong size on PilgrimTrackCaptureComponent_IncludeActor");
static_assert(offsetof(PilgrimTrackCaptureComponent_IncludeActor, TrackActor) == 0x000000, "Member 'PilgrimTrackCaptureComponent_IncludeActor::TrackActor' has a wrong offset!");
static_assert(offsetof(PilgrimTrackCaptureComponent_IncludeActor, bIncludeFromChildActors) == 0x000008, "Member 'PilgrimTrackCaptureComponent_IncludeActor::bIncludeFromChildActors' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackCaptureComponent.SetViewOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrackCaptureComponent_SetViewOwnerActor final
{
public:
	class AActor*                                 InViewOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackCaptureComponent_SetViewOwnerActor) == 0x000008, "Wrong alignment on PilgrimTrackCaptureComponent_SetViewOwnerActor");
static_assert(sizeof(PilgrimTrackCaptureComponent_SetViewOwnerActor) == 0x000008, "Wrong size on PilgrimTrackCaptureComponent_SetViewOwnerActor");
static_assert(offsetof(PilgrimTrackCaptureComponent_SetViewOwnerActor, InViewOwner) == 0x000000, "Member 'PilgrimTrackCaptureComponent_SetViewOwnerActor::InViewOwner' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackCaptureComponent.GetViewOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrackCaptureComponent_GetViewOwnerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackCaptureComponent_GetViewOwnerActor) == 0x000008, "Wrong alignment on PilgrimTrackCaptureComponent_GetViewOwnerActor");
static_assert(sizeof(PilgrimTrackCaptureComponent_GetViewOwnerActor) == 0x000008, "Wrong size on PilgrimTrackCaptureComponent_GetViewOwnerActor");
static_assert(offsetof(PilgrimTrackCaptureComponent_GetViewOwnerActor, ReturnValue) == 0x000000, "Member 'PilgrimTrackCaptureComponent_GetViewOwnerActor::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackSustain.OnAttachToSmasher
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrackSustain_OnAttachToSmasher final
{
public:
	class APilgrimGemSmasher*                     Smasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackSustain_OnAttachToSmasher) == 0x000008, "Wrong alignment on PilgrimTrackSustain_OnAttachToSmasher");
static_assert(sizeof(PilgrimTrackSustain_OnAttachToSmasher) == 0x000008, "Wrong size on PilgrimTrackSustain_OnAttachToSmasher");
static_assert(offsetof(PilgrimTrackSustain_OnAttachToSmasher, Smasher) == 0x000000, "Member 'PilgrimTrackSustain_OnAttachToSmasher::Smasher' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackSustain.UpdateSplineInputKeys
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrackSustain_UpdateSplineInputKeys final
{
public:
	float                                         NewKeyStart;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewKeyEnd;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackSustain_UpdateSplineInputKeys) == 0x000004, "Wrong alignment on PilgrimTrackSustain_UpdateSplineInputKeys");
static_assert(sizeof(PilgrimTrackSustain_UpdateSplineInputKeys) == 0x000008, "Wrong size on PilgrimTrackSustain_UpdateSplineInputKeys");
static_assert(offsetof(PilgrimTrackSustain_UpdateSplineInputKeys, NewKeyStart) == 0x000000, "Member 'PilgrimTrackSustain_UpdateSplineInputKeys::NewKeyStart' has a wrong offset!");
static_assert(offsetof(PilgrimTrackSustain_UpdateSplineInputKeys, NewKeyEnd) == 0x000004, "Member 'PilgrimTrackSustain_UpdateSplineInputKeys::NewKeyEnd' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackSustain.GetSplinePathIfRelevant
// 0x0008 (0x0008 - 0x0000)
struct PilgrimTrackSustain_GetSplinePathIfRelevant final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackSustain_GetSplinePathIfRelevant) == 0x000008, "Wrong alignment on PilgrimTrackSustain_GetSplinePathIfRelevant");
static_assert(sizeof(PilgrimTrackSustain_GetSplinePathIfRelevant) == 0x000008, "Wrong size on PilgrimTrackSustain_GetSplinePathIfRelevant");
static_assert(offsetof(PilgrimTrackSustain_GetSplinePathIfRelevant, ReturnValue) == 0x000000, "Member 'PilgrimTrackSustain_GetSplinePathIfRelevant::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackSustain.GetTrackItemInfo
// 0x0030 (0x0030 - 0x0000)
struct PilgrimTrackSustain_GetTrackItemInfo final
{
public:
	struct FTrackItemInfo                         ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackSustain_GetTrackItemInfo) == 0x000004, "Wrong alignment on PilgrimTrackSustain_GetTrackItemInfo");
static_assert(sizeof(PilgrimTrackSustain_GetTrackItemInfo) == 0x000030, "Wrong size on PilgrimTrackSustain_GetTrackItemInfo");
static_assert(offsetof(PilgrimTrackSustain_GetTrackItemInfo, ReturnValue) == 0x000000, "Member 'PilgrimTrackSustain_GetTrackItemInfo::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimTrackSustain.IsInActiveOverdriveSection
// 0x0001 (0x0001 - 0x0000)
struct PilgrimTrackSustain_IsInActiveOverdriveSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimTrackSustain_IsInActiveOverdriveSection) == 0x000001, "Wrong alignment on PilgrimTrackSustain_IsInActiveOverdriveSection");
static_assert(sizeof(PilgrimTrackSustain_IsInActiveOverdriveSection) == 0x000001, "Wrong size on PilgrimTrackSustain_IsInActiveOverdriveSection");
static_assert(offsetof(PilgrimTrackSustain_IsInActiveOverdriveSection, ReturnValue) == 0x000000, "Member 'PilgrimTrackSustain_IsInActiveOverdriveSection::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimWaitForEventRouterAction.PilgrimWaitForEventRouter
// 0x0010 (0x0010 - 0x0000)
struct PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter final
{
public:
	class AActor*                                 ContextActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimWaitForEventRouterAction*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter) == 0x000008, "Wrong alignment on PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter");
static_assert(sizeof(PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter) == 0x000010, "Wrong size on PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter");
static_assert(offsetof(PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter, ContextActor) == 0x000000, "Member 'PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter::ContextActor' has a wrong offset!");
static_assert(offsetof(PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter, ReturnValue) == 0x000008, "Member 'PilgrimWaitForEventRouterAction_PilgrimWaitForEventRouter::ReturnValue' has a wrong offset!");

// Function PilgrimCoreRuntime.PilgrimWaitForEventRouterAction.HandleContextActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct PilgrimWaitForEventRouterAction_HandleContextActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimWaitForEventRouterAction_HandleContextActorEndPlay) == 0x000008, "Wrong alignment on PilgrimWaitForEventRouterAction_HandleContextActorEndPlay");
static_assert(sizeof(PilgrimWaitForEventRouterAction_HandleContextActorEndPlay) == 0x000010, "Wrong size on PilgrimWaitForEventRouterAction_HandleContextActorEndPlay");
static_assert(offsetof(PilgrimWaitForEventRouterAction_HandleContextActorEndPlay, Actor) == 0x000000, "Member 'PilgrimWaitForEventRouterAction_HandleContextActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(PilgrimWaitForEventRouterAction_HandleContextActorEndPlay, EndPlayReason) == 0x000008, "Member 'PilgrimWaitForEventRouterAction_HandleContextActorEndPlay::EndPlayReason' has a wrong offset!");

// Function PilgrimCoreRuntime.ServerPilgrimGame.GetScoringDensity
// 0x0004 (0x0004 - 0x0000)
struct ServerPilgrimGame_GetScoringDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerPilgrimGame_GetScoringDensity) == 0x000004, "Wrong alignment on ServerPilgrimGame_GetScoringDensity");
static_assert(sizeof(ServerPilgrimGame_GetScoringDensity) == 0x000004, "Wrong size on ServerPilgrimGame_GetScoringDensity");
static_assert(offsetof(ServerPilgrimGame_GetScoringDensity, ReturnValue) == 0x000000, "Member 'ServerPilgrimGame_GetScoringDensity::ReturnValue' has a wrong offset!");

}

