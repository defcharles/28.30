#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinedNotebook_RewardTile

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "EventScreenBase_structs.hpp"


namespace SDK::Params
{

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_BndEvt__WBP_EventRewardTile_Button_RewardPreview_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.ExecuteUbergraph_WBP_LinedNotebook_RewardTile
// 0x0198 (0x0198 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelected_1;                          // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              K2Node_Event_NewInputType;                         // 0x0005(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bDoubleWidth;                         // 0x0011(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelected;                            // 0x0012(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPreviewed;                           // 0x0013(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortEventScreenData*             K2Node_Event_InEventScreenData;                    // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsBanner;                            // 0x0020(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_1; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_2; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture2D*                       K2Node_Event_CustomItemIcon;                       // 0x0058(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UCommonButtonLegacy* Button)> K2Node_CreateDelegate_OutputDelegate;              // 0x0060(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonLegacy*                    K2Node_ComponentBoundEvent_Button_1;               // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FEventScreenTrackData                  K2Node_Event_TrackData;                            // 0x0078(0x0030)(ConstParm, NoDestructor)
	bool                                          K2Node_Event_bIsOwned;                             // 0x00A8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonLegacy*                    K2Node_ComponentBoundEvent_Button;                 // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_3; // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonLegacy*                    K2Node_CustomEvent_Button;                         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Forward;                        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_4; // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue_1;               // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Percent;                              // 0x0108(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue_2;               // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_5; // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RequiredProgress;                     // 0x0150(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RemainingProgress;                    // 0x0154(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RewardProgressPercent;                // 0x0158(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_PreviewProgressPercent;               // 0x015C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_OverallProgressPercent;               // 0x0160(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInPreviewMode;                       // 0x0164(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_6; // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHighlighted;                         // 0x0171(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_7; // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAllCollected;                        // 0x0182(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_183[0x5];                                      // 0x0183(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          K2Node_Select_Default;                             // 0x0188(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetRewardItemVisuals_RewardProgressPercent_ImplicitCast; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile) == 0x000198, "Wrong size on WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, EntryPoint) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bSelected_1) == 0x000004, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bSelected_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_NewInputType) == 0x000005, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_NewInputType' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bDoubleWidth) == 0x000011, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bDoubleWidth' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bSelected) == 0x000012, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bSelected' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bPreviewed) == 0x000013, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bPreviewed' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_InEventScreenData) == 0x000018, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_InEventScreenData' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bIsBanner) == 0x000020, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bIsBanner' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_MakeStruct_Margin) == 0x000024, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_1) == 0x000038, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_2) == 0x000048, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_2' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_CustomItemIcon) == 0x000058, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_CustomItemIcon' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_CreateDelegate_OutputDelegate) == 0x000060, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_ComponentBoundEvent_Button_1) == 0x000070, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_TrackData) == 0x000078, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_TrackData' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bIsOwned) == 0x0000A8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bIsOwned' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_ComponentBoundEvent_Button) == 0x0000B0, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_3) == 0x0000B8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_3' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_CustomEvent_Button) == 0x0000C8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_IsMobileGame_ReturnValue) == 0x0000D0, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_SpawnSound2D_ReturnValue) == 0x0000D8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_CustomEvent_Forward) == 0x0000E0, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_CustomEvent_Forward' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_SlotAsGridSlot_ReturnValue) == 0x0000E8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_4) == 0x0000F0, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_4' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_4) == 0x0000F8, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_SpawnSound2D_ReturnValue_1) == 0x000100, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_SpawnSound2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_Percent) == 0x000108, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_Percent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_SpawnSound2D_ReturnValue_2) == 0x000110, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_SpawnSound2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000118, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x00011C, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_PlayAnimation_ReturnValue) == 0x000120, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_PlayAnimation_ReturnValue_1) == 0x000128, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_5) == 0x000130, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_5' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_5) == 0x000138, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000140, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_PlayAnimationForward_ReturnValue) == 0x000148, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_RequiredProgress) == 0x000150, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_RequiredProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_RemainingProgress) == 0x000154, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_RemainingProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_RewardProgressPercent) == 0x000158, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_RewardProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_PreviewProgressPercent) == 0x00015C, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_PreviewProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_OverallProgressPercent) == 0x000160, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_OverallProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bInPreviewMode) == 0x000164, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bInPreviewMode' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_6) == 0x000168, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_6' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_6) == 0x000170, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bHighlighted) == 0x000171, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bHighlighted' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, Temp_bool_Variable) == 0x000172, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_7) == 0x000178, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card_7' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_DynamicCast_bSuccess_7) == 0x000180, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_IsDesignTime) == 0x000181, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Event_bAllCollected) == 0x000182, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Event_bAllCollected' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, K2Node_Select_Default) == 0x000188, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile, CallFunc_SetRewardItemVisuals_RewardProgressPercent_ImplicitCast) == 0x000190, "Member 'WBP_LinedNotebook_RewardTile_C_ExecuteUbergraph_WBP_LinedNotebook_RewardTile::CallFunc_SetRewardItemVisuals_RewardProgressPercent_ImplicitCast' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.GetTileTextBaseOpacity
// 0x0048 (0x0048 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PartialProgressOpacity;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CompletedProgressOpacity;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZeroProgressOpacity;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity) == 0x000048, "Wrong size on WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, ReturnValue) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, PartialProgressOpacity) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::PartialProgressOpacity' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, CompletedProgressOpacity) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::CompletedProgressOpacity' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, ZeroProgressOpacity) == 0x000018, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::ZeroProgressOpacity' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, Temp_bool_Variable) == 0x000020, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, Temp_bool_Variable_1) == 0x000021, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000022, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000023, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, K2Node_Select_Default) == 0x000028, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, K2Node_Select_Default_1) == 0x000030, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000038, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x000040, "Member 'WBP_LinedNotebook_RewardTile_C_GetTileTextBaseOpacity::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.OnButtonUnhovered_Event
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event, Button) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_OnButtonUnhovered_Event::Button' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged, NewInputType) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_OnInputMethodChanged::NewInputType' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.OnSetRewardItem
// 0x0018 (0x0018 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_OnSetRewardItem final
{
public:
	int32                                         RequiredProgress;                                  // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingProgress;                                 // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RewardProgressPercent_0;                           // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviewProgressPercent;                            // 0x000C(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverallProgressPercent;                            // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInPreviewMode;                                    // 0x0014(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem) == 0x000004, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_OnSetRewardItem");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem) == 0x000018, "Wrong size on WBP_LinedNotebook_RewardTile_C_OnSetRewardItem");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, RequiredProgress) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::RequiredProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, RemainingProgress) == 0x000004, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::RemainingProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, RewardProgressPercent_0) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::RewardProgressPercent_0' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, PreviewProgressPercent) == 0x00000C, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::PreviewProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, OverallProgressPercent) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::OverallProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_OnSetRewardItem, bInPreviewMode) == 0x000014, "Member 'WBP_LinedNotebook_RewardTile_C_OnSetRewardItem::bInPreviewMode' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.PlayHoverAnims
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_PlayHoverAnims final
{
public:
	bool                                          Forward;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_PlayHoverAnims) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_PlayHoverAnims");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_PlayHoverAnims) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_PlayHoverAnims");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_PlayHoverAnims, Forward) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_PlayHoverAnims::Forward' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_PreConstruct");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_PreConstruct) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_PreConstruct");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetAllRewardsCollected
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected final
{
public:
	bool                                          bAllCollected;                                     // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected, bAllCollected) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollected::bAllCollected' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetAllRewardsCollectedVisuals
// 0x0006 (0x0006 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals final
{
public:
	bool                                          AllCollected;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals) == 0x000006, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, AllCollected) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::AllCollected' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, Temp_bool_Variable) == 0x000001, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, Temp_byte_Variable) == 0x000002, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals, K2Node_Select_Default) == 0x000005, "Member 'WBP_LinedNotebook_RewardTile_C_SetAllRewardsCollectedVisuals::K2Node_Select_Default' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetCustomItemIcon
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon final
{
public:
	const class UTexture2D*                       CustomItemIcon;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon, CustomItemIcon) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetCustomItemIcon::CustomItemIcon' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetDoubleWidth
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetDoubleWidth final
{
public:
	bool                                          bDoubleWidth;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetDoubleWidth) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetDoubleWidth");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetDoubleWidth) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetDoubleWidth");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetDoubleWidth, bDoubleWidth) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetDoubleWidth::bDoubleWidth' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetEventScreenData final
{
public:
	class UFortEventScreenData*                   EventScreenData;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetEventScreenData) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetEventScreenData");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetEventScreenData) == 0x000008, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetEventScreenData");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetEventScreenData, EventScreenData) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetEventScreenData::EventScreenData' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetInPremiumUpgradeState
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState, bHighlighted) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetInPremiumUpgradeState::bHighlighted' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetInPreviewedState
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetInPreviewedState final
{
public:
	bool                                          bPreviewed;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetInPreviewedState) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetInPreviewedState");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetInPreviewedState) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetInPreviewedState");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetInPreviewedState, bPreviewed) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetInPreviewedState::bPreviewed' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetInPreviewSelectedState
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState, bSelected) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetInPreviewSelectedState::bSelected' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetInSelectedState
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetInSelectedState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetInSelectedState) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetInSelectedState");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetInSelectedState) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetInSelectedState");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetInSelectedState, bSelected) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetInSelectedState::bSelected' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetIsBannerItem
// 0x0001 (0x0001 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetIsBannerItem final
{
public:
	bool                                          bIsBanner;                                         // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetIsBannerItem) == 0x000001, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetIsBannerItem");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetIsBannerItem) == 0x000001, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetIsBannerItem");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetIsBannerItem, bIsBanner) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetIsBannerItem::bIsBanner' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetProgress
// 0x0048 (0x0048 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetProgress final
{
public:
	float                                         ProgressPercent;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetProgress) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetProgress");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetProgress) == 0x000048, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetProgress");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, ProgressPercent) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::ProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_GetEndTime_ReturnValue) == 0x000004, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card) == 0x000018, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000022, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_PlayAnimationForward_ReturnValue) == 0x000028, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000030, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000038, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgress, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x000040, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgress::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetProgressPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetProgressPercent) == 0x000004, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetProgressPercent");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetProgressPercent) == 0x000004, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetProgressPercent");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetProgressPercent, Percent) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetProgressPercent::Percent' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetRewardItemVisuals
// 0x0148 (0x0148 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals final
{
public:
	int32                                         RequiredProgress;                                  // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingProgress;                                 // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RewardProgressPercent_0;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverallProgressPercent;                            // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InPreviewMode;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0120(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0130(0x0018)()
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals) == 0x000148, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, RequiredProgress) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::RequiredProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, RemainingProgress) == 0x000004, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::RemainingProgress' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, RewardProgressPercent_0) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::RewardProgressPercent_0' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, OverallProgressPercent) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::OverallProgressPercent' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, InPreviewMode) == 0x000014, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::InPreviewMode' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D0, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, K2Node_MakeArray_Array) == 0x000120, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals, CallFunc_Format_ReturnValue) == 0x000130, "Member 'WBP_LinedNotebook_RewardTile_C_SetRewardItemVisuals::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.SetTrackData
// 0x0034 (0x0034 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_SetTrackData final
{
public:
	struct FEventScreenTrackData                  TrackData;                                         // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          bIsOwned;                                          // 0x0030(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_SetTrackData) == 0x000004, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_SetTrackData");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_SetTrackData) == 0x000034, "Wrong size on WBP_LinedNotebook_RewardTile_C_SetTrackData");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetTrackData, TrackData) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_SetTrackData::TrackData' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_SetTrackData, bIsOwned) == 0x000030, "Member 'WBP_LinedNotebook_RewardTile_C_SetTrackData::bIsOwned' has a wrong offset!");

// Function WBP_LinedNotebook_RewardTile.WBP_LinedNotebook_RewardTile_C.UpdateBackgroundColor
// 0x0020 (0x0020 - 0x0000)
struct WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor final
{
public:
	const class UFortEventScreenData*             CallFunc_GetEventScreenData_ReturnValue;           // 0x0000(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_LinedNotebook_EventCosmeticItemCard_C* K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor) == 0x000008, "Wrong alignment on WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor");
static_assert(sizeof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor) == 0x000020, "Wrong size on WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor, CallFunc_GetEventScreenData_ReturnValue) == 0x000000, "Member 'WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor::CallFunc_GetEventScreenData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor, K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card) == 0x000010, "Member 'WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor::K2Node_DynamicCast_AsWBP_Lined_Notebook_Event_Cosmetic_Item_Card' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_LinedNotebook_RewardTile_C_UpdateBackgroundColor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

