#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoEncountersPOIRuntime

#include "Basic.hpp"

#include "JunoGameNative_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "StructUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "DataRegistry_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EncountersRuntime_structs.hpp"


namespace SDK
{

// ScriptStruct JunoEncountersPOIRuntime.JunoEnableVillagerProviderStateTreeTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FJunoEnableVillagerProviderStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AJunoEncounterStaticPointProvider> VillagerProvider;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableProvider;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEnableVillagerProviderStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoEnableVillagerProviderStateTreeTaskInstanceData");
static_assert(sizeof(FJunoEnableVillagerProviderStateTreeTaskInstanceData) == 0x000018, "Wrong size on FJunoEnableVillagerProviderStateTreeTaskInstanceData");
static_assert(offsetof(FJunoEnableVillagerProviderStateTreeTaskInstanceData, VillagerProvider) == 0x000000, "Member 'FJunoEnableVillagerProviderStateTreeTaskInstanceData::VillagerProvider' has a wrong offset!");
static_assert(offsetof(FJunoEnableVillagerProviderStateTreeTaskInstanceData, bEnableProvider) == 0x000008, "Member 'FJunoEnableVillagerProviderStateTreeTaskInstanceData::bEnableProvider' has a wrong offset!");
static_assert(offsetof(FJunoEnableVillagerProviderStateTreeTaskInstanceData, UserActor) == 0x000010, "Member 'FJunoEnableVillagerProviderStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoEnableVillagerProviderStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoEnableVillagerProviderStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoEnableVillagerProviderStateTreeTask) == 0x000008, "Wrong alignment on FJunoEnableVillagerProviderStateTreeTask");
static_assert(sizeof(FJunoEnableVillagerProviderStateTreeTask) == 0x000020, "Wrong size on FJunoEnableVillagerProviderStateTreeTask");

// ScriptStruct JunoEncountersPOIRuntime.JunoGetVillagerProviderStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FJunoGetVillagerProviderStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ProviderTagQuery;                                  // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJunoEncounterStaticPointProvider> VillagerProvider;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGetVillagerProviderStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoGetVillagerProviderStateTreeTaskInstanceData");
static_assert(sizeof(FJunoGetVillagerProviderStateTreeTaskInstanceData) == 0x000058, "Wrong size on FJunoGetVillagerProviderStateTreeTaskInstanceData");
static_assert(offsetof(FJunoGetVillagerProviderStateTreeTaskInstanceData, ProviderTagQuery) == 0x000000, "Member 'FJunoGetVillagerProviderStateTreeTaskInstanceData::ProviderTagQuery' has a wrong offset!");
static_assert(offsetof(FJunoGetVillagerProviderStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FJunoGetVillagerProviderStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FJunoGetVillagerProviderStateTreeTaskInstanceData, VillagerProvider) == 0x000050, "Member 'FJunoGetVillagerProviderStateTreeTaskInstanceData::VillagerProvider' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoGetVillagerProviderStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoGetVillagerProviderStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoGetVillagerProviderStateTreeTask) == 0x000008, "Wrong alignment on FJunoGetVillagerProviderStateTreeTask");
static_assert(sizeof(FJunoGetVillagerProviderStateTreeTask) == 0x000020, "Wrong size on FJunoGetVillagerProviderStateTreeTask");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIEncounterCategoryRow
// 0x0088 (0x0090 - 0x0008)
struct FJunoPOIEncounterCategoryRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataRegistry>           POIEncounterRegistry;                              // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredCapabilities;                              // 0x0028(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         WorldConditionDefinition;                          // 0x0070(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPOIEncounterCategoryRow) == 0x000008, "Wrong alignment on FJunoPOIEncounterCategoryRow");
static_assert(sizeof(FJunoPOIEncounterCategoryRow) == 0x000090, "Wrong size on FJunoPOIEncounterCategoryRow");
static_assert(offsetof(FJunoPOIEncounterCategoryRow, POIEncounterRegistry) == 0x000008, "Member 'FJunoPOIEncounterCategoryRow::POIEncounterRegistry' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterCategoryRow, RequiredCapabilities) == 0x000028, "Member 'FJunoPOIEncounterCategoryRow::RequiredCapabilities' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterCategoryRow, WorldConditionDefinition) == 0x000070, "Member 'FJunoPOIEncounterCategoryRow::WorldConditionDefinition' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterCategoryRow, Weight) == 0x000088, "Member 'FJunoPOIEncounterCategoryRow::Weight' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIEncounterSaveData
// 0x0100 (0x0100 - 0x0000)
struct FJunoPOIEncounterSaveData final
{
public:
	bool                                          bEncounterChosen;                                  // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UEncounterItemDefinition> ChosenEncounterDefinition;                         // 0x0008(0x0020)(SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEncounterFactionData>   ChosenFaction;                                     // 0x0028(0x0020)(SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChosenVariant;                                     // 0x0048(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryId                        EncounterRow;                                      // 0x004C(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FPersistenceFrameworkDataTableRowHandle> Variables;                                         // 0x0058(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              PersistentValues;                                  // 0x00A8(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	bool                                          bIsPOISetup;                                       // 0x00F8(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounterFinished;                                // 0x00F9(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFactionChosen;                                    // 0x00FA(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPOIEncounterSaveData) == 0x000008, "Wrong alignment on FJunoPOIEncounterSaveData");
static_assert(sizeof(FJunoPOIEncounterSaveData) == 0x000100, "Wrong size on FJunoPOIEncounterSaveData");
static_assert(offsetof(FJunoPOIEncounterSaveData, bEncounterChosen) == 0x000000, "Member 'FJunoPOIEncounterSaveData::bEncounterChosen' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, ChosenEncounterDefinition) == 0x000008, "Member 'FJunoPOIEncounterSaveData::ChosenEncounterDefinition' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, ChosenFaction) == 0x000028, "Member 'FJunoPOIEncounterSaveData::ChosenFaction' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, ChosenVariant) == 0x000048, "Member 'FJunoPOIEncounterSaveData::ChosenVariant' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, EncounterRow) == 0x00004C, "Member 'FJunoPOIEncounterSaveData::EncounterRow' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, Variables) == 0x000058, "Member 'FJunoPOIEncounterSaveData::Variables' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, PersistentValues) == 0x0000A8, "Member 'FJunoPOIEncounterSaveData::PersistentValues' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, bIsPOISetup) == 0x0000F8, "Member 'FJunoPOIEncounterSaveData::bIsPOISetup' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, bEncounterFinished) == 0x0000F9, "Member 'FJunoPOIEncounterSaveData::bEncounterFinished' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterSaveData, bFactionChosen) == 0x0000FA, "Member 'FJunoPOIEncounterSaveData::bFactionChosen' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0100 (0x0100 - 0x0000)
struct FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoPOIEncounterSaveData              SavedEncounterState;                               // 0x0000(0x0100)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000100, "Wrong size on FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo, SavedEncounterState) == 0x000000, "Member 'FJunoPOIEncounterPersistenceFeatureData_InGameClass_PersistentInfo::SavedEncounterState' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIDestroyActorRetainmentEntry
// 0x0008 (0x0008 - 0x0000)
struct FJunoPOIDestroyActorRetainmentEntry final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPOIDestroyActorRetainmentEntry) == 0x000004, "Wrong alignment on FJunoPOIDestroyActorRetainmentEntry");
static_assert(sizeof(FJunoPOIDestroyActorRetainmentEntry) == 0x000008, "Wrong size on FJunoPOIDestroyActorRetainmentEntry");
static_assert(offsetof(FJunoPOIDestroyActorRetainmentEntry, Count) == 0x000000, "Member 'FJunoPOIDestroyActorRetainmentEntry::Count' has a wrong offset!");
static_assert(offsetof(FJunoPOIDestroyActorRetainmentEntry, Weight) == 0x000004, "Member 'FJunoPOIDestroyActorRetainmentEntry::Weight' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIDestroyActorInfo
// 0x0058 (0x0058 - 0x0000)
struct FJunoPOIDestroyActorInfo final
{
public:
	struct FGameplayTagQuery                      DestroyActorQuery;                                 // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIDestroyActorRetainmentEntry> RetainmentEntries;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPOIDestroyActorInfo) == 0x000008, "Wrong alignment on FJunoPOIDestroyActorInfo");
static_assert(sizeof(FJunoPOIDestroyActorInfo) == 0x000058, "Wrong size on FJunoPOIDestroyActorInfo");
static_assert(offsetof(FJunoPOIDestroyActorInfo, DestroyActorQuery) == 0x000000, "Member 'FJunoPOIDestroyActorInfo::DestroyActorQuery' has a wrong offset!");
static_assert(offsetof(FJunoPOIDestroyActorInfo, RetainmentEntries) == 0x000048, "Member 'FJunoPOIDestroyActorInfo::RetainmentEntries' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIHLODActorInfo
// 0x0068 (0x0068 - 0x0000)
struct FJunoPOIHLODActorInfo final
{
public:
	TSoftClassPtr<class UClass>                   HLODActorClass;                                    // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      HLODActorAnchorQuery;                              // 0x0020(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPOIHLODActorInfo) == 0x000008, "Wrong alignment on FJunoPOIHLODActorInfo");
static_assert(sizeof(FJunoPOIHLODActorInfo) == 0x000068, "Wrong size on FJunoPOIHLODActorInfo");
static_assert(offsetof(FJunoPOIHLODActorInfo, HLODActorClass) == 0x000000, "Member 'FJunoPOIHLODActorInfo::HLODActorClass' has a wrong offset!");
static_assert(offsetof(FJunoPOIHLODActorInfo, HLODActorAnchorQuery) == 0x000020, "Member 'FJunoPOIHLODActorInfo::HLODActorAnchorQuery' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoPOIEncounterRow
// 0x00C0 (0x00C8 - 0x0008)
struct FJunoPOIEncounterRow final : public FTableRowBase
{
public:
	class UEncounterItemDefinition*               EncounterDefinition;                               // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataRegistry>           FactionRegistry;                                   // 0x0010(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredCapabilities;                              // 0x0030(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         WorldConditionDefinition;                          // 0x0078(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIHLODActorInfo>          HLODActorsEntries;                                 // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIDestroyActorInfo>       DestroyActorsEntries;                              // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInstancedStruct>               POIVariables;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPOIEncounterRow) == 0x000008, "Wrong alignment on FJunoPOIEncounterRow");
static_assert(sizeof(FJunoPOIEncounterRow) == 0x0000C8, "Wrong size on FJunoPOIEncounterRow");
static_assert(offsetof(FJunoPOIEncounterRow, EncounterDefinition) == 0x000008, "Member 'FJunoPOIEncounterRow::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, FactionRegistry) == 0x000010, "Member 'FJunoPOIEncounterRow::FactionRegistry' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, RequiredCapabilities) == 0x000030, "Member 'FJunoPOIEncounterRow::RequiredCapabilities' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, WorldConditionDefinition) == 0x000078, "Member 'FJunoPOIEncounterRow::WorldConditionDefinition' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, HLODActorsEntries) == 0x000090, "Member 'FJunoPOIEncounterRow::HLODActorsEntries' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, DestroyActorsEntries) == 0x0000A0, "Member 'FJunoPOIEncounterRow::DestroyActorsEntries' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, POIVariables) == 0x0000B0, "Member 'FJunoPOIEncounterRow::POIVariables' has a wrong offset!");
static_assert(offsetof(FJunoPOIEncounterRow, Weight) == 0x0000C0, "Member 'FJunoPOIEncounterRow::Weight' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoSpawnActorStateTreeTaskInstanceData
// 0x00F8 (0x00F8 - 0x0000)
struct FJunoSpawnActorStateTreeTaskInstanceData final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      AnchorQuery;                                       // 0x0020(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                AnchorOffset;                                      // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePhysics;                                    // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachEncounterVolume;                            // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0088(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorIdentifierTags;                               // 0x00A8(0x0020)(Edit, NativeAccessSpecifierPublic)
	ESpawnActorPersistenceBehavior                PersistenceBehavior;                               // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PersistenceID;                                     // 0x00CC(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForSpawnedActor;                              // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  SpawnedActor;                                      // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoSpawnActorTaskHelper*              JunoSpawnActorHelper;                              // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoSpawnActorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoSpawnActorStateTreeTaskInstanceData");
static_assert(sizeof(FJunoSpawnActorStateTreeTaskInstanceData) == 0x0000F8, "Wrong size on FJunoSpawnActorStateTreeTaskInstanceData");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, ActorClass) == 0x000000, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::ActorClass' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, AnchorQuery) == 0x000020, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::AnchorQuery' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, AnchorOffset) == 0x000068, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::AnchorOffset' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, bEnablePhysics) == 0x000080, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::bEnablePhysics' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, bAttachEncounterVolume) == 0x000081, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::bAttachEncounterVolume' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, ActorTags) == 0x000088, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::ActorTags' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, ActorIdentifierTags) == 0x0000A8, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::ActorIdentifierTags' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, PersistenceBehavior) == 0x0000C8, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::PersistenceBehavior' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, PersistenceID) == 0x0000CC, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::PersistenceID' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, bWaitForSpawnedActor) == 0x0000D0, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::bWaitForSpawnedActor' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, SpawnedActor) == 0x0000D4, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, UserActor) == 0x0000E0, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FJunoSpawnActorStateTreeTaskInstanceData, JunoSpawnActorHelper) == 0x0000E8, "Member 'FJunoSpawnActorStateTreeTaskInstanceData::JunoSpawnActorHelper' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoSpawnActorStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoSpawnActorStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoSpawnActorStateTreeTask) == 0x000008, "Wrong alignment on FJunoSpawnActorStateTreeTask");
static_assert(sizeof(FJunoSpawnActorStateTreeTask) == 0x000020, "Wrong size on FJunoSpawnActorStateTreeTask");

// ScriptStruct JunoEncountersPOIRuntime.JunoSpawnedActorMakePersistentStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ActorQuery;                                        // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bMakeTransient;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData");
static_assert(sizeof(FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData) == 0x000058, "Wrong size on FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData");
static_assert(offsetof(FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData, ActorQuery) == 0x000000, "Member 'FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData::ActorQuery' has a wrong offset!");
static_assert(offsetof(FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData, bMakeTransient) == 0x000048, "Member 'FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData::bMakeTransient' has a wrong offset!");
static_assert(offsetof(FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FJunoSpawnedActorMakePersistentStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoSpawnedActorMakePersistentStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoSpawnedActorMakePersistentStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoSpawnedActorMakePersistentStateTreeTask) == 0x000008, "Wrong alignment on FJunoSpawnedActorMakePersistentStateTreeTask");
static_assert(sizeof(FJunoSpawnedActorMakePersistentStateTreeTask) == 0x000020, "Wrong size on FJunoSpawnedActorMakePersistentStateTreeTask");

// ScriptStruct JunoEncountersPOIRuntime.JunoEncounterConditionalTags
// 0x0028 (0x0028 - 0x0000)
struct FJunoEncounterConditionalTags final
{
public:
	EJunoBiome                                    Biome;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsToApply;                                       // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEncounterConditionalTags) == 0x000008, "Wrong alignment on FJunoEncounterConditionalTags");
static_assert(sizeof(FJunoEncounterConditionalTags) == 0x000028, "Wrong size on FJunoEncounterConditionalTags");
static_assert(offsetof(FJunoEncounterConditionalTags, Biome) == 0x000000, "Member 'FJunoEncounterConditionalTags::Biome' has a wrong offset!");
static_assert(offsetof(FJunoEncounterConditionalTags, TagsToApply) == 0x000008, "Member 'FJunoEncounterConditionalTags::TagsToApply' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.FindPrefabSpawnedActorStateTreeTaskInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FFindPrefabSpawnedActorStateTreeTaskInstanceData final
{
public:
	TSubclassOf<class AActor>                     MustBeOfClass;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFindPrefabSpawnedActorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FFindPrefabSpawnedActorStateTreeTaskInstanceData");
static_assert(sizeof(FFindPrefabSpawnedActorStateTreeTaskInstanceData) == 0x000020, "Wrong size on FFindPrefabSpawnedActorStateTreeTaskInstanceData");
static_assert(offsetof(FFindPrefabSpawnedActorStateTreeTaskInstanceData, MustBeOfClass) == 0x000000, "Member 'FFindPrefabSpawnedActorStateTreeTaskInstanceData::MustBeOfClass' has a wrong offset!");
static_assert(offsetof(FFindPrefabSpawnedActorStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FFindPrefabSpawnedActorStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FFindPrefabSpawnedActorStateTreeTaskInstanceData, Actor) == 0x000010, "Member 'FFindPrefabSpawnedActorStateTreeTaskInstanceData::Actor' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.FindPrefabSpawnedActorStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FFindPrefabSpawnedActorStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFindPrefabSpawnedActorStateTreeTask) == 0x000008, "Wrong alignment on FFindPrefabSpawnedActorStateTreeTask");
static_assert(sizeof(FFindPrefabSpawnedActorStateTreeTask) == 0x000028, "Wrong size on FFindPrefabSpawnedActorStateTreeTask");
static_assert(offsetof(FFindPrefabSpawnedActorStateTreeTask, TransitionTo) == 0x000020, "Member 'FFindPrefabSpawnedActorStateTreeTask::TransitionTo' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AJunoEncounterStaticPointProvider> VillagerProvider;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Villager;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData");
static_assert(sizeof(FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData) == 0x000020, "Wrong size on FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData");
static_assert(offsetof(FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData, VillagerProvider) == 0x000000, "Member 'FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData::VillagerProvider' has a wrong offset!");
static_assert(offsetof(FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData, Villager) == 0x000010, "Member 'FJunoVillagerProviderSpawnTransitionStateTreeTaskInstanceData::Villager' has a wrong offset!");

// ScriptStruct JunoEncountersPOIRuntime.JunoVillagerProviderSpawnTransitionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FJunoVillagerProviderSpawnTransitionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoVillagerProviderSpawnTransitionStateTreeTask) == 0x000008, "Wrong alignment on FJunoVillagerProviderSpawnTransitionStateTreeTask");
static_assert(sizeof(FJunoVillagerProviderSpawnTransitionStateTreeTask) == 0x000028, "Wrong size on FJunoVillagerProviderSpawnTransitionStateTreeTask");
static_assert(offsetof(FJunoVillagerProviderSpawnTransitionStateTreeTask, TransitionTo) == 0x000020, "Member 'FJunoVillagerProviderSpawnTransitionStateTreeTask::TransitionTo' has a wrong offset!");

}

