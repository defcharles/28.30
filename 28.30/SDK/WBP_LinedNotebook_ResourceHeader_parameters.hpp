#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinedNotebook_ResourceHeader

#include "Basic.hpp"


namespace SDK::Params
{

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader
// 0x0048 (0x0048 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortEventScreenData*             K2Node_Event_InEventScreenData;                    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_Header_1;                             // 0x0010(0x0018)(ConstParm)
	int32                                         K2Node_Event_ResourceValue;                        // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Header;                               // 0x0030(0x0018)(ConstParm)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader) == 0x000048, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader, EntryPoint) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader, K2Node_Event_InEventScreenData) == 0x000008, "Member 'WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader::K2Node_Event_InEventScreenData' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader, K2Node_Event_Header_1) == 0x000010, "Member 'WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader::K2Node_Event_Header_1' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader, K2Node_Event_ResourceValue) == 0x000028, "Member 'WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader::K2Node_Event_ResourceValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader, K2Node_Event_Header) == 0x000030, "Member 'WBP_LinedNotebook_ResourceHeader_C_ExecuteUbergraph_WBP_LinedNotebook_ResourceHeader::K2Node_Event_Header' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.InitializeEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData final
{
public:
	const class UFortEventScreenData*             EventScreenData;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData) == 0x000008, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData, EventScreenData) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_InitializeEventScreenData::EventScreenData' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.OnModuleInitialized
// 0x0008 (0x0008 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized) == 0x000008, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized, InEventScreenData) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_OnModuleInitialized::InEventScreenData' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.OnPopulateEventResourceHeader
// 0x0020 (0x0020 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         ResourceValue;                                     // 0x0018(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader) == 0x000020, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader, Header) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader::Header' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader, ResourceValue) == 0x000018, "Member 'WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceHeader::ResourceValue' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.OnPopulateEventResourceStarterHeader
// 0x0018 (0x0018 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader) == 0x000018, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader, Header) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_OnPopulateEventResourceStarterHeader::Header' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.PopulateResourceHeader
// 0x0038 (0x0038 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         ResourceValue;                                     // 0x0018(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0020(0x0018)()
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader) == 0x000038, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader, HeaderText) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader::HeaderText' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader, ResourceValue) == 0x000018, "Member 'WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader::ResourceValue' has a wrong offset!");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader, CallFunc_Conv_IntToText_ReturnValue) == 0x000020, "Member 'WBP_LinedNotebook_ResourceHeader_C_PopulateResourceHeader::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_LinedNotebook_ResourceHeader.WBP_LinedNotebook_ResourceHeader_C.PopulateResourceStarterHeader
// 0x0018 (0x0018 - 0x0000)
struct WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader) == 0x000008, "Wrong alignment on WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader");
static_assert(sizeof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader) == 0x000018, "Wrong size on WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader");
static_assert(offsetof(WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader, Header) == 0x000000, "Member 'WBP_LinedNotebook_ResourceHeader_C_PopulateResourceStarterHeader::Header' has a wrong offset!");

}

