#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCMS

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "FMCoreRuntime_structs.hpp"


namespace SDK
{

// Enum SparksCMS.ESparksSongAgeRating
// NumValues: 0x0004
enum class ESparksSongAgeRating : uint8
{
	None                                     = 0,
	E                                        = 1,
	E10p                                     = 2,
	T                                        = 3,
};

// Enum SparksCMS.ESparksGenre
// NumValues: 0x000A
enum class ESparksGenre : uint8
{
	None                                     = 0,
	RapHipHop                                = 1,
	RnB                                      = 2,
	Pop                                      = 3,
	Rock                                     = 4,
	DanceElectronic                          = 5,
	Country                                  = 6,
	LatinCarribean                           = 7,
	Other                                    = 8,
	Count                                    = 9,
};

// Enum SparksCMS.ESongSortMethod
// NumValues: 0x0007
enum class ESongSortMethod : uint8
{
	Title                                    = 0,
	Shortname                                = 1,
	Artist                                   = 2,
	Album                                    = 3,
	Genre                                    = 4,
	ReleaseYear                              = 5,
	None                                     = 6,
};

// Enum SparksCMS.ESongSortDirection
// NumValues: 0x0003
enum class ESongSortDirection : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	None                                     = 2,
};

// ScriptStruct SparksCMS.SparksSongQuicksilverTrack
// 0x0030 (0x0030 - 0x0000)
struct FSparksSongQuicksilverTrack final
{
public:
	class FString                                 Part;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Channels;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Vols;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksSongQuicksilverTrack) == 0x000008, "Wrong alignment on FSparksSongQuicksilverTrack");
static_assert(sizeof(FSparksSongQuicksilverTrack) == 0x000030, "Wrong size on FSparksSongQuicksilverTrack");
static_assert(offsetof(FSparksSongQuicksilverTrack, Part) == 0x000000, "Member 'FSparksSongQuicksilverTrack::Part' has a wrong offset!");
static_assert(offsetof(FSparksSongQuicksilverTrack, Channels) == 0x000010, "Member 'FSparksSongQuicksilverTrack::Channels' has a wrong offset!");
static_assert(offsetof(FSparksSongQuicksilverTrack, Vols) == 0x000020, "Member 'FSparksSongQuicksilverTrack::Vols' has a wrong offset!");

// ScriptStruct SparksCMS.SparksSongQuicksilverInfo
// 0x0030 (0x0030 - 0x0000)
struct FSparksSongQuicksilverInfo final
{
public:
	class FString                                 SongID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewID;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSparksSongQuicksilverTrack>    Tracks;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksSongQuicksilverInfo) == 0x000008, "Wrong alignment on FSparksSongQuicksilverInfo");
static_assert(sizeof(FSparksSongQuicksilverInfo) == 0x000030, "Wrong size on FSparksSongQuicksilverInfo");
static_assert(offsetof(FSparksSongQuicksilverInfo, SongID) == 0x000000, "Member 'FSparksSongQuicksilverInfo::SongID' has a wrong offset!");
static_assert(offsetof(FSparksSongQuicksilverInfo, PreviewID) == 0x000010, "Member 'FSparksSongQuicksilverInfo::PreviewID' has a wrong offset!");
static_assert(offsetof(FSparksSongQuicksilverInfo, Tracks) == 0x000020, "Member 'FSparksSongQuicksilverInfo::Tracks' has a wrong offset!");

// ScriptStruct SparksCMS.SparksSongIntensityInfo
// 0x0020 (0x0020 - 0x0000)
struct FSparksSongIntensityInfo final
{
public:
	int32                                         Vocals;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guitar;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bass;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Drums;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlasticGuitar;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlasticBass;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlasticDrums;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Band;                                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksSongIntensityInfo) == 0x000004, "Wrong alignment on FSparksSongIntensityInfo");
static_assert(sizeof(FSparksSongIntensityInfo) == 0x000020, "Wrong size on FSparksSongIntensityInfo");
static_assert(offsetof(FSparksSongIntensityInfo, Vocals) == 0x000000, "Member 'FSparksSongIntensityInfo::Vocals' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, Guitar) == 0x000004, "Member 'FSparksSongIntensityInfo::Guitar' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, Bass) == 0x000008, "Member 'FSparksSongIntensityInfo::Bass' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, Drums) == 0x00000C, "Member 'FSparksSongIntensityInfo::Drums' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, PlasticGuitar) == 0x000010, "Member 'FSparksSongIntensityInfo::PlasticGuitar' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, PlasticBass) == 0x000014, "Member 'FSparksSongIntensityInfo::PlasticBass' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, PlasticDrums) == 0x000018, "Member 'FSparksSongIntensityInfo::PlasticDrums' has a wrong offset!");
static_assert(offsetof(FSparksSongIntensityInfo, Band) == 0x00001C, "Member 'FSparksSongIntensityInfo::Band' has a wrong offset!");

// ScriptStruct SparksCMS.SparksSongCatalogEntry
// 0x0168 (0x0168 - 0x0000)
struct FSparksSongCatalogEntry final
{
public:
	class FString                                 SongUID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortName;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Artist;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Album;                                             // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESparksGenre>                          Genre;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         duration;                                          // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReleaseYear;                                       // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NewUntilTime;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksSongAgeRating                          AgeRating;                                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKey                                     MusicKey;                                          // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 MusicMode;                                         // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MusicTempo;                                        // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         StartingInstrumentGuitar;                          // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         StartingInstrumentBass;                            // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         StartingInstrumentDrums;                           // 0x007A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         StartingInstrumentVocals;                          // 0x007B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JamLinkCode;                                       // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 McpTemplateId;                                     // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AlbumArtUrl;                                       // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MidiUrl;                                           // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MidiData;                                          // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LipSyncUrl;                                        // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LipSyncData;                                       // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x00F0(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSparksSongQuicksilverInfo             QuicksilverInfo;                                   // 0x0110(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSparksSongIntensityInfo               Intensities;                                       // 0x0140(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksSongCatalogEntry) == 0x000008, "Wrong alignment on FSparksSongCatalogEntry");
static_assert(sizeof(FSparksSongCatalogEntry) == 0x000168, "Wrong size on FSparksSongCatalogEntry");
static_assert(offsetof(FSparksSongCatalogEntry, SongUID) == 0x000000, "Member 'FSparksSongCatalogEntry::SongUID' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, ShortName) == 0x000010, "Member 'FSparksSongCatalogEntry::ShortName' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, Title) == 0x000020, "Member 'FSparksSongCatalogEntry::Title' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, Artist) == 0x000030, "Member 'FSparksSongCatalogEntry::Artist' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, Album) == 0x000040, "Member 'FSparksSongCatalogEntry::Album' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, Genre) == 0x000050, "Member 'FSparksSongCatalogEntry::Genre' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, duration) == 0x000060, "Member 'FSparksSongCatalogEntry::duration' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, ReleaseYear) == 0x000064, "Member 'FSparksSongCatalogEntry::ReleaseYear' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, NewUntilTime) == 0x000068, "Member 'FSparksSongCatalogEntry::NewUntilTime' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, AgeRating) == 0x000070, "Member 'FSparksSongCatalogEntry::AgeRating' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, MusicKey) == 0x000071, "Member 'FSparksSongCatalogEntry::MusicKey' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, MusicMode) == 0x000072, "Member 'FSparksSongCatalogEntry::MusicMode' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, MusicTempo) == 0x000074, "Member 'FSparksSongCatalogEntry::MusicTempo' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, StartingInstrumentGuitar) == 0x000078, "Member 'FSparksSongCatalogEntry::StartingInstrumentGuitar' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, StartingInstrumentBass) == 0x000079, "Member 'FSparksSongCatalogEntry::StartingInstrumentBass' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, StartingInstrumentDrums) == 0x00007A, "Member 'FSparksSongCatalogEntry::StartingInstrumentDrums' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, StartingInstrumentVocals) == 0x00007B, "Member 'FSparksSongCatalogEntry::StartingInstrumentVocals' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, JamLinkCode) == 0x000080, "Member 'FSparksSongCatalogEntry::JamLinkCode' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, McpTemplateId) == 0x000090, "Member 'FSparksSongCatalogEntry::McpTemplateId' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, AlbumArtUrl) == 0x0000A0, "Member 'FSparksSongCatalogEntry::AlbumArtUrl' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, MidiUrl) == 0x0000B0, "Member 'FSparksSongCatalogEntry::MidiUrl' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, MidiData) == 0x0000C0, "Member 'FSparksSongCatalogEntry::MidiData' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, LipSyncUrl) == 0x0000D0, "Member 'FSparksSongCatalogEntry::LipSyncUrl' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, LipSyncData) == 0x0000E0, "Member 'FSparksSongCatalogEntry::LipSyncData' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, GameplayTagContainer) == 0x0000F0, "Member 'FSparksSongCatalogEntry::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, QuicksilverInfo) == 0x000110, "Member 'FSparksSongCatalogEntry::QuicksilverInfo' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, Intensities) == 0x000140, "Member 'FSparksSongCatalogEntry::Intensities' has a wrong offset!");
static_assert(offsetof(FSparksSongCatalogEntry, bValid) == 0x000160, "Member 'FSparksSongCatalogEntry::bValid' has a wrong offset!");

}

