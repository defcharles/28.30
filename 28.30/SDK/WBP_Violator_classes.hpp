#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Violator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Violator.WBP_Violator_C
// 0x0080 (0x0340 - 0x02C0)
class UWBP_Violator_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Icon;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Violator;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Icon_Texture;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     IconMaterial;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IconSize;                                          // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IconShear;                                         // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IconAngle;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IconColor;                                         // 0x030C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ViolatorText;                                      // 0x0320(0x0018)(Edit, BlueprintVisible)
	double                                        IconToTextSpacing;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Violator(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void UpdateViolatorText(const class FText& InText, bool bDisplayTimeIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Violator_C">();
	}
	static class UWBP_Violator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Violator_C>();
	}
};
static_assert(alignof(UWBP_Violator_C) == 0x000008, "Wrong alignment on UWBP_Violator_C");
static_assert(sizeof(UWBP_Violator_C) == 0x000340, "Wrong size on UWBP_Violator_C");
static_assert(offsetof(UWBP_Violator_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_Violator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, Image_Icon) == 0x0002C8, "Member 'UWBP_Violator_C::Image_Icon' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, Text_Violator) == 0x0002D0, "Member 'UWBP_Violator_C::Text_Violator' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, Icon_Texture) == 0x0002D8, "Member 'UWBP_Violator_C::Icon_Texture' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconMaterial) == 0x0002E0, "Member 'UWBP_Violator_C::IconMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconSize) == 0x0002E8, "Member 'UWBP_Violator_C::IconSize' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconShear) == 0x0002F8, "Member 'UWBP_Violator_C::IconShear' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconAngle) == 0x000308, "Member 'UWBP_Violator_C::IconAngle' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconColor) == 0x00030C, "Member 'UWBP_Violator_C::IconColor' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, ViolatorText) == 0x000320, "Member 'UWBP_Violator_C::ViolatorText' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_C, IconToTextSpacing) == 0x000338, "Member 'UWBP_Violator_C::IconToTextSpacing' has a wrong offset!");

}

