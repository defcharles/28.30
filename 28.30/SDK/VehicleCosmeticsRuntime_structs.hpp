#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CosmeticsFrameworkLoadouts_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum VehicleCosmeticsRuntime.EVehicleWheelIndex
// NumValues: 0x0005
enum class EVehicleWheelIndex : uint8
{
	FrontLeft                                = 0,
	FrontRight                               = 1,
	BackLeft                                 = 2,
	BackRight                                = 3,
	Num                                      = 4,
};

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleSpringSettings
// 0x0008 (0x0008 - 0x0000)
struct FBouncyChassisVehicleSpringSettings final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisVehicleSpringSettings) == 0x000004, "Wrong alignment on FBouncyChassisVehicleSpringSettings");
static_assert(sizeof(FBouncyChassisVehicleSpringSettings) == 0x000008, "Wrong size on FBouncyChassisVehicleSpringSettings");
static_assert(offsetof(FBouncyChassisVehicleSpringSettings, Strength) == 0x000000, "Member 'FBouncyChassisVehicleSpringSettings::Strength' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSpringSettings, Damping) == 0x000004, "Member 'FBouncyChassisVehicleSpringSettings::Damping' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleSetup
// 0x0048 (0x0048 - 0x0000)
struct FBouncyChassisVehicleSetup final
{
public:
	struct FBouncyChassisVehicleSpringSettings    PitchSpring;                                       // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchMaxAngleDegrees;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleSpringSettings    RollSpring;                                        // 0x000C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollMaxAngleDegrees;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleSpringSettings    ZSpring;                                           // 0x0018(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ZMaxDrop;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZMaxRaise;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0028(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementZOffset;                               // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBouncyChassisVehicleSetup) == 0x000008, "Wrong alignment on FBouncyChassisVehicleSetup");
static_assert(sizeof(FBouncyChassisVehicleSetup) == 0x000048, "Wrong size on FBouncyChassisVehicleSetup");
static_assert(offsetof(FBouncyChassisVehicleSetup, PitchSpring) == 0x000000, "Member 'FBouncyChassisVehicleSetup::PitchSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, PitchMaxAngleDegrees) == 0x000008, "Member 'FBouncyChassisVehicleSetup::PitchMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, RollSpring) == 0x00000C, "Member 'FBouncyChassisVehicleSetup::RollSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, RollMaxAngleDegrees) == 0x000014, "Member 'FBouncyChassisVehicleSetup::RollMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, ZSpring) == 0x000018, "Member 'FBouncyChassisVehicleSetup::ZSpring' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, ZMaxDrop) == 0x000020, "Member 'FBouncyChassisVehicleSetup::ZMaxDrop' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, ZMaxRaise) == 0x000024, "Member 'FBouncyChassisVehicleSetup::ZMaxRaise' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, MaxDisplacement) == 0x000028, "Member 'FBouncyChassisVehicleSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleSetup, DisplacementZOffset) == 0x000040, "Member 'FBouncyChassisVehicleSetup::DisplacementZOffset' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.MaterialSlotWithParameterInfo
// 0x000C (0x000C - 0x0000)
struct FMaterialSlotWithParameterInfo final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialParameterName;                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialParameterValue;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialSlotWithParameterInfo) == 0x000004, "Wrong alignment on FMaterialSlotWithParameterInfo");
static_assert(sizeof(FMaterialSlotWithParameterInfo) == 0x00000C, "Wrong size on FMaterialSlotWithParameterInfo");
static_assert(offsetof(FMaterialSlotWithParameterInfo, MaterialSlotName) == 0x000000, "Member 'FMaterialSlotWithParameterInfo::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FMaterialSlotWithParameterInfo, MaterialParameterName) == 0x000004, "Member 'FMaterialSlotWithParameterInfo::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FMaterialSlotWithParameterInfo, MaterialParameterValue) == 0x000008, "Member 'FMaterialSlotWithParameterInfo::MaterialParameterValue' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsDefaultLoadoutInfo
// 0x0058 (0x0058 - 0x0000)
struct FVehicleCosmeticsDefaultLoadoutInfo final
{
public:
	struct FGameplayTagQuery                      VehicleTagQuery;                                   // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCosmeticLoadout                       DefaultLoadout;                                    // 0x0048(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsDefaultLoadoutInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsDefaultLoadoutInfo");
static_assert(sizeof(FVehicleCosmeticsDefaultLoadoutInfo) == 0x000058, "Wrong size on FVehicleCosmeticsDefaultLoadoutInfo");
static_assert(offsetof(FVehicleCosmeticsDefaultLoadoutInfo, VehicleTagQuery) == 0x000000, "Member 'FVehicleCosmeticsDefaultLoadoutInfo::VehicleTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsDefaultLoadoutInfo, DefaultLoadout) == 0x000048, "Member 'FVehicleCosmeticsDefaultLoadoutInfo::DefaultLoadout' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleBoxSpringSetup
// 0x0050 (0x0050 - 0x0000)
struct FBouncyChassisVehicleBoxSpringSetup final
{
public:
	struct FVector                                Strength;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Damping;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisVehicleBoxSpringSetup) == 0x000008, "Wrong alignment on FBouncyChassisVehicleBoxSpringSetup");
static_assert(sizeof(FBouncyChassisVehicleBoxSpringSetup) == 0x000050, "Wrong size on FBouncyChassisVehicleBoxSpringSetup");
static_assert(offsetof(FBouncyChassisVehicleBoxSpringSetup, Strength) == 0x000000, "Member 'FBouncyChassisVehicleBoxSpringSetup::Strength' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleBoxSpringSetup, Damping) == 0x000018, "Member 'FBouncyChassisVehicleBoxSpringSetup::Damping' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleBoxSpringSetup, MaxDisplacement) == 0x000030, "Member 'FBouncyChassisVehicleBoxSpringSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleBoxSpringSetup, MaxSpeed) == 0x000048, "Member 'FBouncyChassisVehicleBoxSpringSetup::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleBoxSpringSetup, Mass) == 0x00004C, "Member 'FBouncyChassisVehicleBoxSpringSetup::Mass' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleBoxSpring
// 0x00B0 (0x00B0 - 0x0000)
struct FBouncyChassisVehicleBoxSpring final
{
public:
	struct FBouncyChassisVehicleBoxSpringSetup    Setup;                                             // 0x0000(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBouncyChassisVehicleBoxSpring) == 0x000008, "Wrong alignment on FBouncyChassisVehicleBoxSpring");
static_assert(sizeof(FBouncyChassisVehicleBoxSpring) == 0x0000B0, "Wrong size on FBouncyChassisVehicleBoxSpring");
static_assert(offsetof(FBouncyChassisVehicleBoxSpring, Setup) == 0x000000, "Member 'FBouncyChassisVehicleBoxSpring::Setup' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleState
// 0x000C (0x000C - 0x0000)
struct FBouncyChassisVehicleState final
{
public:
	float                                         PitchDegrees;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollDegrees;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationZ;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisVehicleState) == 0x000004, "Wrong alignment on FBouncyChassisVehicleState");
static_assert(sizeof(FBouncyChassisVehicleState) == 0x00000C, "Wrong size on FBouncyChassisVehicleState");
static_assert(offsetof(FBouncyChassisVehicleState, PitchDegrees) == 0x000000, "Member 'FBouncyChassisVehicleState::PitchDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleState, RollDegrees) == 0x000004, "Member 'FBouncyChassisVehicleState::RollDegrees' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleState, TranslationZ) == 0x000008, "Member 'FBouncyChassisVehicleState::TranslationZ' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleInstance
// 0x0108 (0x0108 - 0x0000)
struct FBouncyChassisVehicleInstance final
{
public:
	struct FBouncyChassisVehicleBoxSpring         Spring;                                            // 0x0000(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBouncyChassisVehicleInstance) == 0x000008, "Wrong alignment on FBouncyChassisVehicleInstance");
static_assert(sizeof(FBouncyChassisVehicleInstance) == 0x000108, "Wrong size on FBouncyChassisVehicleInstance");
static_assert(offsetof(FBouncyChassisVehicleInstance, Spring) == 0x000000, "Member 'FBouncyChassisVehicleInstance::Spring' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisSpringTravel
// 0x0020 (0x0020 - 0x0000)
struct FBouncyChassisSpringTravel final
{
public:
	struct FFloatInterval                         Default;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Popped;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         TireModded;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         TireModPopped;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisSpringTravel) == 0x000004, "Wrong alignment on FBouncyChassisSpringTravel");
static_assert(sizeof(FBouncyChassisSpringTravel) == 0x000020, "Wrong size on FBouncyChassisSpringTravel");
static_assert(offsetof(FBouncyChassisSpringTravel, Default) == 0x000000, "Member 'FBouncyChassisSpringTravel::Default' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSpringTravel, Popped) == 0x000008, "Member 'FBouncyChassisSpringTravel::Popped' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSpringTravel, TireModded) == 0x000010, "Member 'FBouncyChassisSpringTravel::TireModded' has a wrong offset!");
static_assert(offsetof(FBouncyChassisSpringTravel, TireModPopped) == 0x000018, "Member 'FBouncyChassisSpringTravel::TireModPopped' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BouncyChassisVehicleWheelAnimInfo
// 0x002C (0x002C - 0x0000)
struct FBouncyChassisVehicleWheelAnimInfo final
{
public:
	float                                         SpringToWheelOffsetZ;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBouncyChassisSpringTravel             SpringTravelRange;                                 // 0x0004(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TravelDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBouncyChassisVehicleWheelAnimInfo) == 0x000004, "Wrong alignment on FBouncyChassisVehicleWheelAnimInfo");
static_assert(sizeof(FBouncyChassisVehicleWheelAnimInfo) == 0x00002C, "Wrong size on FBouncyChassisVehicleWheelAnimInfo");
static_assert(offsetof(FBouncyChassisVehicleWheelAnimInfo, SpringToWheelOffsetZ) == 0x000000, "Member 'FBouncyChassisVehicleWheelAnimInfo::SpringToWheelOffsetZ' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleWheelAnimInfo, SpringTravelRange) == 0x000004, "Member 'FBouncyChassisVehicleWheelAnimInfo::SpringTravelRange' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleWheelAnimInfo, WheelRadius) == 0x000024, "Member 'FBouncyChassisVehicleWheelAnimInfo::WheelRadius' has a wrong offset!");
static_assert(offsetof(FBouncyChassisVehicleWheelAnimInfo, TravelDistance) == 0x000028, "Member 'FBouncyChassisVehicleWheelAnimInfo::TravelDistance' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsRestrictionDefinition
// 0x0060 (0x0060 - 0x0000)
struct FVehicleCosmeticsRestrictionDefinition final
{
public:
	struct FGameplayTagQuery                      RequiredTagQuery;                                  // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   ItemLockerRestrictedText;                          // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVehicleCosmeticsRestrictionDefinition) == 0x000008, "Wrong alignment on FVehicleCosmeticsRestrictionDefinition");
static_assert(sizeof(FVehicleCosmeticsRestrictionDefinition) == 0x000060, "Wrong size on FVehicleCosmeticsRestrictionDefinition");
static_assert(offsetof(FVehicleCosmeticsRestrictionDefinition, RequiredTagQuery) == 0x000000, "Member 'FVehicleCosmeticsRestrictionDefinition::RequiredTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsRestrictionDefinition, ItemLockerRestrictedText) == 0x000048, "Member 'FVehicleCosmeticsRestrictionDefinition::ItemLockerRestrictedText' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.WheelAttachInfo
// 0x0090 (0x0090 - 0x0000)
struct FWheelAttachInfo final
{
public:
	EVehicleWheelLocations                        WheelLocation;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      WheelSocket;                                       // 0x0010(0x0080)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWheelAttachInfo) == 0x000010, "Wrong alignment on FWheelAttachInfo");
static_assert(sizeof(FWheelAttachInfo) == 0x000090, "Wrong size on FWheelAttachInfo");
static_assert(offsetof(FWheelAttachInfo, WheelLocation) == 0x000000, "Member 'FWheelAttachInfo::WheelLocation' has a wrong offset!");
static_assert(offsetof(FWheelAttachInfo, WheelSocket) == 0x000010, "Member 'FWheelAttachInfo::WheelSocket' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.SpinnerWheelInfo
// 0x0010 (0x0010 - 0x0000)
struct FSpinnerWheelInfo final
{
public:
	bool                                          bShouldSpin;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinAccelRate;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinDecelRate;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinMaxSpeed;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpinnerWheelInfo) == 0x000004, "Wrong alignment on FSpinnerWheelInfo");
static_assert(sizeof(FSpinnerWheelInfo) == 0x000010, "Wrong size on FSpinnerWheelInfo");
static_assert(offsetof(FSpinnerWheelInfo, bShouldSpin) == 0x000000, "Member 'FSpinnerWheelInfo::bShouldSpin' has a wrong offset!");
static_assert(offsetof(FSpinnerWheelInfo, SpinAccelRate) == 0x000004, "Member 'FSpinnerWheelInfo::SpinAccelRate' has a wrong offset!");
static_assert(offsetof(FSpinnerWheelInfo, SpinDecelRate) == 0x000008, "Member 'FSpinnerWheelInfo::SpinDecelRate' has a wrong offset!");
static_assert(offsetof(FSpinnerWheelInfo, SpinMaxSpeed) == 0x00000C, "Member 'FSpinnerWheelInfo::SpinMaxSpeed' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.WheelSetupInfo
// 0x0080 (0x0080 - 0x0000)
struct FWheelSetupInfo final
{
public:
	EVehicleWheelLocations                        WheelLocation;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WheelOffset;                                       // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WheelRotation;                                     // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WheelScale;                                        // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialSlotWithParameterInfo> WheelMaterialSlotInfos;                            // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSpinnerWheelInfo                      SpinnerWheelInfo;                                  // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleWheelFXInfo                    WheelFXInfo;                                       // 0x0070(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWheelSetupInfo) == 0x000008, "Wrong alignment on FWheelSetupInfo");
static_assert(sizeof(FWheelSetupInfo) == 0x000080, "Wrong size on FWheelSetupInfo");
static_assert(offsetof(FWheelSetupInfo, WheelLocation) == 0x000000, "Member 'FWheelSetupInfo::WheelLocation' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, WheelOffset) == 0x000008, "Member 'FWheelSetupInfo::WheelOffset' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, WheelRotation) == 0x000020, "Member 'FWheelSetupInfo::WheelRotation' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, WheelScale) == 0x000038, "Member 'FWheelSetupInfo::WheelScale' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, WheelMaterialSlotInfos) == 0x000050, "Member 'FWheelSetupInfo::WheelMaterialSlotInfos' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, SpinnerWheelInfo) == 0x000060, "Member 'FWheelSetupInfo::SpinnerWheelInfo' has a wrong offset!");
static_assert(offsetof(FWheelSetupInfo, WheelFXInfo) == 0x000070, "Member 'FWheelSetupInfo::WheelFXInfo' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.BoosterAttachInfo
// 0x0080 (0x0080 - 0x0000)
struct FBoosterAttachInfo final
{
public:
	struct FBoneSocketTarget                      BoosterSocket;                                     // 0x0000(0x0080)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoosterAttachInfo) == 0x000010, "Wrong alignment on FBoosterAttachInfo");
static_assert(sizeof(FBoosterAttachInfo) == 0x000080, "Wrong size on FBoosterAttachInfo");
static_assert(offsetof(FBoosterAttachInfo, BoosterSocket) == 0x000000, "Member 'FBoosterAttachInfo::BoosterSocket' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.TirePopInfo
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FTirePopInfo
{
};
#pragma pack(pop)
static_assert(alignof(FTirePopInfo) == 0x000001, "Wrong alignment on FTirePopInfo");
static_assert(sizeof(FTirePopInfo) == 0x000001, "Wrong size on FTirePopInfo");

// ScriptStruct VehicleCosmeticsRuntime.TirePopUsingBoneInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FTirePopUsingBoneInfo final : public FTirePopInfo
{
public:
	TSoftObjectPtr<class USkeleton>               WheelSkeletonReference;                            // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneSocketTarget                      WheelBone;                                         // 0x0020(0x0080)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTirePopUsingBoneInfo) == 0x000010, "Wrong alignment on FTirePopUsingBoneInfo");
static_assert(sizeof(FTirePopUsingBoneInfo) == 0x0000A0, "Wrong size on FTirePopUsingBoneInfo");
static_assert(offsetof(FTirePopUsingBoneInfo, WheelSkeletonReference) == 0x000000, "Member 'FTirePopUsingBoneInfo::WheelSkeletonReference' has a wrong offset!");
static_assert(offsetof(FTirePopUsingBoneInfo, WheelBone) == 0x000020, "Member 'FTirePopUsingBoneInfo::WheelBone' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.TirePopUsingMaterialParameterInfo
// 0x0018 (0x0018 - 0x0000)
struct FTirePopUsingMaterialParameterInfo final : public FTirePopInfo
{
public:
	TArray<class FName>                           WheelMaterialSlotNames;                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   WheelMaterialParameterName;                        // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTirePopUsingMaterialParameterInfo) == 0x000008, "Wrong alignment on FTirePopUsingMaterialParameterInfo");
static_assert(sizeof(FTirePopUsingMaterialParameterInfo) == 0x000018, "Wrong size on FTirePopUsingMaterialParameterInfo");
static_assert(offsetof(FTirePopUsingMaterialParameterInfo, WheelMaterialSlotNames) == 0x000000, "Member 'FTirePopUsingMaterialParameterInfo::WheelMaterialSlotNames' has a wrong offset!");
static_assert(offsetof(FTirePopUsingMaterialParameterInfo, WheelMaterialParameterName) == 0x000010, "Member 'FTirePopUsingMaterialParameterInfo::WheelMaterialParameterName' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.WheelInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FWheelInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWheelInfo) == 0x000008, "Wrong alignment on FWheelInfo");
static_assert(sizeof(FWheelInfo) == 0x000080, "Wrong size on FWheelInfo");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsBodyPhysicsInfo
// 0x0038 (0x0038 - 0x0000)
struct FVehicleCosmeticsBodyPhysicsInfo final
{
public:
	struct FVector                                CenterOfMass;                                      // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPhysicsAsset>           PhysicsAssetOverride;                              // 0x0018(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsBodyPhysicsInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsBodyPhysicsInfo");
static_assert(sizeof(FVehicleCosmeticsBodyPhysicsInfo) == 0x000038, "Wrong size on FVehicleCosmeticsBodyPhysicsInfo");
static_assert(offsetof(FVehicleCosmeticsBodyPhysicsInfo, CenterOfMass) == 0x000000, "Member 'FVehicleCosmeticsBodyPhysicsInfo::CenterOfMass' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsBodyPhysicsInfo, PhysicsAssetOverride) == 0x000018, "Member 'FVehicleCosmeticsBodyPhysicsInfo::PhysicsAssetOverride' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsBodyPhysicsQueryInfo
// 0x0080 (0x0080 - 0x0000)
struct FVehicleCosmeticsBodyPhysicsQueryInfo final
{
public:
	struct FGameplayTagQuery                      VehicleTagQuery;                                   // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVehicleCosmeticsBodyPhysicsInfo       PhysicsInfo;                                       // 0x0048(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsBodyPhysicsQueryInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsBodyPhysicsQueryInfo");
static_assert(sizeof(FVehicleCosmeticsBodyPhysicsQueryInfo) == 0x000080, "Wrong size on FVehicleCosmeticsBodyPhysicsQueryInfo");
static_assert(offsetof(FVehicleCosmeticsBodyPhysicsQueryInfo, VehicleTagQuery) == 0x000000, "Member 'FVehicleCosmeticsBodyPhysicsQueryInfo::VehicleTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsBodyPhysicsQueryInfo, PhysicsInfo) == 0x000048, "Member 'FVehicleCosmeticsBodyPhysicsQueryInfo::PhysicsInfo' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsAnimInfo
// 0x0068 (0x0068 - 0x0000)
struct FVehicleCosmeticsAnimInfo final
{
public:
	struct FGameplayTagQuery                      VehicleTagQuery;                                   // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimClass;                                         // 0x0048(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsAnimInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsAnimInfo");
static_assert(sizeof(FVehicleCosmeticsAnimInfo) == 0x000068, "Wrong size on FVehicleCosmeticsAnimInfo");
static_assert(offsetof(FVehicleCosmeticsAnimInfo, VehicleTagQuery) == 0x000000, "Member 'FVehicleCosmeticsAnimInfo::VehicleTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsAnimInfo, AnimClass) == 0x000048, "Member 'FVehicleCosmeticsAnimInfo::AnimClass' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsBodyWindowInfo
// 0x0018 (0x0018 - 0x0000)
struct FVehicleCosmeticsBodyWindowInfo final
{
public:
	class FName                                   WindowDataTableParameterName;                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    WindowRow;                                         // 0x0008(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsBodyWindowInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsBodyWindowInfo");
static_assert(sizeof(FVehicleCosmeticsBodyWindowInfo) == 0x000018, "Wrong size on FVehicleCosmeticsBodyWindowInfo");
static_assert(offsetof(FVehicleCosmeticsBodyWindowInfo, WindowDataTableParameterName) == 0x000000, "Member 'FVehicleCosmeticsBodyWindowInfo::WindowDataTableParameterName' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsBodyWindowInfo, WindowRow) == 0x000008, "Member 'FVehicleCosmeticsBodyWindowInfo::WindowRow' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsBodyWindowQueryInfo
// 0x0060 (0x0060 - 0x0000)
struct FVehicleCosmeticsBodyWindowQueryInfo final
{
public:
	struct FGameplayTagQuery                      VehicleTagQuery;                                   // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVehicleCosmeticsBodyWindowInfo        WindowInfo;                                        // 0x0048(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsBodyWindowQueryInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticsBodyWindowQueryInfo");
static_assert(sizeof(FVehicleCosmeticsBodyWindowQueryInfo) == 0x000060, "Wrong size on FVehicleCosmeticsBodyWindowQueryInfo");
static_assert(offsetof(FVehicleCosmeticsBodyWindowQueryInfo, VehicleTagQuery) == 0x000000, "Member 'FVehicleCosmeticsBodyWindowQueryInfo::VehicleTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsBodyWindowQueryInfo, WindowInfo) == 0x000048, "Member 'FVehicleCosmeticsBodyWindowQueryInfo::WindowInfo' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsCustomizableObjectFloatInfo
// 0x0008 (0x0008 - 0x0000)
struct FVehicleCosmeticsCustomizableObjectFloatInfo final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterValue;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsCustomizableObjectFloatInfo) == 0x000004, "Wrong alignment on FVehicleCosmeticsCustomizableObjectFloatInfo");
static_assert(sizeof(FVehicleCosmeticsCustomizableObjectFloatInfo) == 0x000008, "Wrong size on FVehicleCosmeticsCustomizableObjectFloatInfo");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectFloatInfo, ParameterName) == 0x000000, "Member 'FVehicleCosmeticsCustomizableObjectFloatInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectFloatInfo, ParameterValue) == 0x000004, "Member 'FVehicleCosmeticsCustomizableObjectFloatInfo::ParameterValue' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsCustomizableObjectIntInfo
// 0x0008 (0x0008 - 0x0000)
struct FVehicleCosmeticsCustomizableObjectIntInfo final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterValue;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsCustomizableObjectIntInfo) == 0x000004, "Wrong alignment on FVehicleCosmeticsCustomizableObjectIntInfo");
static_assert(sizeof(FVehicleCosmeticsCustomizableObjectIntInfo) == 0x000008, "Wrong size on FVehicleCosmeticsCustomizableObjectIntInfo");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectIntInfo, ParameterName) == 0x000000, "Member 'FVehicleCosmeticsCustomizableObjectIntInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectIntInfo, ParameterValue) == 0x000004, "Member 'FVehicleCosmeticsCustomizableObjectIntInfo::ParameterValue' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsCustomizableObjectColorInfo
// 0x0014 (0x0014 - 0x0000)
struct FVehicleCosmeticsCustomizableObjectColorInfo final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParameterValue;                                    // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsCustomizableObjectColorInfo) == 0x000004, "Wrong alignment on FVehicleCosmeticsCustomizableObjectColorInfo");
static_assert(sizeof(FVehicleCosmeticsCustomizableObjectColorInfo) == 0x000014, "Wrong size on FVehicleCosmeticsCustomizableObjectColorInfo");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectColorInfo, ParameterName) == 0x000000, "Member 'FVehicleCosmeticsCustomizableObjectColorInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsCustomizableObjectColorInfo, ParameterValue) == 0x000004, "Member 'FVehicleCosmeticsCustomizableObjectColorInfo::ParameterValue' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.VehicleCosmeticsAdditionalParameterInfos
// 0x0030 (0x0030 - 0x0000)
struct FVehicleCosmeticsAdditionalParameterInfos final
{
public:
	TArray<struct FVehicleCosmeticsCustomizableObjectFloatInfo> FloatParameters;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVehicleCosmeticsCustomizableObjectIntInfo> IntParameters;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVehicleCosmeticsCustomizableObjectColorInfo> ColorParameters;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticsAdditionalParameterInfos) == 0x000008, "Wrong alignment on FVehicleCosmeticsAdditionalParameterInfos");
static_assert(sizeof(FVehicleCosmeticsAdditionalParameterInfos) == 0x000030, "Wrong size on FVehicleCosmeticsAdditionalParameterInfos");
static_assert(offsetof(FVehicleCosmeticsAdditionalParameterInfos, FloatParameters) == 0x000000, "Member 'FVehicleCosmeticsAdditionalParameterInfos::FloatParameters' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsAdditionalParameterInfos, IntParameters) == 0x000010, "Member 'FVehicleCosmeticsAdditionalParameterInfos::IntParameters' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticsAdditionalParameterInfos, ColorParameters) == 0x000020, "Member 'FVehicleCosmeticsAdditionalParameterInfos::ColorParameters' has a wrong offset!");

// ScriptStruct VehicleCosmeticsRuntime.AnimNode_BouncyChassisVehicleController
// 0x0018 (0x00E0 - 0x00C8)
struct FAnimNode_BouncyChassisVehicleController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         ChassisBone;                                       // 0x00C8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleState             BouncyChassis;                                     // 0x00D4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BouncyChassisVehicleController) == 0x000008, "Wrong alignment on FAnimNode_BouncyChassisVehicleController");
static_assert(sizeof(FAnimNode_BouncyChassisVehicleController) == 0x0000E0, "Wrong size on FAnimNode_BouncyChassisVehicleController");
static_assert(offsetof(FAnimNode_BouncyChassisVehicleController, ChassisBone) == 0x0000C8, "Member 'FAnimNode_BouncyChassisVehicleController::ChassisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BouncyChassisVehicleController, BouncyChassis) == 0x0000D4, "Member 'FAnimNode_BouncyChassisVehicleController::BouncyChassis' has a wrong offset!");

}

