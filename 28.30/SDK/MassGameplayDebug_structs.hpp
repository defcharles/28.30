#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassGameplayDebug

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MassEntity_structs.hpp"


namespace SDK
{

// Enum MassGameplayDebug.EMassEntityDebugShape
// NumValues: 0x0005
enum class EMassEntityDebugShape : uint8
{
	Box                                      = 0,
	Cone                                     = 1,
	Cylinder                                 = 2,
	Capsule                                  = 3,
	MAX                                      = 4,
};

// ScriptStruct MassGameplayDebug.SimDebugDataRow
// 0x0018 (0x0020 - 0x0008)
struct FSimDebugDataRow final : public FTableRowBase
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimDebugDataRow) == 0x000008, "Wrong alignment on FSimDebugDataRow");
static_assert(sizeof(FSimDebugDataRow) == 0x000020, "Wrong size on FSimDebugDataRow");
static_assert(offsetof(FSimDebugDataRow, Mesh) == 0x000008, "Member 'FSimDebugDataRow::Mesh' has a wrong offset!");
static_assert(offsetof(FSimDebugDataRow, MaterialOverride) == 0x000010, "Member 'FSimDebugDataRow::MaterialOverride' has a wrong offset!");
static_assert(offsetof(FSimDebugDataRow, Scale) == 0x000018, "Member 'FSimDebugDataRow::Scale' has a wrong offset!");

// ScriptStruct MassGameplayDebug.SimDebugVisFragment
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSimDebugVisFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimDebugVisFragment) == 0x000004, "Wrong alignment on FSimDebugVisFragment");
static_assert(sizeof(FSimDebugVisFragment) == 0x000008, "Wrong size on FSimDebugVisFragment");

// ScriptStruct MassGameplayDebug.DataFragment_DebugVis
// 0x0001 (0x0001 - 0x0000)
struct FDataFragment_DebugVis final : public FMassFragment
{
public:
	EMassEntityDebugShape                         Shape;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataFragment_DebugVis) == 0x000001, "Wrong alignment on FDataFragment_DebugVis");
static_assert(sizeof(FDataFragment_DebugVis) == 0x000001, "Wrong size on FDataFragment_DebugVis");
static_assert(offsetof(FDataFragment_DebugVis, Shape) == 0x000000, "Member 'FDataFragment_DebugVis::Shape' has a wrong offset!");

// ScriptStruct MassGameplayDebug.MassDebuggableTag
// 0x0000 (0x0001 - 0x0001)
struct FMassDebuggableTag final : public FMassTag
{
};
static_assert(alignof(FMassDebuggableTag) == 0x000001, "Wrong alignment on FMassDebuggableTag");
static_assert(sizeof(FMassDebuggableTag) == 0x000001, "Wrong size on FMassDebuggableTag");

// ScriptStruct MassGameplayDebug.AgentDebugVisualization
// 0x0020 (0x0028 - 0x0008)
struct FAgentDebugVisualization final : public FTableRowBase
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VisualNearCullDistance;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VisualFarCullDistance;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassEntityDebugShape                         WireShape;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAgentDebugVisualization) == 0x000008, "Wrong alignment on FAgentDebugVisualization");
static_assert(sizeof(FAgentDebugVisualization) == 0x000028, "Wrong size on FAgentDebugVisualization");
static_assert(offsetof(FAgentDebugVisualization, Mesh) == 0x000008, "Member 'FAgentDebugVisualization::Mesh' has a wrong offset!");
static_assert(offsetof(FAgentDebugVisualization, MaterialOverride) == 0x000010, "Member 'FAgentDebugVisualization::MaterialOverride' has a wrong offset!");
static_assert(offsetof(FAgentDebugVisualization, VisualNearCullDistance) == 0x000018, "Member 'FAgentDebugVisualization::VisualNearCullDistance' has a wrong offset!");
static_assert(offsetof(FAgentDebugVisualization, VisualFarCullDistance) == 0x00001C, "Member 'FAgentDebugVisualization::VisualFarCullDistance' has a wrong offset!");
static_assert(offsetof(FAgentDebugVisualization, WireShape) == 0x000020, "Member 'FAgentDebugVisualization::WireShape' has a wrong offset!");

}

