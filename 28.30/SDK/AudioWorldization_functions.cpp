#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWorldization

#include "Basic.hpp"

#include "AudioWorldization_classes.hpp"
#include "AudioWorldization_parameters.hpp"


namespace SDK
{

// Function AudioWorldization.AudioWorldizationSubsystem.OverrideEffectSends
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InIdentifier                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioWorldizationSend>   InSends                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAudioWorldizationSubsystem::OverrideEffectSends(class FName InIdentifier, const TArray<struct FAudioWorldizationSend>& InSends)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OverrideEffectSends");

	Params::AudioWorldizationSubsystem_OverrideEffectSends Parms{};

	Parms.InIdentifier = InIdentifier;
	Parms.InSends = std::move(InSends);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioWorldization.AudioWorldizationSubsystem.RemoveEffectSendOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InIdentifier                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioWorldizationSubsystem::RemoveEffectSendOverride(class FName InIdentifier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveEffectSendOverride");

	Params::AudioWorldizationSubsystem_RemoveEffectSendOverride Parms{};

	Parms.InIdentifier = InIdentifier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioWorldization.AudioWorldizationSubsystem.RemoveWorldizationSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InIdentifier                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioWorldizationSubsystem::RemoveWorldizationSettings(const class FName InIdentifier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveWorldizationSettings");

	Params::AudioWorldizationSubsystem_RemoveWorldizationSettings Parms{};

	Parms.InIdentifier = InIdentifier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioWorldization.AudioWorldizationSubsystem.SetDefaultSettings
// (Final, Native, Public, BlueprintCallable)

void UAudioWorldizationSubsystem::SetDefaultSettings()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDefaultSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AudioWorldization.AudioWorldizationSubsystem.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioWorldizationSubsystem::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::AudioWorldizationSubsystem_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioWorldization.AudioWorldizationSubsystem.SetWorldizationSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioWorldizationSettings       InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAudioWorldizationSubsystem::SetWorldizationSettings(const struct FAudioWorldizationSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWorldizationSettings");

	Params::AudioWorldizationSubsystem_SetWorldizationSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AudioWorldization.AudioWorldizationSubsystem.GetEnclosureFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioWorldizationSubsystem::GetEnclosureFactor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEnclosureFactor");

	Params::AudioWorldizationSubsystem_GetEnclosureFactor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AudioWorldization.AudioWorldizationSubsystem.GetWallDistanceRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioWorldizationSubsystem::GetWallDistanceRatio() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWallDistanceRatio");

	Params::AudioWorldizationSubsystem_GetWallDistanceRatio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

