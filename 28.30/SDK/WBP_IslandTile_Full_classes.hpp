#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_IslandTile_Full

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WBP_IslandTile_Minimal_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_IslandTile_Full.WBP_IslandTile_Full_C
// 0x0020 (0x1800 - 0x17E0)
class UWBP_IslandTile_Full_C final : public UWBP_IslandTile_Minimal_C
{
public:
	uint8                                         Pad_17D1[0x7];                                     // 0x17D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_IslandTile_Full_C;              // 0x17D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Focused;                                           // 0x17E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_IslandName;                                   // 0x17E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LockedStatus_C*                    WBP_LockedStatus;                                  // 0x17F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_IslandTile_Full(int32 EntryPoint);
	void OnTileSelectionActive();
	void OnTileSelectionNotActive();
	void PreConstruct(bool IsDesignTime);
	void SetIslandName(const class FText& IslandName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_IslandTile_Full_C">();
	}
	static class UWBP_IslandTile_Full_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_IslandTile_Full_C>();
	}
};
static_assert(alignof(UWBP_IslandTile_Full_C) == 0x000010, "Wrong alignment on UWBP_IslandTile_Full_C");
static_assert(sizeof(UWBP_IslandTile_Full_C) == 0x001800, "Wrong size on UWBP_IslandTile_Full_C");
static_assert(offsetof(UWBP_IslandTile_Full_C, UberGraphFrame_WBP_IslandTile_Full_C) == 0x0017D8, "Member 'UWBP_IslandTile_Full_C::UberGraphFrame_WBP_IslandTile_Full_C' has a wrong offset!");
static_assert(offsetof(UWBP_IslandTile_Full_C, Focused) == 0x0017E0, "Member 'UWBP_IslandTile_Full_C::Focused' has a wrong offset!");
static_assert(offsetof(UWBP_IslandTile_Full_C, Text_IslandName) == 0x0017E8, "Member 'UWBP_IslandTile_Full_C::Text_IslandName' has a wrong offset!");
static_assert(offsetof(UWBP_IslandTile_Full_C, WBP_LockedStatus) == 0x0017F0, "Member 'UWBP_IslandTile_Full_C::WBP_LockedStatus' has a wrong offset!");

}

