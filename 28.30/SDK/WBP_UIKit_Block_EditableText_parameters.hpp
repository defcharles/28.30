#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Block_EditableText

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.ExecuteUbergraph_WBP_UIKit_Block_EditableText
// 0x0030 (0x0030 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0028(0x0008)(NoDestructor)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText) == 0x000004, "Wrong alignment on WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText) == 0x000030, "Wrong size on WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText, EntryPoint) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText, K2Node_MakeStruct_LinearColor) == 0x000004, "Member 'WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000018, "Member 'WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText, K2Node_Event_InFocusEvent) == 0x000028, "Member 'WBP_UIKit_Block_EditableText_C_ExecuteUbergraph_WBP_UIKit_Block_EditableText::K2Node_Event_InFocusEvent' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath) == 0x000008, "Wrong size on WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetFont
// 0x0060 (0x0060 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetFont final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetFont) == 0x000008, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetFont");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetFont) == 0x000060, "Wrong size on WBP_UIKit_Block_EditableText_C_SetFont");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetFont, Font) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetFont::Font' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetFont, CallFunc_GetDynamicFontMaterial_ReturnValue) == 0x000058, "Member 'WBP_UIKit_Block_EditableText_C_SetFont::CallFunc_GetDynamicFontMaterial_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetFontMaterial
// 0x0010 (0x0010 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetFontMaterial final
{
public:
	class UMaterialInstance*                      Material_Instance;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetFontMaterial) == 0x000008, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetFontMaterial");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetFontMaterial) == 0x000010, "Wrong size on WBP_UIKit_Block_EditableText_C_SetFontMaterial");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetFontMaterial, Material_Instance) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetFontMaterial::Material_Instance' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetFontMaterial, CallFunc_GetDynamicFontMaterial_ReturnValue) == 0x000008, "Member 'WBP_UIKit_Block_EditableText_C_SetFontMaterial::CallFunc_GetDynamicFontMaterial_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetHintText final
{
public:
	class FText                                   Hint_Text;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetHintText) == 0x000008, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetHintText");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetHintText) == 0x000018, "Wrong size on WBP_UIKit_Block_EditableText_C_SetHintText");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetHintText, Hint_Text) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetHintText::Hint_Text' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetIsPassword
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetIsPassword final
{
public:
	bool                                          IsPassword;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetIsPassword) == 0x000001, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetIsPassword");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetIsPassword) == 0x000001, "Wrong size on WBP_UIKit_Block_EditableText_C_SetIsPassword");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetIsPassword, IsPassword) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetIsPassword::IsPassword' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetJustification final
{
public:
	ETextJustify                                  Justification;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetJustification) == 0x000001, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetJustification");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetJustification) == 0x000001, "Wrong size on WBP_UIKit_Block_EditableText_C_SetJustification");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetJustification, Justification) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetJustification::Justification' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetMinDesiredWidth
// 0x0010 (0x0010 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth final
{
public:
	double                                        Min_Width;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinimumDesiredWidth_InMinDesiredWidth_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth) == 0x000008, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth) == 0x000010, "Wrong size on WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth, Min_Width) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth::Min_Width' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth, CallFunc_SetMinimumDesiredWidth_InMinDesiredWidth_ImplicitCast) == 0x000008, "Member 'WBP_UIKit_Block_EditableText_C_SetMinDesiredWidth::CallFunc_SetMinimumDesiredWidth_InMinDesiredWidth_ImplicitCast' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetMobileFontSizeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier final
{
public:
	float                                         MobileFontSizeMultiplier;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier) == 0x000004, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier) == 0x000004, "Wrong size on WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier, MobileFontSizeMultiplier) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetMobileFontSizeMultiplier::MobileFontSizeMultiplier' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetReadOnly
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetReadOnly final
{
public:
	bool                                          IsReadOnly;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetReadOnly) == 0x000001, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetReadOnly");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetReadOnly) == 0x000001, "Wrong size on WBP_UIKit_Block_EditableText_C_SetReadOnly");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetReadOnly, IsReadOnly) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetReadOnly::IsReadOnly' has a wrong offset!");

// Function WBP_UIKit_Block_EditableText.WBP_UIKit_Block_EditableText_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Block_EditableText_C_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_UIKit_Block_EditableText_C_SetText) == 0x000008, "Wrong alignment on WBP_UIKit_Block_EditableText_C_SetText");
static_assert(sizeof(WBP_UIKit_Block_EditableText_C_SetText) == 0x000018, "Wrong size on WBP_UIKit_Block_EditableText_C_SetText");
static_assert(offsetof(WBP_UIKit_Block_EditableText_C_SetText, Text) == 0x000000, "Member 'WBP_UIKit_Block_EditableText_C_SetText::Text' has a wrong offset!");

}

