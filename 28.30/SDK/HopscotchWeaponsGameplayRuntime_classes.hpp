#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HopscotchWeaponsGameplayRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class HopscotchWeaponsGameplayRuntime.FortGameplayAbility_AppleSunSmall_Passive
// 0x00C8 (0x0C28 - 0x0B60)
class UFortGameplayAbility_AppleSunSmall_Passive final : public UFortGameplayAbility
{
public:
	TWeakObjectPtr<class AFortPlayerPawn>         PlayerPawn;                                        // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UCharacterMovementComponent> CharacterMovementComponent;                        // 0x0B68(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UpdateIntervalRow;                                 // 0x0B70(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            CanCrashpadGameplayEffectClass;                    // 0x0B98(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CanCrashpadGameplayTags;                           // 0x0BA0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  GliderRedeployTags;                                // 0x0BC0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         UpdateInterval;                                    // 0x0BE0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxFallVelocity;                                   // 0x0BE4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CloseToGroundThreshold;                            // 0x0BE8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundTraceMaxDistance;                            // 0x0BEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxVelocityJumpPromt;                              // 0x0BF0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultMinVelocityJumpPromt;                       // 0x0BF4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwimmingMinVelocityJumpPromt;                      // 0x0BF8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentMinVelocityJumpPrompt;                      // 0x0BFC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultMinTimeSinceGroundedForJumpPrompt;          // 0x0C00(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwimmingMinTimeSinceGroundedForJumpPrompt;         // 0x0C04(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentMinTimeSinceGroundedForJumpPrompt;          // 0x0C08(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceDistanceToGround;                             // 0x0C0C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeSinceGrounded;                                 // 0x0C10(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCrashpadByJumping;                             // 0x0C14(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviousCanCrashpad;                              // 0x0C15(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCloseToGround;                                  // 0x0C16(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsClambering;                                     // 0x0C17(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlockedTag;                                       // 0x0C18(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGliderTag;                                        // 0x0C19(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1A[0xE];                                      // 0x0C1A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void UpdateCanCrashpad();
	void UpdateIsCloseToGround();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_AppleSunSmall_Passive">();
	}
	static class UFortGameplayAbility_AppleSunSmall_Passive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_AppleSunSmall_Passive>();
	}
};
static_assert(alignof(UFortGameplayAbility_AppleSunSmall_Passive) == 0x000008, "Wrong alignment on UFortGameplayAbility_AppleSunSmall_Passive");
static_assert(sizeof(UFortGameplayAbility_AppleSunSmall_Passive) == 0x000C28, "Wrong size on UFortGameplayAbility_AppleSunSmall_Passive");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, PlayerPawn) == 0x000B60, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CharacterMovementComponent) == 0x000B68, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, UpdateIntervalRow) == 0x000B70, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::UpdateIntervalRow' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CanCrashpadGameplayEffectClass) == 0x000B98, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CanCrashpadGameplayEffectClass' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CanCrashpadGameplayTags) == 0x000BA0, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CanCrashpadGameplayTags' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, GliderRedeployTags) == 0x000BC0, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::GliderRedeployTags' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, UpdateInterval) == 0x000BE0, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::UpdateInterval' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, MaxFallVelocity) == 0x000BE4, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::MaxFallVelocity' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CloseToGroundThreshold) == 0x000BE8, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CloseToGroundThreshold' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, GroundTraceMaxDistance) == 0x000BEC, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::GroundTraceMaxDistance' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, MaxVelocityJumpPromt) == 0x000BF0, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::MaxVelocityJumpPromt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, DefaultMinVelocityJumpPromt) == 0x000BF4, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::DefaultMinVelocityJumpPromt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, SwimmingMinVelocityJumpPromt) == 0x000BF8, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::SwimmingMinVelocityJumpPromt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CurrentMinVelocityJumpPrompt) == 0x000BFC, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CurrentMinVelocityJumpPrompt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, DefaultMinTimeSinceGroundedForJumpPrompt) == 0x000C00, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::DefaultMinTimeSinceGroundedForJumpPrompt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, SwimmingMinTimeSinceGroundedForJumpPrompt) == 0x000C04, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::SwimmingMinTimeSinceGroundedForJumpPrompt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, CurrentMinTimeSinceGroundedForJumpPrompt) == 0x000C08, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::CurrentMinTimeSinceGroundedForJumpPrompt' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, TraceDistanceToGround) == 0x000C0C, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::TraceDistanceToGround' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, TimeSinceGrounded) == 0x000C10, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::TimeSinceGrounded' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bCanCrashpadByJumping) == 0x000C14, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bCanCrashpadByJumping' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bPreviousCanCrashpad) == 0x000C15, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bPreviousCanCrashpad' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bIsCloseToGround) == 0x000C16, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bIsCloseToGround' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bIsClambering) == 0x000C17, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bIsClambering' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bBlockedTag) == 0x000C18, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bBlockedTag' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_AppleSunSmall_Passive, bGliderTag) == 0x000C19, "Member 'UFortGameplayAbility_AppleSunSmall_Passive::bGliderTag' has a wrong offset!");

}

