#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicStreamMediaSource

#include "Basic.hpp"

#include "MediaUtils_structs.hpp"
#include "EpicMediaUtilities_structs.hpp"
#include "EpicStreamMediaSource_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function EpicStreamMediaSource.EpicStreamMediaSource.CancelVideoUrlRequest
// 0x0001 (0x0001 - 0x0000)
struct EpicStreamMediaSource_CancelVideoUrlRequest final
{
public:
	bool                                          bInCancelled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_CancelVideoUrlRequest) == 0x000001, "Wrong alignment on EpicStreamMediaSource_CancelVideoUrlRequest");
static_assert(sizeof(EpicStreamMediaSource_CancelVideoUrlRequest) == 0x000001, "Wrong size on EpicStreamMediaSource_CancelVideoUrlRequest");
static_assert(offsetof(EpicStreamMediaSource_CancelVideoUrlRequest, bInCancelled) == 0x000000, "Member 'EpicStreamMediaSource_CancelVideoUrlRequest::bInCancelled' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.ForceSegmentCaching
// 0x0001 (0x0001 - 0x0000)
struct EpicStreamMediaSource_ForceSegmentCaching final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_ForceSegmentCaching) == 0x000001, "Wrong alignment on EpicStreamMediaSource_ForceSegmentCaching");
static_assert(sizeof(EpicStreamMediaSource_ForceSegmentCaching) == 0x000001, "Wrong size on EpicStreamMediaSource_ForceSegmentCaching");
static_assert(offsetof(EpicStreamMediaSource_ForceSegmentCaching, bForce) == 0x000000, "Member 'EpicStreamMediaSource_ForceSegmentCaching::bForce' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.IsScreenRecordingInProgress
// 0x0001 (0x0001 - 0x0000)
struct EpicStreamMediaSource_IsScreenRecordingInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_IsScreenRecordingInProgress) == 0x000001, "Wrong alignment on EpicStreamMediaSource_IsScreenRecordingInProgress");
static_assert(sizeof(EpicStreamMediaSource_IsScreenRecordingInProgress) == 0x000001, "Wrong size on EpicStreamMediaSource_IsScreenRecordingInProgress");
static_assert(offsetof(EpicStreamMediaSource_IsScreenRecordingInProgress, ReturnValue) == 0x000000, "Member 'EpicStreamMediaSource_IsScreenRecordingInProgress::ReturnValue' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.MetadataResultHandler
// 0x02F0 (0x02F0 - 0x0000)
struct EpicStreamMediaSource_MetadataResultHandler final
{
public:
	struct FEpicMediaMetadataExt                  MetaData;                                          // 0x0000(0x02E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x02E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicStreamMediaSource_MetadataResultHandler) == 0x000008, "Wrong alignment on EpicStreamMediaSource_MetadataResultHandler");
static_assert(sizeof(EpicStreamMediaSource_MetadataResultHandler) == 0x0002F0, "Wrong size on EpicStreamMediaSource_MetadataResultHandler");
static_assert(offsetof(EpicStreamMediaSource_MetadataResultHandler, MetaData) == 0x000000, "Member 'EpicStreamMediaSource_MetadataResultHandler::MetaData' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_MetadataResultHandler, bSuccess) == 0x0002E8, "Member 'EpicStreamMediaSource_MetadataResultHandler::bSuccess' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.RequestVideoUrl
// 0x0008 (0x0008 - 0x0000)
struct EpicStreamMediaSource_RequestVideoUrl final
{
public:
	const class APlayerController*                FortPC;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_RequestVideoUrl) == 0x000008, "Wrong alignment on EpicStreamMediaSource_RequestVideoUrl");
static_assert(sizeof(EpicStreamMediaSource_RequestVideoUrl) == 0x000008, "Wrong size on EpicStreamMediaSource_RequestVideoUrl");
static_assert(offsetof(EpicStreamMediaSource_RequestVideoUrl, FortPC) == 0x000000, "Member 'EpicStreamMediaSource_RequestVideoUrl::FortPC' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.SetLocalizedOverlaysV2
// 0x0008 (0x0008 - 0x0000)
struct EpicStreamMediaSource_SetLocalizedOverlaysV2 final
{
public:
	class UEpicMediaDownloadLocalizedOverlays*    InOverlays;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_SetLocalizedOverlaysV2) == 0x000008, "Wrong alignment on EpicStreamMediaSource_SetLocalizedOverlaysV2");
static_assert(sizeof(EpicStreamMediaSource_SetLocalizedOverlaysV2) == 0x000008, "Wrong size on EpicStreamMediaSource_SetLocalizedOverlaysV2");
static_assert(offsetof(EpicStreamMediaSource_SetLocalizedOverlaysV2, InOverlays) == 0x000000, "Member 'EpicStreamMediaSource_SetLocalizedOverlaysV2::InOverlays' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.SetPlaybackStartTime
// 0x0004 (0x0004 - 0x0000)
struct EpicStreamMediaSource_SetPlaybackStartTime final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_SetPlaybackStartTime) == 0x000004, "Wrong alignment on EpicStreamMediaSource_SetPlaybackStartTime");
static_assert(sizeof(EpicStreamMediaSource_SetPlaybackStartTime) == 0x000004, "Wrong size on EpicStreamMediaSource_SetPlaybackStartTime");
static_assert(offsetof(EpicStreamMediaSource_SetPlaybackStartTime, StartTime) == 0x000000, "Member 'EpicStreamMediaSource_SetPlaybackStartTime::StartTime' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.SetSyncTimes
// 0x0020 (0x0020 - 0x0000)
struct EpicStreamMediaSource_SetSyncTimes final
{
public:
	struct FDateTime                              InNowTime;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InStartTime;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicStart;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InOffset_s;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay_s;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicStreamMediaSource_SetSyncTimes) == 0x000008, "Wrong alignment on EpicStreamMediaSource_SetSyncTimes");
static_assert(sizeof(EpicStreamMediaSource_SetSyncTimes) == 0x000020, "Wrong size on EpicStreamMediaSource_SetSyncTimes");
static_assert(offsetof(EpicStreamMediaSource_SetSyncTimes, InNowTime) == 0x000000, "Member 'EpicStreamMediaSource_SetSyncTimes::InNowTime' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_SetSyncTimes, InStartTime) == 0x000008, "Member 'EpicStreamMediaSource_SetSyncTimes::InStartTime' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_SetSyncTimes, DynamicStart) == 0x000010, "Member 'EpicStreamMediaSource_SetSyncTimes::DynamicStart' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_SetSyncTimes, InOffset_s) == 0x000014, "Member 'EpicStreamMediaSource_SetSyncTimes::InOffset_s' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_SetSyncTimes, InDelay_s) == 0x000018, "Member 'EpicStreamMediaSource_SetSyncTimes::InDelay_s' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.SetUrl
// 0x0010 (0x0010 - 0x0000)
struct EpicStreamMediaSource_SetUrl final
{
public:
	class FString                                 InURL;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_SetUrl) == 0x000008, "Wrong alignment on EpicStreamMediaSource_SetUrl");
static_assert(sizeof(EpicStreamMediaSource_SetUrl) == 0x000010, "Wrong size on EpicStreamMediaSource_SetUrl");
static_assert(offsetof(EpicStreamMediaSource_SetUrl, InURL) == 0x000000, "Member 'EpicStreamMediaSource_SetUrl::InURL' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.ShouldProtectPlayerFromContent
// 0x0001 (0x0001 - 0x0000)
struct EpicStreamMediaSource_ShouldProtectPlayerFromContent final
{
public:
	EUCPTypes                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_ShouldProtectPlayerFromContent) == 0x000001, "Wrong alignment on EpicStreamMediaSource_ShouldProtectPlayerFromContent");
static_assert(sizeof(EpicStreamMediaSource_ShouldProtectPlayerFromContent) == 0x000001, "Wrong size on EpicStreamMediaSource_ShouldProtectPlayerFromContent");
static_assert(offsetof(EpicStreamMediaSource_ShouldProtectPlayerFromContent, ReturnValue) == 0x000000, "Member 'EpicStreamMediaSource_ShouldProtectPlayerFromContent::ReturnValue' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.HasLocalFilePlayback
// 0x0001 (0x0001 - 0x0000)
struct EpicStreamMediaSource_HasLocalFilePlayback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_HasLocalFilePlayback) == 0x000001, "Wrong alignment on EpicStreamMediaSource_HasLocalFilePlayback");
static_assert(sizeof(EpicStreamMediaSource_HasLocalFilePlayback) == 0x000001, "Wrong size on EpicStreamMediaSource_HasLocalFilePlayback");
static_assert(offsetof(EpicStreamMediaSource_HasLocalFilePlayback, ReturnValue) == 0x000000, "Member 'EpicStreamMediaSource_HasLocalFilePlayback::ReturnValue' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.ShouldStreamBePlaying
// 0x0018 (0x0018 - 0x0000)
struct EpicStreamMediaSource_ShouldStreamBePlaying final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              PrimitiveComponent;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullRadius;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicStreamMediaSource_ShouldStreamBePlaying) == 0x000008, "Wrong alignment on EpicStreamMediaSource_ShouldStreamBePlaying");
static_assert(sizeof(EpicStreamMediaSource_ShouldStreamBePlaying) == 0x000018, "Wrong size on EpicStreamMediaSource_ShouldStreamBePlaying");
static_assert(offsetof(EpicStreamMediaSource_ShouldStreamBePlaying, WorldContextObject) == 0x000000, "Member 'EpicStreamMediaSource_ShouldStreamBePlaying::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_ShouldStreamBePlaying, PrimitiveComponent) == 0x000008, "Member 'EpicStreamMediaSource_ShouldStreamBePlaying::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_ShouldStreamBePlaying, CullRadius) == 0x000010, "Member 'EpicStreamMediaSource_ShouldStreamBePlaying::CullRadius' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_ShouldStreamBePlaying, ReturnValue) == 0x000014, "Member 'EpicStreamMediaSource_ShouldStreamBePlaying::ReturnValue' has a wrong offset!");

// Function EpicStreamMediaSource.EpicStreamMediaSource.UpdatePlayerOptions
// 0x0060 (0x0060 - 0x0000)
struct EpicStreamMediaSource_UpdatePlayerOptions final
{
public:
	struct FMediaPlayerOptions                    PlayerOptions;                                     // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMediaPlayerOptions                    ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicStreamMediaSource_UpdatePlayerOptions) == 0x000008, "Wrong alignment on EpicStreamMediaSource_UpdatePlayerOptions");
static_assert(sizeof(EpicStreamMediaSource_UpdatePlayerOptions) == 0x000060, "Wrong size on EpicStreamMediaSource_UpdatePlayerOptions");
static_assert(offsetof(EpicStreamMediaSource_UpdatePlayerOptions, PlayerOptions) == 0x000000, "Member 'EpicStreamMediaSource_UpdatePlayerOptions::PlayerOptions' has a wrong offset!");
static_assert(offsetof(EpicStreamMediaSource_UpdatePlayerOptions, ReturnValue) == 0x000030, "Member 'EpicStreamMediaSource_UpdatePlayerOptions::ReturnValue' has a wrong offset!");

}

