#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PriceSwitcher_Base

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "E_PriceSwitcherState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.ExecuteUbergraph_WBP_PriceSwitcher_Base
// 0x0090 (0x0090 - 0x0000)
struct WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0020(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStrikethroughPriceVisibility_StrikethroughPriceVisibility; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InMobileState;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_1;                           // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_2;                           // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base) == 0x000090, "Wrong size on WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, EntryPoint) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, Temp_bool_Variable) == 0x000004, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, K2Node_Event_IsDesignTime) == 0x000005, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000020, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000038, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_PlayAnimationForward_ReturnValue) == 0x000040, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_GetStrikethroughPriceVisibility_StrikethroughPriceVisibility) == 0x000048, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_GetStrikethroughPriceVisibility_StrikethroughPriceVisibility' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, Temp_bool_Variable_1) == 0x000049, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, K2Node_CustomEvent_InMobileState) == 0x00004A, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::K2Node_CustomEvent_InMobileState' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, Temp_bool_Variable_2) == 0x00004B, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_IsMobileGame_ReturnValue) == 0x00004C, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, K2Node_Select_Default) == 0x000050, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000060, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, K2Node_Select_Default_1) == 0x000068, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000078, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base, K2Node_Select_Default_2) == 0x000080, "Member 'WBP_PriceSwitcher_Base_C_ExecuteUbergraph_WBP_PriceSwitcher_Base::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.FlipHorizontalBoxLayout
// 0x0048 (0x0048 - 0x0000)
struct WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout final
{
public:
	TArray<class UWidget*>                        HBChildren;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout) == 0x000048, "Wrong size on WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, HBChildren) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::HBChildren' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, Temp_int_Array_Index_Variable) == 0x000010, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_Array_Get_Item) == 0x000020, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000030, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout, CallFunc_GetAllChildren_ReturnValue) == 0x000038, "Member 'WBP_PriceSwitcher_Base_C_FlipHorizontalBoxLayout::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.InitializeWidget
// 0x0018 (0x0018 - 0x0000)
struct WBP_PriceSwitcher_Base_C_InitializeWidget final
{
public:
	TArray<class UWidget*>                        HBChildren;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_InitializeWidget");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_InitializeWidget) == 0x000018, "Wrong size on WBP_PriceSwitcher_Base_C_InitializeWidget");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_InitializeWidget, HBChildren) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_InitializeWidget::HBChildren' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_InitializeWidget, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000010, "Member 'WBP_PriceSwitcher_Base_C_InitializeWidget::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_PriceSwitcher_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_PriceSwitcher_Base_C_PreConstruct");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_PreConstruct) == 0x000001, "Wrong size on WBP_PriceSwitcher_Base_C_PreConstruct");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetCurrency
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetCurrency final
{
public:
	EItemShopCurrency                             Currency;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemShopCurrency                             Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowPSLogo_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0020(0x00C0)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x00E4(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetCurrency) == 0x000010, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetCurrency");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetCurrency) == 0x0000F0, "Wrong size on WBP_PriceSwitcher_Base_C_SetCurrency");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Currency) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Currency' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_bool_Variable) == 0x000001, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_byte_Variable) == 0x000002, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_byte_Variable_3) == 0x000006, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, Temp_byte_Variable_4) == 0x000007, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, K2Node_Select_Default) == 0x00000C, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, CallFunc_ShouldShowPSLogo_ReturnValue) == 0x000018, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::CallFunc_ShouldShowPSLogo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, K2Node_MakeStruct_SlateBrush) == 0x000020, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, K2Node_Select_Default_2) == 0x0000E0, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetCurrency, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x0000E4, "Member 'WBP_PriceSwitcher_Base_C_SetCurrency::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetMobileState
// 0x0001 (0x0001 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetMobileState final
{
public:
	bool                                          InMobileState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetMobileState) == 0x000001, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetMobileState");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetMobileState) == 0x000001, "Wrong size on WBP_PriceSwitcher_Base_C_SetMobileState");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetMobileState, InMobileState) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetMobileState::InMobileState' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetPrice
// 0x0018 (0x0018 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetPrice final
{
public:
	class FText                                   Price;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetPrice) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetPrice");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetPrice) == 0x000018, "Wrong size on WBP_PriceSwitcher_Base_C_SetPrice");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetPrice, Price) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetPrice::Price' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetRegularPrice
// 0x0018 (0x0018 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetRegularPrice final
{
public:
	class FText                                   Price;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetRegularPrice) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetRegularPrice");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetRegularPrice) == 0x000018, "Wrong size on WBP_PriceSwitcher_Base_C_SetRegularPrice");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetRegularPrice, Price) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetRegularPrice::Price' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetStrikethroughPriceVisibility
// 0x0001 (0x0001 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility final
{
public:
	ESlateVisibility                              Visibility_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility) == 0x000001, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility) == 0x000001, "Wrong size on WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility, Visibility_0) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetStrikethroughPriceVisibility::Visibility_0' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetSubInfoText
// 0x0018 (0x0018 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetSubInfoText final
{
public:
	class FText                                   SubInfoText;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetSubInfoText) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetSubInfoText");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetSubInfoText) == 0x000018, "Wrong size on WBP_PriceSwitcher_Base_C_SetSubInfoText");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetSubInfoText, SubInfoText) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetSubInfoText::SubInfoText' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.SetSwitcherState
// 0x0010 (0x0010 - 0x0000)
struct WBP_PriceSwitcher_Base_C_SetSwitcherState final
{
public:
	E_PriceSwitcherState                          PriceState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_SetSwitcherState) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_SetSwitcherState");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_SetSwitcherState) == 0x000010, "Wrong size on WBP_PriceSwitcher_Base_C_SetSwitcherState");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetSwitcherState, PriceState) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_SetSwitcherState::PriceState' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetSwitcherState, Temp_byte_Variable) == 0x000001, "Member 'WBP_PriceSwitcher_Base_C_SetSwitcherState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_SetSwitcherState, K2Node_Select_Default) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_SetSwitcherState::K2Node_Select_Default' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.ShouldShowPSLogo
// 0x0020 (0x0020 - 0x0000)
struct WBP_PriceSwitcher_Base_C_ShouldShowPSLogo final
{
public:
	EItemShopCurrency                             Currency;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlatformName_ReturnValue;              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_ShouldShowPSLogo");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo) == 0x000020, "Wrong size on WBP_PriceSwitcher_Base_C_ShouldShowPSLogo");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, Currency) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::Currency' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, ReturnValue) == 0x000001, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_GetPlatformName_ReturnValue) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_GetPlatformName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000018, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_EqualEqual_StriStri_ReturnValue_1) == 0x000019, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_EqualEqual_StriStri_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_BooleanOR_ReturnValue_1) == 0x00001B, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_ShouldShowPSLogo, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'WBP_PriceSwitcher_Base_C_ShouldShowPSLogo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.GetPriceInfoState
// 0x000C (0x000C - 0x0000)
struct WBP_PriceSwitcher_Base_C_GetPriceInfoState final
{
public:
	bool                                          IsOwned;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSubscriptionOffer;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsProgressiveCosmetic;                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          SwitcherState;                                     // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          Temp_byte_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          Temp_byte_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PriceSwitcherState                          K2Node_Select_Default_1;                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_GetPriceInfoState) == 0x000001, "Wrong alignment on WBP_PriceSwitcher_Base_C_GetPriceInfoState");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_GetPriceInfoState) == 0x00000C, "Wrong size on WBP_PriceSwitcher_Base_C_GetPriceInfoState");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, IsOwned) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::IsOwned' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, IsSubscriptionOffer) == 0x000001, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::IsSubscriptionOffer' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, IsProgressiveCosmetic) == 0x000002, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::IsProgressiveCosmetic' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, SwitcherState) == 0x000003, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::SwitcherState' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, Temp_bool_Variable) == 0x000004, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, Temp_byte_Variable) == 0x000006, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, Temp_byte_Variable_1) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, Temp_byte_Variable_2) == 0x000009, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, K2Node_Select_Default) == 0x00000A, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetPriceInfoState, K2Node_Select_Default_1) == 0x00000B, "Member 'WBP_PriceSwitcher_Base_C_GetPriceInfoState::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.GetStrikethroughPriceVisibility
// 0x0014 (0x0014 - 0x0000)
struct WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OriginalPrice;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SuppressStrikethrough_0;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              StrikethroughPriceVisibility;                      // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility) == 0x000004, "Wrong alignment on WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility) == 0x000014, "Wrong size on WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, Price) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::Price' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, OriginalPrice) == 0x000004, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::OriginalPrice' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, SuppressStrikethrough_0) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::SuppressStrikethrough_0' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, StrikethroughPriceVisibility) == 0x000009, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::StrikethroughPriceVisibility' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, Temp_bool_Variable) == 0x00000A, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, Temp_byte_Variable) == 0x00000D, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, Temp_byte_Variable_1) == 0x00000F, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility, K2Node_Select_Default) == 0x000010, "Member 'WBP_PriceSwitcher_Base_C_GetStrikethroughPriceVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_PriceSwitcher_Base.WBP_PriceSwitcher_Base_C.GetSubInfoText
// 0x0078 (0x0078 - 0x0000)
struct WBP_PriceSwitcher_Base_C_GetSubInfoText final
{
public:
	EMcpSubscriptionState                         SubscriptionState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSubscription;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SubInfoText;                                       // 0x0008(0x0018)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	EMcpSubscriptionState                         Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0060(0x0018)()
};
static_assert(alignof(WBP_PriceSwitcher_Base_C_GetSubInfoText) == 0x000008, "Wrong alignment on WBP_PriceSwitcher_Base_C_GetSubInfoText");
static_assert(sizeof(WBP_PriceSwitcher_Base_C_GetSubInfoText) == 0x000078, "Wrong size on WBP_PriceSwitcher_Base_C_GetSubInfoText");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, SubscriptionState) == 0x000000, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::SubscriptionState' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, IsSubscription) == 0x000001, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::IsSubscription' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, SubInfoText) == 0x000008, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::SubInfoText' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, Temp_bool_Variable) == 0x000020, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, Temp_text_Variable) == 0x000028, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, Temp_byte_Variable) == 0x000040, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, K2Node_Select_Default) == 0x000048, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_PriceSwitcher_Base_C_GetSubInfoText, K2Node_Select_Default_1) == 0x000060, "Member 'WBP_PriceSwitcher_Base_C_GetSubInfoText::K2Node_Select_Default_1' has a wrong offset!");

}

