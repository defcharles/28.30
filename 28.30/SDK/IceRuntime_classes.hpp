#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IceRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Curie_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class IceRuntime.FortCurieElementAttachConditionHandlerIce
// 0x0000 (0x0040 - 0x0040)
class UFortCurieElementAttachConditionHandlerIce final : public UFortCurieElementAttachConditionHandler
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieElementAttachConditionHandlerIce">();
	}
	static class UFortCurieElementAttachConditionHandlerIce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieElementAttachConditionHandlerIce>();
	}
};
static_assert(alignof(UFortCurieElementAttachConditionHandlerIce) == 0x000008, "Wrong alignment on UFortCurieElementAttachConditionHandlerIce");
static_assert(sizeof(UFortCurieElementAttachConditionHandlerIce) == 0x000040, "Wrong size on UFortCurieElementAttachConditionHandlerIce");

// Class IceRuntime.FortCurieElementAttachHandlerIce
// 0x0058 (0x00E8 - 0x0090)
class UFortCurieElementAttachHandlerIce final : public UFortCurieElementAttachHandler
{
public:
	float                                         MinWaterContentOnDetach;                           // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShatterDamageThreshold;                            // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class ABuildingActor*, float>            AggregateDamagePerActor;                           // 0x0098(0x0050)(NativeAccessSpecifierPrivate)

public:
	void HandleBuildingDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ResolveBuildingDamage(class ABuildingActor* DamagedBuildingActor, class AController* InstigatedBy, class AActor* DamageCauser);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieElementAttachHandlerIce">();
	}
	static class UFortCurieElementAttachHandlerIce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieElementAttachHandlerIce>();
	}
};
static_assert(alignof(UFortCurieElementAttachHandlerIce) == 0x000008, "Wrong alignment on UFortCurieElementAttachHandlerIce");
static_assert(sizeof(UFortCurieElementAttachHandlerIce) == 0x0000E8, "Wrong size on UFortCurieElementAttachHandlerIce");
static_assert(offsetof(UFortCurieElementAttachHandlerIce, MinWaterContentOnDetach) == 0x000090, "Member 'UFortCurieElementAttachHandlerIce::MinWaterContentOnDetach' has a wrong offset!");
static_assert(offsetof(UFortCurieElementAttachHandlerIce, ShatterDamageThreshold) == 0x000094, "Member 'UFortCurieElementAttachHandlerIce::ShatterDamageThreshold' has a wrong offset!");
static_assert(offsetof(UFortCurieElementAttachHandlerIce, AggregateDamagePerActor) == 0x000098, "Member 'UFortCurieElementAttachHandlerIce::AggregateDamagePerActor' has a wrong offset!");

// Class IceRuntime.FortCurieIceNativeFXHandlerConfig
// 0x0000 (0x0168 - 0x0168)
class UFortCurieIceNativeFXHandlerConfig final : public UFortCurieNativeFXHandlerConfig
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieIceNativeFXHandlerConfig">();
	}
	static class UFortCurieIceNativeFXHandlerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieIceNativeFXHandlerConfig>();
	}
};
static_assert(alignof(UFortCurieIceNativeFXHandlerConfig) == 0x000008, "Wrong alignment on UFortCurieIceNativeFXHandlerConfig");
static_assert(sizeof(UFortCurieIceNativeFXHandlerConfig) == 0x000168, "Wrong size on UFortCurieIceNativeFXHandlerConfig");

// Class IceRuntime.FortCurieIceNativeFXHandler
// 0x0000 (0x0040 - 0x0040)
class UFortCurieIceNativeFXHandler final : public UFortCurieNativeFXHandler
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieIceNativeFXHandler">();
	}
	static class UFortCurieIceNativeFXHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieIceNativeFXHandler>();
	}
};
static_assert(alignof(UFortCurieIceNativeFXHandler) == 0x000008, "Wrong alignment on UFortCurieIceNativeFXHandler");
static_assert(sizeof(UFortCurieIceNativeFXHandler) == 0x000040, "Wrong size on UFortCurieIceNativeFXHandler");

// Class IceRuntime.IceGroundPath
// 0x0060 (0x02F0 - 0x0290)
class AIceGroundPath final : public AActor
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              Material;                                          // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x02A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector_NetQuantize>            SplinePoints;                                      // 0x02A8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	struct FVector                                SplineOffset;                                      // 0x02B8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SplineColliderExtentWidth;                         // 0x02D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SplineColliderExtentHeight;                        // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LandscapeTraceBuffer;                              // 0x02D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBoxComponent*>                  BoxColliderArray;                                  // 0x02E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddSplinePoint(const struct FVector& InWorldLoc);
	struct FVector GetLocationOnLandscape(const struct FVector& Location);
	void OnRep_SplinePoints();

	bool GetLastSplinePointLocation(struct FVector* LastPointLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IceGroundPath">();
	}
	static class AIceGroundPath* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIceGroundPath>();
	}
};
static_assert(alignof(AIceGroundPath) == 0x000008, "Wrong alignment on AIceGroundPath");
static_assert(sizeof(AIceGroundPath) == 0x0002F0, "Wrong size on AIceGroundPath");
static_assert(offsetof(AIceGroundPath, StaticMesh) == 0x000290, "Member 'AIceGroundPath::StaticMesh' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, Material) == 0x000298, "Member 'AIceGroundPath::Material' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, ForwardAxis) == 0x0002A0, "Member 'AIceGroundPath::ForwardAxis' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, SplinePoints) == 0x0002A8, "Member 'AIceGroundPath::SplinePoints' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, SplineOffset) == 0x0002B8, "Member 'AIceGroundPath::SplineOffset' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, SplineColliderExtentWidth) == 0x0002D0, "Member 'AIceGroundPath::SplineColliderExtentWidth' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, SplineColliderExtentHeight) == 0x0002D4, "Member 'AIceGroundPath::SplineColliderExtentHeight' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, LandscapeTraceBuffer) == 0x0002D8, "Member 'AIceGroundPath::LandscapeTraceBuffer' has a wrong offset!");
static_assert(offsetof(AIceGroundPath, BoxColliderArray) == 0x0002E0, "Member 'AIceGroundPath::BoxColliderArray' has a wrong offset!");

// Class IceRuntime.FortCurieIcePropagationManagerConfig
// 0x0018 (0x0058 - 0x0040)
class UFortCurieIcePropagationManagerConfig final : public UCurieManagerComponentConfig
{
public:
	float                                         IceBlockSeparation;                                // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABuildingGameplayActor>     IceBlockClass;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PropagationRate;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefaultPropagationDepth;                           // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieIcePropagationManagerConfig">();
	}
	static class UFortCurieIcePropagationManagerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieIcePropagationManagerConfig>();
	}
};
static_assert(alignof(UFortCurieIcePropagationManagerConfig) == 0x000008, "Wrong alignment on UFortCurieIcePropagationManagerConfig");
static_assert(sizeof(UFortCurieIcePropagationManagerConfig) == 0x000058, "Wrong size on UFortCurieIcePropagationManagerConfig");
static_assert(offsetof(UFortCurieIcePropagationManagerConfig, IceBlockSeparation) == 0x000040, "Member 'UFortCurieIcePropagationManagerConfig::IceBlockSeparation' has a wrong offset!");
static_assert(offsetof(UFortCurieIcePropagationManagerConfig, IceBlockClass) == 0x000048, "Member 'UFortCurieIcePropagationManagerConfig::IceBlockClass' has a wrong offset!");
static_assert(offsetof(UFortCurieIcePropagationManagerConfig, PropagationRate) == 0x000050, "Member 'UFortCurieIcePropagationManagerConfig::PropagationRate' has a wrong offset!");
static_assert(offsetof(UFortCurieIcePropagationManagerConfig, DefaultPropagationDepth) == 0x000054, "Member 'UFortCurieIcePropagationManagerConfig::DefaultPropagationDepth' has a wrong offset!");

// Class IceRuntime.FortCurieIcePropagationManager
// 0x0058 (0x0088 - 0x0030)
class UFortCurieIcePropagationManager final : public UFortCurieManagerComponent
{
public:
	class UFortCurieIcePropagationManagerConfig*  InternalManagerConfig;                             // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIceBlockDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCurieIcePropagationManager">();
	}
	static class UFortCurieIcePropagationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCurieIcePropagationManager>();
	}
};
static_assert(alignof(UFortCurieIcePropagationManager) == 0x000008, "Wrong alignment on UFortCurieIcePropagationManager");
static_assert(sizeof(UFortCurieIcePropagationManager) == 0x000088, "Wrong size on UFortCurieIcePropagationManager");
static_assert(offsetof(UFortCurieIcePropagationManager, InternalManagerConfig) == 0x000030, "Member 'UFortCurieIcePropagationManager::InternalManagerConfig' has a wrong offset!");

// Class IceRuntime.FortIceSkatesMovementControls
// 0x0190 (0x01C0 - 0x0030)
class UFortIceSkatesMovementControls final : public UFortMovementControls
{
public:
	struct FScalableFloat                         TurnSpeed;                                         // 0x0030(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Acceleration;                                      // 0x0058(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UphillSlopeAcceleration;                           // 0x0080(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DownhillSlopeAcceleration;                         // 0x00A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSlopeAngle;                                     // 0x00D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinSpeed;                                          // 0x00F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TargetSpeed;                                       // 0x0120(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSpeed;                                          // 0x0148(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AirDrag;                                           // 0x0170(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_198[0x28];                                     // 0x0198(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortIceSkatesMovementControls">();
	}
	static class UFortIceSkatesMovementControls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortIceSkatesMovementControls>();
	}
};
static_assert(alignof(UFortIceSkatesMovementControls) == 0x000008, "Wrong alignment on UFortIceSkatesMovementControls");
static_assert(sizeof(UFortIceSkatesMovementControls) == 0x0001C0, "Wrong size on UFortIceSkatesMovementControls");
static_assert(offsetof(UFortIceSkatesMovementControls, TurnSpeed) == 0x000030, "Member 'UFortIceSkatesMovementControls::TurnSpeed' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, Acceleration) == 0x000058, "Member 'UFortIceSkatesMovementControls::Acceleration' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, UphillSlopeAcceleration) == 0x000080, "Member 'UFortIceSkatesMovementControls::UphillSlopeAcceleration' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, DownhillSlopeAcceleration) == 0x0000A8, "Member 'UFortIceSkatesMovementControls::DownhillSlopeAcceleration' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, MaxSlopeAngle) == 0x0000D0, "Member 'UFortIceSkatesMovementControls::MaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, MinSpeed) == 0x0000F8, "Member 'UFortIceSkatesMovementControls::MinSpeed' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, TargetSpeed) == 0x000120, "Member 'UFortIceSkatesMovementControls::TargetSpeed' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, MaxSpeed) == 0x000148, "Member 'UFortIceSkatesMovementControls::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortIceSkatesMovementControls, AirDrag) == 0x000170, "Member 'UFortIceSkatesMovementControls::AirDrag' has a wrong offset!");

}

