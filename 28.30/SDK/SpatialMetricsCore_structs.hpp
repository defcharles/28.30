#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpatialMetricsCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct SpatialMetricsCore.SpatialValue
// 0x0010 (0x0010 - 0x0000)
struct FSpatialValue final
{
public:
	struct FIntVector                             Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialValue) == 0x000004, "Wrong alignment on FSpatialValue");
static_assert(sizeof(FSpatialValue) == 0x000010, "Wrong size on FSpatialValue");
static_assert(offsetof(FSpatialValue, Location) == 0x000000, "Member 'FSpatialValue::Location' has a wrong offset!");
static_assert(offsetof(FSpatialValue, Value) == 0x00000C, "Member 'FSpatialValue::Value' has a wrong offset!");

// ScriptStruct SpatialMetricsCore.SpatialMetricDescriptor
// 0x0010 (0x0010 - 0x0000)
struct FSpatialMetricDescriptor final
{
public:
	class FName                                   IdName;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USpatialMetricInterface>    Class;                                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialMetricDescriptor) == 0x000008, "Wrong alignment on FSpatialMetricDescriptor");
static_assert(sizeof(FSpatialMetricDescriptor) == 0x000010, "Wrong size on FSpatialMetricDescriptor");
static_assert(offsetof(FSpatialMetricDescriptor, IdName) == 0x000000, "Member 'FSpatialMetricDescriptor::IdName' has a wrong offset!");
static_assert(offsetof(FSpatialMetricDescriptor, Class) == 0x000008, "Member 'FSpatialMetricDescriptor::Class' has a wrong offset!");

// ScriptStruct SpatialMetricsCore.SpatialMetricProperties
// 0x0030 (0x0030 - 0x0000)
struct FSpatialMetricProperties final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThresholdValue;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpatialPrecision;                                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnit                                         Unit;                                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialMetricProperties) == 0x000008, "Wrong alignment on FSpatialMetricProperties");
static_assert(sizeof(FSpatialMetricProperties) == 0x000030, "Wrong size on FSpatialMetricProperties");
static_assert(offsetof(FSpatialMetricProperties, Label) == 0x000000, "Member 'FSpatialMetricProperties::Label' has a wrong offset!");
static_assert(offsetof(FSpatialMetricProperties, MinValue) == 0x000018, "Member 'FSpatialMetricProperties::MinValue' has a wrong offset!");
static_assert(offsetof(FSpatialMetricProperties, MaxValue) == 0x00001C, "Member 'FSpatialMetricProperties::MaxValue' has a wrong offset!");
static_assert(offsetof(FSpatialMetricProperties, ThresholdValue) == 0x000020, "Member 'FSpatialMetricProperties::ThresholdValue' has a wrong offset!");
static_assert(offsetof(FSpatialMetricProperties, SpatialPrecision) == 0x000024, "Member 'FSpatialMetricProperties::SpatialPrecision' has a wrong offset!");
static_assert(offsetof(FSpatialMetricProperties, Unit) == 0x000028, "Member 'FSpatialMetricProperties::Unit' has a wrong offset!");

// ScriptStruct SpatialMetricsCore.SpatialMetricSample
// 0x0070 (0x0070 - 0x0000)
struct FSpatialMetricSample final
{
public:
	struct FSpatialMetricDescriptor               Source;                                            // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSpatialMetricProperties               Properties;                                        // 0x0010(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FSpatialValue>                  Values;                                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIntVector                             BoundsMin;                                         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             BoundsMax;                                         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialMetricSample) == 0x000008, "Wrong alignment on FSpatialMetricSample");
static_assert(sizeof(FSpatialMetricSample) == 0x000070, "Wrong size on FSpatialMetricSample");
static_assert(offsetof(FSpatialMetricSample, Source) == 0x000000, "Member 'FSpatialMetricSample::Source' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSample, Properties) == 0x000010, "Member 'FSpatialMetricSample::Properties' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSample, Values) == 0x000040, "Member 'FSpatialMetricSample::Values' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSample, BoundsMin) == 0x000050, "Member 'FSpatialMetricSample::BoundsMin' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSample, BoundsMax) == 0x00005C, "Member 'FSpatialMetricSample::BoundsMax' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSample, Timestamp) == 0x000068, "Member 'FSpatialMetricSample::Timestamp' has a wrong offset!");

// ScriptStruct SpatialMetricsCore.SpatialMetricSampleImageProperties
// 0x0010 (0x0010 - 0x0000)
struct FSpatialMetricSampleImageProperties final
{
public:
	int32                                         ImageSize;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldUnitsPerPixel;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldColorSaturation;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpatialValueAlpha;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialMetricSampleImageProperties) == 0x000004, "Wrong alignment on FSpatialMetricSampleImageProperties");
static_assert(sizeof(FSpatialMetricSampleImageProperties) == 0x000010, "Wrong size on FSpatialMetricSampleImageProperties");
static_assert(offsetof(FSpatialMetricSampleImageProperties, ImageSize) == 0x000000, "Member 'FSpatialMetricSampleImageProperties::ImageSize' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSampleImageProperties, MinWorldUnitsPerPixel) == 0x000004, "Member 'FSpatialMetricSampleImageProperties::MinWorldUnitsPerPixel' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSampleImageProperties, WorldColorSaturation) == 0x000008, "Member 'FSpatialMetricSampleImageProperties::WorldColorSaturation' has a wrong offset!");
static_assert(offsetof(FSpatialMetricSampleImageProperties, SpatialValueAlpha) == 0x00000C, "Member 'FSpatialMetricSampleImageProperties::SpatialValueAlpha' has a wrong offset!");

}

