#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMInWorldKnobsRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.CreateModulatorPortIfNeeded
// 0x0008 (0x0008 - 0x0000)
struct FabricChildActorComponent_CreateModulatorPortIfNeeded final
{
public:
	class UFMDeviceCableModulatorPortComponent*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_CreateModulatorPortIfNeeded) == 0x000008, "Wrong alignment on FabricChildActorComponent_CreateModulatorPortIfNeeded");
static_assert(sizeof(FabricChildActorComponent_CreateModulatorPortIfNeeded) == 0x000008, "Wrong size on FabricChildActorComponent_CreateModulatorPortIfNeeded");
static_assert(offsetof(FabricChildActorComponent_CreateModulatorPortIfNeeded, ReturnValue) == 0x000000, "Member 'FabricChildActorComponent_CreateModulatorPortIfNeeded::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.OnModulatorPortConnected
// 0x0008 (0x0008 - 0x0000)
struct FabricChildActorComponent_OnModulatorPortConnected final
{
public:
	class UFMDeviceCablePortComponent*            ConnectedPort;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_OnModulatorPortConnected) == 0x000008, "Wrong alignment on FabricChildActorComponent_OnModulatorPortConnected");
static_assert(sizeof(FabricChildActorComponent_OnModulatorPortConnected) == 0x000008, "Wrong size on FabricChildActorComponent_OnModulatorPortConnected");
static_assert(offsetof(FabricChildActorComponent_OnModulatorPortConnected, ConnectedPort) == 0x000000, "Member 'FabricChildActorComponent_OnModulatorPortConnected::ConnectedPort' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.OnModulatorPortDisconnected
// 0x0008 (0x0008 - 0x0000)
struct FabricChildActorComponent_OnModulatorPortDisconnected final
{
public:
	class UFMDeviceCablePortComponent*            DisconnectedPort;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_OnModulatorPortDisconnected) == 0x000008, "Wrong alignment on FabricChildActorComponent_OnModulatorPortDisconnected");
static_assert(sizeof(FabricChildActorComponent_OnModulatorPortDisconnected) == 0x000008, "Wrong size on FabricChildActorComponent_OnModulatorPortDisconnected");
static_assert(offsetof(FabricChildActorComponent_OnModulatorPortDisconnected, DisconnectedPort) == 0x000000, "Member 'FabricChildActorComponent_OnModulatorPortDisconnected::DisconnectedPort' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.GetChildActorAsFabricButton
// 0x0008 (0x0008 - 0x0000)
struct FabricChildActorComponent_GetChildActorAsFabricButton final
{
public:
	class AFabricButtonBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_GetChildActorAsFabricButton) == 0x000008, "Wrong alignment on FabricChildActorComponent_GetChildActorAsFabricButton");
static_assert(sizeof(FabricChildActorComponent_GetChildActorAsFabricButton) == 0x000008, "Wrong size on FabricChildActorComponent_GetChildActorAsFabricButton");
static_assert(offsetof(FabricChildActorComponent_GetChildActorAsFabricButton, ReturnValue) == 0x000000, "Member 'FabricChildActorComponent_GetChildActorAsFabricButton::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.GetChildActorAsFabricInteractable
// 0x0010 (0x0010 - 0x0000)
struct FabricChildActorComponent_GetChildActorAsFabricInteractable final
{
public:
	TScriptInterface<class IFabricInteractable>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_GetChildActorAsFabricInteractable) == 0x000008, "Wrong alignment on FabricChildActorComponent_GetChildActorAsFabricInteractable");
static_assert(sizeof(FabricChildActorComponent_GetChildActorAsFabricInteractable) == 0x000010, "Wrong size on FabricChildActorComponent_GetChildActorAsFabricInteractable");
static_assert(offsetof(FabricChildActorComponent_GetChildActorAsFabricInteractable, ReturnValue) == 0x000000, "Member 'FabricChildActorComponent_GetChildActorAsFabricInteractable::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.GetChildActorAsInWorldKnobActorBase
// 0x0008 (0x0008 - 0x0000)
struct FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase final
{
public:
	class AFMInWorldKnobActorBase*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase) == 0x000008, "Wrong alignment on FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase");
static_assert(sizeof(FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase) == 0x000008, "Wrong size on FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase");
static_assert(offsetof(FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase, ReturnValue) == 0x000000, "Member 'FabricChildActorComponent_GetChildActorAsInWorldKnobActorBase::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricChildActorComponent.GetKnobOptionKey
// 0x0010 (0x0010 - 0x0000)
struct FabricChildActorComponent_GetKnobOptionKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricChildActorComponent_GetKnobOptionKey) == 0x000008, "Wrong alignment on FabricChildActorComponent_GetKnobOptionKey");
static_assert(sizeof(FabricChildActorComponent_GetKnobOptionKey) == 0x000010, "Wrong size on FabricChildActorComponent_GetKnobOptionKey");
static_assert(offsetof(FabricChildActorComponent_GetKnobOptionKey, ReturnValue) == 0x000000, "Member 'FabricChildActorComponent_GetKnobOptionKey::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.Initialize
// 0x0018 (0x0018 - 0x0000)
struct FabricScreenComponent_Initialize final
{
public:
	class UWidgetComponent*                       InScreenWidgetComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWidth;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHeight;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFabricScreenLayoutDataAsset*           ScreenLayout;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_Initialize) == 0x000008, "Wrong alignment on FabricScreenComponent_Initialize");
static_assert(sizeof(FabricScreenComponent_Initialize) == 0x000018, "Wrong size on FabricScreenComponent_Initialize");
static_assert(offsetof(FabricScreenComponent_Initialize, InScreenWidgetComponent) == 0x000000, "Member 'FabricScreenComponent_Initialize::InScreenWidgetComponent' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_Initialize, InWidth) == 0x000008, "Member 'FabricScreenComponent_Initialize::InWidth' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_Initialize, InHeight) == 0x00000C, "Member 'FabricScreenComponent_Initialize::InHeight' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_Initialize, ScreenLayout) == 0x000010, "Member 'FabricScreenComponent_Initialize::ScreenLayout' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.OnCopiedKnobActorSet
// 0x0010 (0x0010 - 0x0000)
struct FabricScreenComponent_OnCopiedKnobActorSet final
{
public:
	class UFMInWorldKnobActorCopyComponent*       CopyComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFMInWorldKnobActorBase*                NewKnobActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_OnCopiedKnobActorSet) == 0x000008, "Wrong alignment on FabricScreenComponent_OnCopiedKnobActorSet");
static_assert(sizeof(FabricScreenComponent_OnCopiedKnobActorSet) == 0x000010, "Wrong size on FabricScreenComponent_OnCopiedKnobActorSet");
static_assert(offsetof(FabricScreenComponent_OnCopiedKnobActorSet, CopyComponent) == 0x000000, "Member 'FabricScreenComponent_OnCopiedKnobActorSet::CopyComponent' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_OnCopiedKnobActorSet, NewKnobActor) == 0x000008, "Member 'FabricScreenComponent_OnCopiedKnobActorSet::NewKnobActor' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.SetScreenSize
// 0x0008 (0x0008 - 0x0000)
struct FabricScreenComponent_SetScreenSize final
{
public:
	int32                                         InWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_SetScreenSize) == 0x000004, "Wrong alignment on FabricScreenComponent_SetScreenSize");
static_assert(sizeof(FabricScreenComponent_SetScreenSize) == 0x000008, "Wrong size on FabricScreenComponent_SetScreenSize");
static_assert(offsetof(FabricScreenComponent_SetScreenSize, InWidth) == 0x000000, "Member 'FabricScreenComponent_SetScreenSize::InWidth' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_SetScreenSize, InHeight) == 0x000004, "Member 'FabricScreenComponent_SetScreenSize::InHeight' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.ConvertGridPositionToUnrealLocation
// 0x0028 (0x0028 - 0x0000)
struct FabricScreenComponent_ConvertGridPositionToUnrealLocation final
{
public:
	struct FVector2D                              GridPosition;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_ConvertGridPositionToUnrealLocation) == 0x000008, "Wrong alignment on FabricScreenComponent_ConvertGridPositionToUnrealLocation");
static_assert(sizeof(FabricScreenComponent_ConvertGridPositionToUnrealLocation) == 0x000028, "Wrong size on FabricScreenComponent_ConvertGridPositionToUnrealLocation");
static_assert(offsetof(FabricScreenComponent_ConvertGridPositionToUnrealLocation, GridPosition) == 0x000000, "Member 'FabricScreenComponent_ConvertGridPositionToUnrealLocation::GridPosition' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_ConvertGridPositionToUnrealLocation, ReturnValue) == 0x000010, "Member 'FabricScreenComponent_ConvertGridPositionToUnrealLocation::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.ConvertUnrealLocationToGridPosition
// 0x0028 (0x0028 - 0x0000)
struct FabricScreenComponent_ConvertUnrealLocationToGridPosition final
{
public:
	struct FVector                                UnrealPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_ConvertUnrealLocationToGridPosition) == 0x000008, "Wrong alignment on FabricScreenComponent_ConvertUnrealLocationToGridPosition");
static_assert(sizeof(FabricScreenComponent_ConvertUnrealLocationToGridPosition) == 0x000028, "Wrong size on FabricScreenComponent_ConvertUnrealLocationToGridPosition");
static_assert(offsetof(FabricScreenComponent_ConvertUnrealLocationToGridPosition, UnrealPosition) == 0x000000, "Member 'FabricScreenComponent_ConvertUnrealLocationToGridPosition::UnrealPosition' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_ConvertUnrealLocationToGridPosition, ReturnValue) == 0x000018, "Member 'FabricScreenComponent_ConvertUnrealLocationToGridPosition::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.GetScreenGridHeight
// 0x0004 (0x0004 - 0x0000)
struct FabricScreenComponent_GetScreenGridHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_GetScreenGridHeight) == 0x000004, "Wrong alignment on FabricScreenComponent_GetScreenGridHeight");
static_assert(sizeof(FabricScreenComponent_GetScreenGridHeight) == 0x000004, "Wrong size on FabricScreenComponent_GetScreenGridHeight");
static_assert(offsetof(FabricScreenComponent_GetScreenGridHeight, ReturnValue) == 0x000000, "Member 'FabricScreenComponent_GetScreenGridHeight::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.GetScreenGridWidth
// 0x0004 (0x0004 - 0x0000)
struct FabricScreenComponent_GetScreenGridWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_GetScreenGridWidth) == 0x000004, "Wrong alignment on FabricScreenComponent_GetScreenGridWidth");
static_assert(sizeof(FabricScreenComponent_GetScreenGridWidth) == 0x000004, "Wrong size on FabricScreenComponent_GetScreenGridWidth");
static_assert(offsetof(FabricScreenComponent_GetScreenGridWidth, ReturnValue) == 0x000000, "Member 'FabricScreenComponent_GetScreenGridWidth::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricScreenComponent.SnapUnrealLocationToScreenGrid
// 0x0030 (0x0030 - 0x0000)
struct FabricScreenComponent_SnapUnrealLocationToScreenGrid final
{
public:
	struct FVector                                UnrealPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricScreenComponent_SnapUnrealLocationToScreenGrid) == 0x000008, "Wrong alignment on FabricScreenComponent_SnapUnrealLocationToScreenGrid");
static_assert(sizeof(FabricScreenComponent_SnapUnrealLocationToScreenGrid) == 0x000030, "Wrong size on FabricScreenComponent_SnapUnrealLocationToScreenGrid");
static_assert(offsetof(FabricScreenComponent_SnapUnrealLocationToScreenGrid, UnrealPosition) == 0x000000, "Member 'FabricScreenComponent_SnapUnrealLocationToScreenGrid::UnrealPosition' has a wrong offset!");
static_assert(offsetof(FabricScreenComponent_SnapUnrealLocationToScreenGrid, ReturnValue) == 0x000018, "Member 'FabricScreenComponent_SnapUnrealLocationToScreenGrid::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.IsApplyingOverrides
// 0x0001 (0x0001 - 0x0000)
struct FabricUserOptionSaveComponent_IsApplyingOverrides final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricUserOptionSaveComponent_IsApplyingOverrides) == 0x000001, "Wrong alignment on FabricUserOptionSaveComponent_IsApplyingOverrides");
static_assert(sizeof(FabricUserOptionSaveComponent_IsApplyingOverrides) == 0x000001, "Wrong size on FabricUserOptionSaveComponent_IsApplyingOverrides");
static_assert(offsetof(FabricUserOptionSaveComponent_IsApplyingOverrides, ReturnValue) == 0x000000, "Member 'FabricUserOptionSaveComponent_IsApplyingOverrides::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.SetMusicClock
// 0x0008 (0x0008 - 0x0000)
struct FabricUserOptionSaveComponent_SetMusicClock final
{
public:
	class UMusicClockComponent*                   MusicClockComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricUserOptionSaveComponent_SetMusicClock) == 0x000008, "Wrong alignment on FabricUserOptionSaveComponent_SetMusicClock");
static_assert(sizeof(FabricUserOptionSaveComponent_SetMusicClock) == 0x000008, "Wrong size on FabricUserOptionSaveComponent_SetMusicClock");
static_assert(offsetof(FabricUserOptionSaveComponent_SetMusicClock, MusicClockComponent) == 0x000000, "Member 'FabricUserOptionSaveComponent_SetMusicClock::MusicClockComponent' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.SetPreset
// 0x0004 (0x0004 - 0x0000)
struct FabricUserOptionSaveComponent_SetPreset final
{
public:
	int32                                         PresetIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricUserOptionSaveComponent_SetPreset) == 0x000004, "Wrong alignment on FabricUserOptionSaveComponent_SetPreset");
static_assert(sizeof(FabricUserOptionSaveComponent_SetPreset) == 0x000004, "Wrong size on FabricUserOptionSaveComponent_SetPreset");
static_assert(offsetof(FabricUserOptionSaveComponent_SetPreset, PresetIndex) == 0x000000, "Member 'FabricUserOptionSaveComponent_SetPreset::PresetIndex' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.SetSaveSlot
// 0x0004 (0x0004 - 0x0000)
struct FabricUserOptionSaveComponent_SetSaveSlot final
{
public:
	int32                                         SaveSlotIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricUserOptionSaveComponent_SetSaveSlot) == 0x000004, "Wrong alignment on FabricUserOptionSaveComponent_SetSaveSlot");
static_assert(sizeof(FabricUserOptionSaveComponent_SetSaveSlot) == 0x000004, "Wrong size on FabricUserOptionSaveComponent_SetSaveSlot");
static_assert(offsetof(FabricUserOptionSaveComponent_SetSaveSlot, SaveSlotIndex) == 0x000000, "Member 'FabricUserOptionSaveComponent_SetSaveSlot::SaveSlotIndex' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.GetOverrideForParam
// 0x0020 (0x0020 - 0x0000)
struct FabricUserOptionSaveComponent_GetOverrideForParam final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FabricUserOptionSaveComponent_GetOverrideForParam) == 0x000008, "Wrong alignment on FabricUserOptionSaveComponent_GetOverrideForParam");
static_assert(sizeof(FabricUserOptionSaveComponent_GetOverrideForParam) == 0x000020, "Wrong size on FabricUserOptionSaveComponent_GetOverrideForParam");
static_assert(offsetof(FabricUserOptionSaveComponent_GetOverrideForParam, Param) == 0x000000, "Member 'FabricUserOptionSaveComponent_GetOverrideForParam::Param' has a wrong offset!");
static_assert(offsetof(FabricUserOptionSaveComponent_GetOverrideForParam, ReturnValue) == 0x000010, "Member 'FabricUserOptionSaveComponent_GetOverrideForParam::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FabricUserOptionSaveComponent.HasOverrideForParam
// 0x0018 (0x0018 - 0x0000)
struct FabricUserOptionSaveComponent_HasOverrideForParam final
{
public:
	class FString                                 Param;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FabricUserOptionSaveComponent_HasOverrideForParam) == 0x000008, "Wrong alignment on FabricUserOptionSaveComponent_HasOverrideForParam");
static_assert(sizeof(FabricUserOptionSaveComponent_HasOverrideForParam) == 0x000018, "Wrong size on FabricUserOptionSaveComponent_HasOverrideForParam");
static_assert(offsetof(FabricUserOptionSaveComponent_HasOverrideForParam, Param) == 0x000000, "Member 'FabricUserOptionSaveComponent_HasOverrideForParam::Param' has a wrong offset!");
static_assert(offsetof(FabricUserOptionSaveComponent_HasOverrideForParam, ReturnValue) == 0x000010, "Member 'FabricUserOptionSaveComponent_HasOverrideForParam::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldCableOptionsComponent.OnCableConnected
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldCableOptionsComponent_OnCableConnected final
{
public:
	class UFMDeviceCablePortComponent*            SourcePort;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMDeviceCablePortComponent*            ConnectedPort;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldCableOptionsComponent_OnCableConnected) == 0x000008, "Wrong alignment on FMInWorldCableOptionsComponent_OnCableConnected");
static_assert(sizeof(FMInWorldCableOptionsComponent_OnCableConnected) == 0x000010, "Wrong size on FMInWorldCableOptionsComponent_OnCableConnected");
static_assert(offsetof(FMInWorldCableOptionsComponent_OnCableConnected, SourcePort) == 0x000000, "Member 'FMInWorldCableOptionsComponent_OnCableConnected::SourcePort' has a wrong offset!");
static_assert(offsetof(FMInWorldCableOptionsComponent_OnCableConnected, ConnectedPort) == 0x000008, "Member 'FMInWorldCableOptionsComponent_OnCableConnected::ConnectedPort' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldCableOptionsComponent.OnCableDisconncted
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldCableOptionsComponent_OnCableDisconncted final
{
public:
	class UFMDeviceCablePortComponent*            SourcePort;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMDeviceCablePortComponent*            DisconnectedPort;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldCableOptionsComponent_OnCableDisconncted) == 0x000008, "Wrong alignment on FMInWorldCableOptionsComponent_OnCableDisconncted");
static_assert(sizeof(FMInWorldCableOptionsComponent_OnCableDisconncted) == 0x000010, "Wrong size on FMInWorldCableOptionsComponent_OnCableDisconncted");
static_assert(offsetof(FMInWorldCableOptionsComponent_OnCableDisconncted, SourcePort) == 0x000000, "Member 'FMInWorldCableOptionsComponent_OnCableDisconncted::SourcePort' has a wrong offset!");
static_assert(offsetof(FMInWorldCableOptionsComponent_OnCableDisconncted, DisconnectedPort) == 0x000008, "Member 'FMInWorldCableOptionsComponent_OnCableDisconncted::DisconnectedPort' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.CopyAttributesFromOtherKnob
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_CopyAttributesFromOtherKnob final
{
public:
	class AFMInWorldKnobActorBase*                OtherKnob;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnob) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_CopyAttributesFromOtherKnob");
static_assert(sizeof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnob) == 0x000008, "Wrong size on FMInWorldKnobActorBase_CopyAttributesFromOtherKnob");
static_assert(offsetof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnob, OtherKnob) == 0x000000, "Member 'FMInWorldKnobActorBase_CopyAttributesFromOtherKnob::OtherKnob' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.CopyAttributesFromOtherKnobInternal
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal final
{
public:
	class AFMInWorldKnobActorBase*                OtherKnob;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal");
static_assert(sizeof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal) == 0x000008, "Wrong size on FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal");
static_assert(offsetof(FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal, OtherKnob) == 0x000000, "Member 'FMInWorldKnobActorBase_CopyAttributesFromOtherKnobInternal::OtherKnob' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueLabel
// 0x0018 (0x0018 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueLabel) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueLabel");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueLabel) == 0x000018, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueLabel");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueLabel, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueLabel::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.HitComponentUpdated
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_HitComponentUpdated final
{
public:
	class USceneComponent*                        NewHitComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_HitComponentUpdated) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_HitComponentUpdated");
static_assert(sizeof(FMInWorldKnobActorBase_HitComponentUpdated) == 0x000008, "Wrong size on FMInWorldKnobActorBase_HitComponentUpdated");
static_assert(offsetof(FMInWorldKnobActorBase_HitComponentUpdated, NewHitComponent) == 0x000000, "Member 'FMInWorldKnobActorBase_HitComponentUpdated::NewHitComponent' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.KnobValueChanged
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorBase_KnobValueChanged final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapToSelection;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_KnobValueChanged) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_KnobValueChanged");
static_assert(sizeof(FMInWorldKnobActorBase_KnobValueChanged) == 0x000010, "Wrong size on FMInWorldKnobActorBase_KnobValueChanged");
static_assert(offsetof(FMInWorldKnobActorBase_KnobValueChanged, NewIndex) == 0x000000, "Member 'FMInWorldKnobActorBase_KnobValueChanged::NewIndex' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorBase_KnobValueChanged, SnapToSelection) == 0x000004, "Member 'FMInWorldKnobActorBase_KnobValueChanged::SnapToSelection' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorBase_KnobValueChanged, PlayerController) == 0x000008, "Member 'FMInWorldKnobActorBase_KnobValueChanged::PlayerController' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.OnFloatProviderFloatUpdated
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_OnFloatProviderFloatUpdated final
{
public:
	float                                         NewFloat;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_OnFloatProviderFloatUpdated) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_OnFloatProviderFloatUpdated");
static_assert(sizeof(FMInWorldKnobActorBase_OnFloatProviderFloatUpdated) == 0x000004, "Wrong size on FMInWorldKnobActorBase_OnFloatProviderFloatUpdated");
static_assert(offsetof(FMInWorldKnobActorBase_OnFloatProviderFloatUpdated, NewFloat) == 0x000000, "Member 'FMInWorldKnobActorBase_OnFloatProviderFloatUpdated::NewFloat' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.OnKnobIsVisible
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_OnKnobIsVisible final
{
public:
	bool                                          bInIsVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_OnKnobIsVisible) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_OnKnobIsVisible");
static_assert(sizeof(FMInWorldKnobActorBase_OnKnobIsVisible) == 0x000001, "Wrong size on FMInWorldKnobActorBase_OnKnobIsVisible");
static_assert(offsetof(FMInWorldKnobActorBase_OnKnobIsVisible, bInIsVisible) == 0x000000, "Member 'FMInWorldKnobActorBase_OnKnobIsVisible::bInIsVisible' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.OnReceiveFloatProvidersFromPort
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort final
{
public:
	TArray<class UFabricFloatProviderBase*>       FloatProvider;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort");
static_assert(sizeof(FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort) == 0x000010, "Wrong size on FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort");
static_assert(offsetof(FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort, FloatProvider) == 0x000000, "Member 'FMInWorldKnobActorBase_OnReceiveFloatProvidersFromPort::FloatProvider' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.ResetToDefaultValue
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_ResetToDefaultValue final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_ResetToDefaultValue) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_ResetToDefaultValue");
static_assert(sizeof(FMInWorldKnobActorBase_ResetToDefaultValue) == 0x000008, "Wrong size on FMInWorldKnobActorBase_ResetToDefaultValue");
static_assert(offsetof(FMInWorldKnobActorBase_ResetToDefaultValue, PlayerController) == 0x000000, "Member 'FMInWorldKnobActorBase_ResetToDefaultValue::PlayerController' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetCurrentKnobPosition
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_SetCurrentKnobPosition final
{
public:
	float                                         KnobPosition;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetCurrentKnobPosition) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_SetCurrentKnobPosition");
static_assert(sizeof(FMInWorldKnobActorBase_SetCurrentKnobPosition) == 0x000004, "Wrong size on FMInWorldKnobActorBase_SetCurrentKnobPosition");
static_assert(offsetof(FMInWorldKnobActorBase_SetCurrentKnobPosition, KnobPosition) == 0x000000, "Member 'FMInWorldKnobActorBase_SetCurrentKnobPosition::KnobPosition' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetKnobDisplayOnly
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_SetKnobDisplayOnly final
{
public:
	bool                                          bDisplayOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetKnobDisplayOnly) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_SetKnobDisplayOnly");
static_assert(sizeof(FMInWorldKnobActorBase_SetKnobDisplayOnly) == 0x000001, "Wrong size on FMInWorldKnobActorBase_SetKnobDisplayOnly");
static_assert(offsetof(FMInWorldKnobActorBase_SetKnobDisplayOnly, bDisplayOnly) == 0x000000, "Member 'FMInWorldKnobActorBase_SetKnobDisplayOnly::bDisplayOnly' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetKnobEnabled
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_SetKnobEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetKnobEnabled) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_SetKnobEnabled");
static_assert(sizeof(FMInWorldKnobActorBase_SetKnobEnabled) == 0x000001, "Wrong size on FMInWorldKnobActorBase_SetKnobEnabled");
static_assert(offsetof(FMInWorldKnobActorBase_SetKnobEnabled, bEnabled) == 0x000000, "Member 'FMInWorldKnobActorBase_SetKnobEnabled::bEnabled' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetNumberOptions
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_SetNumberOptions final
{
public:
	int32                                         NumberOptions;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetNumberOptions) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_SetNumberOptions");
static_assert(sizeof(FMInWorldKnobActorBase_SetNumberOptions) == 0x000004, "Wrong size on FMInWorldKnobActorBase_SetNumberOptions");
static_assert(offsetof(FMInWorldKnobActorBase_SetNumberOptions, NumberOptions) == 0x000000, "Member 'FMInWorldKnobActorBase_SetNumberOptions::NumberOptions' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetOverrideOptionLabels
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorBase_SetOverrideOptionLabels final
{
public:
	TArray<class FText>                           Labels;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetOverrideOptionLabels) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_SetOverrideOptionLabels");
static_assert(sizeof(FMInWorldKnobActorBase_SetOverrideOptionLabels) == 0x000010, "Wrong size on FMInWorldKnobActorBase_SetOverrideOptionLabels");
static_assert(offsetof(FMInWorldKnobActorBase_SetOverrideOptionLabels, Labels) == 0x000000, "Member 'FMInWorldKnobActorBase_SetOverrideOptionLabels::Labels' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapToSelection;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMInWorldKnobActorBase_SetSelectedIndex) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_SetSelectedIndex");
static_assert(sizeof(FMInWorldKnobActorBase_SetSelectedIndex) == 0x000008, "Wrong size on FMInWorldKnobActorBase_SetSelectedIndex");
static_assert(offsetof(FMInWorldKnobActorBase_SetSelectedIndex, Index_0) == 0x000000, "Member 'FMInWorldKnobActorBase_SetSelectedIndex::Index_0' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorBase_SetSelectedIndex, SnapToSelection) == 0x000004, "Member 'FMInWorldKnobActorBase_SetSelectedIndex::SnapToSelection' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct FMInWorldKnobActorBase_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetTitle) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_SetTitle");
static_assert(sizeof(FMInWorldKnobActorBase_SetTitle) == 0x000018, "Wrong size on FMInWorldKnobActorBase_SetTitle");
static_assert(offsetof(FMInWorldKnobActorBase_SetTitle, Title) == 0x000000, "Member 'FMInWorldKnobActorBase_SetTitle::Title' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.SetWidgetViewModel
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_SetWidgetViewModel final
{
public:
	class UFabricInteractableViewModel*           ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_SetWidgetViewModel) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_SetWidgetViewModel");
static_assert(sizeof(FMInWorldKnobActorBase_SetWidgetViewModel) == 0x000008, "Wrong size on FMInWorldKnobActorBase_SetWidgetViewModel");
static_assert(offsetof(FMInWorldKnobActorBase_SetWidgetViewModel, ViewModel) == 0x000000, "Member 'FMInWorldKnobActorBase_SetWidgetViewModel::ViewModel' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.StartTrackingInput
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_StartTrackingInput final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_StartTrackingInput) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_StartTrackingInput");
static_assert(sizeof(FMInWorldKnobActorBase_StartTrackingInput) == 0x000008, "Wrong size on FMInWorldKnobActorBase_StartTrackingInput");
static_assert(offsetof(FMInWorldKnobActorBase_StartTrackingInput, PlayerController) == 0x000000, "Member 'FMInWorldKnobActorBase_StartTrackingInput::PlayerController' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.UpdateDisplayOnlyVisuals
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals final
{
public:
	bool                                          bDisplayOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals");
static_assert(sizeof(FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals) == 0x000001, "Wrong size on FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals");
static_assert(offsetof(FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals, bDisplayOnly) == 0x000000, "Member 'FMInWorldKnobActorBase_UpdateDisplayOnlyVisuals::bDisplayOnly' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.UpdateEnabledVisuals
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_UpdateEnabledVisuals final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_UpdateEnabledVisuals) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_UpdateEnabledVisuals");
static_assert(sizeof(FMInWorldKnobActorBase_UpdateEnabledVisuals) == 0x000001, "Wrong size on FMInWorldKnobActorBase_UpdateEnabledVisuals");
static_assert(offsetof(FMInWorldKnobActorBase_UpdateEnabledVisuals, bEnabled) == 0x000000, "Member 'FMInWorldKnobActorBase_UpdateEnabledVisuals::bEnabled' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.UpdateFocusVisuals
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_UpdateFocusVisuals final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_UpdateFocusVisuals) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_UpdateFocusVisuals");
static_assert(sizeof(FMInWorldKnobActorBase_UpdateFocusVisuals) == 0x000001, "Wrong size on FMInWorldKnobActorBase_UpdateFocusVisuals");
static_assert(offsetof(FMInWorldKnobActorBase_UpdateFocusVisuals, bFocused) == 0x000000, "Member 'FMInWorldKnobActorBase_UpdateFocusVisuals::bFocused' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.UpdateInteractableVisuals
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_UpdateInteractableVisuals final
{
public:
	bool                                          bInteractable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_UpdateInteractableVisuals) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_UpdateInteractableVisuals");
static_assert(sizeof(FMInWorldKnobActorBase_UpdateInteractableVisuals) == 0x000001, "Wrong size on FMInWorldKnobActorBase_UpdateInteractableVisuals");
static_assert(offsetof(FMInWorldKnobActorBase_UpdateInteractableVisuals, bInteractable) == 0x000000, "Member 'FMInWorldKnobActorBase_UpdateInteractableVisuals::bInteractable' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetConsumeInteractionFromChildInteractable
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable");
static_assert(sizeof(FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable) == 0x000010, "Wrong size on FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable");
static_assert(offsetof(FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable, PlayerController) == 0x000000, "Member 'FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable::PlayerController' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable, ReturnValue) == 0x000008, "Member 'FMInWorldKnobActorBase_GetConsumeInteractionFromChildInteractable::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCopyClassInternal
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_GetCopyClassInternal final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCopyClassInternal) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetCopyClassInternal");
static_assert(sizeof(FMInWorldKnobActorBase_GetCopyClassInternal) == 0x000008, "Wrong size on FMInWorldKnobActorBase_GetCopyClassInternal");
static_assert(offsetof(FMInWorldKnobActorBase_GetCopyClassInternal, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCopyClassInternal::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCopyWidgetClassInternal
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_GetCopyWidgetClassInternal final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCopyWidgetClassInternal) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetCopyWidgetClassInternal");
static_assert(sizeof(FMInWorldKnobActorBase_GetCopyWidgetClassInternal) == 0x000008, "Wrong size on FMInWorldKnobActorBase_GetCopyWidgetClassInternal");
static_assert(offsetof(FMInWorldKnobActorBase_GetCopyWidgetClassInternal, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCopyWidgetClassInternal::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentOptionIndex) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentOptionIndex");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentOptionIndex) == 0x000004, "Wrong size on FMInWorldKnobActorBase_GetCurrentOptionIndex");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentOptionIndex, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentOptionIndex::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsBool
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsBool) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsBool");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsBool) == 0x000001, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsBool");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsBool, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsBool::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsEnum
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsEnum final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsEnum) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsEnum");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsEnum) == 0x000001, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsEnum");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsEnum, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsEnum::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsFloat
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsFloat) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsFloat");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsFloat) == 0x000004, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsFloat");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsFloat, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsFloat::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsInt
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsInt) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsInt");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsInt) == 0x000004, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsInt");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsInt, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsInt::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsName
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsName) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsName");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsName) == 0x000004, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsName");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsName, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsName::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetCurrentValueAsString
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorBase_GetCurrentValueAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetCurrentValueAsString) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetCurrentValueAsString");
static_assert(sizeof(FMInWorldKnobActorBase_GetCurrentValueAsString) == 0x000010, "Wrong size on FMInWorldKnobActorBase_GetCurrentValueAsString");
static_assert(offsetof(FMInWorldKnobActorBase_GetCurrentValueAsString, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetCurrentValueAsString::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetHitComponent
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_GetHitComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetHitComponent) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetHitComponent");
static_assert(sizeof(FMInWorldKnobActorBase_GetHitComponent) == 0x000008, "Wrong size on FMInWorldKnobActorBase_GetHitComponent");
static_assert(offsetof(FMInWorldKnobActorBase_GetHitComponent, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetHitComponent::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetInteractingController
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_GetInteractingController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetInteractingController) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetInteractingController");
static_assert(sizeof(FMInWorldKnobActorBase_GetInteractingController) == 0x000008, "Wrong size on FMInWorldKnobActorBase_GetInteractingController");
static_assert(offsetof(FMInWorldKnobActorBase_GetInteractingController, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetInteractingController::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetNumberOptions
// 0x0004 (0x0004 - 0x0000)
struct FMInWorldKnobActorBase_GetNumberOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetNumberOptions) == 0x000004, "Wrong alignment on FMInWorldKnobActorBase_GetNumberOptions");
static_assert(sizeof(FMInWorldKnobActorBase_GetNumberOptions) == 0x000004, "Wrong size on FMInWorldKnobActorBase_GetNumberOptions");
static_assert(offsetof(FMInWorldKnobActorBase_GetNumberOptions, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetNumberOptions::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.GetWidgetViewModel
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorBase_GetWidgetViewModel final
{
public:
	class UFabricInteractableViewModel*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_GetWidgetViewModel) == 0x000008, "Wrong alignment on FMInWorldKnobActorBase_GetWidgetViewModel");
static_assert(sizeof(FMInWorldKnobActorBase_GetWidgetViewModel) == 0x000008, "Wrong size on FMInWorldKnobActorBase_GetWidgetViewModel");
static_assert(offsetof(FMInWorldKnobActorBase_GetWidgetViewModel, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_GetWidgetViewModel::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.HasActiveFloatProvider
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_HasActiveFloatProvider final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_HasActiveFloatProvider) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_HasActiveFloatProvider");
static_assert(sizeof(FMInWorldKnobActorBase_HasActiveFloatProvider) == 0x000001, "Wrong size on FMInWorldKnobActorBase_HasActiveFloatProvider");
static_assert(offsetof(FMInWorldKnobActorBase_HasActiveFloatProvider, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_HasActiveFloatProvider::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorBase.IsOverriddenByPort
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobActorBase_IsOverriddenByPort final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorBase_IsOverriddenByPort) == 0x000001, "Wrong alignment on FMInWorldKnobActorBase_IsOverriddenByPort");
static_assert(sizeof(FMInWorldKnobActorBase_IsOverriddenByPort) == 0x000001, "Wrong size on FMInWorldKnobActorBase_IsOverriddenByPort");
static_assert(offsetof(FMInWorldKnobActorBase_IsOverriddenByPort, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorBase_IsOverriddenByPort::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.OnInWorldKnobFloatProviderConnectionChanged
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged final
{
public:
	bool                                          bConnected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ModulatorObject;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged) == 0x000010, "Wrong size on FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged, bConnected) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged::bConnected' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged, ModulatorObject) == 0x000008, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobFloatProviderConnectionChanged::ModulatorObject' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.OnInWorldKnobModulatedPropertyValueChanged
// 0x0018 (0x0018 - 0x0000)
struct FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ModulatorObject;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged) == 0x000018, "Wrong size on FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged, Value) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged::Value' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged, ModulatorObject) == 0x000010, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobModulatedPropertyValueChanged::ModulatorObject' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.OnInWorldKnobRuntimeValueChanged
// 0x0018 (0x0018 - 0x0000)
struct FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaylistUserOptionBase*                Option;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged) == 0x000018, "Wrong size on FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged, Value) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged::Value' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged, Option) == 0x000010, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobRuntimeValueChanged::Option' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.OnInWorldKnobSerializedValueChanged
// 0x0020 (0x0020 - 0x0000)
struct FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaylistUserOptionBase*                Option;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged) == 0x000020, "Wrong size on FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged, Value) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged::Value' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged, Option) == 0x000010, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged::Option' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged, PlayerController) == 0x000018, "Member 'FMInWorldKnobActorCopyComponent_OnInWorldKnobSerializedValueChanged::PlayerController' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.SetCopiedInWorldKnob
// 0x0008 (0x0008 - 0x0000)
struct FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob final
{
public:
	class UObject*                                InWorldKnobObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob) == 0x000008, "Wrong size on FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob, InWorldKnobObject) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_SetCopiedInWorldKnob::InWorldKnobObject' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobActorCopyComponent.GetCurrentKnobValueBP
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP) == 0x000008, "Wrong alignment on FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP");
static_assert(sizeof(FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP) == 0x000010, "Wrong size on FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP");
static_assert(offsetof(FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP, ReturnValue) == 0x000000, "Member 'FMInWorldKnobActorCopyComponent_GetCurrentKnobValueBP::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.ActorHasValidControllerBP
// 0x0020 (0x0020 - 0x0000)
struct FMInWorldKnobOptionsComponent_ActorHasValidControllerBP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OutFortPlayerPawn;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OutPlayerController;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP) == 0x000008, "Wrong alignment on FMInWorldKnobOptionsComponent_ActorHasValidControllerBP");
static_assert(sizeof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP) == 0x000020, "Wrong size on FMInWorldKnobOptionsComponent_ActorHasValidControllerBP");
static_assert(offsetof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP, Actor) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_ActorHasValidControllerBP::Actor' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP, OutFortPlayerPawn) == 0x000008, "Member 'FMInWorldKnobOptionsComponent_ActorHasValidControllerBP::OutFortPlayerPawn' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP, OutPlayerController) == 0x000010, "Member 'FMInWorldKnobOptionsComponent_ActorHasValidControllerBP::OutPlayerController' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_ActorHasValidControllerBP, ReturnValue) == 0x000018, "Member 'FMInWorldKnobOptionsComponent_ActorHasValidControllerBP::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.OnInWorldKnobRuntimeOptionChanged
// 0x0018 (0x0018 - 0x0000)
struct FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaylistUserOptionBase*                Option;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged) == 0x000008, "Wrong alignment on FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged");
static_assert(sizeof(FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged) == 0x000018, "Wrong size on FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged, Value) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged::Value' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged, Option) == 0x000010, "Member 'FMInWorldKnobOptionsComponent_OnInWorldKnobRuntimeOptionChanged::Option' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.OnInWorldKnobSerializedOptionChanged
// 0x0020 (0x0020 - 0x0000)
struct FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlaylistUserOptionBase*                Option;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged) == 0x000008, "Wrong alignment on FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged");
static_assert(sizeof(FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged) == 0x000020, "Wrong size on FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged, Value) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged::Value' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged, Option) == 0x000010, "Member 'FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged::Option' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged, PlayerController) == 0x000018, "Member 'FMInWorldKnobOptionsComponent_OnInWorldKnobSerializedOptionChanged::PlayerController' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.AreAllKnobsLoadedForNotify
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify) == 0x000001, "Wrong alignment on FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify");
static_assert(sizeof(FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify) == 0x000001, "Wrong size on FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify");
static_assert(offsetof(FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify, ReturnValue) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_AreAllKnobsLoadedForNotify::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.CanMakeUserOptionChanges
// 0x0001 (0x0001 - 0x0000)
struct FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges) == 0x000001, "Wrong alignment on FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges");
static_assert(sizeof(FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges) == 0x000001, "Wrong size on FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges");
static_assert(offsetof(FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges, ReturnValue) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_CanMakeUserOptionChanges::ReturnValue' has a wrong offset!");

// Function FMInWorldKnobsRuntime.FMInWorldKnobOptionsComponent.OwnsInWorldKnobObject
// 0x0010 (0x0010 - 0x0000)
struct FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject final
{
public:
	class UObject*                                InWorldKnobObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject) == 0x000008, "Wrong alignment on FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject");
static_assert(sizeof(FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject) == 0x000010, "Wrong size on FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject, InWorldKnobObject) == 0x000000, "Member 'FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject::InWorldKnobObject' has a wrong offset!");
static_assert(offsetof(FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject, ReturnValue) == 0x000008, "Member 'FMInWorldKnobOptionsComponent_OwnsInWorldKnobObject::ReturnValue' has a wrong offset!");

}

