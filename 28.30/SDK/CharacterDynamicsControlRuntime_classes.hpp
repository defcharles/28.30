#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterDynamicsControlRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CharacterDynamicsControlRuntime_structs.hpp"
#include "PhysicsControl_structs.hpp"


namespace SDK
{

// Class CharacterDynamicsControlRuntime.CharacterDynamicsControlBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UCharacterDynamicsControlBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FName GetCharacterState(const class UFortAnimInstance* InAnimInstance);
	static bool GetProperty(const class UFortAnimInstance* InAnimInstance, const class FName InPropertyName);
	static void SetProperty(const class UFortAnimInstance* InAnimInstance, const class FName InPropertyName, bool InValue);
	static struct FRigidBodyWithControlReference UpdateRigidBodyWithControlNodeParameters(const struct FAnimUpdateContext& UpdateContext, const struct FRigidBodyWithControlReference& RigidBodyWithControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterDynamicsControlBPLibrary">();
	}
	static class UCharacterDynamicsControlBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterDynamicsControlBPLibrary>();
	}
};
static_assert(alignof(UCharacterDynamicsControlBPLibrary) == 0x000008, "Wrong alignment on UCharacterDynamicsControlBPLibrary");
static_assert(sizeof(UCharacterDynamicsControlBPLibrary) == 0x000028, "Wrong size on UCharacterDynamicsControlBPLibrary");

// Class CharacterDynamicsControlRuntime.CharacterDynamicsControlGameFeatureData
// 0x0010 (0x0540 - 0x0530)
class UCharacterDynamicsControlGameFeatureData final : public UFortGameFeatureData
{
public:
	class UFortCharacterDynamicsStateLogic*       DefaultStateLogic;                                 // 0x0530(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCharacterDynamicsParameters*       DefaultParameters;                                 // 0x0538(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterDynamicsControlGameFeatureData">();
	}
	static class UCharacterDynamicsControlGameFeatureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterDynamicsControlGameFeatureData>();
	}
};
static_assert(alignof(UCharacterDynamicsControlGameFeatureData) == 0x000008, "Wrong alignment on UCharacterDynamicsControlGameFeatureData");
static_assert(sizeof(UCharacterDynamicsControlGameFeatureData) == 0x000540, "Wrong size on UCharacterDynamicsControlGameFeatureData");
static_assert(offsetof(UCharacterDynamicsControlGameFeatureData, DefaultStateLogic) == 0x000530, "Member 'UCharacterDynamicsControlGameFeatureData::DefaultStateLogic' has a wrong offset!");
static_assert(offsetof(UCharacterDynamicsControlGameFeatureData, DefaultParameters) == 0x000538, "Member 'UCharacterDynamicsControlGameFeatureData::DefaultParameters' has a wrong offset!");

// Class CharacterDynamicsControlRuntime.FortCharacterDynamicsParameters
// 0x0070 (0x00A0 - 0x0030)
class UFortCharacterDynamicsParameters final : public UPrimaryDataAsset
{
public:
	TArray<class FName>                           StateNames;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FClothParameters>               ClothParameters;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWindGustParameters>            WindGustParameters;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlControlAndModifierParameters> RBWCControlAndModifierParameters;                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortRigidBodyWithControlStateTransitionParameters> RBWCTransitionParameters;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortGravityOverrideParameters> GravityOverrideParameters;                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortRigidBodyAnimNodeParameters> RigidBodyAnimNodeParameters;                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCharacterDynamicsParameters">();
	}
	static class UFortCharacterDynamicsParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCharacterDynamicsParameters>();
	}
};
static_assert(alignof(UFortCharacterDynamicsParameters) == 0x000008, "Wrong alignment on UFortCharacterDynamicsParameters");
static_assert(sizeof(UFortCharacterDynamicsParameters) == 0x0000A0, "Wrong size on UFortCharacterDynamicsParameters");
static_assert(offsetof(UFortCharacterDynamicsParameters, StateNames) == 0x000030, "Member 'UFortCharacterDynamicsParameters::StateNames' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, ClothParameters) == 0x000040, "Member 'UFortCharacterDynamicsParameters::ClothParameters' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, WindGustParameters) == 0x000050, "Member 'UFortCharacterDynamicsParameters::WindGustParameters' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, RBWCControlAndModifierParameters) == 0x000060, "Member 'UFortCharacterDynamicsParameters::RBWCControlAndModifierParameters' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, RBWCTransitionParameters) == 0x000070, "Member 'UFortCharacterDynamicsParameters::RBWCTransitionParameters' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, GravityOverrideParameters) == 0x000080, "Member 'UFortCharacterDynamicsParameters::GravityOverrideParameters' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsParameters, RigidBodyAnimNodeParameters) == 0x000090, "Member 'UFortCharacterDynamicsParameters::RigidBodyAnimNodeParameters' has a wrong offset!");

// Class CharacterDynamicsControlRuntime.FortCharacterDynamicsStateLogic
// 0x0030 (0x0060 - 0x0030)
class UFortCharacterDynamicsStateLogic final : public UPrimaryDataAsset
{
public:
	TArray<class FName>                           BlueprintCharacterPropertyNames;                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivityStateNames;                                // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBinaryDecisionTree                    ActivityStateBinaryDecisionTree;                   // 0x0050(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCharacterDynamicsStateLogic">();
	}
	static class UFortCharacterDynamicsStateLogic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCharacterDynamicsStateLogic>();
	}
};
static_assert(alignof(UFortCharacterDynamicsStateLogic) == 0x000008, "Wrong alignment on UFortCharacterDynamicsStateLogic");
static_assert(sizeof(UFortCharacterDynamicsStateLogic) == 0x000060, "Wrong size on UFortCharacterDynamicsStateLogic");
static_assert(offsetof(UFortCharacterDynamicsStateLogic, BlueprintCharacterPropertyNames) == 0x000030, "Member 'UFortCharacterDynamicsStateLogic::BlueprintCharacterPropertyNames' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsStateLogic, ActivityStateNames) == 0x000040, "Member 'UFortCharacterDynamicsStateLogic::ActivityStateNames' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsStateLogic, ActivityStateBinaryDecisionTree) == 0x000050, "Member 'UFortCharacterDynamicsStateLogic::ActivityStateBinaryDecisionTree' has a wrong offset!");

// Class CharacterDynamicsControlRuntime.FortCharacterDynamicsComponent
// 0x00E0 (0x0180 - 0x00A0)
class UFortCharacterDynamicsComponent final : public UActorComponent
{
public:
	class UFortCharacterDynamicsStateLogic*       StateLogic;                                        // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCharacterDynamicsParameters*       Parameters;                                        // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0xD0];                                      // 0x00B0(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FVector GetGravityOverrideVector();
	const struct FPhysicsControlControlAndModifierParameters GetTransitionParameters();
	int32 ParameterIndex();
	class FName PreviousStateName();
	void SetProperty(const class FName PropertyName, const bool PropertyValue);
	int32 StateIndex();
	class FName StateName();

	bool GetProperty(const class FName PropertyName) const;
	float GetTimeInCurrentStateSeconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCharacterDynamicsComponent">();
	}
	static class UFortCharacterDynamicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCharacterDynamicsComponent>();
	}
};
static_assert(alignof(UFortCharacterDynamicsComponent) == 0x000008, "Wrong alignment on UFortCharacterDynamicsComponent");
static_assert(sizeof(UFortCharacterDynamicsComponent) == 0x000180, "Wrong size on UFortCharacterDynamicsComponent");
static_assert(offsetof(UFortCharacterDynamicsComponent, StateLogic) == 0x0000A0, "Member 'UFortCharacterDynamicsComponent::StateLogic' has a wrong offset!");
static_assert(offsetof(UFortCharacterDynamicsComponent, Parameters) == 0x0000A8, "Member 'UFortCharacterDynamicsComponent::Parameters' has a wrong offset!");

}

