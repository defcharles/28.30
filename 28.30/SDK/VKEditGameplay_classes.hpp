#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VKEditGameplay

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class VKEditGameplay.VKEditGameplayAssetsToCook
// 0x0010 (0x0040 - 0x0030)
class UVKEditGameplayAssetsToCook final : public UPrimaryDataAsset
{
public:
	TArray<TSoftObjectPtr<class UObject>>         Assets;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VKEditGameplayAssetsToCook">();
	}
	static class UVKEditGameplayAssetsToCook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVKEditGameplayAssetsToCook>();
	}
};
static_assert(alignof(UVKEditGameplayAssetsToCook) == 0x000008, "Wrong alignment on UVKEditGameplayAssetsToCook");
static_assert(sizeof(UVKEditGameplayAssetsToCook) == 0x000040, "Wrong size on UVKEditGameplayAssetsToCook");
static_assert(offsetof(UVKEditGameplayAssetsToCook, Assets) == 0x000030, "Member 'UVKEditGameplayAssetsToCook::Assets' has a wrong offset!");

// Class VKEditGameplay.PlayspaceComponent_PlaysetRootSpawner
// 0x0048 (0x0140 - 0x00F8)
class UPlayspaceComponent_PlaysetRootSpawner final : public UFortPlayspaceComponent
{
public:
	uint8                                         Pad_F8[0x48];                                      // 0x00F8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayspaceComponent_PlaysetRootSpawner">();
	}
	static class UPlayspaceComponent_PlaysetRootSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayspaceComponent_PlaysetRootSpawner>();
	}
};
static_assert(alignof(UPlayspaceComponent_PlaysetRootSpawner) == 0x000008, "Wrong alignment on UPlayspaceComponent_PlaysetRootSpawner");
static_assert(sizeof(UPlayspaceComponent_PlaysetRootSpawner) == 0x000140, "Wrong size on UPlayspaceComponent_PlaysetRootSpawner");

// Class VKEditGameplay.PlayspaceComponent_VKEditCreativeToolsPermission
// 0x0000 (0x0218 - 0x0218)
class UPlayspaceComponent_VKEditCreativeToolsPermission final : public UPlayspaceComponent_CreativeToolsPermission
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayspaceComponent_VKEditCreativeToolsPermission">();
	}
	static class UPlayspaceComponent_VKEditCreativeToolsPermission* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayspaceComponent_VKEditCreativeToolsPermission>();
	}
};
static_assert(alignof(UPlayspaceComponent_VKEditCreativeToolsPermission) == 0x000008, "Wrong alignment on UPlayspaceComponent_VKEditCreativeToolsPermission");
static_assert(sizeof(UPlayspaceComponent_VKEditCreativeToolsPermission) == 0x000218, "Wrong size on UPlayspaceComponent_VKEditCreativeToolsPermission");

// Class VKEditGameplay.VKEditPlayspace
// 0x0128 (0x0810 - 0x06E8)
class AVKEditPlayspace final : public AFortPlayspace
{
public:
	uint8                                         Pad_6E8[0x50];                                     // 0x06E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EditorOnlyMinigameSettingsMachineClassToSpawn;     // 0x0738(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   EditorOnlyWorldManagerClassToSpawn;                // 0x0758(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLevelStreamComponent*              LevelStreamComponent;                              // 0x0778(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProjectEditComponent*              ProjectEditComponent;                              // 0x0780(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_PlayStopPauseManager* PlayStopPauseManager;                              // 0x0788(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_EditConnectionManager* EditConnectionManager;                             // 0x0790(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_LiveEdit*           LiveEditComponent;                                 // 0x0798(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_VKEditCreativeToolsPermission* CreativeToolsPermission;                           // 0x07A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_CreativeLoadingStateProxy* CreativeLoadingStateProxy;                         // 0x07A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_SpatialGameplay*    SpatialGameplayComponent;                          // 0x07B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortVolumeObjectTrackingComponent*     ObjectTrackingComponent;                           // 0x07B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_DeviceTracking*     DeviceTrackerComponent;                            // 0x07C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_CreativeInventory*  CreativeInventoryComponent;                        // 0x07C8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_ActorMemoryTracker* ActorMemoryTrackerComponent;                       // 0x07D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_GlobalMemoryTracker* GlobalMemoryTrackerComponent;                      // 0x07D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortCreativeDynamicXpComponent*        FortCreativeDynamicXp;                             // 0x07E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_CreativeModifyEmotes* CreativeModifyEmotesComponent;                     // 0x07E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlayspaceComponent_WorldTimeOfDayOverride* WorldTimeOfDayOverrideComponent;                   // 0x07F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlayspaceComponent_NaniteSettingsOverride* NaniteSettingsOverrideComponent;                   // 0x07F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_PlaysetRootSpawner* PlaysetRootSpawnerComponent;                       // 0x0800(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayspaceComponent_PlayerPawnOverrides* PlayerPawnOverridesComponent;                      // 0x0808(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnClientActivatedContent(const struct FUniqueNetIdRepl& ClientNetId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VKEditPlayspace">();
	}
	static class AVKEditPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVKEditPlayspace>();
	}
};
static_assert(alignof(AVKEditPlayspace) == 0x000008, "Wrong alignment on AVKEditPlayspace");
static_assert(sizeof(AVKEditPlayspace) == 0x000810, "Wrong size on AVKEditPlayspace");
static_assert(offsetof(AVKEditPlayspace, EditorOnlyMinigameSettingsMachineClassToSpawn) == 0x000738, "Member 'AVKEditPlayspace::EditorOnlyMinigameSettingsMachineClassToSpawn' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, EditorOnlyWorldManagerClassToSpawn) == 0x000758, "Member 'AVKEditPlayspace::EditorOnlyWorldManagerClassToSpawn' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, LevelStreamComponent) == 0x000778, "Member 'AVKEditPlayspace::LevelStreamComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, ProjectEditComponent) == 0x000780, "Member 'AVKEditPlayspace::ProjectEditComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, PlayStopPauseManager) == 0x000788, "Member 'AVKEditPlayspace::PlayStopPauseManager' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, EditConnectionManager) == 0x000790, "Member 'AVKEditPlayspace::EditConnectionManager' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, LiveEditComponent) == 0x000798, "Member 'AVKEditPlayspace::LiveEditComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, CreativeToolsPermission) == 0x0007A0, "Member 'AVKEditPlayspace::CreativeToolsPermission' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, CreativeLoadingStateProxy) == 0x0007A8, "Member 'AVKEditPlayspace::CreativeLoadingStateProxy' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, SpatialGameplayComponent) == 0x0007B0, "Member 'AVKEditPlayspace::SpatialGameplayComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, ObjectTrackingComponent) == 0x0007B8, "Member 'AVKEditPlayspace::ObjectTrackingComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, DeviceTrackerComponent) == 0x0007C0, "Member 'AVKEditPlayspace::DeviceTrackerComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, CreativeInventoryComponent) == 0x0007C8, "Member 'AVKEditPlayspace::CreativeInventoryComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, ActorMemoryTrackerComponent) == 0x0007D0, "Member 'AVKEditPlayspace::ActorMemoryTrackerComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, GlobalMemoryTrackerComponent) == 0x0007D8, "Member 'AVKEditPlayspace::GlobalMemoryTrackerComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, FortCreativeDynamicXp) == 0x0007E0, "Member 'AVKEditPlayspace::FortCreativeDynamicXp' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, CreativeModifyEmotesComponent) == 0x0007E8, "Member 'AVKEditPlayspace::CreativeModifyEmotesComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, WorldTimeOfDayOverrideComponent) == 0x0007F0, "Member 'AVKEditPlayspace::WorldTimeOfDayOverrideComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, NaniteSettingsOverrideComponent) == 0x0007F8, "Member 'AVKEditPlayspace::NaniteSettingsOverrideComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, PlaysetRootSpawnerComponent) == 0x000800, "Member 'AVKEditPlayspace::PlaysetRootSpawnerComponent' has a wrong offset!");
static_assert(offsetof(AVKEditPlayspace, PlayerPawnOverridesComponent) == 0x000808, "Member 'AVKEditPlayspace::PlayerPawnOverridesComponent' has a wrong offset!");

// Class VKEditGameplay.PlayspaceComponent_EditConnectionManager
// 0x00E8 (0x01E0 - 0x00F8)
class UPlayspaceComponent_EditConnectionManager final : public UFortPlayspaceComponent
{
public:
	uint8                                         Pad_F8[0xC0];                                      // 0x00F8(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EditConnections;                                   // 0x01B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVkEditStatus                                 VkEditStatus;                                      // 0x01BC(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  UITagsToHide;                                      // 0x01C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_EditConnections() const;
	void OnRep_VkEditStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayspaceComponent_EditConnectionManager">();
	}
	static class UPlayspaceComponent_EditConnectionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayspaceComponent_EditConnectionManager>();
	}
};
static_assert(alignof(UPlayspaceComponent_EditConnectionManager) == 0x000008, "Wrong alignment on UPlayspaceComponent_EditConnectionManager");
static_assert(sizeof(UPlayspaceComponent_EditConnectionManager) == 0x0001E0, "Wrong size on UPlayspaceComponent_EditConnectionManager");
static_assert(offsetof(UPlayspaceComponent_EditConnectionManager, EditConnections) == 0x0001B8, "Member 'UPlayspaceComponent_EditConnectionManager::EditConnections' has a wrong offset!");
static_assert(offsetof(UPlayspaceComponent_EditConnectionManager, VkEditStatus) == 0x0001BC, "Member 'UPlayspaceComponent_EditConnectionManager::VkEditStatus' has a wrong offset!");
static_assert(offsetof(UPlayspaceComponent_EditConnectionManager, UITagsToHide) == 0x0001C0, "Member 'UPlayspaceComponent_EditConnectionManager::UITagsToHide' has a wrong offset!");

}

