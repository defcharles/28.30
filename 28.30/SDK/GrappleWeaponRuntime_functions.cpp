#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrappleWeaponRuntime

#include "Basic.hpp"

#include "GrappleWeaponRuntime_classes.hpp"
#include "GrappleWeaponRuntime_parameters.hpp"


namespace SDK
{

// Function GrappleWeaponRuntime.GrappleKnifeWeaponInterface.GetGrappleKnifeData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bIsAttached                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFired                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DistanceBucket                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnimStartWallBounce                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimBounceAngle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGrappleKnifeWeaponInterface::GetGrappleKnifeData(bool* bIsAttached, bool* bIsFired, int32* DistanceBucket, bool* bAnimStartWallBounce, float* AnimBounceAngle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGrappleKnifeData");

	Params::GrappleKnifeWeaponInterface_GetGrappleKnifeData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsAttached != nullptr)
		*bIsAttached = Parms.bIsAttached;

	if (bIsFired != nullptr)
		*bIsFired = Parms.bIsFired;

	if (DistanceBucket != nullptr)
		*DistanceBucket = Parms.DistanceBucket;

	if (bAnimStartWallBounce != nullptr)
		*bAnimStartWallBounce = Parms.bAnimStartWallBounce;

	if (AnimBounceAngle != nullptr)
		*AnimBounceAngle = Parms.AnimBounceAngle;
}


// Function GrappleWeaponRuntime.GrappleWeaponLibrary.CalculateDirectionalTargetOffset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          DirToTarget                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MovementOffset                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LedgeOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGrappleWeaponLibrary::CalculateDirectionalTargetOffset(const struct FVector& DirToTarget, const struct FVector& MovementOffset, const struct FVector& LedgeOffset)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("CalculateDirectionalTargetOffset");

	Params::GrappleWeaponLibrary_CalculateDirectionalTargetOffset Parms{};

	Parms.DirToTarget = std::move(DirToTarget);
	Parms.MovementOffset = std::move(MovementOffset);
	Parms.LedgeOffset = std::move(LedgeOffset);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrappleWeaponRuntime.GrappleWeaponLibrary.DidHitResultImpactLedge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       SourceCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGrappleWeaponLedgeConfig        Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    OutDidImpactWalkableSurface                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutTargetingLedge                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLedgeLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGrappleWeaponLibrary::DidHitResultImpactLedge(class ACharacter* SourceCharacter, const struct FHitResult& HitResult, const struct FGrappleWeaponLedgeConfig& Config, bool* OutDidImpactWalkableSurface, bool* OutTargetingLedge, struct FVector* OutLedgeLocation, bool bDrawDebug)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("DidHitResultImpactLedge");

	Params::GrappleWeaponLibrary_DidHitResultImpactLedge Parms{};

	Parms.SourceCharacter = SourceCharacter;
	Parms.HitResult = std::move(HitResult);
	Parms.Config = std::move(Config);
	Parms.bDrawDebug = bDrawDebug;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (OutDidImpactWalkableSurface != nullptr)
		*OutDidImpactWalkableSurface = Parms.OutDidImpactWalkableSurface;

	if (OutTargetingLedge != nullptr)
		*OutTargetingLedge = Parms.OutTargetingLedge;

	if (OutLedgeLocation != nullptr)
		*OutLedgeLocation = std::move(Parms.OutLedgeLocation);
}


// Function GrappleWeaponRuntime.GrappleWeaponLibrary.GetGrappleWeaponTargetInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AFortPlayerPawn*                  SourcePlayerPawn                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGrappleWeaponTargetingConfig    Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   DrawDebugDuration                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGrappleWeaponTargetInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FGrappleWeaponTargetInfo UGrappleWeaponLibrary::GetGrappleWeaponTargetInfo(class AFortPlayerPawn* SourcePlayerPawn, const struct FGrappleWeaponTargetingConfig& Config, float DrawDebugDuration)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetGrappleWeaponTargetInfo");

	Params::GrappleWeaponLibrary_GetGrappleWeaponTargetInfo Parms{};

	Parms.SourcePlayerPawn = SourcePlayerPawn;
	Parms.Config = std::move(Config);
	Parms.DrawDebugDuration = DrawDebugDuration;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrappleWeaponRuntime.GrappleWeaponLibrary.IsTargetingLedge
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       SourceCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetNormal                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGrappleWeaponLedgeConfig        Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    OutDidImpactWalkableSurface                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutTargetingLedge                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLedgeLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGrappleWeaponLibrary::IsTargetingLedge(class ACharacter* SourceCharacter, const class AActor* TargetActor, const struct FVector& TargetLocation, const struct FVector& TargetNormal, const struct FGrappleWeaponLedgeConfig& Config, bool* OutDidImpactWalkableSurface, bool* OutTargetingLedge, struct FVector* OutLedgeLocation, bool bDrawDebug)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsTargetingLedge");

	Params::GrappleWeaponLibrary_IsTargetingLedge Parms{};

	Parms.SourceCharacter = SourceCharacter;
	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetNormal = std::move(TargetNormal);
	Parms.Config = std::move(Config);
	Parms.bDrawDebug = bDrawDebug;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (OutDidImpactWalkableSurface != nullptr)
		*OutDidImpactWalkableSurface = Parms.OutDidImpactWalkableSurface;

	if (OutTargetingLedge != nullptr)
		*OutTargetingLedge = Parms.OutTargetingLedge;

	if (OutLedgeLocation != nullptr)
		*OutLedgeLocation = std::move(Parms.OutLedgeLocation);
}

}

