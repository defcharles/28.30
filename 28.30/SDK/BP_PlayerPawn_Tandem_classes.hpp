#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawn_Tandem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_NPC_HealthInfo_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_PlayerPawn_NonParticipant_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPawn_Tandem.BP_PlayerPawn_Tandem_C
// 0x0080 (0x6BD0 - 0x6B50)
class ABP_PlayerPawn_Tandem_C final : public ABP_PlayerPawn_NonParticipant_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerPawn_Tandem_C;             // 0x6B48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortWidgetComponent*                   NPCStatusWidget;                                   // 0x6B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsConverted;                                       // 0x6B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Leader_Team;                                       // 0x6B59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B5A[0x6];                                     // 0x6B5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_NPC_HealthInfo                 HealthInfo;                                        // 0x6B60(0x0020)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCStatusWidgetHealthBarDisabled;                  // 0x6B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B81[0x7];                                     // 0x6B81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShowHealth;                                        // 0x6B88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        NPCHealthBarHideTimeAfterDeath;                    // 0x6BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NPCMaxDistanceFromDamageINstigatorToDrawHealthBar; // 0x6BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHealthCheatEnabled;                              // 0x6BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTandemHealthEnabled;                             // 0x6BC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EnableHiredTandemHealthBar();
	void EnableTandemHealthBar();
	void ExecuteUbergraph_BP_PlayerPawn_Tandem(int32 EntryPoint);
	void HandlePawnConverted(class AFortPawn* InstigatorPawn, class AFortPawn* ConvertedPawn);
	void HandlePawnUnconverted(class AFortPawn* UnconvertedPawn);
	void NPCSetupHealthBarOnDeath();
	void NPCTandemDisableHealthBar();
	void NPCTandemEnableHealthBars();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_HealthInfo();
	void PawnHealthChanged();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartHealthBar();
	void StartUpdatingHealthWidget();
	void StopUpdatingHealthWidget();
	void UpdateConvertIndicator();
	void UpdatePawnHealthHUD();
	void WidgetVisibilityChanged(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerPawn_Tandem_C">();
	}
	static class ABP_PlayerPawn_Tandem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerPawn_Tandem_C>();
	}
};
static_assert(alignof(ABP_PlayerPawn_Tandem_C) == 0x000010, "Wrong alignment on ABP_PlayerPawn_Tandem_C");
static_assert(sizeof(ABP_PlayerPawn_Tandem_C) == 0x006BD0, "Wrong size on ABP_PlayerPawn_Tandem_C");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, UberGraphFrame_BP_PlayerPawn_Tandem_C) == 0x006B48, "Member 'ABP_PlayerPawn_Tandem_C::UberGraphFrame_BP_PlayerPawn_Tandem_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, NPCStatusWidget) == 0x006B50, "Member 'ABP_PlayerPawn_Tandem_C::NPCStatusWidget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, IsConverted) == 0x006B58, "Member 'ABP_PlayerPawn_Tandem_C::IsConverted' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, Leader_Team) == 0x006B59, "Member 'ABP_PlayerPawn_Tandem_C::Leader_Team' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, HealthInfo) == 0x006B60, "Member 'ABP_PlayerPawn_Tandem_C::HealthInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, NPCStatusWidgetHealthBarDisabled) == 0x006B80, "Member 'ABP_PlayerPawn_Tandem_C::NPCStatusWidgetHealthBarDisabled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, ShowHealth) == 0x006B88, "Member 'ABP_PlayerPawn_Tandem_C::ShowHealth' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, NPCHealthBarHideTimeAfterDeath) == 0x006BB0, "Member 'ABP_PlayerPawn_Tandem_C::NPCHealthBarHideTimeAfterDeath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, NPCMaxDistanceFromDamageINstigatorToDrawHealthBar) == 0x006BB8, "Member 'ABP_PlayerPawn_Tandem_C::NPCMaxDistanceFromDamageINstigatorToDrawHealthBar' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, IsHealthCheatEnabled) == 0x006BC0, "Member 'ABP_PlayerPawn_Tandem_C::IsHealthCheatEnabled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_Tandem_C, IsTandemHealthEnabled) == 0x006BC1, "Member 'ABP_PlayerPawn_Tandem_C::IsTandemHealthEnabled' has a wrong offset!");

}

