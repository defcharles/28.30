#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_HidingProp

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_HidingProp.B_HidingProp_C
// 0x0590 (0x11B0 - 0x0C20)
class AB_HidingProp_C : public AFortHidingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        ProjectileLocation_ForwardVector;                  // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LandedOnCollisionMesh;                             // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HideLocation_ForwardVector;                        // 0x0C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Loot_MovementTimeline_Forward_0FC694AE4A45D691CB6BD5A8CD00E521; // 0x0C48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Loot_MovementTimeline_Z_0FC694AE4A45D691CB6BD5A8CD00E521; // 0x0C4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Loot_MovementTimeline__Direction_0FC694AE4A45D691CB6BD5A8CD00E521; // 0x0C50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C51[0x7];                                      // 0x0C51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Loot_MovementTimeline;                             // 0x0C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Enabled;                                           // 0x0C60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HidingEnabled;                                     // 0x0C88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerLimit;                                       // 0x0CB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TeleportEnabled;                                   // 0x0CD8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanTeleport;                                       // 0x0D00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPawn*>                      HidingPlayers;                                     // 0x0D28(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	struct FGameplayTag                           EnterGameplayCue;                                  // 0x0D38(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExitGameplayCue;                                   // 0x0D3C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LandedOnGameplayCue;                               // 0x0D40(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D44[0x4];                                      // 0x0D44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RustleGameplayCue;                                 // 0x0D50(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExitGameplayCue_Player;                            // 0x0D54(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WhileEnteringGameplayCue;                          // 0x0D58(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5C[0x4];                                      // 0x0D5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ObstructionTraceLength;                            // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      DestroyObjectTypes;                                // 0x0D68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPawn*>                      Array;                                             // 0x0D78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Int;                                               // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D8C[0x4];                                      // 0x0D8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DeimosPropSpawnerOffset;                           // 0x0D90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FixedEntranceDirection;                            // 0x0DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA9[0x7];                                      // 0x0DA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxInteractAngle;                                  // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WobbleLocationOffset;                              // 0x0DB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InteractBelowPropDistance;                         // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AFortPawn*, double>                HiddenPlayersAndEnterTimes;                        // 0x0DD8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AFortPawn*                              LastPawnToInteract;                                // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_HidingProp_C*                        TargetTeleporter;                                  // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleporterEnterGameplayCue;                        // 0x0E38(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleporterExitGameplayCue;                         // 0x0E3C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LoopingTeleportingCue;                             // 0x0E40(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Wobble;                                         // 0x0E44(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WobbleTimerHandle;                                 // 0x0E48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   BlockEntranceTags;                                 // 0x0E50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   BlockExitTags;                                     // 0x0E60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           EnterAnimMontage;                                  // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ExitAnimMontage;                                   // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              LastPawnToHide;                                    // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleportingStateGC;                                // 0x0E88(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomWobbleNormal;                                // 0x0E8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleOccupant;                                    // 0x0E8D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Teleporting;                                       // 0x0E8E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpOut;                                           // 0x0E8F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_OnExitingPropNoJump_BlockActions;               // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyInNonSpyLTM;                                // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActiveInSpyLTM;                                    // 0x0E99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9A[0x6];                                      // 0x0E9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ForceAllowInteractTags;                            // 0x0EA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           IsTeleporter;                                      // 0x0EB0(0x0004)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ContainsPlayerRepNof;                              // 0x0EB4(0x0004)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ObstructionTraceExtents;                           // 0x0EB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ObstructionTraceStartOffSet;                       // 0x0ED0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExitLaunchVelocity;                                // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdditionalLaunchVelocity;                          // 0x0EF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Obstruction_Trace_End;                             // 0x0F08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FixedEntraceObstructionTraceEndOffset;             // 0x0F20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isActiveTeleportExit;                              // 0x0F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F39[0x7];                                      // 0x0F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_TeleportAbilityGranted;                         // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableWhenSubmergedInWater;                       // 0x0F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F49[0x7];                                      // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DisableWhenSubmergedExceptionTags;                 // 0x0F50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPawn*>                      NonCosmeticPawns;                                  // 0x0F70(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UClass*                                 CameraModifier;                                    // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewVar_0;                                          // 0x0F88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Pawn;                                              // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loot_CachedActorForward;                           // 0x0FA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Loot_VectorOffsets;                                // 0x0FC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnedLoot;                                       // 0x0FD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD1[0x7];                                      // 0x0FD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Loot_MoveForwardDistance;                          // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Loot_MoveUpDistance;                               // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Loot_SpawnRadius;                                  // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loot_SpawnOffset;                                  // 0x0FF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSpawnLoot;                                   // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1009[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Loot_Tier_Group;                                   // 0x1010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          SetEntranceRotation;                               // 0x1020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1021[0x7];                                     // 0x1021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            PropSpecificEffectToApplyToHiders;                 // 0x1028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FScalableFloat                         RustlesPerWobble;                                  // 0x1030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RustleWobbleRadius;                                // 0x1058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         EnterWobbleRadius;                                 // 0x1080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        NonJumpExitDistance;                               // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UFortCameraMode>            Camera_Mode;                                       // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          MoveToActorOnEnter;                                // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnorePhysicsBodyCollisionOnEnter;                 // 0x10B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanRustleAndWobble;                               // 0x10BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipRestoreCameraViewTargetOnStopHiding;           // 0x10BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipRootMotionMovementOnStopHiding;                // 0x10BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10BD[0x3];                                     // 0x10BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AddedSetEntranceRotation;                          // 0x10C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MoveToActorDelayOnEnter;                           // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveToActorDurationOverride;                       // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x10E8(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                MarkerPositionOffset;                              // 0x1190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ObstructionTraceByObject;                          // 0x11A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void AddHiddenPlayer(class AFortPawn* FortPawn);
	void Allow_Cosmetics_For_Pawn(const class AFortPawn*& Pawn_0, bool* Allow);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void BndEvt__S_Athena_Launchpad_Collision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BP_HandleExitPressed(class AFortPlayerPawn* TargetPlayerPawn);
	void Can_Hide_by_Falling(class AActor* OtherActor, bool* CanHide, class AFortPlayerPawn** aFortPlayerPawn);
	bool CheckCanUsePassage(class UObject* Object);
	void EndHidingAnalyticSession(class AFortPawn* FortPawn, EEnvironmentalItemEndReason EndReason);
	void EntranceBlockedByUndamageable(class AFortPlayerPawn* PlayerPawn);
	void ExecuteGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void ExecuteUbergraph_B_HidingProp(int32 EntryPoint);
	void Get_Obstruction_Objects(bool TraceByChannel, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& orientation, const TArray<class AActor*>& ActorsToIgnore, TArray<struct FHitResult>* OutHits);
	void GetObstructionTraceParams(class ACharacter* InCharacter, struct FVector* TraceStart, struct FVector* TraceEnd, struct FVector* TraceExtents, struct FRotator* TraceOrientation, const TArray<class AActor*>* ActorsToIgnore);
	void GetTurnClientCameraCollisionOnDelayTime(double* Delay);
	void HidingPlayerCountChanged();
	void IgnorePawnCollision(class AFortPawn* Target, const double InIgnoreDuration);
	void IgnorePhysicsCollisionDamage(class AFortPawn* Target, double Ignore_Duration);
	void InteractEnter();
	bool IsInInfiltrationLTM();
	void LandedOnHayStack(class AFortPlayerPawn* PlayerPawn, double Z_Velocity_Mag);
	void Launch_Pickups(TArray<class AFortPickup*>& Array_0, class AActor* Pawn_0);
	void LaunchPlayersOffTop(class AFortPlayerPawn* PlayerPawn);
	void Loot_MovementTimeline__FinishedFunc();
	void Loot_MovementTimeline__UpdateFunc();
	void OnCurieActive_F2BFC8C54691C42FB5230BA7B7DEE141();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnMatchStarted();
	void OnReady_64CBF02E419FF250B433D5B2A6E5D744(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_ContainsPlayer();
	void OnRep_HidingPlayers();
	void OnRep_IsTeleporter();
	void OnRep_Teleporting();
	void Pawn_Died(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void RemoveGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& CueParameters);
	void RemoveHiddenPlayer(class AFortPawn* FortPawn);
	void StartHiding(class AFortPawn* InteractingPawn);
	void StopHiding(const class AFortPawn* Pawn_0);
	void StopHidingLoop();
	void Teleport(class AActor* Pawn_0);
	void ToggleCameraCollisionForClients();
	void TurnClientCameraCollisionOn();
	void WatchForPlayerDeath(class AFortPawn* FortPawn);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	const struct FMarkedActorDisplayInfo GetMarkerDisplayData() const;
	const struct FVector GetMarkerPositionOffset() const;
	float GetMinDistanceFromInteraction() const;
	void GetPlayerLimit(int32* PlayerLimit_0) const;
	void LocalOnFailedInteract(const class AFortPlayerPawn* InteractingPawn) const;
	void Player_Getting_in_Prop(class AFortPawn* FortPawn, bool* Is_Getting_In) const;
	void Player_Hidden_in_Prop(class AFortPawn* Fort_Pawn, bool* IsHidden) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_HidingProp_C">();
	}
	static class AB_HidingProp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_HidingProp_C>();
	}
};
static_assert(alignof(AB_HidingProp_C) == 0x000008, "Wrong alignment on AB_HidingProp_C");
static_assert(sizeof(AB_HidingProp_C) == 0x0011B0, "Wrong size on AB_HidingProp_C");
static_assert(offsetof(AB_HidingProp_C, UberGraphFrame) == 0x000C20, "Member 'AB_HidingProp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ProjectileLocation_ForwardVector) == 0x000C28, "Member 'AB_HidingProp_C::ProjectileLocation_ForwardVector' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LandedOnCollisionMesh) == 0x000C30, "Member 'AB_HidingProp_C::LandedOnCollisionMesh' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Sphere) == 0x000C38, "Member 'AB_HidingProp_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HideLocation_ForwardVector) == 0x000C40, "Member 'AB_HidingProp_C::HideLocation_ForwardVector' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MovementTimeline_Forward_0FC694AE4A45D691CB6BD5A8CD00E521) == 0x000C48, "Member 'AB_HidingProp_C::Loot_MovementTimeline_Forward_0FC694AE4A45D691CB6BD5A8CD00E521' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MovementTimeline_Z_0FC694AE4A45D691CB6BD5A8CD00E521) == 0x000C4C, "Member 'AB_HidingProp_C::Loot_MovementTimeline_Z_0FC694AE4A45D691CB6BD5A8CD00E521' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MovementTimeline__Direction_0FC694AE4A45D691CB6BD5A8CD00E521) == 0x000C50, "Member 'AB_HidingProp_C::Loot_MovementTimeline__Direction_0FC694AE4A45D691CB6BD5A8CD00E521' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MovementTimeline) == 0x000C58, "Member 'AB_HidingProp_C::Loot_MovementTimeline' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Enabled) == 0x000C60, "Member 'AB_HidingProp_C::Enabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HidingEnabled) == 0x000C88, "Member 'AB_HidingProp_C::HidingEnabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, PlayerLimit) == 0x000CB0, "Member 'AB_HidingProp_C::PlayerLimit' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleportEnabled) == 0x000CD8, "Member 'AB_HidingProp_C::TeleportEnabled' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, CanTeleport) == 0x000D00, "Member 'AB_HidingProp_C::CanTeleport' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HidingPlayers) == 0x000D28, "Member 'AB_HidingProp_C::HidingPlayers' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, EnterGameplayCue) == 0x000D38, "Member 'AB_HidingProp_C::EnterGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitGameplayCue) == 0x000D3C, "Member 'AB_HidingProp_C::ExitGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LandedOnGameplayCue) == 0x000D40, "Member 'AB_HidingProp_C::LandedOnGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Mid) == 0x000D48, "Member 'AB_HidingProp_C::Mid' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RustleGameplayCue) == 0x000D50, "Member 'AB_HidingProp_C::RustleGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitGameplayCue_Player) == 0x000D54, "Member 'AB_HidingProp_C::ExitGameplayCue_Player' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WhileEnteringGameplayCue) == 0x000D58, "Member 'AB_HidingProp_C::WhileEnteringGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceLength) == 0x000D60, "Member 'AB_HidingProp_C::ObstructionTraceLength' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DestroyObjectTypes) == 0x000D68, "Member 'AB_HidingProp_C::DestroyObjectTypes' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Array) == 0x000D78, "Member 'AB_HidingProp_C::Array' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Int) == 0x000D88, "Member 'AB_HidingProp_C::Int' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DeimosPropSpawnerOffset) == 0x000D90, "Member 'AB_HidingProp_C::DeimosPropSpawnerOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FixedEntranceDirection) == 0x000DA8, "Member 'AB_HidingProp_C::FixedEntranceDirection' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MaxInteractAngle) == 0x000DB0, "Member 'AB_HidingProp_C::MaxInteractAngle' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WobbleLocationOffset) == 0x000DB8, "Member 'AB_HidingProp_C::WobbleLocationOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, InteractBelowPropDistance) == 0x000DD0, "Member 'AB_HidingProp_C::InteractBelowPropDistance' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, HiddenPlayersAndEnterTimes) == 0x000DD8, "Member 'AB_HidingProp_C::HiddenPlayersAndEnterTimes' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LastPawnToInteract) == 0x000E28, "Member 'AB_HidingProp_C::LastPawnToInteract' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TargetTeleporter) == 0x000E30, "Member 'AB_HidingProp_C::TargetTeleporter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleporterEnterGameplayCue) == 0x000E38, "Member 'AB_HidingProp_C::TeleporterEnterGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleporterExitGameplayCue) == 0x000E3C, "Member 'AB_HidingProp_C::TeleporterExitGameplayCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LoopingTeleportingCue) == 0x000E40, "Member 'AB_HidingProp_C::LoopingTeleportingCue' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, GC_Wobble) == 0x000E44, "Member 'AB_HidingProp_C::GC_Wobble' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, WobbleTimerHandle) == 0x000E48, "Member 'AB_HidingProp_C::WobbleTimerHandle' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, BlockEntranceTags) == 0x000E50, "Member 'AB_HidingProp_C::BlockEntranceTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, BlockExitTags) == 0x000E60, "Member 'AB_HidingProp_C::BlockExitTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, EnterAnimMontage) == 0x000E70, "Member 'AB_HidingProp_C::EnterAnimMontage' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitAnimMontage) == 0x000E78, "Member 'AB_HidingProp_C::ExitAnimMontage' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, LastPawnToHide) == 0x000E80, "Member 'AB_HidingProp_C::LastPawnToHide' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, TeleportingStateGC) == 0x000E88, "Member 'AB_HidingProp_C::TeleportingStateGC' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RandomWobbleNormal) == 0x000E8C, "Member 'AB_HidingProp_C::RandomWobbleNormal' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SingleOccupant) == 0x000E8D, "Member 'AB_HidingProp_C::SingleOccupant' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Teleporting) == 0x000E8E, "Member 'AB_HidingProp_C::Teleporting' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, JumpOut) == 0x000E8F, "Member 'AB_HidingProp_C::JumpOut' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, GE_OnExitingPropNoJump_BlockActions) == 0x000E90, "Member 'AB_HidingProp_C::GE_OnExitingPropNoJump_BlockActions' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DestroyInNonSpyLTM) == 0x000E98, "Member 'AB_HidingProp_C::DestroyInNonSpyLTM' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ActiveInSpyLTM) == 0x000E99, "Member 'AB_HidingProp_C::ActiveInSpyLTM' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ForceAllowInteractTags) == 0x000EA0, "Member 'AB_HidingProp_C::ForceAllowInteractTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, IsTeleporter) == 0x000EB0, "Member 'AB_HidingProp_C::IsTeleporter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ContainsPlayerRepNof) == 0x000EB4, "Member 'AB_HidingProp_C::ContainsPlayerRepNof' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceExtents) == 0x000EB8, "Member 'AB_HidingProp_C::ObstructionTraceExtents' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceStartOffSet) == 0x000ED0, "Member 'AB_HidingProp_C::ObstructionTraceStartOffSet' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ExitLaunchVelocity) == 0x000EE8, "Member 'AB_HidingProp_C::ExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, AdditionalLaunchVelocity) == 0x000EF0, "Member 'AB_HidingProp_C::AdditionalLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Obstruction_Trace_End) == 0x000F08, "Member 'AB_HidingProp_C::Obstruction_Trace_End' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, FixedEntraceObstructionTraceEndOffset) == 0x000F20, "Member 'AB_HidingProp_C::FixedEntraceObstructionTraceEndOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, isActiveTeleportExit) == 0x000F38, "Member 'AB_HidingProp_C::isActiveTeleportExit' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, GE_TeleportAbilityGranted) == 0x000F40, "Member 'AB_HidingProp_C::GE_TeleportAbilityGranted' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DisableWhenSubmergedInWater) == 0x000F48, "Member 'AB_HidingProp_C::DisableWhenSubmergedInWater' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, DisableWhenSubmergedExceptionTags) == 0x000F50, "Member 'AB_HidingProp_C::DisableWhenSubmergedExceptionTags' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, NonCosmeticPawns) == 0x000F70, "Member 'AB_HidingProp_C::NonCosmeticPawns' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, CameraModifier) == 0x000F80, "Member 'AB_HidingProp_C::CameraModifier' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, NewVar_0) == 0x000F88, "Member 'AB_HidingProp_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Pawn) == 0x000FA0, "Member 'AB_HidingProp_C::Pawn' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_CachedActorForward) == 0x000FA8, "Member 'AB_HidingProp_C::Loot_CachedActorForward' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_VectorOffsets) == 0x000FC0, "Member 'AB_HidingProp_C::Loot_VectorOffsets' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SpawnedLoot) == 0x000FD0, "Member 'AB_HidingProp_C::SpawnedLoot' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MoveForwardDistance) == 0x000FD8, "Member 'AB_HidingProp_C::Loot_MoveForwardDistance' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_MoveUpDistance) == 0x000FE0, "Member 'AB_HidingProp_C::Loot_MoveUpDistance' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_SpawnRadius) == 0x000FE8, "Member 'AB_HidingProp_C::Loot_SpawnRadius' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_SpawnOffset) == 0x000FF0, "Member 'AB_HidingProp_C::Loot_SpawnOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ShouldSpawnLoot) == 0x001008, "Member 'AB_HidingProp_C::ShouldSpawnLoot' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Loot_Tier_Group) == 0x001010, "Member 'AB_HidingProp_C::Loot_Tier_Group' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SetEntranceRotation) == 0x001020, "Member 'AB_HidingProp_C::SetEntranceRotation' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, PropSpecificEffectToApplyToHiders) == 0x001028, "Member 'AB_HidingProp_C::PropSpecificEffectToApplyToHiders' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RustlesPerWobble) == 0x001030, "Member 'AB_HidingProp_C::RustlesPerWobble' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, RustleWobbleRadius) == 0x001058, "Member 'AB_HidingProp_C::RustleWobbleRadius' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, EnterWobbleRadius) == 0x001080, "Member 'AB_HidingProp_C::EnterWobbleRadius' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, NonJumpExitDistance) == 0x0010A8, "Member 'AB_HidingProp_C::NonJumpExitDistance' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, Camera_Mode) == 0x0010B0, "Member 'AB_HidingProp_C::Camera_Mode' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MoveToActorOnEnter) == 0x0010B8, "Member 'AB_HidingProp_C::MoveToActorOnEnter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, IgnorePhysicsBodyCollisionOnEnter) == 0x0010B9, "Member 'AB_HidingProp_C::IgnorePhysicsBodyCollisionOnEnter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, bCanRustleAndWobble) == 0x0010BA, "Member 'AB_HidingProp_C::bCanRustleAndWobble' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SkipRestoreCameraViewTargetOnStopHiding) == 0x0010BB, "Member 'AB_HidingProp_C::SkipRestoreCameraViewTargetOnStopHiding' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, SkipRootMotionMovementOnStopHiding) == 0x0010BC, "Member 'AB_HidingProp_C::SkipRootMotionMovementOnStopHiding' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, AddedSetEntranceRotation) == 0x0010C0, "Member 'AB_HidingProp_C::AddedSetEntranceRotation' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MoveToActorDelayOnEnter) == 0x0010D8, "Member 'AB_HidingProp_C::MoveToActorDelayOnEnter' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MoveToActorDurationOverride) == 0x0010E0, "Member 'AB_HidingProp_C::MoveToActorDurationOverride' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MarkerDisplay) == 0x0010E8, "Member 'AB_HidingProp_C::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, MarkerPositionOffset) == 0x001190, "Member 'AB_HidingProp_C::MarkerPositionOffset' has a wrong offset!");
static_assert(offsetof(AB_HidingProp_C, ObstructionTraceByObject) == 0x0011A8, "Member 'AB_HidingProp_C::ObstructionTraceByObject' has a wrong offset!");

}

