#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "NetCore_structs.hpp"
#include "VerseGameplayTags_structs.hpp"


namespace SDK
{

// Enum ItemizationCoreRuntime.EInventoryCollectionLoadState
// NumValues: 0x000C
enum class EInventoryCollectionLoadState : uint8
{
	Invalid                                  = 0,
	Initializing                             = 1,
	WaitingToLoad                            = 10,
	Loading                                  = 11,
	Loaded                                   = 12,
	WaitingToUnload                          = 20,
	Unloading                                = 21,
	Unloaded                                 = 22,
	WaitingToClear                           = 30,
	Clearing                                 = 31,
	Cleared                                  = 32,
	Ready                                    = 255,
};

// Enum ItemizationCoreRuntime.EEquipItemLimitHitBehaviour
// NumValues: 0x0002
enum class EEquipItemLimitHitBehaviour : uint8
{
	UnequipLeastRecentlyUsed                 = 0,
	Block                                    = 1,
};

// Enum ItemizationCoreRuntime.EVkInventoryMoveResult
// NumValues: 0x0004
enum class EVkInventoryMoveResult : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	InvalidRequest                           = 2,
	NoChange                                 = 3,
};

// Enum ItemizationCoreRuntime.EVkInventoryMoveBehaviour
// NumValues: 0x0002
enum class EVkInventoryMoveBehaviour : uint8
{
	SwapSlotNumber                           = 0,
	EmplaceSlotNumber                        = 1,
};

// Enum ItemizationCoreRuntime.EInventoryCollectionType
// NumValues: 0x0002
enum class EInventoryCollectionType : uint8
{
	Player                                   = 0,
	World                                    = 1,
};

// Enum ItemizationCoreRuntime.EInventoryCollectionAccess
// NumValues: 0x0004
enum class EInventoryCollectionAccess : uint8
{
	None                                     = 0,
	Read                                     = 1,
	Write                                    = 2,
	All                                      = 3,
};

// Enum ItemizationCoreRuntime.EItemState
// NumValues: 0x0004
enum class EItemState : uint8
{
	NotInInventory                           = 0,
	InInventory                              = 1,
	Equipped                                 = 2,
	NumStates                                = 3,
};

// Enum ItemizationCoreRuntime.EItemStateFilter
// NumValues: 0x0003
enum class EItemStateFilter : uint8
{
	Owned                                    = 0,
	Equipped                                 = 1,
	EquippedAndActive                        = 2,
};

// Enum ItemizationCoreRuntime.EItemAttributeType
// NumValues: 0x0005
enum class EItemAttributeType : uint8
{
	Int                                      = 0,
	Decimal                                  = 1,
	Bool                                     = 2,
	String                                   = 3,
	Invalid                                  = 255,
};

// Enum ItemizationCoreRuntime.EAttributeCombineLogic_Math
// NumValues: 0x0005
enum class EAttributeCombineLogic_Math : uint8
{
	MustMatch                                = 0,
	UseTarget                                = 1,
	Average                                  = 2,
	Highest                                  = 3,
	Lowest                                   = 4,
};

// Enum ItemizationCoreRuntime.EAttributeBasicCalculateLogic
// NumValues: 0x0003
enum class EAttributeBasicCalculateLogic : uint8
{
	ReturnFirstFound                         = 0,
	AddAllFound                              = 1,
	MultiplyAllFound                         = 2,
};

// Enum ItemizationCoreRuntime.EAttributeBasicFirstFoundLogic
// NumValues: 0x0002
enum class EAttributeBasicFirstFoundLogic : uint8
{
	PrioritizeItemEntry                      = 0,
	PrioritizeComponent                      = 1,
};

// Enum ItemizationCoreRuntime.EAttributeBasicNotFoundResult
// NumValues: 0x0002
enum class EAttributeBasicNotFoundResult : uint8
{
	ReturnInitial                            = 0,
	ReturnZero                               = 1,
};

// Enum ItemizationCoreRuntime.EAttributeApplicationRule
// NumValues: 0x0003
enum class EAttributeApplicationRule : uint8
{
	ItemEntryOnly                            = 0,
	ComponentOnly                            = 1,
	Anywhere                                 = 2,
};

// Enum ItemizationCoreRuntime.EItemIconDisplayTextType
// NumValues: 0x0003
enum class EItemIconDisplayTextType : uint8
{
	StackSize                                = 0,
	PrimaryAmmo                              = 1,
	None                                     = 2,
};

// Enum ItemizationCoreRuntime.EItemizationPersistenceRequestType
// NumValues: 0x0005
enum class EItemizationPersistenceRequestType : uint8
{
	Invalid                                  = 0,
	Load                                     = 1,
	Unload                                   = 2,
	Clear                                    = 3,
	Store                                    = 4,
};

// Enum ItemizationCoreRuntime.EItemizationPersistenceResponseType
// NumValues: 0x0004
enum class EItemizationPersistenceResponseType : uint8
{
	Invalid                                  = 0,
	NoPersistenceManager                     = 1,
	Failed                                   = 2,
	Success                                  = 255,
};

// ScriptStruct ItemizationCoreRuntime.EquipItemFilter
// 0x0018 (0x0018 - 0x0000)
struct FEquipItemFilter
{
public:
	bool                                          bAppliesToAllItems;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UItemDefinitionBase>> ItemDefinitions;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEquipItemFilter) == 0x000008, "Wrong alignment on FEquipItemFilter");
static_assert(sizeof(FEquipItemFilter) == 0x000018, "Wrong size on FEquipItemFilter");
static_assert(offsetof(FEquipItemFilter, bAppliesToAllItems) == 0x000000, "Member 'FEquipItemFilter::bAppliesToAllItems' has a wrong offset!");
static_assert(offsetof(FEquipItemFilter, ItemDefinitions) == 0x000008, "Member 'FEquipItemFilter::ItemDefinitions' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.EquipItemRestriction
// 0x0010 (0x0028 - 0x0018)
struct FEquipItemRestriction final : public FEquipItemFilter
{
public:
	int64                                         ActiveLimit;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEquipItemLimitHitBehaviour                   LimitHitBehaviour;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipItemRestriction) == 0x000008, "Wrong alignment on FEquipItemRestriction");
static_assert(sizeof(FEquipItemRestriction) == 0x000028, "Wrong size on FEquipItemRestriction");
static_assert(offsetof(FEquipItemRestriction, ActiveLimit) == 0x000018, "Member 'FEquipItemRestriction::ActiveLimit' has a wrong offset!");
static_assert(offsetof(FEquipItemRestriction, LimitHitBehaviour) == 0x000020, "Member 'FEquipItemRestriction::LimitHitBehaviour' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.EquipItemCondition
// 0x0000 (0x0018 - 0x0018)
struct FEquipItemCondition final : public FEquipItemFilter
{
};
static_assert(alignof(FEquipItemCondition) == 0x000008, "Wrong alignment on FEquipItemCondition");
static_assert(sizeof(FEquipItemCondition) == 0x000018, "Wrong size on FEquipItemCondition");

// ScriptStruct ItemizationCoreRuntime.ItemAggregatedData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FItemAggregatedData final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemAggregatedData) == 0x000008, "Wrong alignment on FItemAggregatedData");
static_assert(sizeof(FItemAggregatedData) == 0x000070, "Wrong size on FItemAggregatedData");

// ScriptStruct ItemizationCoreRuntime.ItemAttributeData
// 0x0010 (0x0010 - 0x0000)
struct FItemAttributeData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FItemAttributeData) == 0x000008, "Wrong alignment on FItemAttributeData");
static_assert(sizeof(FItemAttributeData) == 0x000010, "Wrong size on FItemAttributeData");
static_assert(offsetof(FItemAttributeData, Data) == 0x000000, "Member 'FItemAttributeData::Data' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemAttributeValue
// 0x0020 (0x0020 - 0x0000)
struct FItemAttributeValue final
{
public:
	TSubclassOf<class UItemAttribute>             Attribute;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemAttributeData                     Data;                                              // 0x0008(0x0010)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemAttributeValue) == 0x000008, "Wrong alignment on FItemAttributeValue");
static_assert(sizeof(FItemAttributeValue) == 0x000020, "Wrong size on FItemAttributeValue");
static_assert(offsetof(FItemAttributeValue, Attribute) == 0x000000, "Member 'FItemAttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(FItemAttributeValue, Data) == 0x000008, "Member 'FItemAttributeValue::Data' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemAttributeList
// 0x0128 (0x0128 - 0x0000)
struct FItemAttributeList final
{
public:
	TArray<struct FItemAttributeValue>            AttributeList;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FItemAttributeValue>            LastKnownAttributeList;                            // 0x0010(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x108];                                     // 0x0020(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemAttributeList) == 0x000008, "Wrong alignment on FItemAttributeList");
static_assert(sizeof(FItemAttributeList) == 0x000128, "Wrong size on FItemAttributeList");
static_assert(offsetof(FItemAttributeList, AttributeList) == 0x000000, "Member 'FItemAttributeList::AttributeList' has a wrong offset!");
static_assert(offsetof(FItemAttributeList, LastKnownAttributeList) == 0x000010, "Member 'FItemAttributeList::LastKnownAttributeList' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemEntryStorageMap
// 0x0050 (0x0050 - 0x0000)
struct FItemEntryStorageMap final
{
public:
	TMap<struct FGuid, class UItemComponentLocalStorage*> ItemToStorageMap;                                  // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemEntryStorageMap) == 0x000008, "Wrong alignment on FItemEntryStorageMap");
static_assert(sizeof(FItemEntryStorageMap) == 0x000050, "Wrong size on FItemEntryStorageMap");
static_assert(offsetof(FItemEntryStorageMap, ItemToStorageMap) == 0x000000, "Member 'FItemEntryStorageMap::ItemToStorageMap' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemAbilityBinding
// 0x0050 (0x0050 - 0x0000)
struct FItemAbilityBinding final
{
public:
	TSoftObjectPtr<class UItemInputAction>        InputAction;                                       // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStateFilter                              ActiveState;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UItemAbilityCost*>               Costs;                                             // 0x0028(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UItemAbilityCooldown*>           Cooldowns;                                         // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UItemAbilityConfigurationAsset*         Ability;                                           // 0x0048(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAbilityBinding) == 0x000008, "Wrong alignment on FItemAbilityBinding");
static_assert(sizeof(FItemAbilityBinding) == 0x000050, "Wrong size on FItemAbilityBinding");
static_assert(offsetof(FItemAbilityBinding, InputAction) == 0x000000, "Member 'FItemAbilityBinding::InputAction' has a wrong offset!");
static_assert(offsetof(FItemAbilityBinding, ActiveState) == 0x000020, "Member 'FItemAbilityBinding::ActiveState' has a wrong offset!");
static_assert(offsetof(FItemAbilityBinding, Costs) == 0x000028, "Member 'FItemAbilityBinding::Costs' has a wrong offset!");
static_assert(offsetof(FItemAbilityBinding, Cooldowns) == 0x000038, "Member 'FItemAbilityBinding::Cooldowns' has a wrong offset!");
static_assert(offsetof(FItemAbilityBinding, Ability) == 0x000048, "Member 'FItemAbilityBinding::Ability' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemAbilityCooldownState
// 0x000C (0x000C - 0x0000)
struct FItemAbilityCooldownState final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictedTimeLeft;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAbilityCooldownState) == 0x000004, "Wrong alignment on FItemAbilityCooldownState");
static_assert(sizeof(FItemAbilityCooldownState) == 0x00000C, "Wrong size on FItemAbilityCooldownState");
static_assert(offsetof(FItemAbilityCooldownState, bIsActive) == 0x000000, "Member 'FItemAbilityCooldownState::bIsActive' has a wrong offset!");
static_assert(offsetof(FItemAbilityCooldownState, Progress) == 0x000004, "Member 'FItemAbilityCooldownState::Progress' has a wrong offset!");
static_assert(offsetof(FItemAbilityCooldownState, PredictedTimeLeft) == 0x000008, "Member 'FItemAbilityCooldownState::PredictedTimeLeft' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemAbilityRuntimeData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FItemAbilityRuntimeData final
{
public:
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x14];                                       // 0x0004(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemAbilityCooldownState              CooldownState;                                     // 0x0018(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemAbilityRuntimeData) == 0x000008, "Wrong alignment on FItemAbilityRuntimeData");
static_assert(sizeof(FItemAbilityRuntimeData) == 0x000038, "Wrong size on FItemAbilityRuntimeData");
static_assert(offsetof(FItemAbilityRuntimeData, AbilityHandle) == 0x000000, "Member 'FItemAbilityRuntimeData::AbilityHandle' has a wrong offset!");
static_assert(offsetof(FItemAbilityRuntimeData, CooldownState) == 0x000018, "Member 'FItemAbilityRuntimeData::CooldownState' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemComponentContainer
// 0x0010 (0x0010 - 0x0000)
struct FItemComponentContainer final
{
public:
	TArray<class UItemComponentBase*>             Components;                                        // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemComponentContainer) == 0x000008, "Wrong alignment on FItemComponentContainer");
static_assert(sizeof(FItemComponentContainer) == 0x000010, "Wrong size on FItemComponentContainer");
static_assert(offsetof(FItemComponentContainer, Components) == 0x000000, "Member 'FItemComponentContainer::Components' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemEntry
// 0x0154 (0x0160 - 0x000C)
struct FItemEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDefinitionBase*                    ItemDefinition;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  ItemEntryID;                                       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SlotNumber;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemAttributeList                     AttributeData;                                     // 0x0030(0x0128)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemEntry) == 0x000008, "Wrong alignment on FItemEntry");
static_assert(sizeof(FItemEntry) == 0x000160, "Wrong size on FItemEntry");
static_assert(offsetof(FItemEntry, ItemDefinition) == 0x000010, "Member 'FItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FItemEntry, ItemEntryID) == 0x000018, "Member 'FItemEntry::ItemEntryID' has a wrong offset!");
static_assert(offsetof(FItemEntry, SlotNumber) == 0x000028, "Member 'FItemEntry::SlotNumber' has a wrong offset!");
static_assert(offsetof(FItemEntry, AttributeData) == 0x000030, "Member 'FItemEntry::AttributeData' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemEntryList
// 0x0200 (0x0308 - 0x0108)
struct FItemEntryList final : public FFastArraySerializer
{
public:
	TArray<struct FItemEntry>                     ItemList;                                          // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x1F0];                                    // 0x0118(0x01F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemEntryList) == 0x000008, "Wrong alignment on FItemEntryList");
static_assert(sizeof(FItemEntryList) == 0x000308, "Wrong size on FItemEntryList");
static_assert(offsetof(FItemEntryList, ItemList) == 0x000108, "Member 'FItemEntryList::ItemList' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.VkRarityEntry
// 0x0040 (0x0040 - 0x0000)
struct FVkRarityEntry final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkRarityEntry) == 0x000008, "Wrong alignment on FVkRarityEntry");
static_assert(sizeof(FVkRarityEntry) == 0x000040, "Wrong size on FVkRarityEntry");
static_assert(offsetof(FVkRarityEntry, Name) == 0x000000, "Member 'FVkRarityEntry::Name' has a wrong offset!");
static_assert(offsetof(FVkRarityEntry, Description) == 0x000018, "Member 'FVkRarityEntry::Description' has a wrong offset!");
static_assert(offsetof(FVkRarityEntry, Color) == 0x000030, "Member 'FVkRarityEntry::Color' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.ItemTagContainer
// 0x0030 (0x0030 - 0x0000)
struct FItemTagContainer final
{
public:
	struct FVerseGameplayTagContainer             RequiredTags;                                      // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVerseGameplayTagContainer             ForbiddenTags;                                     // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVerseGameplayTagContainer             AnyTags;                                           // 0x0020(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTagContainer) == 0x000008, "Wrong alignment on FItemTagContainer");
static_assert(sizeof(FItemTagContainer) == 0x000030, "Wrong size on FItemTagContainer");
static_assert(offsetof(FItemTagContainer, RequiredTags) == 0x000000, "Member 'FItemTagContainer::RequiredTags' has a wrong offset!");
static_assert(offsetof(FItemTagContainer, ForbiddenTags) == 0x000010, "Member 'FItemTagContainer::ForbiddenTags' has a wrong offset!");
static_assert(offsetof(FItemTagContainer, AnyTags) == 0x000020, "Member 'FItemTagContainer::AnyTags' has a wrong offset!");

// ScriptStruct ItemizationCoreRuntime.OverriddenRecord
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FOverriddenRecord final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOverriddenRecord) == 0x000008, "Wrong alignment on FOverriddenRecord");
static_assert(sizeof(FOverriddenRecord) == 0x000018, "Wrong size on FOverriddenRecord");

}

