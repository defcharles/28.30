#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GenericModalEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function GenericModalEntry.GenericModalEntry_C.ConvertToOldStyle
// 0x0058 (0x0058 - 0x0000)
struct GenericModalEntry_C_ConvertToOldStyle final
{
public:
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x0000(0x0038)(NoDestructor)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0014)()
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GenericModalEntry_C_ConvertToOldStyle) == 0x000008, "Wrong alignment on GenericModalEntry_C_ConvertToOldStyle");
static_assert(sizeof(GenericModalEntry_C_ConvertToOldStyle) == 0x000058, "Wrong size on GenericModalEntry_C_ConvertToOldStyle");
static_assert(offsetof(GenericModalEntry_C_ConvertToOldStyle, K2Node_MakeStruct_WidgetTransform) == 0x000000, "Member 'GenericModalEntry_C_ConvertToOldStyle::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(GenericModalEntry_C_ConvertToOldStyle, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'GenericModalEntry_C_ConvertToOldStyle::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(GenericModalEntry_C_ConvertToOldStyle, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000050, "Member 'GenericModalEntry_C_ConvertToOldStyle::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function GenericModalEntry.GenericModalEntry_C.ExecuteUbergraph_GenericModalEntry
// 0x0028 (0x0028 - 0x0000)
struct GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0008(0x0018)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry) == 0x000008, "Wrong alignment on GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry");
static_assert(sizeof(GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry) == 0x000028, "Wrong size on GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry");
static_assert(offsetof(GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry, EntryPoint) == 0x000000, "Member 'GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry, K2Node_CustomEvent_InText) == 0x000008, "Member 'GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry, K2Node_Event_IsDesignTime) == 0x000020, "Member 'GenericModalEntry_C_ExecuteUbergraph_GenericModalEntry::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function GenericModalEntry.GenericModalEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GenericModalEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GenericModalEntry_C_PreConstruct) == 0x000001, "Wrong alignment on GenericModalEntry_C_PreConstruct");
static_assert(sizeof(GenericModalEntry_C_PreConstruct) == 0x000001, "Wrong size on GenericModalEntry_C_PreConstruct");
static_assert(offsetof(GenericModalEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GenericModalEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GenericModalEntry.GenericModalEntry_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct GenericModalEntry_C_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GenericModalEntry_C_SetText) == 0x000008, "Wrong alignment on GenericModalEntry_C_SetText");
static_assert(sizeof(GenericModalEntry_C_SetText) == 0x000018, "Wrong size on GenericModalEntry_C_SetText");
static_assert(offsetof(GenericModalEntry_C_SetText, InText) == 0x000000, "Member 'GenericModalEntry_C_SetText::InText' has a wrong offset!");

}

