#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StyleSheets

#include "Basic.hpp"

#include "Tweening_structs.hpp"
#include "StructUtils_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// ScriptStruct StyleSheets.WidgetProperty
// 0x000C (0x000C - 0x0000)
struct FWidgetProperty final
{
public:
	TWeakObjectPtr<class UWidget>                 Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyPath;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetProperty) == 0x000004, "Wrong alignment on FWidgetProperty");
static_assert(sizeof(FWidgetProperty) == 0x00000C, "Wrong size on FWidgetProperty");
static_assert(offsetof(FWidgetProperty, Widget) == 0x000000, "Member 'FWidgetProperty::Widget' has a wrong offset!");
static_assert(offsetof(FWidgetProperty, PropertyPath) == 0x000008, "Member 'FWidgetProperty::PropertyPath' has a wrong offset!");

// ScriptStruct StyleSheets.StyleAnimationData
// 0x000C (0x000C - 0x0000)
struct FStyleAnimationData final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           Easing;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStyleAnimationData) == 0x000004, "Wrong alignment on FStyleAnimationData");
static_assert(sizeof(FStyleAnimationData) == 0x00000C, "Wrong size on FStyleAnimationData");
static_assert(offsetof(FStyleAnimationData, Delay) == 0x000000, "Member 'FStyleAnimationData::Delay' has a wrong offset!");
static_assert(offsetof(FStyleAnimationData, duration) == 0x000004, "Member 'FStyleAnimationData::duration' has a wrong offset!");
static_assert(offsetof(FStyleAnimationData, Easing) == 0x000008, "Member 'FStyleAnimationData::Easing' has a wrong offset!");

// ScriptStruct StyleSheets.StyleClass
// 0x0108 (0x0108 - 0x0000)
struct FStyleClass final
{
public:
	struct FInstancedPropertyBag                  StylePropertyBag;                                  // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FStyleAnimationData> PropertyAnimations;                                // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FInstancedPropertyBag> MaterialParameters;                                // 0x0060(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStyleClass) == 0x000008, "Wrong alignment on FStyleClass");
static_assert(sizeof(FStyleClass) == 0x000108, "Wrong size on FStyleClass");
static_assert(offsetof(FStyleClass, StylePropertyBag) == 0x000000, "Member 'FStyleClass::StylePropertyBag' has a wrong offset!");
static_assert(offsetof(FStyleClass, PropertyAnimations) == 0x000010, "Member 'FStyleClass::PropertyAnimations' has a wrong offset!");
static_assert(offsetof(FStyleClass, MaterialParameters) == 0x000060, "Member 'FStyleClass::MaterialParameters' has a wrong offset!");

// ScriptStruct StyleSheets.StylePropertyStore
// 0x0050 (0x0050 - 0x0000)
struct FStylePropertyStore final
{
public:
	TMap<class UWidget*, struct FInstancedPropertyBag> WidgetToPropertyBagMap;                            // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStylePropertyStore) == 0x000008, "Wrong alignment on FStylePropertyStore");
static_assert(sizeof(FStylePropertyStore) == 0x000050, "Wrong size on FStylePropertyStore");
static_assert(offsetof(FStylePropertyStore, WidgetToPropertyBagMap) == 0x000000, "Member 'FStylePropertyStore::WidgetToPropertyBagMap' has a wrong offset!");

// ScriptStruct StyleSheets.StyleRulePreviewInfo
// 0x0018 (0x0018 - 0x0000)
struct FStyleRulePreviewInfo final
{
public:
	TSubclassOf<class UWidget>                    PreviewWidgetClass;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInstancedPropertyBag                  PreviewPropertyBag;                                // 0x0008(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStyleRulePreviewInfo) == 0x000008, "Wrong alignment on FStyleRulePreviewInfo");
static_assert(sizeof(FStyleRulePreviewInfo) == 0x000018, "Wrong size on FStyleRulePreviewInfo");
static_assert(offsetof(FStyleRulePreviewInfo, PreviewWidgetClass) == 0x000000, "Member 'FStyleRulePreviewInfo::PreviewWidgetClass' has a wrong offset!");
static_assert(offsetof(FStyleRulePreviewInfo, PreviewPropertyBag) == 0x000008, "Member 'FStyleRulePreviewInfo::PreviewPropertyBag' has a wrong offset!");

// ScriptStruct StyleSheets.StyleSelectorItem
// 0x0010 (0x0010 - 0x0000)
struct FStyleSelectorItem
{
public:
	TArray<struct FGameplayTag>                   Targets;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStyleSelectorItem) == 0x000008, "Wrong alignment on FStyleSelectorItem");
static_assert(sizeof(FStyleSelectorItem) == 0x000010, "Wrong size on FStyleSelectorItem");
static_assert(offsetof(FStyleSelectorItem, Targets) == 0x000000, "Member 'FStyleSelectorItem::Targets' has a wrong offset!");

// ScriptStruct StyleSheets.StyleRuleEntry
// 0x0018 (0x0018 - 0x0000)
struct FStyleRuleEntry final
{
public:
	TArray<struct FStyleSelectorItem>             SelectorItems;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UStyleRule*                             StyleRule;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStyleRuleEntry) == 0x000008, "Wrong alignment on FStyleRuleEntry");
static_assert(sizeof(FStyleRuleEntry) == 0x000018, "Wrong size on FStyleRuleEntry");
static_assert(offsetof(FStyleRuleEntry, SelectorItems) == 0x000000, "Member 'FStyleRuleEntry::SelectorItems' has a wrong offset!");
static_assert(offsetof(FStyleRuleEntry, StyleRule) == 0x000010, "Member 'FStyleRuleEntry::StyleRule' has a wrong offset!");

// ScriptStruct StyleSheets.StyleSheetSettings
// 0x0020 (0x0020 - 0x0000)
struct FStyleSheetSettings final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UWidget>>            StylableWidgetClasses;                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStyleSheetSettings) == 0x000008, "Wrong alignment on FStyleSheetSettings");
static_assert(sizeof(FStyleSheetSettings) == 0x000020, "Wrong size on FStyleSheetSettings");
static_assert(offsetof(FStyleSheetSettings, Description) == 0x000000, "Member 'FStyleSheetSettings::Description' has a wrong offset!");
static_assert(offsetof(FStyleSheetSettings, StylableWidgetClasses) == 0x000010, "Member 'FStyleSheetSettings::StylableWidgetClasses' has a wrong offset!");

// ScriptStruct StyleSheets.StyleTag
// 0x0000 (0x0010 - 0x0010)
struct FStyleTag final : public FStyleSelectorItem
{
};
static_assert(alignof(FStyleTag) == 0x000008, "Wrong alignment on FStyleTag");
static_assert(sizeof(FStyleTag) == 0x000010, "Wrong size on FStyleTag");

// ScriptStruct StyleSheets.StyleThemeConfigEntry
// 0x0030 (0x0030 - 0x0000)
struct FStyleThemeConfigEntry final
{
public:
	class FName                                   ThemeName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStyleSheetCollection>   Theme;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStyleSheetCollection*                  ThemeInstance;                                     // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStyleThemeConfigEntry) == 0x000008, "Wrong alignment on FStyleThemeConfigEntry");
static_assert(sizeof(FStyleThemeConfigEntry) == 0x000030, "Wrong size on FStyleThemeConfigEntry");
static_assert(offsetof(FStyleThemeConfigEntry, ThemeName) == 0x000000, "Member 'FStyleThemeConfigEntry::ThemeName' has a wrong offset!");
static_assert(offsetof(FStyleThemeConfigEntry, Theme) == 0x000008, "Member 'FStyleThemeConfigEntry::Theme' has a wrong offset!");
static_assert(offsetof(FStyleThemeConfigEntry, ThemeInstance) == 0x000028, "Member 'FStyleThemeConfigEntry::ThemeInstance' has a wrong offset!");

// ScriptStruct StyleSheets.StyleThemeConfigKey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FStyleThemeConfigKey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStyleThemeConfigKey) == 0x000004, "Wrong alignment on FStyleThemeConfigKey");
static_assert(sizeof(FStyleThemeConfigKey) == 0x000008, "Wrong size on FStyleThemeConfigKey");

// ScriptStruct StyleSheets.WidgetTypeEntry
// 0x0018 (0x0018 - 0x0000)
struct FWidgetTypeEntry final
{
public:
	struct FGameplayTag                           WidgetType;                                        // 0x0000(0x0004)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UWidget>>            WidgetClasses;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetTypeEntry) == 0x000008, "Wrong alignment on FWidgetTypeEntry");
static_assert(sizeof(FWidgetTypeEntry) == 0x000018, "Wrong size on FWidgetTypeEntry");
static_assert(offsetof(FWidgetTypeEntry, WidgetType) == 0x000000, "Member 'FWidgetTypeEntry::WidgetType' has a wrong offset!");
static_assert(offsetof(FWidgetTypeEntry, WidgetClasses) == 0x000008, "Member 'FWidgetTypeEntry::WidgetClasses' has a wrong offset!");

}

