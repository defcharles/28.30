#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicPoiPointProviderRuntime

#include "Basic.hpp"

#include "FortniteAI_classes.hpp"
#include "DynamicPoiPointProviderRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LagerRuntime_structs.hpp"


namespace SDK
{

// Class DynamicPoiPointProviderRuntime.AIServiceDynamicPoiPointProvider
// 0x0050 (0x00C8 - 0x0078)
class UAIServiceDynamicPoiPointProvider final : public UAthenaAIService
{
public:
	struct FGameplayTagContainer                  DynamicPOIPointProviderTags;                       // 0x0078(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDynamicPOIMaxActorCondition>   MaxActorConditions;                                // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         DefaultMaxActorCount;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaAIServicePlayerBots*             CachedAIServicePlayerBots;                         // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDynamicPoiPointProvider*>       DynamicPoiPointProviders;                          // 0x00B8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIServiceDynamicPoiPointProvider">();
	}
	static class UAIServiceDynamicPoiPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIServiceDynamicPoiPointProvider>();
	}
};
static_assert(alignof(UAIServiceDynamicPoiPointProvider) == 0x000008, "Wrong alignment on UAIServiceDynamicPoiPointProvider");
static_assert(sizeof(UAIServiceDynamicPoiPointProvider) == 0x0000C8, "Wrong size on UAIServiceDynamicPoiPointProvider");
static_assert(offsetof(UAIServiceDynamicPoiPointProvider, DynamicPOIPointProviderTags) == 0x000078, "Member 'UAIServiceDynamicPoiPointProvider::DynamicPOIPointProviderTags' has a wrong offset!");
static_assert(offsetof(UAIServiceDynamicPoiPointProvider, MaxActorConditions) == 0x000098, "Member 'UAIServiceDynamicPoiPointProvider::MaxActorConditions' has a wrong offset!");
static_assert(offsetof(UAIServiceDynamicPoiPointProvider, DefaultMaxActorCount) == 0x0000A8, "Member 'UAIServiceDynamicPoiPointProvider::DefaultMaxActorCount' has a wrong offset!");
static_assert(offsetof(UAIServiceDynamicPoiPointProvider, CachedAIServicePlayerBots) == 0x0000B0, "Member 'UAIServiceDynamicPoiPointProvider::CachedAIServicePlayerBots' has a wrong offset!");
static_assert(offsetof(UAIServiceDynamicPoiPointProvider, DynamicPoiPointProviders) == 0x0000B8, "Member 'UAIServiceDynamicPoiPointProvider::DynamicPoiPointProviders' has a wrong offset!");

// Class DynamicPoiPointProviderRuntime.DynamicPoiPointProvider
// 0x00E8 (0x0110 - 0x0028)
class UDynamicPoiPointProvider final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  PointProviderFiltersTags;                          // 0x0040(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0060(0x0068)(Transient, NativeAccessSpecifierPrivate)
	struct FBox                                   Box;                                               // 0x00C8(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        Locations;                                         // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicPoiPointProvider">();
	}
	static class UDynamicPoiPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicPoiPointProvider>();
	}
};
static_assert(alignof(UDynamicPoiPointProvider) == 0x000008, "Wrong alignment on UDynamicPoiPointProvider");
static_assert(sizeof(UDynamicPoiPointProvider) == 0x000110, "Wrong size on UDynamicPoiPointProvider");
static_assert(offsetof(UDynamicPoiPointProvider, CachedGameState) == 0x000030, "Member 'UDynamicPoiPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(UDynamicPoiPointProvider, CachedLivingWorldManager) == 0x000038, "Member 'UDynamicPoiPointProvider::CachedLivingWorldManager' has a wrong offset!");
static_assert(offsetof(UDynamicPoiPointProvider, PointProviderFiltersTags) == 0x000040, "Member 'UDynamicPoiPointProvider::PointProviderFiltersTags' has a wrong offset!");
static_assert(offsetof(UDynamicPoiPointProvider, SpawnLimiter) == 0x000060, "Member 'UDynamicPoiPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(UDynamicPoiPointProvider, Box) == 0x0000C8, "Member 'UDynamicPoiPointProvider::Box' has a wrong offset!");
static_assert(offsetof(UDynamicPoiPointProvider, Locations) == 0x000100, "Member 'UDynamicPoiPointProvider::Locations' has a wrong offset!");

}

