#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MPLocker_Heading

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_MPLocker_Heading.WBP_MPLocker_Heading_C.ExecuteUbergraph_WBP_MPLocker_Heading
// 0x0008 (0x0008 - 0x0000)
struct WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading) == 0x000004, "Wrong alignment on WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading");
static_assert(sizeof(WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading) == 0x000008, "Wrong size on WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading");
static_assert(offsetof(WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading, EntryPoint) == 0x000000, "Member 'WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_MPLocker_Heading_C_ExecuteUbergraph_WBP_MPLocker_Heading::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_MPLocker_Heading.WBP_MPLocker_Heading_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_MPLocker_Heading_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPLocker_Heading_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_MPLocker_Heading_C_PreConstruct");
static_assert(sizeof(WBP_MPLocker_Heading_C_PreConstruct) == 0x000001, "Wrong size on WBP_MPLocker_Heading_C_PreConstruct");
static_assert(offsetof(WBP_MPLocker_Heading_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_MPLocker_Heading_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_MPLocker_Heading.WBP_MPLocker_Heading_C.SetHeader
// 0x0018 (0x0018 - 0x0000)
struct WBP_MPLocker_Heading_C_SetHeader final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_MPLocker_Heading_C_SetHeader) == 0x000008, "Wrong alignment on WBP_MPLocker_Heading_C_SetHeader");
static_assert(sizeof(WBP_MPLocker_Heading_C_SetHeader) == 0x000018, "Wrong size on WBP_MPLocker_Heading_C_SetHeader");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetHeader, Text) == 0x000000, "Member 'WBP_MPLocker_Heading_C_SetHeader::Text' has a wrong offset!");

// Function WBP_MPLocker_Heading.WBP_MPLocker_Heading_C.SetSubHeader
// 0x0018 (0x0018 - 0x0000)
struct WBP_MPLocker_Heading_C_SetSubHeader final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_MPLocker_Heading_C_SetSubHeader) == 0x000008, "Wrong alignment on WBP_MPLocker_Heading_C_SetSubHeader");
static_assert(sizeof(WBP_MPLocker_Heading_C_SetSubHeader) == 0x000018, "Wrong size on WBP_MPLocker_Heading_C_SetSubHeader");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeader, Text) == 0x000000, "Member 'WBP_MPLocker_Heading_C_SetSubHeader::Text' has a wrong offset!");

// Function WBP_MPLocker_Heading.WBP_MPLocker_Heading_C.SetSubHeadingVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_MPLocker_Heading_C_SetSubHeadingVisibility final
{
public:
	bool                                          ShowSubHeading_;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility) == 0x000001, "Wrong alignment on WBP_MPLocker_Heading_C_SetSubHeadingVisibility");
static_assert(sizeof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility) == 0x000005, "Wrong size on WBP_MPLocker_Heading_C_SetSubHeadingVisibility");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility, ShowSubHeading_) == 0x000000, "Member 'WBP_MPLocker_Heading_C_SetSubHeadingVisibility::ShowSubHeading_' has a wrong offset!");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_MPLocker_Heading_C_SetSubHeadingVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_MPLocker_Heading_C_SetSubHeadingVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MPLocker_Heading_C_SetSubHeadingVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MPLocker_Heading_C_SetSubHeadingVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_MPLocker_Heading_C_SetSubHeadingVisibility::K2Node_Select_Default' has a wrong offset!");

}

