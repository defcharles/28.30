#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IceRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function IceRuntime.FortCurieElementAttachHandlerIce.HandleBuildingDamaged
// 0x0060 (0x0060 - 0x0000)
struct FortCurieElementAttachHandlerIce_HandleBuildingDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged) == 0x000008, "Wrong alignment on FortCurieElementAttachHandlerIce_HandleBuildingDamaged");
static_assert(sizeof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged) == 0x000060, "Wrong size on FortCurieElementAttachHandlerIce_HandleBuildingDamaged");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, DamagedActor) == 0x000000, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, Damage) == 0x000008, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::Damage' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, InstigatedBy) == 0x000010, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, DamageCauser) == 0x000018, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, HitLocation) == 0x000020, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, FHitComponent) == 0x000038, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, BoneName) == 0x000040, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_HandleBuildingDamaged, Momentum) == 0x000048, "Member 'FortCurieElementAttachHandlerIce_HandleBuildingDamaged::Momentum' has a wrong offset!");

// Function IceRuntime.FortCurieElementAttachHandlerIce.ResolveBuildingDamage
// 0x0018 (0x0018 - 0x0000)
struct FortCurieElementAttachHandlerIce_ResolveBuildingDamage final
{
public:
	class ABuildingActor*                         DamagedBuildingActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCurieElementAttachHandlerIce_ResolveBuildingDamage) == 0x000008, "Wrong alignment on FortCurieElementAttachHandlerIce_ResolveBuildingDamage");
static_assert(sizeof(FortCurieElementAttachHandlerIce_ResolveBuildingDamage) == 0x000018, "Wrong size on FortCurieElementAttachHandlerIce_ResolveBuildingDamage");
static_assert(offsetof(FortCurieElementAttachHandlerIce_ResolveBuildingDamage, DamagedBuildingActor) == 0x000000, "Member 'FortCurieElementAttachHandlerIce_ResolveBuildingDamage::DamagedBuildingActor' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_ResolveBuildingDamage, InstigatedBy) == 0x000008, "Member 'FortCurieElementAttachHandlerIce_ResolveBuildingDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortCurieElementAttachHandlerIce_ResolveBuildingDamage, DamageCauser) == 0x000010, "Member 'FortCurieElementAttachHandlerIce_ResolveBuildingDamage::DamageCauser' has a wrong offset!");

// Function IceRuntime.IceGroundPath.AddSplinePoint
// 0x0018 (0x0018 - 0x0000)
struct IceGroundPath_AddSplinePoint final
{
public:
	struct FVector                                InWorldLoc;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IceGroundPath_AddSplinePoint) == 0x000008, "Wrong alignment on IceGroundPath_AddSplinePoint");
static_assert(sizeof(IceGroundPath_AddSplinePoint) == 0x000018, "Wrong size on IceGroundPath_AddSplinePoint");
static_assert(offsetof(IceGroundPath_AddSplinePoint, InWorldLoc) == 0x000000, "Member 'IceGroundPath_AddSplinePoint::InWorldLoc' has a wrong offset!");

// Function IceRuntime.IceGroundPath.GetLocationOnLandscape
// 0x0030 (0x0030 - 0x0000)
struct IceGroundPath_GetLocationOnLandscape final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IceGroundPath_GetLocationOnLandscape) == 0x000008, "Wrong alignment on IceGroundPath_GetLocationOnLandscape");
static_assert(sizeof(IceGroundPath_GetLocationOnLandscape) == 0x000030, "Wrong size on IceGroundPath_GetLocationOnLandscape");
static_assert(offsetof(IceGroundPath_GetLocationOnLandscape, Location) == 0x000000, "Member 'IceGroundPath_GetLocationOnLandscape::Location' has a wrong offset!");
static_assert(offsetof(IceGroundPath_GetLocationOnLandscape, ReturnValue) == 0x000018, "Member 'IceGroundPath_GetLocationOnLandscape::ReturnValue' has a wrong offset!");

// Function IceRuntime.IceGroundPath.GetLastSplinePointLocation
// 0x0020 (0x0020 - 0x0000)
struct IceGroundPath_GetLastSplinePointLocation final
{
public:
	struct FVector                                LastPointLocation;                                 // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IceGroundPath_GetLastSplinePointLocation) == 0x000008, "Wrong alignment on IceGroundPath_GetLastSplinePointLocation");
static_assert(sizeof(IceGroundPath_GetLastSplinePointLocation) == 0x000020, "Wrong size on IceGroundPath_GetLastSplinePointLocation");
static_assert(offsetof(IceGroundPath_GetLastSplinePointLocation, LastPointLocation) == 0x000000, "Member 'IceGroundPath_GetLastSplinePointLocation::LastPointLocation' has a wrong offset!");
static_assert(offsetof(IceGroundPath_GetLastSplinePointLocation, ReturnValue) == 0x000018, "Member 'IceGroundPath_GetLastSplinePointLocation::ReturnValue' has a wrong offset!");

// Function IceRuntime.FortCurieIcePropagationManager.OnIceBlockDied
// 0x0060 (0x0060 - 0x0000)
struct FortCurieIcePropagationManager_OnIceBlockDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCurieIcePropagationManager_OnIceBlockDied) == 0x000008, "Wrong alignment on FortCurieIcePropagationManager_OnIceBlockDied");
static_assert(sizeof(FortCurieIcePropagationManager_OnIceBlockDied) == 0x000060, "Wrong size on FortCurieIcePropagationManager_OnIceBlockDied");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, DamagedActor) == 0x000000, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, Damage) == 0x000008, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::Damage' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, InstigatedBy) == 0x000010, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, DamageCauser) == 0x000018, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, HitLocation) == 0x000020, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, FHitComponent) == 0x000038, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, BoneName) == 0x000040, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortCurieIcePropagationManager_OnIceBlockDied, Momentum) == 0x000048, "Member 'FortCurieIcePropagationManager_OnIceBlockDied::Momentum' has a wrong offset!");

}

