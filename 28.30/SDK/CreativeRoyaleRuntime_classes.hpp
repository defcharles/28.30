#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeRoyaleRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "LinkId_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "CreativeRoyaleRuntime_structs.hpp"
#include "FortniteAI_classes.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class CreativeRoyaleRuntime.CreativeRoyaleIslandPlayspace
// 0x0078 (0x0760 - 0x06E8)
class ACreativeRoyaleIslandPlayspace final : public AFortPlayspace
{
public:
	class UFortProjectEditComponent_CreativeRoyale* ProjectEditComponent;                              // 0x06E8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_PlayStopPauseManager* PlayStopPauseManager;                              // 0x06F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_CreativeLoadingStateProxy* CreativeLoadingStateProxy;                         // 0x06F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_SpatialGameplay*    SpatialGameplayComponent;                          // 0x0700(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_DeviceTracking*     DeviceTrackerComponent;                            // 0x0708(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_CreativeModifyEmotes* CreativeModifyEmotesComponent;                     // 0x0710(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPlayspaceComponent_WorldTimeOfDayOverride* WorldTimeOfDayOverrideComponent;                   // 0x0718(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCreativeRoyalePlayspaceComponent_LoadingScreen* LoadingScreenComponent;                            // 0x0720(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayspaceComponent_ActorMemoryTracker* ActorMemoryTracker;                                // 0x0728(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPoiSwapManager*                    FortPoiSwapManager;                                // 0x0730(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         FoundActors;                                       // 0x0740(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                         IslandMemoryBudget;                                // 0x0750(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxMemorySamplingHeight;                           // 0x0754(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxMemorySamplingCellSize;                         // 0x0758(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyaleIslandPlayspace">();
	}
	static class ACreativeRoyaleIslandPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreativeRoyaleIslandPlayspace>();
	}
};
static_assert(alignof(ACreativeRoyaleIslandPlayspace) == 0x000008, "Wrong alignment on ACreativeRoyaleIslandPlayspace");
static_assert(sizeof(ACreativeRoyaleIslandPlayspace) == 0x000760, "Wrong size on ACreativeRoyaleIslandPlayspace");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, ProjectEditComponent) == 0x0006E8, "Member 'ACreativeRoyaleIslandPlayspace::ProjectEditComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, PlayStopPauseManager) == 0x0006F0, "Member 'ACreativeRoyaleIslandPlayspace::PlayStopPauseManager' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, CreativeLoadingStateProxy) == 0x0006F8, "Member 'ACreativeRoyaleIslandPlayspace::CreativeLoadingStateProxy' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, SpatialGameplayComponent) == 0x000700, "Member 'ACreativeRoyaleIslandPlayspace::SpatialGameplayComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, DeviceTrackerComponent) == 0x000708, "Member 'ACreativeRoyaleIslandPlayspace::DeviceTrackerComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, CreativeModifyEmotesComponent) == 0x000710, "Member 'ACreativeRoyaleIslandPlayspace::CreativeModifyEmotesComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, WorldTimeOfDayOverrideComponent) == 0x000718, "Member 'ACreativeRoyaleIslandPlayspace::WorldTimeOfDayOverrideComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, LoadingScreenComponent) == 0x000720, "Member 'ACreativeRoyaleIslandPlayspace::LoadingScreenComponent' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, ActorMemoryTracker) == 0x000728, "Member 'ACreativeRoyaleIslandPlayspace::ActorMemoryTracker' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, FortPoiSwapManager) == 0x000730, "Member 'ACreativeRoyaleIslandPlayspace::FortPoiSwapManager' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, FoundActors) == 0x000740, "Member 'ACreativeRoyaleIslandPlayspace::FoundActors' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, IslandMemoryBudget) == 0x000750, "Member 'ACreativeRoyaleIslandPlayspace::IslandMemoryBudget' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, MaxMemorySamplingHeight) == 0x000754, "Member 'ACreativeRoyaleIslandPlayspace::MaxMemorySamplingHeight' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleIslandPlayspace, MaxMemorySamplingCellSize) == 0x000758, "Member 'ACreativeRoyaleIslandPlayspace::MaxMemorySamplingCellSize' has a wrong offset!");

// Class CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LoadingScreen
// 0x0088 (0x0128 - 0x00A0)
class UCreativeRoyalePlayspaceComponent_LoadingScreen : public UPlayspaceComponent_LoadingScreen
{
public:
	bool                                          bShouldDisplayLoadingScreenDuringPostGame;         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlotNotFinishedLoadingContext;                     // 0x00A8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   MinigameResetContext;                              // 0x00C0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         FailsafeTimeoutLength;                             // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void OnPlayspaceUserAdded(struct FPlayspaceUser* AddedUser);
	void OnPlotLoadComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyalePlayspaceComponent_LoadingScreen">();
	}
	static class UCreativeRoyalePlayspaceComponent_LoadingScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeRoyalePlayspaceComponent_LoadingScreen>();
	}
};
static_assert(alignof(UCreativeRoyalePlayspaceComponent_LoadingScreen) == 0x000008, "Wrong alignment on UCreativeRoyalePlayspaceComponent_LoadingScreen");
static_assert(sizeof(UCreativeRoyalePlayspaceComponent_LoadingScreen) == 0x000128, "Wrong size on UCreativeRoyalePlayspaceComponent_LoadingScreen");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LoadingScreen, bShouldDisplayLoadingScreenDuringPostGame) == 0x0000A0, "Member 'UCreativeRoyalePlayspaceComponent_LoadingScreen::bShouldDisplayLoadingScreenDuringPostGame' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LoadingScreen, PlotNotFinishedLoadingContext) == 0x0000A8, "Member 'UCreativeRoyalePlayspaceComponent_LoadingScreen::PlotNotFinishedLoadingContext' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LoadingScreen, MinigameResetContext) == 0x0000C0, "Member 'UCreativeRoyalePlayspaceComponent_LoadingScreen::MinigameResetContext' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LoadingScreen, FailsafeTimeoutLength) == 0x0000F0, "Member 'UCreativeRoyalePlayspaceComponent_LoadingScreen::FailsafeTimeoutLength' has a wrong offset!");

// Class CreativeRoyaleRuntime.CreativeRoyalePlayspaceLoadWaitComponent
// 0x0010 (0x0138 - 0x0128)
class UCreativeRoyalePlayspaceLoadWaitComponent final : public UCreativeRoyalePlayspaceComponent_LoadingScreen
{
public:
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyalePlayspaceLoadWaitComponent">();
	}
	static class UCreativeRoyalePlayspaceLoadWaitComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeRoyalePlayspaceLoadWaitComponent>();
	}
};
static_assert(alignof(UCreativeRoyalePlayspaceLoadWaitComponent) == 0x000008, "Wrong alignment on UCreativeRoyalePlayspaceLoadWaitComponent");
static_assert(sizeof(UCreativeRoyalePlayspaceLoadWaitComponent) == 0x000138, "Wrong size on UCreativeRoyalePlayspaceLoadWaitComponent");

// Class CreativeRoyaleRuntime.FortControllerComponent_CreativeRoyale
// 0x0030 (0x00D8 - 0x00A8)
class UFortControllerComponent_CreativeRoyale final : public UFortControllerComponent
{
public:
	uint8                                         Pad_A8[0x30];                                      // 0x00A8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_CreativeRoyale">();
	}
	static class UFortControllerComponent_CreativeRoyale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_CreativeRoyale>();
	}
};
static_assert(alignof(UFortControllerComponent_CreativeRoyale) == 0x000008, "Wrong alignment on UFortControllerComponent_CreativeRoyale");
static_assert(sizeof(UFortControllerComponent_CreativeRoyale) == 0x0000D8, "Wrong size on UFortControllerComponent_CreativeRoyale");

// Class CreativeRoyaleRuntime.FortPoiSwapManager
// 0x00A0 (0x0140 - 0x00A0)
class UFortPoiSwapManager final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class AFortPoiSwapPlayspace* PoiSwapPlayspace)> OnPlayspaceLoadedContentDelegate;                  // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPoiSwapPlayspace* PoiSwapPlayspace)> OnPlayspaceUnloadedContentDelegate;                // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPoiSwapPlayspace* PoiSwapPlayspace)> OnPrePlayspaceContentUnloadDelegate;               // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x50];                                      // 0x00D0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortMcpProfileCreative> CachedIslandOwnerProfile;                          // 0x0120(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PoiPlotLocationOffset;                             // 0x0128(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlayspaceContentLoadingStateChanged(class AFortPoiSwapPlayspace* PoiSwapPlayspace, const EFortPoiSwapUserContentState& ContentLoadingState);
	void OnPrePlayspaceContentUnload(class AFortPoiSwapPlayspace* PoiSwapPlayspace);
	void SetPoiSubPlot(const class AFortPoiVolume* POIVolume, const class FString& SubPlotName, const class FString& SubPlotLinkCode);
	void SwapPoi(const class AFortPoiVolume* PoiToSwap);

	class AFortPoiSwapPlayspace* GetPlayspaceForPoi(const class AFortPoiVolume* POIVolume) const;
	class FString GetPoiSubPlotLinkCode(const class AFortPoiVolume* POIVolume) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPoiSwapManager">();
	}
	static class UFortPoiSwapManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPoiSwapManager>();
	}
};
static_assert(alignof(UFortPoiSwapManager) == 0x000008, "Wrong alignment on UFortPoiSwapManager");
static_assert(sizeof(UFortPoiSwapManager) == 0x000140, "Wrong size on UFortPoiSwapManager");
static_assert(offsetof(UFortPoiSwapManager, OnPlayspaceLoadedContentDelegate) == 0x0000A0, "Member 'UFortPoiSwapManager::OnPlayspaceLoadedContentDelegate' has a wrong offset!");
static_assert(offsetof(UFortPoiSwapManager, OnPlayspaceUnloadedContentDelegate) == 0x0000B0, "Member 'UFortPoiSwapManager::OnPlayspaceUnloadedContentDelegate' has a wrong offset!");
static_assert(offsetof(UFortPoiSwapManager, OnPrePlayspaceContentUnloadDelegate) == 0x0000C0, "Member 'UFortPoiSwapManager::OnPrePlayspaceContentUnloadDelegate' has a wrong offset!");
static_assert(offsetof(UFortPoiSwapManager, CachedIslandOwnerProfile) == 0x000120, "Member 'UFortPoiSwapManager::CachedIslandOwnerProfile' has a wrong offset!");
static_assert(offsetof(UFortPoiSwapManager, PoiPlotLocationOffset) == 0x000128, "Member 'UFortPoiSwapManager::PoiPlotLocationOffset' has a wrong offset!");

// Class CreativeRoyaleRuntime.FortPoiSwapPlayspace
// 0x00B0 (0x0798 - 0x06E8)
class AFortPoiSwapPlayspace final : public AFortPlayspace
{
public:
	TMulticastInlineDelegate<void(class AFortPoiSwapPlayspace* PoiSwapPlayspace, EFortPoiSwapUserContentState& ContentLoadingState)> OnContentStateChangedDelegate;                     // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPoiSwapPlayspace* PoiSwapPlayspace)> OnPreContentUnloadDelegate;                        // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComponent;                                    // 0x0708(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLevelSaveComponent*                LevelSaveComponent;                                // 0x0710(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlaysetLevelStreamComponent*           PlaysetLevelStreamComponent;                       // 0x0718(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPoiVolume>          PoiToReplace;                                      // 0x0720(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortCreativeRealEstatePlotItem> PlotToLoad;                                        // 0x0728(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortCreativeRealEstatePlotItem> LoadedPlot;                                        // 0x0730(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FOnlineLinkId                          LinkCodeToLoad;                                    // 0x0738(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0750(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_760[0x38];                                     // 0x0760(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUserContentLoaded();
	void OnUserContentUnloaded(const struct FAsyncTaskResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPoiSwapPlayspace">();
	}
	static class AFortPoiSwapPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortPoiSwapPlayspace>();
	}
};
static_assert(alignof(AFortPoiSwapPlayspace) == 0x000008, "Wrong alignment on AFortPoiSwapPlayspace");
static_assert(sizeof(AFortPoiSwapPlayspace) == 0x000798, "Wrong size on AFortPoiSwapPlayspace");
static_assert(offsetof(AFortPoiSwapPlayspace, OnContentStateChangedDelegate) == 0x0006E8, "Member 'AFortPoiSwapPlayspace::OnContentStateChangedDelegate' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, OnPreContentUnloadDelegate) == 0x0006F8, "Member 'AFortPoiSwapPlayspace::OnPreContentUnloadDelegate' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, SceneComponent) == 0x000708, "Member 'AFortPoiSwapPlayspace::SceneComponent' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, LevelSaveComponent) == 0x000710, "Member 'AFortPoiSwapPlayspace::LevelSaveComponent' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, PlaysetLevelStreamComponent) == 0x000718, "Member 'AFortPoiSwapPlayspace::PlaysetLevelStreamComponent' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, PoiToReplace) == 0x000720, "Member 'AFortPoiSwapPlayspace::PoiToReplace' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, PlotToLoad) == 0x000728, "Member 'AFortPoiSwapPlayspace::PlotToLoad' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, LoadedPlot) == 0x000730, "Member 'AFortPoiSwapPlayspace::LoadedPlot' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, LinkCodeToLoad) == 0x000738, "Member 'AFortPoiSwapPlayspace::LinkCodeToLoad' has a wrong offset!");
static_assert(offsetof(AFortPoiSwapPlayspace, SpawnedActors) == 0x000750, "Member 'AFortPoiSwapPlayspace::SpawnedActors' has a wrong offset!");

// Class CreativeRoyaleRuntime.AthenaAIServicePlayerBots_CreativeRoyale
// 0x0070 (0x13E0 - 0x1370)
class UAthenaAIServicePlayerBots_CreativeRoyale final : public UAthenaAIServiceCreativePlayerBots
{
public:
	struct FScalableFloat                         PlayerBotsEnabled;                                 // 0x1368(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BotsAllowedOnHumanTeam;                            // 0x1390(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceAllPlayerBotsToOneTeam;                       // 0x13B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnPlayerJoiningInProgress(const class AFortPlayerState* FortPlayerState);
	void StartLootClustering();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AthenaAIServicePlayerBots_CreativeRoyale">();
	}
	static class UAthenaAIServicePlayerBots_CreativeRoyale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaAIServicePlayerBots_CreativeRoyale>();
	}
};
static_assert(alignof(UAthenaAIServicePlayerBots_CreativeRoyale) == 0x000010, "Wrong alignment on UAthenaAIServicePlayerBots_CreativeRoyale");
static_assert(sizeof(UAthenaAIServicePlayerBots_CreativeRoyale) == 0x0013E0, "Wrong size on UAthenaAIServicePlayerBots_CreativeRoyale");
static_assert(offsetof(UAthenaAIServicePlayerBots_CreativeRoyale, PlayerBotsEnabled) == 0x001368, "Member 'UAthenaAIServicePlayerBots_CreativeRoyale::PlayerBotsEnabled' has a wrong offset!");
static_assert(offsetof(UAthenaAIServicePlayerBots_CreativeRoyale, BotsAllowedOnHumanTeam) == 0x001390, "Member 'UAthenaAIServicePlayerBots_CreativeRoyale::BotsAllowedOnHumanTeam' has a wrong offset!");
static_assert(offsetof(UAthenaAIServicePlayerBots_CreativeRoyale, ForceAllPlayerBotsToOneTeam) == 0x0013B8, "Member 'UAthenaAIServicePlayerBots_CreativeRoyale::ForceAllPlayerBotsToOneTeam' has a wrong offset!");

// Class CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_LevelReset
// 0x0180 (0x0220 - 0x00A0)
class UCreativeRoyalePlayspaceComponent_LevelReset final : public UPlayspaceComponent
{
public:
	TWeakObjectPtr<class ULevelSaveRecord>        CachedLevelSaveRecord;                             // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSpawnFromGameplay;                                // 0x00A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          SavedFoundActors;                                  // 0x00B0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<TWeakObjectPtr<class AActor>, struct FSpawnBuildingActorParameters> SavedDeadActors;                                   // 0x00C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          SavedDamagedActors;                                // 0x0110(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          FoundActorsDied;                                   // 0x0120(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          FoundActorsDiedGuid;                               // 0x0130(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, struct FAttachedBuildingActorGuids> SavedParentWithAttachedBuildings;                  // 0x0140(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, TWeakObjectPtr<class AActor>> CurrentActorForBuildingGuid;                       // 0x0190(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          FoundActorsDamaged;                                // 0x01E0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          FoundActorsDamagedGuid;                            // 0x01F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortPoiSwapManager>     CachedPoiSwapManager;                              // 0x0200(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_208[0x18];                                     // 0x0208(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActorToTrack(class AActor* ActorToTrack);
	void BindActorToCallbacks(class AActor* Actor);
	void CachePoiSwapManager();
	void ClearFoundActors();
	void DestroyDamagedActors();
	class ULevelSaveRecord* GetLevelSaveRecord();
	class UFortPoiSwapManager* GetPoiSwapManager();
	void HandleBuildingDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleBuildingDestroyed(const TWeakObjectPtr<class ABuildingActor> DestroyedBuilding);
	void HandleBuildingDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void OnPlotLoadComplete();
	void OnSpawningFromSaveFinish();
	void RespawnDeadActors();
	void RestoreAttachedBuildingActors(const struct FGuid& SpawnableActorGuid, class AActor* Actor);
	void SaveActorToBeRespawned(class AActor* ActorToBeRespawned, const bool bRemoveDamagedActor);
	void SaveDamagedActor(class AActor* DamagedActor);
	void SaveParentToAttachToInformation(const struct FGuid& ActorToAttachGuid, class AActor* ActorToAttach);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyalePlayspaceComponent_LevelReset">();
	}
	static class UCreativeRoyalePlayspaceComponent_LevelReset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeRoyalePlayspaceComponent_LevelReset>();
	}
};
static_assert(alignof(UCreativeRoyalePlayspaceComponent_LevelReset) == 0x000008, "Wrong alignment on UCreativeRoyalePlayspaceComponent_LevelReset");
static_assert(sizeof(UCreativeRoyalePlayspaceComponent_LevelReset) == 0x000220, "Wrong size on UCreativeRoyalePlayspaceComponent_LevelReset");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, CachedLevelSaveRecord) == 0x0000A0, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::CachedLevelSaveRecord' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, bSpawnFromGameplay) == 0x0000A8, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::bSpawnFromGameplay' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, SavedFoundActors) == 0x0000B0, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::SavedFoundActors' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, SavedDeadActors) == 0x0000C0, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::SavedDeadActors' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, SavedDamagedActors) == 0x000110, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::SavedDamagedActors' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, FoundActorsDied) == 0x000120, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::FoundActorsDied' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, FoundActorsDiedGuid) == 0x000130, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::FoundActorsDiedGuid' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, SavedParentWithAttachedBuildings) == 0x000140, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::SavedParentWithAttachedBuildings' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, CurrentActorForBuildingGuid) == 0x000190, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::CurrentActorForBuildingGuid' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, FoundActorsDamaged) == 0x0001E0, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::FoundActorsDamaged' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, FoundActorsDamagedGuid) == 0x0001F0, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::FoundActorsDamagedGuid' has a wrong offset!");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_LevelReset, CachedPoiSwapManager) == 0x000200, "Member 'UCreativeRoyalePlayspaceComponent_LevelReset::CachedPoiSwapManager' has a wrong offset!");

// Class CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_PlayerSpawning
// 0x0000 (0x00B0 - 0x00B0)
class UCreativeRoyalePlayspaceComponent_PlayerSpawning final : public UFortPlayspaceComponent_PlayerSpawning
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyalePlayspaceComponent_PlayerSpawning">();
	}
	static class UCreativeRoyalePlayspaceComponent_PlayerSpawning* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeRoyalePlayspaceComponent_PlayerSpawning>();
	}
};
static_assert(alignof(UCreativeRoyalePlayspaceComponent_PlayerSpawning) == 0x000008, "Wrong alignment on UCreativeRoyalePlayspaceComponent_PlayerSpawning");
static_assert(sizeof(UCreativeRoyalePlayspaceComponent_PlayerSpawning) == 0x0000B0, "Wrong size on UCreativeRoyalePlayspaceComponent_PlayerSpawning");

// Class CreativeRoyaleRuntime.CreativeRoyalePlayspaceComponent_RemoveItems
// 0x0028 (0x00C8 - 0x00A0)
class UCreativeRoyalePlayspaceComponent_RemoveItems final : public UPlayspaceComponent
{
public:
	bool                                          bSpawnFromGameplay;                                // 0x00A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x27];                                      // 0x00A1(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleMinigameStateChanged(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void OnPlotLoadComplete();
	void OnSpawningFromSaveFinish();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyalePlayspaceComponent_RemoveItems">();
	}
	static class UCreativeRoyalePlayspaceComponent_RemoveItems* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeRoyalePlayspaceComponent_RemoveItems>();
	}
};
static_assert(alignof(UCreativeRoyalePlayspaceComponent_RemoveItems) == 0x000008, "Wrong alignment on UCreativeRoyalePlayspaceComponent_RemoveItems");
static_assert(sizeof(UCreativeRoyalePlayspaceComponent_RemoveItems) == 0x0000C8, "Wrong size on UCreativeRoyalePlayspaceComponent_RemoveItems");
static_assert(offsetof(UCreativeRoyalePlayspaceComponent_RemoveItems, bSpawnFromGameplay) == 0x0000A0, "Member 'UCreativeRoyalePlayspaceComponent_RemoveItems::bSpawnFromGameplay' has a wrong offset!");

// Class CreativeRoyaleRuntime.CreativeRoyaleRootPlayspace
// 0x0038 (0x0720 - 0x06E8)
class ACreativeRoyaleRootPlayspace final : public AFortPlayspace
{
public:
	uint8                                         Pad_6E8[0x18];                                     // 0x06E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerAthena*            EditorIslandOwnerPlayerController;                 // 0x0700(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x8];                                      // 0x0708(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasPlotLoaded;                                    // 0x0710(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_711[0xF];                                      // 0x0711(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cheat_LoadEditorIsland();
	void OnPlotLoadComplete();
	void OnRep_bHasPlotLoaded();
	void TeleportPlayersToPlayerStarts();
	void TeleportPlayerToPlayerStart(const struct FPlayspaceUser& AddedUser);

	bool BuildDataRegistryResolverScope_Implementation(TArray<class FName>* InOutResolverScopes, int32* InOutPriority) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeRoyaleRootPlayspace">();
	}
	static class ACreativeRoyaleRootPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreativeRoyaleRootPlayspace>();
	}
};
static_assert(alignof(ACreativeRoyaleRootPlayspace) == 0x000008, "Wrong alignment on ACreativeRoyaleRootPlayspace");
static_assert(sizeof(ACreativeRoyaleRootPlayspace) == 0x000720, "Wrong size on ACreativeRoyaleRootPlayspace");
static_assert(offsetof(ACreativeRoyaleRootPlayspace, EditorIslandOwnerPlayerController) == 0x000700, "Member 'ACreativeRoyaleRootPlayspace::EditorIslandOwnerPlayerController' has a wrong offset!");
static_assert(offsetof(ACreativeRoyaleRootPlayspace, bHasPlotLoaded) == 0x000710, "Member 'ACreativeRoyaleRootPlayspace::bHasPlotLoaded' has a wrong offset!");

// Class CreativeRoyaleRuntime.FortAthenaMutator_CreativeRoyaleSafeZoneOverride
// 0x0000 (0x0338 - 0x0338)
class AFortAthenaMutator_CreativeRoyaleSafeZoneOverride final : public AFortAthenaMutator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_CreativeRoyaleSafeZoneOverride">();
	}
	static class AFortAthenaMutator_CreativeRoyaleSafeZoneOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_CreativeRoyaleSafeZoneOverride>();
	}
};
static_assert(alignof(AFortAthenaMutator_CreativeRoyaleSafeZoneOverride) == 0x000008, "Wrong alignment on AFortAthenaMutator_CreativeRoyaleSafeZoneOverride");
static_assert(sizeof(AFortAthenaMutator_CreativeRoyaleSafeZoneOverride) == 0x000338, "Wrong size on AFortAthenaMutator_CreativeRoyaleSafeZoneOverride");

// Class CreativeRoyaleRuntime.FortCheatManager_CreativeRoyale
// 0x0010 (0x0048 - 0x0038)
class UFortCheatManager_CreativeRoyale final : public UFortCheatManager_Coupled
{
public:
	class UFortCreativeRealEstatePlotItemDefinition* CreativeRoyaleEditPlotDefinition;                  // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CreativeRoyaleVolumeTag;                           // 0x0040(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreativeRoyaleLoadEditPlot() const;
	void CreativeRoyaleResetIslandFile() const;
	void CreativeRoyaleTeleportToEditZone() const;
	void TeleportToPlotAferLoad() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_CreativeRoyale">();
	}
	static class UFortCheatManager_CreativeRoyale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_CreativeRoyale>();
	}
};
static_assert(alignof(UFortCheatManager_CreativeRoyale) == 0x000008, "Wrong alignment on UFortCheatManager_CreativeRoyale");
static_assert(sizeof(UFortCheatManager_CreativeRoyale) == 0x000048, "Wrong size on UFortCheatManager_CreativeRoyale");
static_assert(offsetof(UFortCheatManager_CreativeRoyale, CreativeRoyaleEditPlotDefinition) == 0x000038, "Member 'UFortCheatManager_CreativeRoyale::CreativeRoyaleEditPlotDefinition' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_CreativeRoyale, CreativeRoyaleVolumeTag) == 0x000040, "Member 'UFortCheatManager_CreativeRoyale::CreativeRoyaleVolumeTag' has a wrong offset!");

// Class CreativeRoyaleRuntime.FortProjectEditComponent_CreativeRoyale
// 0x0020 (0x0520 - 0x0500)
class UFortProjectEditComponent_CreativeRoyale final : public UFortProjectEditComponent
{
public:
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCreativeRealEstatePlotItemDefinition* CreativeRoyaleEditPlotDefinition;                  // 0x0510(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadPlotFromProject();
	void OnPlayerLoggedIn(class APlayerController* PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProjectEditComponent_CreativeRoyale">();
	}
	static class UFortProjectEditComponent_CreativeRoyale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProjectEditComponent_CreativeRoyale>();
	}
};
static_assert(alignof(UFortProjectEditComponent_CreativeRoyale) == 0x000010, "Wrong alignment on UFortProjectEditComponent_CreativeRoyale");
static_assert(sizeof(UFortProjectEditComponent_CreativeRoyale) == 0x000520, "Wrong size on UFortProjectEditComponent_CreativeRoyale");
static_assert(offsetof(UFortProjectEditComponent_CreativeRoyale, CreativeRoyaleEditPlotDefinition) == 0x000510, "Member 'UFortProjectEditComponent_CreativeRoyale::CreativeRoyaleEditPlotDefinition' has a wrong offset!");

}

