#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationLayeringRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum AnimationLayeringRuntime.ECopyMotion_Component
// NumValues: 0x0004
enum class ECopyMotion_Component : uint8
{
	TranslationX                             = 0,
	TranslationY                             = 1,
	TranslationZ                             = 2,
	RotationAngle                            = 3,
};

// ScriptStruct AnimationLayeringRuntime.BoneMaskPerBoneData
// 0x0008 (0x0008 - 0x0000)
struct FBoneMaskPerBoneData final
{
public:
	int32                                         SkeletonPoseBoneIndex;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskPerBoneData) == 0x000004, "Wrong alignment on FBoneMaskPerBoneData");
static_assert(sizeof(FBoneMaskPerBoneData) == 0x000008, "Wrong size on FBoneMaskPerBoneData");
static_assert(offsetof(FBoneMaskPerBoneData, SkeletonPoseBoneIndex) == 0x000000, "Member 'FBoneMaskPerBoneData::SkeletonPoseBoneIndex' has a wrong offset!");
static_assert(offsetof(FBoneMaskPerBoneData, BlendWeight) == 0x000004, "Member 'FBoneMaskPerBoneData::BlendWeight' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMaskBodyPartDefinition
// 0x0038 (0x0038 - 0x0000)
struct FBoneMaskBodyPartDefinition final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBranchFilter>                  BranchFilters;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneMaskPerBoneData>           SkeletonPoseBoneWeights;                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 SkeletonPoseChildBoneIndices;                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskBodyPartDefinition) == 0x000008, "Wrong alignment on FBoneMaskBodyPartDefinition");
static_assert(sizeof(FBoneMaskBodyPartDefinition) == 0x000038, "Wrong size on FBoneMaskBodyPartDefinition");
static_assert(offsetof(FBoneMaskBodyPartDefinition, Name) == 0x000000, "Member 'FBoneMaskBodyPartDefinition::Name' has a wrong offset!");
static_assert(offsetof(FBoneMaskBodyPartDefinition, BranchFilters) == 0x000008, "Member 'FBoneMaskBodyPartDefinition::BranchFilters' has a wrong offset!");
static_assert(offsetof(FBoneMaskBodyPartDefinition, SkeletonPoseBoneWeights) == 0x000018, "Member 'FBoneMaskBodyPartDefinition::SkeletonPoseBoneWeights' has a wrong offset!");
static_assert(offsetof(FBoneMaskBodyPartDefinition, SkeletonPoseChildBoneIndices) == 0x000028, "Member 'FBoneMaskBodyPartDefinition::SkeletonPoseChildBoneIndices' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMaskEntry
// 0x0008 (0x0008 - 0x0000)
struct FBoneMaskEntry final
{
public:
	float                                         LocalSpaceWeight;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshSpaceWeight;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskEntry) == 0x000004, "Wrong alignment on FBoneMaskEntry");
static_assert(sizeof(FBoneMaskEntry) == 0x000008, "Wrong size on FBoneMaskEntry");
static_assert(offsetof(FBoneMaskEntry, LocalSpaceWeight) == 0x000000, "Member 'FBoneMaskEntry::LocalSpaceWeight' has a wrong offset!");
static_assert(offsetof(FBoneMaskEntry, MeshSpaceWeight) == 0x000004, "Member 'FBoneMaskEntry::MeshSpaceWeight' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMask
// 0x0050 (0x0050 - 0x0000)
struct FBoneMask final
{
public:
	TMap<class FName, struct FBoneMaskEntry>      BoneMaskMap;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMask) == 0x000008, "Wrong alignment on FBoneMask");
static_assert(sizeof(FBoneMask) == 0x000050, "Wrong size on FBoneMask");
static_assert(offsetof(FBoneMask, BoneMaskMap) == 0x000000, "Member 'FBoneMask::BoneMaskMap' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMaskDefinition
// 0x0010 (0x0010 - 0x0000)
struct FBoneMaskDefinition final
{
public:
	TArray<struct FBoneMaskBodyPartDefinition>    BodyPartDefinitions;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskDefinition) == 0x000008, "Wrong alignment on FBoneMaskDefinition");
static_assert(sizeof(FBoneMaskDefinition) == 0x000010, "Wrong size on FBoneMaskDefinition");
static_assert(offsetof(FBoneMaskDefinition, BodyPartDefinitions) == 0x000000, "Member 'FBoneMaskDefinition::BodyPartDefinitions' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMaskUpdateMultiParam
// 0x000C (0x000C - 0x0000)
struct FBoneMaskUpdateMultiParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalSpaceWeight;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshSpaceWeight;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskUpdateMultiParam) == 0x000004, "Wrong alignment on FBoneMaskUpdateMultiParam");
static_assert(sizeof(FBoneMaskUpdateMultiParam) == 0x00000C, "Wrong size on FBoneMaskUpdateMultiParam");
static_assert(offsetof(FBoneMaskUpdateMultiParam, Name) == 0x000000, "Member 'FBoneMaskUpdateMultiParam::Name' has a wrong offset!");
static_assert(offsetof(FBoneMaskUpdateMultiParam, LocalSpaceWeight) == 0x000004, "Member 'FBoneMaskUpdateMultiParam::LocalSpaceWeight' has a wrong offset!");
static_assert(offsetof(FBoneMaskUpdateMultiParam, MeshSpaceWeight) == 0x000008, "Member 'FBoneMaskUpdateMultiParam::MeshSpaceWeight' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.BoneMaskBodyPartNameContainer
// 0x0010 (0x0010 - 0x0000)
struct FBoneMaskBodyPartNameContainer final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMaskBodyPartNameContainer) == 0x000008, "Wrong alignment on FBoneMaskBodyPartNameContainer");
static_assert(sizeof(FBoneMaskBodyPartNameContainer) == 0x000010, "Wrong size on FBoneMaskBodyPartNameContainer");
static_assert(offsetof(FBoneMaskBodyPartNameContainer, Names) == 0x000000, "Member 'FBoneMaskBodyPartNameContainer::Names' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.AnimNode_BoneMask
// 0x00E8 (0x00F8 - 0x0010)
struct FAnimNode_BoneMask final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseLink>                      BlendPoses;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneMask                              BoneMask;                                          // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UBoneMaskDefinitionDataAsset*           BoneMaskDefinitionDataAsset;                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneMaskBodyPartNameContainer> BodyParts;                                         // 0x0098(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x48];                                      // 0x00B0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneMask) == 0x000008, "Wrong alignment on FAnimNode_BoneMask");
static_assert(sizeof(FAnimNode_BoneMask) == 0x0000F8, "Wrong size on FAnimNode_BoneMask");
static_assert(offsetof(FAnimNode_BoneMask, BasePose) == 0x000010, "Member 'FAnimNode_BoneMask::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, BlendPoses) == 0x000020, "Member 'FAnimNode_BoneMask::BlendPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, BlendWeights) == 0x000030, "Member 'FAnimNode_BoneMask::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, BoneMask) == 0x000040, "Member 'FAnimNode_BoneMask::BoneMask' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, BoneMaskDefinitionDataAsset) == 0x000090, "Member 'FAnimNode_BoneMask::BoneMaskDefinitionDataAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, BodyParts) == 0x000098, "Member 'FAnimNode_BoneMask::BodyParts' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, CurveBlendOption) == 0x0000A8, "Member 'FAnimNode_BoneMask::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneMask, LODThreshold) == 0x0000AC, "Member 'FAnimNode_BoneMask::LODThreshold' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.AnimNode_CopyBoneAdvanced
// 0x0060 (0x0128 - 0x00C8)
struct FAnimNode_CopyBoneAdvanced final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00D4(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TranslationWeight;                                 // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationWeight;                                    // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleWeight;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ControlSpace;                                      // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TranslationSpaceBone;                              // 0x0104(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTranslationInCustomBoneSpace;                     // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x16];                                     // 0x0112(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyBoneAdvanced) == 0x000008, "Wrong alignment on FAnimNode_CopyBoneAdvanced");
static_assert(sizeof(FAnimNode_CopyBoneAdvanced) == 0x000128, "Wrong size on FAnimNode_CopyBoneAdvanced");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, SourceBone) == 0x0000C8, "Member 'FAnimNode_CopyBoneAdvanced::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, TargetBone) == 0x0000D4, "Member 'FAnimNode_CopyBoneAdvanced::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, TranslationWeight) == 0x0000E0, "Member 'FAnimNode_CopyBoneAdvanced::TranslationWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, RotationWeight) == 0x0000F8, "Member 'FAnimNode_CopyBoneAdvanced::RotationWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, ScaleWeight) == 0x0000FC, "Member 'FAnimNode_CopyBoneAdvanced::ScaleWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, ControlSpace) == 0x000100, "Member 'FAnimNode_CopyBoneAdvanced::ControlSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, TranslationSpaceBone) == 0x000104, "Member 'FAnimNode_CopyBoneAdvanced::TranslationSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, bTranslationInCustomBoneSpace) == 0x000110, "Member 'FAnimNode_CopyBoneAdvanced::bTranslationInCustomBoneSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneAdvanced, bPropagateToChildren) == 0x000111, "Member 'FAnimNode_CopyBoneAdvanced::bPropagateToChildren' has a wrong offset!");

// ScriptStruct AnimationLayeringRuntime.AnimNode_CopyMotion
// 0x0118 (0x01E0 - 0x00C8)
struct FAnimNode_CopyMotion final : public FAnimNode_SkeletalControlBase
{
public:
	struct FComponentSpacePoseLink                BasePose;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComponentSpacePoseLink                BasePoseReference;                                 // 0x00D8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseBasePose;                                      // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PoseHistoryTag;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         SourceBone;                                        // 0x00F4(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoneToModify;                                      // 0x0100(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         CopySpace;                                         // 0x010C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ApplySpace;                                        // 0x0118(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TranslationOffset;                                 // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0140(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotationPivot;                                     // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurvePrefix;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCurveName;                                   // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCurveScale;                                  // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECopyMotion_Component                         TargetCurveComponent;                              // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         TargetCurveRotationAxis;                           // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TranslationX_CurveName;                            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TranslationY_CurveName;                            // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TranslationZ_CurveName;                            // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotationRoll_CurveName;                            // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotationPitch_CurveName;                           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotationYaw_CurveName;                             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationScale;                                  // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TranslationRemapCurve;                             // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationScale;                                     // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RotationRemapCurve;                                // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x18];                                     // 0x01C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyMotion) == 0x000008, "Wrong alignment on FAnimNode_CopyMotion");
static_assert(sizeof(FAnimNode_CopyMotion) == 0x0001E0, "Wrong size on FAnimNode_CopyMotion");
static_assert(offsetof(FAnimNode_CopyMotion, BasePose) == 0x0000C8, "Member 'FAnimNode_CopyMotion::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, BasePoseReference) == 0x0000D8, "Member 'FAnimNode_CopyMotion::BasePoseReference' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, bUseBasePose) == 0x0000E8, "Member 'FAnimNode_CopyMotion::bUseBasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, PoseHistoryTag) == 0x0000EC, "Member 'FAnimNode_CopyMotion::PoseHistoryTag' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, Delay) == 0x0000F0, "Member 'FAnimNode_CopyMotion::Delay' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, SourceBone) == 0x0000F4, "Member 'FAnimNode_CopyMotion::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, BoneToModify) == 0x000100, "Member 'FAnimNode_CopyMotion::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, CopySpace) == 0x00010C, "Member 'FAnimNode_CopyMotion::CopySpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, ApplySpace) == 0x000118, "Member 'FAnimNode_CopyMotion::ApplySpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationOffset) == 0x000128, "Member 'FAnimNode_CopyMotion::TranslationOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationOffset) == 0x000140, "Member 'FAnimNode_CopyMotion::RotationOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationPivot) == 0x000158, "Member 'FAnimNode_CopyMotion::RotationPivot' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, CurvePrefix) == 0x000170, "Member 'FAnimNode_CopyMotion::CurvePrefix' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TargetCurveName) == 0x000174, "Member 'FAnimNode_CopyMotion::TargetCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TargetCurveScale) == 0x000178, "Member 'FAnimNode_CopyMotion::TargetCurveScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TargetCurveComponent) == 0x00017C, "Member 'FAnimNode_CopyMotion::TargetCurveComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TargetCurveRotationAxis) == 0x00017D, "Member 'FAnimNode_CopyMotion::TargetCurveRotationAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationX_CurveName) == 0x000180, "Member 'FAnimNode_CopyMotion::TranslationX_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationY_CurveName) == 0x000184, "Member 'FAnimNode_CopyMotion::TranslationY_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationZ_CurveName) == 0x000188, "Member 'FAnimNode_CopyMotion::TranslationZ_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationRoll_CurveName) == 0x00018C, "Member 'FAnimNode_CopyMotion::RotationRoll_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationPitch_CurveName) == 0x000190, "Member 'FAnimNode_CopyMotion::RotationPitch_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationYaw_CurveName) == 0x000194, "Member 'FAnimNode_CopyMotion::RotationYaw_CurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationScale) == 0x000198, "Member 'FAnimNode_CopyMotion::TranslationScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, TranslationRemapCurve) == 0x0001B0, "Member 'FAnimNode_CopyMotion::TranslationRemapCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationScale) == 0x0001B8, "Member 'FAnimNode_CopyMotion::RotationScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyMotion, RotationRemapCurve) == 0x0001C0, "Member 'FAnimNode_CopyMotion::RotationRemapCurve' has a wrong offset!");

}

