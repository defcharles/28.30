#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateDrivenActorRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "StructUtils_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum StateDrivenActorRuntime.EStateDrivenStateID
// NumValues: 0x000D
enum class EStateDrivenStateID : uint8
{
	Invalid                                  = 0,
	Success                                  = 1,
	Failure                                  = 2,
	State_A                                  = 3,
	State_B                                  = 4,
	State_C                                  = 5,
	State_D                                  = 6,
	State_E                                  = 7,
	State_F                                  = 8,
	State_G                                  = 9,
	State_H                                  = 10,
	State_I                                  = 11,
	State_J                                  = 12,
};

// ScriptStruct StateDrivenActorRuntime.StateDrivenTagQuery
// 0x0018 (0x0018 - 0x0000)
struct FStateDrivenTagQuery final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       InstancedTagQuery;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenTagQuery) == 0x000008, "Wrong alignment on FStateDrivenTagQuery");
static_assert(sizeof(FStateDrivenTagQuery) == 0x000018, "Wrong size on FStateDrivenTagQuery");
static_assert(offsetof(FStateDrivenTagQuery, InstancedTagQuery) == 0x000008, "Member 'FStateDrivenTagQuery::InstancedTagQuery' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent
// 0x0028 (0x0028 - 0x0000)
struct FStateDrivenEvent
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueTag                        BurstGameplayCue;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActorComponent_StateDriven*        StateDrivenOwner;                                  // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent) == 0x000008, "Wrong alignment on FStateDrivenEvent");
static_assert(sizeof(FStateDrivenEvent) == 0x000028, "Wrong size on FStateDrivenEvent");
static_assert(offsetof(FStateDrivenEvent, BurstGameplayCue) == 0x000008, "Member 'FStateDrivenEvent::BurstGameplayCue' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent, GameplayEffect) == 0x000010, "Member 'FStateDrivenEvent::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent, StateDrivenOwner) == 0x000020, "Member 'FStateDrivenEvent::StateDrivenOwner' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_BeginOverlap
// 0x0018 (0x0040 - 0x0028)
struct FStateDrivenEvent_BeginOverlap : public FStateDrivenEvent
{
public:
	struct FStateDrivenTagQuery                   OverlappingActorTagQuery;                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_BeginOverlap) == 0x000008, "Wrong alignment on FStateDrivenEvent_BeginOverlap");
static_assert(sizeof(FStateDrivenEvent_BeginOverlap) == 0x000040, "Wrong size on FStateDrivenEvent_BeginOverlap");
static_assert(offsetof(FStateDrivenEvent_BeginOverlap, OverlappingActorTagQuery) == 0x000028, "Member 'FStateDrivenEvent_BeginOverlap::OverlappingActorTagQuery' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenStateTransitions
// 0x0018 (0x0018 - 0x0000)
struct FStateDrivenStateTransitions final
{
public:
	struct FGameplayTag                           TransitionTag;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstancedStruct>               TransitionEvents;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenStateTransitions) == 0x000008, "Wrong alignment on FStateDrivenStateTransitions");
static_assert(sizeof(FStateDrivenStateTransitions) == 0x000018, "Wrong size on FStateDrivenStateTransitions");
static_assert(offsetof(FStateDrivenStateTransitions, TransitionTag) == 0x000000, "Member 'FStateDrivenStateTransitions::TransitionTag' has a wrong offset!");
static_assert(offsetof(FStateDrivenStateTransitions, TransitionEvents) == 0x000008, "Member 'FStateDrivenStateTransitions::TransitionEvents' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenState
// 0x00E0 (0x00E0 - 0x0000)
struct FStateDrivenState final
{
public:
	class FString                                 DevNotes;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyMeshTransform;                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StaticMeshTransform;                               // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstance>> MaterialInstances;                                 // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        LoopingGameplayCueTag;                             // 0x0090(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OverlapRadius;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InteractionStringOverride;                         // 0x0098(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InteractionFailedStringOverride;                   // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FStateDrivenStateTransitions>   Transitions;                                       // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenState) == 0x000010, "Wrong alignment on FStateDrivenState");
static_assert(sizeof(FStateDrivenState) == 0x0000E0, "Wrong size on FStateDrivenState");
static_assert(offsetof(FStateDrivenState, DevNotes) == 0x000000, "Member 'FStateDrivenState::DevNotes' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, StaticMesh) == 0x000010, "Member 'FStateDrivenState::StaticMesh' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, bApplyMeshTransform) == 0x000018, "Member 'FStateDrivenState::bApplyMeshTransform' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, StaticMeshTransform) == 0x000020, "Member 'FStateDrivenState::StaticMeshTransform' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, MaterialInstances) == 0x000080, "Member 'FStateDrivenState::MaterialInstances' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, LoopingGameplayCueTag) == 0x000090, "Member 'FStateDrivenState::LoopingGameplayCueTag' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, OverlapRadius) == 0x000094, "Member 'FStateDrivenState::OverlapRadius' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, InteractionStringOverride) == 0x000098, "Member 'FStateDrivenState::InteractionStringOverride' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, InteractionFailedStringOverride) == 0x0000B0, "Member 'FStateDrivenState::InteractionFailedStringOverride' has a wrong offset!");
static_assert(offsetof(FStateDrivenState, Transitions) == 0x0000C8, "Member 'FStateDrivenState::Transitions' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_InteractionBase
// 0x0030 (0x0058 - 0x0028)
struct FStateDrivenEvent_InteractionBase : public FStateDrivenEvent
{
public:
	struct FStateDrivenTagQuery                   PlayerTagQuery;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InteractionStringOverride;                         // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_InteractionBase) == 0x000008, "Wrong alignment on FStateDrivenEvent_InteractionBase");
static_assert(sizeof(FStateDrivenEvent_InteractionBase) == 0x000058, "Wrong size on FStateDrivenEvent_InteractionBase");
static_assert(offsetof(FStateDrivenEvent_InteractionBase, PlayerTagQuery) == 0x000028, "Member 'FStateDrivenEvent_InteractionBase::PlayerTagQuery' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_InteractionBase, InteractionStringOverride) == 0x000040, "Member 'FStateDrivenEvent_InteractionBase::InteractionStringOverride' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_Conversation
// 0x0010 (0x0068 - 0x0058)
struct FStateDrivenEvent_Conversation final : public FStateDrivenEvent_InteractionBase
{
public:
	struct FGameplayTag                           ConversationEntryTag;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortNonPlayerConversationParticipantComponent> ConversationComponentPtr;                          // 0x005C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenEvent_Conversation) == 0x000008, "Wrong alignment on FStateDrivenEvent_Conversation");
static_assert(sizeof(FStateDrivenEvent_Conversation) == 0x000068, "Wrong size on FStateDrivenEvent_Conversation");
static_assert(offsetof(FStateDrivenEvent_Conversation, ConversationEntryTag) == 0x000058, "Member 'FStateDrivenEvent_Conversation::ConversationEntryTag' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_Conversation, ConversationComponentPtr) == 0x00005C, "Member 'FStateDrivenEvent_Conversation::ConversationComponentPtr' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_CustomEvent
// 0x0008 (0x0030 - 0x0028)
struct FStateDrivenEvent_CustomEvent final : public FStateDrivenEvent
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenEvent_CustomEvent) == 0x000008, "Wrong alignment on FStateDrivenEvent_CustomEvent");
static_assert(sizeof(FStateDrivenEvent_CustomEvent) == 0x000030, "Wrong size on FStateDrivenEvent_CustomEvent");
static_assert(offsetof(FStateDrivenEvent_CustomEvent, EventTag) == 0x000028, "Member 'FStateDrivenEvent_CustomEvent::EventTag' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_DamageInstance
// 0x0038 (0x0060 - 0x0028)
struct FStateDrivenEvent_DamageInstance final : public FStateDrivenEvent
{
public:
	struct FStateDrivenTagQuery                   InstigatorTagQuery;                                // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStateDrivenTagQuery                   DamageInstanceTagQuery;                            // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinimumInstanceDamage;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenEvent_DamageInstance) == 0x000008, "Wrong alignment on FStateDrivenEvent_DamageInstance");
static_assert(sizeof(FStateDrivenEvent_DamageInstance) == 0x000060, "Wrong size on FStateDrivenEvent_DamageInstance");
static_assert(offsetof(FStateDrivenEvent_DamageInstance, InstigatorTagQuery) == 0x000028, "Member 'FStateDrivenEvent_DamageInstance::InstigatorTagQuery' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_DamageInstance, DamageInstanceTagQuery) == 0x000040, "Member 'FStateDrivenEvent_DamageInstance::DamageInstanceTagQuery' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_DamageInstance, MinimumInstanceDamage) == 0x000058, "Member 'FStateDrivenEvent_DamageInstance::MinimumInstanceDamage' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_DepositResource
// 0x0028 (0x0080 - 0x0058)
struct FStateDrivenEvent_DepositResource final : public FStateDrivenEvent_InteractionBase
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     DepositItem;                                       // 0x0058(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepositAmount;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenEvent_DepositResource) == 0x000008, "Wrong alignment on FStateDrivenEvent_DepositResource");
static_assert(sizeof(FStateDrivenEvent_DepositResource) == 0x000080, "Wrong size on FStateDrivenEvent_DepositResource");
static_assert(offsetof(FStateDrivenEvent_DepositResource, DepositItem) == 0x000058, "Member 'FStateDrivenEvent_DepositResource::DepositItem' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_DepositResource, DepositAmount) == 0x000078, "Member 'FStateDrivenEvent_DepositResource::DepositAmount' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_Destroy
// 0x0030 (0x0058 - 0x0028)
struct FStateDrivenEvent_Destroy final : public FStateDrivenEvent
{
public:
	struct FStateDrivenTagQuery                   InstigatorTagQuery;                                // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStateDrivenTagQuery                   DamageInstanceTagQuery;                            // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_Destroy) == 0x000008, "Wrong alignment on FStateDrivenEvent_Destroy");
static_assert(sizeof(FStateDrivenEvent_Destroy) == 0x000058, "Wrong size on FStateDrivenEvent_Destroy");
static_assert(offsetof(FStateDrivenEvent_Destroy, InstigatorTagQuery) == 0x000028, "Member 'FStateDrivenEvent_Destroy::InstigatorTagQuery' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_Destroy, DamageInstanceTagQuery) == 0x000040, "Member 'FStateDrivenEvent_Destroy::DamageInstanceTagQuery' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_EndOverlap
// 0x0018 (0x0040 - 0x0028)
struct FStateDrivenEvent_EndOverlap final : public FStateDrivenEvent
{
public:
	struct FStateDrivenTagQuery                   OverlappingActorTagQuery;                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_EndOverlap) == 0x000008, "Wrong alignment on FStateDrivenEvent_EndOverlap");
static_assert(sizeof(FStateDrivenEvent_EndOverlap) == 0x000040, "Wrong size on FStateDrivenEvent_EndOverlap");
static_assert(offsetof(FStateDrivenEvent_EndOverlap, OverlappingActorTagQuery) == 0x000028, "Member 'FStateDrivenEvent_EndOverlap::OverlappingActorTagQuery' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_InsertItem
// 0x0018 (0x0070 - 0x0058)
struct FStateDrivenEvent_InsertItem final : public FStateDrivenEvent_InteractionBase
{
public:
	struct FStateDrivenTagQuery                   EquippedItemTagQuery;                              // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_InsertItem) == 0x000008, "Wrong alignment on FStateDrivenEvent_InsertItem");
static_assert(sizeof(FStateDrivenEvent_InsertItem) == 0x000070, "Wrong size on FStateDrivenEvent_InsertItem");
static_assert(offsetof(FStateDrivenEvent_InsertItem, EquippedItemTagQuery) == 0x000058, "Member 'FStateDrivenEvent_InsertItem::EquippedItemTagQuery' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_Interaction
// 0x0000 (0x0058 - 0x0058)
struct FStateDrivenEvent_Interaction final : public FStateDrivenEvent_InteractionBase
{
};
static_assert(alignof(FStateDrivenEvent_Interaction) == 0x000008, "Wrong alignment on FStateDrivenEvent_Interaction");
static_assert(sizeof(FStateDrivenEvent_Interaction) == 0x000058, "Wrong size on FStateDrivenEvent_Interaction");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_PickupItem
// 0x0000 (0x0040 - 0x0040)
struct FStateDrivenEvent_PickupItem final : public FStateDrivenEvent_BeginOverlap
{
};
static_assert(alignof(FStateDrivenEvent_PickupItem) == 0x000008, "Wrong alignment on FStateDrivenEvent_PickupItem");
static_assert(sizeof(FStateDrivenEvent_PickupItem) == 0x000040, "Wrong size on FStateDrivenEvent_PickupItem");

// ScriptStruct StateDrivenActorRuntime.StateDrivenFloat
// 0x0018 (0x0018 - 0x0000)
struct FStateDrivenFloat final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       InstancedFloat;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenFloat) == 0x000008, "Wrong alignment on FStateDrivenFloat");
static_assert(sizeof(FStateDrivenFloat) == 0x000018, "Wrong size on FStateDrivenFloat");
static_assert(offsetof(FStateDrivenFloat, InstancedFloat) == 0x000008, "Member 'FStateDrivenFloat::InstancedFloat' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_Timer
// 0x0020 (0x0048 - 0x0028)
struct FStateDrivenEvent_Timer final : public FStateDrivenEvent
{
public:
	struct FStateDrivenFloat                      duration;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerTransitionEventHandle;                        // 0x0040(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenEvent_Timer) == 0x000008, "Wrong alignment on FStateDrivenEvent_Timer");
static_assert(sizeof(FStateDrivenEvent_Timer) == 0x000048, "Wrong size on FStateDrivenEvent_Timer");
static_assert(offsetof(FStateDrivenEvent_Timer, duration) == 0x000028, "Member 'FStateDrivenEvent_Timer::duration' has a wrong offset!");
static_assert(offsetof(FStateDrivenEvent_Timer, TimerTransitionEventHandle) == 0x000040, "Member 'FStateDrivenEvent_Timer::TimerTransitionEventHandle' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenEvent_WithdrawItem
// 0x0000 (0x0058 - 0x0058)
struct FStateDrivenEvent_WithdrawItem final : public FStateDrivenEvent_InteractionBase
{
};
static_assert(alignof(FStateDrivenEvent_WithdrawItem) == 0x000008, "Wrong alignment on FStateDrivenEvent_WithdrawItem");
static_assert(sizeof(FStateDrivenEvent_WithdrawItem) == 0x000058, "Wrong size on FStateDrivenEvent_WithdrawItem");

// ScriptStruct StateDrivenActorRuntime.StateDrivenFloat_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FStateDrivenFloat_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenFloat_Base) == 0x000008, "Wrong alignment on FStateDrivenFloat_Base");
static_assert(sizeof(FStateDrivenFloat_Base) == 0x000008, "Wrong size on FStateDrivenFloat_Base");

// ScriptStruct StateDrivenActorRuntime.StateDrivenFloat_Simple
// 0x0008 (0x0010 - 0x0008)
struct FStateDrivenFloat_Simple final : public FStateDrivenFloat_Base
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenFloat_Simple) == 0x000008, "Wrong alignment on FStateDrivenFloat_Simple");
static_assert(sizeof(FStateDrivenFloat_Simple) == 0x000010, "Wrong size on FStateDrivenFloat_Simple");
static_assert(offsetof(FStateDrivenFloat_Simple, Value) == 0x000008, "Member 'FStateDrivenFloat_Simple::Value' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenFloat_Variable
// 0x0008 (0x0010 - 0x0008)
struct FStateDrivenFloat_Variable final : public FStateDrivenFloat_Base
{
public:
	int32                                         VariableIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenFloat_Variable) == 0x000008, "Wrong alignment on FStateDrivenFloat_Variable");
static_assert(sizeof(FStateDrivenFloat_Variable) == 0x000010, "Wrong size on FStateDrivenFloat_Variable");
static_assert(offsetof(FStateDrivenFloat_Variable, VariableIndex) == 0x000008, "Member 'FStateDrivenFloat_Variable::VariableIndex' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenTagQuery_Base
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FStateDrivenTagQuery_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenTagQuery_Base) == 0x000008, "Wrong alignment on FStateDrivenTagQuery_Base");
static_assert(sizeof(FStateDrivenTagQuery_Base) == 0x000008, "Wrong size on FStateDrivenTagQuery_Base");

// ScriptStruct StateDrivenActorRuntime.StateDrivenTagQuery_Simple
// 0x0048 (0x0050 - 0x0008)
struct FStateDrivenTagQuery_Simple final : public FStateDrivenTagQuery_Base
{
public:
	struct FGameplayTagQuery                      Query;                                             // 0x0008(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateDrivenTagQuery_Simple) == 0x000008, "Wrong alignment on FStateDrivenTagQuery_Simple");
static_assert(sizeof(FStateDrivenTagQuery_Simple) == 0x000050, "Wrong size on FStateDrivenTagQuery_Simple");
static_assert(offsetof(FStateDrivenTagQuery_Simple, Query) == 0x000008, "Member 'FStateDrivenTagQuery_Simple::Query' has a wrong offset!");

// ScriptStruct StateDrivenActorRuntime.StateDrivenTagQuery_Variable
// 0x0008 (0x0010 - 0x0008)
struct FStateDrivenTagQuery_Variable final : public FStateDrivenTagQuery_Base
{
public:
	int32                                         VariableIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateDrivenTagQuery_Variable) == 0x000008, "Wrong alignment on FStateDrivenTagQuery_Variable");
static_assert(sizeof(FStateDrivenTagQuery_Variable) == 0x000010, "Wrong size on FStateDrivenTagQuery_Variable");
static_assert(offsetof(FStateDrivenTagQuery_Variable, VariableIndex) == 0x000008, "Member 'FStateDrivenTagQuery_Variable::VariableIndex' has a wrong offset!");

}

