#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimQuickplayRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "PilgrimCoreRuntime_structs.hpp"


namespace SDK
{

// Enum PilgrimQuickplayRuntime.EPilgrimPreloaderSongPosition
// NumValues: 0x0002
enum class EPilgrimPreloaderSongPosition : uint8
{
	Current                                  = 0,
	Next                                     = 1,
};

// ScriptStruct PilgrimQuickplayRuntime.PilgrimQuickplaySongResultBandData
// 0x001C (0x001C - 0x0000)
struct FPilgrimQuickplaySongResultBandData final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumTeamMembers;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BandScore;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandModifierBonus;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandInstrumentVarietyBonus;                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandStars;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseBandScore;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandOverdriveBonus;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimQuickplaySongResultBandData) == 0x000004, "Wrong alignment on FPilgrimQuickplaySongResultBandData");
static_assert(sizeof(FPilgrimQuickplaySongResultBandData) == 0x00001C, "Wrong size on FPilgrimQuickplaySongResultBandData");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, Team) == 0x000000, "Member 'FPilgrimQuickplaySongResultBandData::Team' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, NumTeamMembers) == 0x000001, "Member 'FPilgrimQuickplaySongResultBandData::NumTeamMembers' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BandScore) == 0x000004, "Member 'FPilgrimQuickplaySongResultBandData::BandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BandModifierBonus) == 0x000008, "Member 'FPilgrimQuickplaySongResultBandData::BandModifierBonus' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BandInstrumentVarietyBonus) == 0x00000C, "Member 'FPilgrimQuickplaySongResultBandData::BandInstrumentVarietyBonus' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BandStars) == 0x000010, "Member 'FPilgrimQuickplaySongResultBandData::BandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BaseBandScore) == 0x000014, "Member 'FPilgrimQuickplaySongResultBandData::BaseBandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultBandData, BandOverdriveBonus) == 0x000018, "Member 'FPilgrimQuickplaySongResultBandData::BandOverdriveBonus' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimQuickplaySongResultPlayerData
// 0x0080 (0x0080 - 0x0000)
struct FPilgrimQuickplaySongResultPlayerData final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InstrumentTags;                                    // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PlayerStars;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerScore;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        PlayerDifficulty;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SongTrackDifficulty;                               // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team : 1;                                          // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimQuickplaySongResultPlayerData) == 0x000008, "Wrong alignment on FPilgrimQuickplaySongResultPlayerData");
static_assert(sizeof(FPilgrimQuickplaySongResultPlayerData) == 0x000080, "Wrong size on FPilgrimQuickplaySongResultPlayerData");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, PlayerName) == 0x000000, "Member 'FPilgrimQuickplaySongResultPlayerData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, PlayerAccountId) == 0x000010, "Member 'FPilgrimQuickplaySongResultPlayerData::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, InstrumentType) == 0x000040, "Member 'FPilgrimQuickplaySongResultPlayerData::InstrumentType' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, InstrumentTags) == 0x000048, "Member 'FPilgrimQuickplaySongResultPlayerData::InstrumentTags' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, PlayerStars) == 0x000068, "Member 'FPilgrimQuickplaySongResultPlayerData::PlayerStars' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, PlayerScore) == 0x00006C, "Member 'FPilgrimQuickplaySongResultPlayerData::PlayerScore' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, PlayerDifficulty) == 0x000070, "Member 'FPilgrimQuickplaySongResultPlayerData::PlayerDifficulty' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultPlayerData, SongTrackDifficulty) == 0x000074, "Member 'FPilgrimQuickplaySongResultPlayerData::SongTrackDifficulty' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimQuickplaySongResultData
// 0x0070 (0x0070 - 0x0000)
struct FPilgrimQuickplaySongResultData final
{
public:
	class FText                                   SongName;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SongTags;                                          // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPilgrimQuickplaySongResultBandData> BandData;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimQuickplaySongResultPlayerData> PlayerData;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlayerBandDataIndex;                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerDataIndex;                              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimQuickplaySongResultData) == 0x000008, "Wrong alignment on FPilgrimQuickplaySongResultData");
static_assert(sizeof(FPilgrimQuickplaySongResultData) == 0x000070, "Wrong size on FPilgrimQuickplaySongResultData");
static_assert(offsetof(FPilgrimQuickplaySongResultData, SongName) == 0x000000, "Member 'FPilgrimQuickplaySongResultData::SongName' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, SongTags) == 0x000018, "Member 'FPilgrimQuickplaySongResultData::SongTags' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, SongShortName) == 0x000038, "Member 'FPilgrimQuickplaySongResultData::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, BandData) == 0x000040, "Member 'FPilgrimQuickplaySongResultData::BandData' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, PlayerData) == 0x000050, "Member 'FPilgrimQuickplaySongResultData::PlayerData' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, Team) == 0x000060, "Member 'FPilgrimQuickplaySongResultData::Team' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, LocalPlayerBandDataIndex) == 0x000064, "Member 'FPilgrimQuickplaySongResultData::LocalPlayerBandDataIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySongResultData, LocalPlayerDataIndex) == 0x000068, "Member 'FPilgrimQuickplaySongResultData::LocalPlayerDataIndex' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimEvent_Intro_PlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_Intro_PlayerChanged final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Intro_PlayerChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_Intro_PlayerChanged");
static_assert(sizeof(FPilgrimEvent_Intro_PlayerChanged) == 0x000008, "Wrong size on FPilgrimEvent_Intro_PlayerChanged");
static_assert(offsetof(FPilgrimEvent_Intro_PlayerChanged, PlayerState) == 0x000000, "Member 'FPilgrimEvent_Intro_PlayerChanged::PlayerState' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimEvent_QuickplayScoring_SongResultPlayerData
// 0x0080 (0x0080 - 0x0000)
struct FPilgrimEvent_QuickplayScoring_SongResultPlayerData final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplaySongResultData        SongResultData;                                    // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_QuickplayScoring_SongResultPlayerData) == 0x000008, "Wrong alignment on FPilgrimEvent_QuickplayScoring_SongResultPlayerData");
static_assert(sizeof(FPilgrimEvent_QuickplayScoring_SongResultPlayerData) == 0x000080, "Wrong size on FPilgrimEvent_QuickplayScoring_SongResultPlayerData");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_SongResultPlayerData, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_QuickplayScoring_SongResultPlayerData::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_SongResultPlayerData, SetlistIndex) == 0x000008, "Member 'FPilgrimEvent_QuickplayScoring_SongResultPlayerData::SetlistIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_SongResultPlayerData, SongResultData) == 0x000010, "Member 'FPilgrimEvent_QuickplayScoring_SongResultPlayerData::SongResultData' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimHistogramSample
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimHistogramSample final
{
public:
	int32                                         OffsetMs;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamples;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimHistogramSample) == 0x000004, "Wrong alignment on FPilgrimHistogramSample");
static_assert(sizeof(FPilgrimHistogramSample) == 0x000008, "Wrong size on FPilgrimHistogramSample");
static_assert(offsetof(FPilgrimHistogramSample, OffsetMs) == 0x000000, "Member 'FPilgrimHistogramSample::OffsetMs' has a wrong offset!");
static_assert(offsetof(FPilgrimHistogramSample, NumSamples) == 0x000004, "Member 'FPilgrimHistogramSample::NumSamples' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimQuickplayPlayerPerformanceData
// 0x0048 (0x0048 - 0x0000)
struct FPilgrimQuickplayPlayerPerformanceData final
{
public:
	float                                         Accuracy;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageOffset;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviation;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FullCombo;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NotesHit;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotesPassed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotesMissed;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNotes;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongestStreak;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOverdriveMs;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimHistogramSample>        HistogramSamples;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AccuracyTierCounts;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimQuickplayPlayerPerformanceData) == 0x000008, "Wrong alignment on FPilgrimQuickplayPlayerPerformanceData");
static_assert(sizeof(FPilgrimQuickplayPlayerPerformanceData) == 0x000048, "Wrong size on FPilgrimQuickplayPlayerPerformanceData");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, Accuracy) == 0x000000, "Member 'FPilgrimQuickplayPlayerPerformanceData::Accuracy' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, AverageOffset) == 0x000004, "Member 'FPilgrimQuickplayPlayerPerformanceData::AverageOffset' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, StandardDeviation) == 0x000008, "Member 'FPilgrimQuickplayPlayerPerformanceData::StandardDeviation' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, FullCombo) == 0x00000C, "Member 'FPilgrimQuickplayPlayerPerformanceData::FullCombo' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, NotesHit) == 0x000010, "Member 'FPilgrimQuickplayPlayerPerformanceData::NotesHit' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, NotesPassed) == 0x000014, "Member 'FPilgrimQuickplayPlayerPerformanceData::NotesPassed' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, NotesMissed) == 0x000018, "Member 'FPilgrimQuickplayPlayerPerformanceData::NotesMissed' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, TotalNotes) == 0x00001C, "Member 'FPilgrimQuickplayPlayerPerformanceData::TotalNotes' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, LongestStreak) == 0x000020, "Member 'FPilgrimQuickplayPlayerPerformanceData::LongestStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, TimeInOverdriveMs) == 0x000024, "Member 'FPilgrimQuickplayPlayerPerformanceData::TimeInOverdriveMs' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, HistogramSamples) == 0x000028, "Member 'FPilgrimQuickplayPlayerPerformanceData::HistogramSamples' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplayPlayerPerformanceData, AccuracyTierCounts) == 0x000038, "Member 'FPilgrimQuickplayPlayerPerformanceData::AccuracyTierCounts' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimEvent_QuickplayScoring_PerformanceDataReceived
// 0x0058 (0x0058 - 0x0000)
struct FPilgrimEvent_QuickplayScoring_PerformanceDataReceived final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplayPlayerPerformanceData PerformanceData;                                   // 0x0010(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_QuickplayScoring_PerformanceDataReceived) == 0x000008, "Wrong alignment on FPilgrimEvent_QuickplayScoring_PerformanceDataReceived");
static_assert(sizeof(FPilgrimEvent_QuickplayScoring_PerformanceDataReceived) == 0x000058, "Wrong size on FPilgrimEvent_QuickplayScoring_PerformanceDataReceived");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_PerformanceDataReceived, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_QuickplayScoring_PerformanceDataReceived::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_PerformanceDataReceived, SetlistIndex) == 0x000008, "Member 'FPilgrimEvent_QuickplayScoring_PerformanceDataReceived::SetlistIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_PerformanceDataReceived, PerformanceData) == 0x000010, "Member 'FPilgrimEvent_QuickplayScoring_PerformanceDataReceived::PerformanceData' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimEvent_QuickplayScoring_NewHighScoreReceived
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_QuickplayScoring_NewHighScoreReceived final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_QuickplayScoring_NewHighScoreReceived) == 0x000008, "Wrong alignment on FPilgrimEvent_QuickplayScoring_NewHighScoreReceived");
static_assert(sizeof(FPilgrimEvent_QuickplayScoring_NewHighScoreReceived) == 0x000010, "Wrong size on FPilgrimEvent_QuickplayScoring_NewHighScoreReceived");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_NewHighScoreReceived, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_QuickplayScoring_NewHighScoreReceived::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_NewHighScoreReceived, SetlistIndex) == 0x000008, "Member 'FPilgrimEvent_QuickplayScoring_NewHighScoreReceived::SetlistIndex' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimEvent_QuickplayScoring_MatchRecorded
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_QuickplayScoring_MatchRecorded final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoloMatch;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_QuickplayScoring_MatchRecorded) == 0x000008, "Wrong alignment on FPilgrimEvent_QuickplayScoring_MatchRecorded");
static_assert(sizeof(FPilgrimEvent_QuickplayScoring_MatchRecorded) == 0x000010, "Wrong size on FPilgrimEvent_QuickplayScoring_MatchRecorded");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_MatchRecorded, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_QuickplayScoring_MatchRecorded::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_MatchRecorded, SetlistIndex) == 0x000008, "Member 'FPilgrimEvent_QuickplayScoring_MatchRecorded::SetlistIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_QuickplayScoring_MatchRecorded, bIsSoloMatch) == 0x00000C, "Member 'FPilgrimEvent_QuickplayScoring_MatchRecorded::bIsSoloMatch' has a wrong offset!");

// ScriptStruct PilgrimQuickplayRuntime.PilgrimQuickplaySetlistResultData
// 0x00C0 (0x00C0 - 0x0000)
struct FPilgrimQuickplaySetlistResultData final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplaySongResultData        SongResultData;                                    // 0x0008(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimQuickplayPlayerPerformanceData PerformanceData;                                   // 0x0078(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimQuickplaySetlistResultData) == 0x000008, "Wrong alignment on FPilgrimQuickplaySetlistResultData");
static_assert(sizeof(FPilgrimQuickplaySetlistResultData) == 0x0000C0, "Wrong size on FPilgrimQuickplaySetlistResultData");
static_assert(offsetof(FPilgrimQuickplaySetlistResultData, SetlistIndex) == 0x000000, "Member 'FPilgrimQuickplaySetlistResultData::SetlistIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySetlistResultData, SongResultData) == 0x000008, "Member 'FPilgrimQuickplaySetlistResultData::SongResultData' has a wrong offset!");
static_assert(offsetof(FPilgrimQuickplaySetlistResultData, PerformanceData) == 0x000078, "Member 'FPilgrimQuickplaySetlistResultData::PerformanceData' has a wrong offset!");

}

