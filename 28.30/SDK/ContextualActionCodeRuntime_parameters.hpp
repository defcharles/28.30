#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ContextualActionCodeRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ContextualActionCodeRuntime.FortSwingingObject.OnEndSwing_BP
// 0x0008 (0x0008 - 0x0000)
struct FortSwingingObject_OnEndSwing_BP final
{
public:
	class AFortPlayerPawn*                        AttachedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSwingingObject_OnEndSwing_BP) == 0x000008, "Wrong alignment on FortSwingingObject_OnEndSwing_BP");
static_assert(sizeof(FortSwingingObject_OnEndSwing_BP) == 0x000008, "Wrong size on FortSwingingObject_OnEndSwing_BP");
static_assert(offsetof(FortSwingingObject_OnEndSwing_BP, AttachedActor) == 0x000000, "Member 'FortSwingingObject_OnEndSwing_BP::AttachedActor' has a wrong offset!");

// Function ContextualActionCodeRuntime.FortSwingingObject.OnStartSwing_BP
// 0x0008 (0x0008 - 0x0000)
struct FortSwingingObject_OnStartSwing_BP final
{
public:
	class AFortPlayerPawn*                        AttachedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSwingingObject_OnStartSwing_BP) == 0x000008, "Wrong alignment on FortSwingingObject_OnStartSwing_BP");
static_assert(sizeof(FortSwingingObject_OnStartSwing_BP) == 0x000008, "Wrong size on FortSwingingObject_OnStartSwing_BP");
static_assert(offsetof(FortSwingingObject_OnStartSwing_BP, AttachedActor) == 0x000000, "Member 'FortSwingingObject_OnStartSwing_BP::AttachedActor' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.EjectHijacker
// 0x0028 (0x0028 - 0x0000)
struct HijackerComponent_EjectHijacker final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EventLocation;                                     // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_EjectHijacker) == 0x000008, "Wrong alignment on HijackerComponent_EjectHijacker");
static_assert(sizeof(HijackerComponent_EjectHijacker) == 0x000028, "Wrong size on HijackerComponent_EjectHijacker");
static_assert(offsetof(HijackerComponent_EjectHijacker, DamageCauser) == 0x000000, "Member 'HijackerComponent_EjectHijacker::DamageCauser' has a wrong offset!");
static_assert(offsetof(HijackerComponent_EjectHijacker, Damage) == 0x000008, "Member 'HijackerComponent_EjectHijacker::Damage' has a wrong offset!");
static_assert(offsetof(HijackerComponent_EjectHijacker, EventLocation) == 0x000010, "Member 'HijackerComponent_EjectHijacker::EventLocation' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.HandleOwnerJumpInput
// 0x0001 (0x0001 - 0x0000)
struct HijackerComponent_HandleOwnerJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_HandleOwnerJumpInput) == 0x000001, "Wrong alignment on HijackerComponent_HandleOwnerJumpInput");
static_assert(sizeof(HijackerComponent_HandleOwnerJumpInput) == 0x000001, "Wrong size on HijackerComponent_HandleOwnerJumpInput");
static_assert(offsetof(HijackerComponent_HandleOwnerJumpInput, bPressed) == 0x000000, "Member 'HijackerComponent_HandleOwnerJumpInput::bPressed' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.OnStartHijack
// 0x0008 (0x0008 - 0x0000)
struct HijackerComponent_OnStartHijack final
{
public:
	class AActor*                                 VehicleTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_OnStartHijack) == 0x000008, "Wrong alignment on HijackerComponent_OnStartHijack");
static_assert(sizeof(HijackerComponent_OnStartHijack) == 0x000008, "Wrong size on HijackerComponent_OnStartHijack");
static_assert(offsetof(HijackerComponent_OnStartHijack, VehicleTarget) == 0x000000, "Member 'HijackerComponent_OnStartHijack::VehicleTarget' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.TryHijack
// 0x0058 (0x0058 - 0x0000)
struct HijackerComponent_TryHijack final
{
public:
	class AActor*                                 VehicleTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionType                       InteractionType;                                   // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HijackerComponent_TryHijack) == 0x000008, "Wrong alignment on HijackerComponent_TryHijack");
static_assert(sizeof(HijackerComponent_TryHijack) == 0x000058, "Wrong size on HijackerComponent_TryHijack");
static_assert(offsetof(HijackerComponent_TryHijack, VehicleTarget) == 0x000000, "Member 'HijackerComponent_TryHijack::VehicleTarget' has a wrong offset!");
static_assert(offsetof(HijackerComponent_TryHijack, InteractionType) == 0x000008, "Member 'HijackerComponent_TryHijack::InteractionType' has a wrong offset!");
static_assert(offsetof(HijackerComponent_TryHijack, ReturnValue) == 0x000050, "Member 'HijackerComponent_TryHijack::ReturnValue' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.BP_CanCompleteHijack
// 0x0001 (0x0001 - 0x0000)
struct HijackerComponent_BP_CanCompleteHijack final
{
public:
	bool                                          OutCanCompleteHijack;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_BP_CanCompleteHijack) == 0x000001, "Wrong alignment on HijackerComponent_BP_CanCompleteHijack");
static_assert(sizeof(HijackerComponent_BP_CanCompleteHijack) == 0x000001, "Wrong size on HijackerComponent_BP_CanCompleteHijack");
static_assert(offsetof(HijackerComponent_BP_CanCompleteHijack, OutCanCompleteHijack) == 0x000000, "Member 'HijackerComponent_BP_CanCompleteHijack::OutCanCompleteHijack' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.BP_CanStartHijack
// 0x0001 (0x0001 - 0x0000)
struct HijackerComponent_BP_CanStartHijack final
{
public:
	bool                                          OutCanStartHijack;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_BP_CanStartHijack) == 0x000001, "Wrong alignment on HijackerComponent_BP_CanStartHijack");
static_assert(sizeof(HijackerComponent_BP_CanStartHijack) == 0x000001, "Wrong size on HijackerComponent_BP_CanStartHijack");
static_assert(offsetof(HijackerComponent_BP_CanStartHijack, OutCanStartHijack) == 0x000000, "Member 'HijackerComponent_BP_CanStartHijack::OutCanStartHijack' has a wrong offset!");

// Function ContextualActionCodeRuntime.HijackerComponent.BP_GetThrownVelocity
// 0x0040 (0x0040 - 0x0000)
struct HijackerComponent_BP_GetThrownVelocity final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EventLocation;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVelocity;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HijackerComponent_BP_GetThrownVelocity) == 0x000008, "Wrong alignment on HijackerComponent_BP_GetThrownVelocity");
static_assert(sizeof(HijackerComponent_BP_GetThrownVelocity) == 0x000040, "Wrong size on HijackerComponent_BP_GetThrownVelocity");
static_assert(offsetof(HijackerComponent_BP_GetThrownVelocity, DamageCauser) == 0x000000, "Member 'HijackerComponent_BP_GetThrownVelocity::DamageCauser' has a wrong offset!");
static_assert(offsetof(HijackerComponent_BP_GetThrownVelocity, Damage) == 0x000008, "Member 'HijackerComponent_BP_GetThrownVelocity::Damage' has a wrong offset!");
static_assert(offsetof(HijackerComponent_BP_GetThrownVelocity, EventLocation) == 0x000010, "Member 'HijackerComponent_BP_GetThrownVelocity::EventLocation' has a wrong offset!");
static_assert(offsetof(HijackerComponent_BP_GetThrownVelocity, OutVelocity) == 0x000028, "Member 'HijackerComponent_BP_GetThrownVelocity::OutVelocity' has a wrong offset!");

// Function ContextualActionCodeRuntime.RappellingComponent.OnCapsuleHit
// 0x0118 (0x0118 - 0x0000)
struct RappellingComponent_OnCapsuleHit final
{
public:
	const class UPrimitiveComponent*              HitComponent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              OtherComp;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RappellingComponent_OnCapsuleHit) == 0x000008, "Wrong alignment on RappellingComponent_OnCapsuleHit");
static_assert(sizeof(RappellingComponent_OnCapsuleHit) == 0x000118, "Wrong size on RappellingComponent_OnCapsuleHit");
static_assert(offsetof(RappellingComponent_OnCapsuleHit, HitComponent) == 0x000000, "Member 'RappellingComponent_OnCapsuleHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnCapsuleHit, OtherActor) == 0x000008, "Member 'RappellingComponent_OnCapsuleHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnCapsuleHit, OtherComp) == 0x000010, "Member 'RappellingComponent_OnCapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnCapsuleHit, NormalImpulse) == 0x000018, "Member 'RappellingComponent_OnCapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnCapsuleHit, Hit) == 0x000030, "Member 'RappellingComponent_OnCapsuleHit::Hit' has a wrong offset!");

// Function ContextualActionCodeRuntime.RappellingComponent.OnOwnerMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct RappellingComponent_OnOwnerMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PreviousMovementMode;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RappellingComponent_OnOwnerMovementModeChanged) == 0x000008, "Wrong alignment on RappellingComponent_OnOwnerMovementModeChanged");
static_assert(sizeof(RappellingComponent_OnOwnerMovementModeChanged) == 0x000010, "Wrong size on RappellingComponent_OnOwnerMovementModeChanged");
static_assert(offsetof(RappellingComponent_OnOwnerMovementModeChanged, Character) == 0x000000, "Member 'RappellingComponent_OnOwnerMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnOwnerMovementModeChanged, PreviousMovementMode) == 0x000008, "Member 'RappellingComponent_OnOwnerMovementModeChanged::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(RappellingComponent_OnOwnerMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'RappellingComponent_OnOwnerMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function ContextualActionCodeRuntime.RappellingComponent.StartRappelling_Server
// 0x0048 (0x0048 - 0x0000)
struct RappellingComponent_StartRappelling_Server final
{
public:
	struct FVector                                NewGravityDirection;                               // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClientRappellingEdge;                              // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClientRappellingNormal;                            // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RappellingComponent_StartRappelling_Server) == 0x000008, "Wrong alignment on RappellingComponent_StartRappelling_Server");
static_assert(sizeof(RappellingComponent_StartRappelling_Server) == 0x000048, "Wrong size on RappellingComponent_StartRappelling_Server");
static_assert(offsetof(RappellingComponent_StartRappelling_Server, NewGravityDirection) == 0x000000, "Member 'RappellingComponent_StartRappelling_Server::NewGravityDirection' has a wrong offset!");
static_assert(offsetof(RappellingComponent_StartRappelling_Server, ClientRappellingEdge) == 0x000018, "Member 'RappellingComponent_StartRappelling_Server::ClientRappellingEdge' has a wrong offset!");
static_assert(offsetof(RappellingComponent_StartRappelling_Server, ClientRappellingNormal) == 0x000030, "Member 'RappellingComponent_StartRappelling_Server::ClientRappellingNormal' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.AttachToObject_Server
// 0x0008 (0x0008 - 0x0000)
struct SwingingObjectComponent_AttachToObject_Server final
{
public:
	class AFortSwingingObject*                    Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwingingObjectComponent_AttachToObject_Server) == 0x000008, "Wrong alignment on SwingingObjectComponent_AttachToObject_Server");
static_assert(sizeof(SwingingObjectComponent_AttachToObject_Server) == 0x000008, "Wrong size on SwingingObjectComponent_AttachToObject_Server");
static_assert(offsetof(SwingingObjectComponent_AttachToObject_Server, Object) == 0x000000, "Member 'SwingingObjectComponent_AttachToObject_Server::Object' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.DetachFromObject_Server
// 0x0001 (0x0001 - 0x0000)
struct SwingingObjectComponent_DetachFromObject_Server final
{
public:
	bool                                          bJumpExit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwingingObjectComponent_DetachFromObject_Server) == 0x000001, "Wrong alignment on SwingingObjectComponent_DetachFromObject_Server");
static_assert(sizeof(SwingingObjectComponent_DetachFromObject_Server) == 0x000001, "Wrong size on SwingingObjectComponent_DetachFromObject_Server");
static_assert(offsetof(SwingingObjectComponent_DetachFromObject_Server, bJumpExit) == 0x000000, "Member 'SwingingObjectComponent_DetachFromObject_Server::bJumpExit' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.HandleOwnerJumpInput
// 0x0001 (0x0001 - 0x0000)
struct SwingingObjectComponent_HandleOwnerJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwingingObjectComponent_HandleOwnerJumpInput) == 0x000001, "Wrong alignment on SwingingObjectComponent_HandleOwnerJumpInput");
static_assert(sizeof(SwingingObjectComponent_HandleOwnerJumpInput) == 0x000001, "Wrong size on SwingingObjectComponent_HandleOwnerJumpInput");
static_assert(offsetof(SwingingObjectComponent_HandleOwnerJumpInput, bPressed) == 0x000000, "Member 'SwingingObjectComponent_HandleOwnerJumpInput::bPressed' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.BP_CanStartSwing
// 0x0010 (0x0010 - 0x0000)
struct SwingingObjectComponent_BP_CanStartSwing final
{
public:
	class AFortSwingingObject*                    SwingTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStartSwing;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SwingingObjectComponent_BP_CanStartSwing) == 0x000008, "Wrong alignment on SwingingObjectComponent_BP_CanStartSwing");
static_assert(sizeof(SwingingObjectComponent_BP_CanStartSwing) == 0x000010, "Wrong size on SwingingObjectComponent_BP_CanStartSwing");
static_assert(offsetof(SwingingObjectComponent_BP_CanStartSwing, SwingTarget) == 0x000000, "Member 'SwingingObjectComponent_BP_CanStartSwing::SwingTarget' has a wrong offset!");
static_assert(offsetof(SwingingObjectComponent_BP_CanStartSwing, bCanStartSwing) == 0x000008, "Member 'SwingingObjectComponent_BP_CanStartSwing::bCanStartSwing' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.GetAimRotation
// 0x0018 (0x0018 - 0x0000)
struct SwingingObjectComponent_GetAimRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwingingObjectComponent_GetAimRotation) == 0x000008, "Wrong alignment on SwingingObjectComponent_GetAimRotation");
static_assert(sizeof(SwingingObjectComponent_GetAimRotation) == 0x000018, "Wrong size on SwingingObjectComponent_GetAimRotation");
static_assert(offsetof(SwingingObjectComponent_GetAimRotation, ReturnValue) == 0x000000, "Member 'SwingingObjectComponent_GetAimRotation::ReturnValue' has a wrong offset!");

// Function ContextualActionCodeRuntime.SwingingObjectComponent.GetSwingDeltaAngle
// 0x0030 (0x0030 - 0x0000)
struct SwingingObjectComponent_GetSwingDeltaAngle final
{
public:
	struct FRotator                               OutSwingRotation;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutDeltaRotation;                                  // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwingingObjectComponent_GetSwingDeltaAngle) == 0x000008, "Wrong alignment on SwingingObjectComponent_GetSwingDeltaAngle");
static_assert(sizeof(SwingingObjectComponent_GetSwingDeltaAngle) == 0x000030, "Wrong size on SwingingObjectComponent_GetSwingDeltaAngle");
static_assert(offsetof(SwingingObjectComponent_GetSwingDeltaAngle, OutSwingRotation) == 0x000000, "Member 'SwingingObjectComponent_GetSwingDeltaAngle::OutSwingRotation' has a wrong offset!");
static_assert(offsetof(SwingingObjectComponent_GetSwingDeltaAngle, OutDeltaRotation) == 0x000018, "Member 'SwingingObjectComponent_GetSwingDeltaAngle::OutDeltaRotation' has a wrong offset!");

}

