#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassS28UI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BattlePassS28UI_structs.hpp"


namespace SDK::Params
{

// Function BattlePassS28UI.BattlePassLandingPageS28.OnBattlePassSubscriptionAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed final
{
public:
	bool                                          bSubscriptionAllowed;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed");
static_assert(sizeof(BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed");
static_assert(offsetof(BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed, bSubscriptionAllowed) == 0x000000, "Member 'BattlePassLandingPageS28_OnBattlePassSubscriptionAllowed::bSubscriptionAllowed' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.HandleRewardTracksBoundaryNavigation
// 0x0010 (0x0010 - 0x0000)
struct BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation) == 0x000008, "Wrong alignment on BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation");
static_assert(sizeof(BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation) == 0x000010, "Wrong size on BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation");
static_assert(offsetof(BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation, InNavigation) == 0x000000, "Member 'BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation::InNavigation' has a wrong offset!");
static_assert(offsetof(BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation, ReturnValue) == 0x000008, "Member 'BattlePassRewardPageS28_HandleRewardTracksBoundaryNavigation::ReturnValue' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.OnInitForPageType
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS28_OnInitForPageType final
{
public:
	ERewardPageType                               InRewardPageType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_OnInitForPageType) == 0x000001, "Wrong alignment on BattlePassRewardPageS28_OnInitForPageType");
static_assert(sizeof(BattlePassRewardPageS28_OnInitForPageType) == 0x000001, "Wrong size on BattlePassRewardPageS28_OnInitForPageType");
static_assert(offsetof(BattlePassRewardPageS28_OnInitForPageType, InRewardPageType) == 0x000000, "Member 'BattlePassRewardPageS28_OnInitForPageType::InRewardPageType' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS28_OnInputMethodChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_OnInputMethodChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS28_OnInputMethodChanged");
static_assert(sizeof(BattlePassRewardPageS28_OnInputMethodChanged) == 0x000001, "Wrong size on BattlePassRewardPageS28_OnInputMethodChanged");
static_assert(offsetof(BattlePassRewardPageS28_OnInputMethodChanged, InputType) == 0x000000, "Member 'BattlePassRewardPageS28_OnInputMethodChanged::InputType' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.OnLoadingScreenSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS28_OnLoadingScreenSelectedChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_OnLoadingScreenSelectedChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS28_OnLoadingScreenSelectedChanged");
static_assert(sizeof(BattlePassRewardPageS28_OnLoadingScreenSelectedChanged) == 0x000001, "Wrong size on BattlePassRewardPageS28_OnLoadingScreenSelectedChanged");
static_assert(offsetof(BattlePassRewardPageS28_OnLoadingScreenSelectedChanged, bIsSelected) == 0x000000, "Member 'BattlePassRewardPageS28_OnLoadingScreenSelectedChanged::bIsSelected' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.OnPageChanged
// 0x0008 (0x0008 - 0x0000)
struct BattlePassRewardPageS28_OnPageChanged final
{
public:
	int32                                         PageNumber;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPageTotal;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_OnPageChanged) == 0x000004, "Wrong alignment on BattlePassRewardPageS28_OnPageChanged");
static_assert(sizeof(BattlePassRewardPageS28_OnPageChanged) == 0x000008, "Wrong size on BattlePassRewardPageS28_OnPageChanged");
static_assert(offsetof(BattlePassRewardPageS28_OnPageChanged, PageNumber) == 0x000000, "Member 'BattlePassRewardPageS28_OnPageChanged::PageNumber' has a wrong offset!");
static_assert(offsetof(BattlePassRewardPageS28_OnPageChanged, RewardPageTotal) == 0x000004, "Member 'BattlePassRewardPageS28_OnPageChanged::RewardPageTotal' has a wrong offset!");

// Function BattlePassS28UI.BattlePassRewardPageS28.GetRewardPageBackgroundData
// 0x0058 (0x0058 - 0x0000)
struct BattlePassRewardPageS28_GetRewardPageBackgroundData final
{
public:
	struct FVaultWorldBackgroundData              ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS28_GetRewardPageBackgroundData) == 0x000008, "Wrong alignment on BattlePassRewardPageS28_GetRewardPageBackgroundData");
static_assert(sizeof(BattlePassRewardPageS28_GetRewardPageBackgroundData) == 0x000058, "Wrong size on BattlePassRewardPageS28_GetRewardPageBackgroundData");
static_assert(offsetof(BattlePassRewardPageS28_GetRewardPageBackgroundData, ReturnValue) == 0x000000, "Member 'BattlePassRewardPageS28_GetRewardPageBackgroundData::ReturnValue' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.HandleClaimRewardComplete
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS28_HandleClaimRewardComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OfferTemplateIdList;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_HandleClaimRewardComplete) == 0x000008, "Wrong alignment on BattlePassScreenS28_HandleClaimRewardComplete");
static_assert(sizeof(BattlePassScreenS28_HandleClaimRewardComplete) == 0x000018, "Wrong size on BattlePassScreenS28_HandleClaimRewardComplete");
static_assert(offsetof(BattlePassScreenS28_HandleClaimRewardComplete, bSuccess) == 0x000000, "Member 'BattlePassScreenS28_HandleClaimRewardComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_HandleClaimRewardComplete, OfferTemplateIdList) == 0x000008, "Member 'BattlePassScreenS28_HandleClaimRewardComplete::OfferTemplateIdList' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.HandleFullScreenMapToggled
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_HandleFullScreenMapToggled final
{
public:
	bool                                          bMapVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_HandleFullScreenMapToggled) == 0x000001, "Wrong alignment on BattlePassScreenS28_HandleFullScreenMapToggled");
static_assert(sizeof(BattlePassScreenS28_HandleFullScreenMapToggled) == 0x000001, "Wrong size on BattlePassScreenS28_HandleFullScreenMapToggled");
static_assert(offsetof(BattlePassScreenS28_HandleFullScreenMapToggled, bMapVisible) == 0x000000, "Member 'BattlePassScreenS28_HandleFullScreenMapToggled::bMapVisible' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.HandleItemVMCardClicked
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS28_HandleItemVMCardClicked final
{
public:
	const class UFortItemVM*                      ItemVM;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAthenaSeasonItemEntryBase*       EntrySelected;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_HandleItemVMCardClicked) == 0x000008, "Wrong alignment on BattlePassScreenS28_HandleItemVMCardClicked");
static_assert(sizeof(BattlePassScreenS28_HandleItemVMCardClicked) == 0x000010, "Wrong size on BattlePassScreenS28_HandleItemVMCardClicked");
static_assert(offsetof(BattlePassScreenS28_HandleItemVMCardClicked, ItemVM) == 0x000000, "Member 'BattlePassScreenS28_HandleItemVMCardClicked::ItemVM' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_HandleItemVMCardClicked, EntrySelected) == 0x000008, "Member 'BattlePassScreenS28_HandleItemVMCardClicked::EntrySelected' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnBattlePassGiftingAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_OnBattlePassGiftingAllowed final
{
public:
	bool                                          bGiftingAllowed;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnBattlePassGiftingAllowed) == 0x000001, "Wrong alignment on BattlePassScreenS28_OnBattlePassGiftingAllowed");
static_assert(sizeof(BattlePassScreenS28_OnBattlePassGiftingAllowed) == 0x000001, "Wrong size on BattlePassScreenS28_OnBattlePassGiftingAllowed");
static_assert(offsetof(BattlePassScreenS28_OnBattlePassGiftingAllowed, bGiftingAllowed) == 0x000000, "Member 'BattlePassScreenS28_OnBattlePassGiftingAllowed::bGiftingAllowed' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnGameModeCompatibilityTagUpdate
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS28_OnGameModeCompatibilityTagUpdate final
{
public:
	const class UFortItemVM*                      FortItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnGameModeCompatibilityTagUpdate) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnGameModeCompatibilityTagUpdate");
static_assert(sizeof(BattlePassScreenS28_OnGameModeCompatibilityTagUpdate) == 0x000008, "Wrong size on BattlePassScreenS28_OnGameModeCompatibilityTagUpdate");
static_assert(offsetof(BattlePassScreenS28_OnGameModeCompatibilityTagUpdate, FortItem) == 0x000000, "Member 'BattlePassScreenS28_OnGameModeCompatibilityTagUpdate::FortItem' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnInsufficientFunds
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_OnInsufficientFunds final
{
public:
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnInsufficientFunds) == 0x000001, "Wrong alignment on BattlePassScreenS28_OnInsufficientFunds");
static_assert(sizeof(BattlePassScreenS28_OnInsufficientFunds) == 0x000001, "Wrong size on BattlePassScreenS28_OnInsufficientFunds");
static_assert(offsetof(BattlePassScreenS28_OnInsufficientFunds, CurrencyType) == 0x000000, "Member 'BattlePassScreenS28_OnInsufficientFunds::CurrencyType' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnInsufficientResource
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS28_OnInsufficientResource final
{
public:
	const class UFortPersistentResourceItemDefinition* PersistentResource;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnInsufficientResource) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnInsufficientResource");
static_assert(sizeof(BattlePassScreenS28_OnInsufficientResource) == 0x000008, "Wrong size on BattlePassScreenS28_OnInsufficientResource");
static_assert(offsetof(BattlePassScreenS28_OnInsufficientResource, PersistentResource) == 0x000000, "Member 'BattlePassScreenS28_OnInsufficientResource::PersistentResource' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnItemDelayed
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS28_OnItemDelayed final
{
public:
	struct FTimespan                              Delay;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnItemDelayed) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnItemDelayed");
static_assert(sizeof(BattlePassScreenS28_OnItemDelayed) == 0x000008, "Wrong size on BattlePassScreenS28_OnItemDelayed");
static_assert(offsetof(BattlePassScreenS28_OnItemDelayed, Delay) == 0x000000, "Member 'BattlePassScreenS28_OnItemDelayed::Delay' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnItemVmCardUpdate
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS28_OnItemVmCardUpdate final
{
public:
	struct FExpandedItemVM                        ItemVMs;                                           // 0x0000(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	const class UAthenaSeasonItemEntryBase*       EntrySelected;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnItemVmCardUpdate) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnItemVmCardUpdate");
static_assert(sizeof(BattlePassScreenS28_OnItemVmCardUpdate) == 0x000018, "Wrong size on BattlePassScreenS28_OnItemVmCardUpdate");
static_assert(offsetof(BattlePassScreenS28_OnItemVmCardUpdate, ItemVMs) == 0x000000, "Member 'BattlePassScreenS28_OnItemVmCardUpdate::ItemVMs' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnItemVmCardUpdate, EntrySelected) == 0x000010, "Member 'BattlePassScreenS28_OnItemVmCardUpdate::EntrySelected' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetBaseRewardsInfo
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS28_OnSetBaseRewardsInfo final
{
public:
	int32                                         OwnedRewards;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetBaseRewardsInfo) == 0x000004, "Wrong alignment on BattlePassScreenS28_OnSetBaseRewardsInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetBaseRewardsInfo) == 0x000010, "Wrong size on BattlePassScreenS28_OnSetBaseRewardsInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetBaseRewardsInfo, OwnedRewards) == 0x000000, "Member 'BattlePassScreenS28_OnSetBaseRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBaseRewardsInfo, TotalRewards) == 0x000004, "Member 'BattlePassScreenS28_OnSetBaseRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBaseRewardsInfo, CompletedPages) == 0x000008, "Member 'BattlePassScreenS28_OnSetBaseRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBaseRewardsInfo, TotalPages) == 0x00000C, "Member 'BattlePassScreenS28_OnSetBaseRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetBonusInfo
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS28_OnSetBonusInfo final
{
public:
	struct FBonusInfoMiniTagData                  BonusInfo;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetBonusInfo) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetBonusInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetBonusInfo) == 0x000018, "Wrong size on BattlePassScreenS28_OnSetBonusInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusInfo, BonusInfo) == 0x000000, "Member 'BattlePassScreenS28_OnSetBonusInfo::BonusInfo' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetBonusRewardsInfo
// 0x001C (0x001C - 0x0000)
struct BattlePassScreenS28_OnSetBonusRewardsInfo final
{
public:
	bool                                          bIsUnlocked;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnedRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimedOutfits;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalOutfits;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetBonusRewardsInfo) == 0x000004, "Wrong alignment on BattlePassScreenS28_OnSetBonusRewardsInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetBonusRewardsInfo) == 0x00001C, "Wrong size on BattlePassScreenS28_OnSetBonusRewardsInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, bIsUnlocked) == 0x000000, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::bIsUnlocked' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, OwnedRewards) == 0x000004, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, TotalRewards) == 0x000008, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, CompletedPages) == 0x00000C, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, TotalPages) == 0x000010, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::TotalPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, ClaimedOutfits) == 0x000014, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::ClaimedOutfits' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetBonusRewardsInfo, TotalOutfits) == 0x000018, "Member 'BattlePassScreenS28_OnSetBonusRewardsInfo::TotalOutfits' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetCoverPageData
// 0x0038 (0x0038 - 0x0000)
struct BattlePassScreenS28_OnSetCoverPageData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bPageComplete;                                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS28_OnSetCoverPageData) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetCoverPageData");
static_assert(sizeof(BattlePassScreenS28_OnSetCoverPageData) == 0x000038, "Wrong size on BattlePassScreenS28_OnSetCoverPageData");
static_assert(offsetof(BattlePassScreenS28_OnSetCoverPageData, Title) == 0x000000, "Member 'BattlePassScreenS28_OnSetCoverPageData::Title' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCoverPageData, Description) == 0x000018, "Member 'BattlePassScreenS28_OnSetCoverPageData::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCoverPageData, bPageComplete) == 0x000030, "Member 'BattlePassScreenS28_OnSetCoverPageData::bPageComplete' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetCrewInfo
// 0x0058 (0x0058 - 0x0000)
struct BattlePassScreenS28_OnSetCrewInfo final
{
public:
	bool                                          bIsNextMonthRewards;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MonthText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              NextMonthlyRewardTimespan;                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CharacterDisplayName;                              // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   CharacterDescription;                              // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetCrewInfo) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetCrewInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetCrewInfo) == 0x000058, "Wrong size on BattlePassScreenS28_OnSetCrewInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetCrewInfo, bIsNextMonthRewards) == 0x000000, "Member 'BattlePassScreenS28_OnSetCrewInfo::bIsNextMonthRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCrewInfo, MonthText) == 0x000008, "Member 'BattlePassScreenS28_OnSetCrewInfo::MonthText' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCrewInfo, NextMonthlyRewardTimespan) == 0x000020, "Member 'BattlePassScreenS28_OnSetCrewInfo::NextMonthlyRewardTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCrewInfo, CharacterDisplayName) == 0x000028, "Member 'BattlePassScreenS28_OnSetCrewInfo::CharacterDisplayName' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetCrewInfo, CharacterDescription) == 0x000040, "Member 'BattlePassScreenS28_OnSetCrewInfo::CharacterDescription' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetEquipButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_OnSetEquipButtonEnable final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetEquipButtonEnable) == 0x000001, "Wrong alignment on BattlePassScreenS28_OnSetEquipButtonEnable");
static_assert(sizeof(BattlePassScreenS28_OnSetEquipButtonEnable) == 0x000001, "Wrong size on BattlePassScreenS28_OnSetEquipButtonEnable");
static_assert(offsetof(BattlePassScreenS28_OnSetEquipButtonEnable, bIsEnable) == 0x000000, "Member 'BattlePassScreenS28_OnSetEquipButtonEnable::bIsEnable' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetItemPrice
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS28_OnSetItemPrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS28_OnSetItemPrice) == 0x000004, "Wrong alignment on BattlePassScreenS28_OnSetItemPrice");
static_assert(sizeof(BattlePassScreenS28_OnSetItemPrice) == 0x000008, "Wrong size on BattlePassScreenS28_OnSetItemPrice");
static_assert(offsetof(BattlePassScreenS28_OnSetItemPrice, Cost) == 0x000000, "Member 'BattlePassScreenS28_OnSetItemPrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetItemPrice, CurrencyType) == 0x000004, "Member 'BattlePassScreenS28_OnSetItemPrice::CurrencyType' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetPrerequisiteInfo
// 0x0028 (0x0028 - 0x0000)
struct BattlePassScreenS28_OnSetPrerequisiteInfo final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentAmount;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededAmount;                                      // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassRewardPrerequisiteType             PrerequisiteType;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrerequisiteLock;                             // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS28_OnSetPrerequisiteInfo) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetPrerequisiteInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetPrerequisiteInfo) == 0x000028, "Wrong size on BattlePassScreenS28_OnSetPrerequisiteInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetPrerequisiteInfo, Description) == 0x000000, "Member 'BattlePassScreenS28_OnSetPrerequisiteInfo::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetPrerequisiteInfo, CurrentAmount) == 0x000018, "Member 'BattlePassScreenS28_OnSetPrerequisiteInfo::CurrentAmount' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetPrerequisiteInfo, NeededAmount) == 0x00001C, "Member 'BattlePassScreenS28_OnSetPrerequisiteInfo::NeededAmount' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetPrerequisiteInfo, PrerequisiteType) == 0x000020, "Member 'BattlePassScreenS28_OnSetPrerequisiteInfo::PrerequisiteType' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetPrerequisiteInfo, bShowPrerequisiteLock) == 0x000021, "Member 'BattlePassScreenS28_OnSetPrerequisiteInfo::bShowPrerequisiteLock' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetQuestRewardsInfo
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS28_OnSetQuestRewardsInfo final
{
public:
	struct FTimespan                              DelayTimespan;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetQuestRewardsInfo) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetQuestRewardsInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetQuestRewardsInfo) == 0x000018, "Wrong size on BattlePassScreenS28_OnSetQuestRewardsInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetQuestRewardsInfo, DelayTimespan) == 0x000000, "Member 'BattlePassScreenS28_OnSetQuestRewardsInfo::DelayTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetQuestRewardsInfo, OwnedRewards) == 0x000008, "Member 'BattlePassScreenS28_OnSetQuestRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetQuestRewardsInfo, TotalRewards) == 0x00000C, "Member 'BattlePassScreenS28_OnSetQuestRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetQuestRewardsInfo, CompletedPages) == 0x000010, "Member 'BattlePassScreenS28_OnSetQuestRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetQuestRewardsInfo, TotalPages) == 0x000014, "Member 'BattlePassScreenS28_OnSetQuestRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetResourcePrice
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS28_OnSetResourcePrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortPersistentResourceItemDefinition* PersistentResource;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetResourcePrice) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetResourcePrice");
static_assert(sizeof(BattlePassScreenS28_OnSetResourcePrice) == 0x000010, "Wrong size on BattlePassScreenS28_OnSetResourcePrice");
static_assert(offsetof(BattlePassScreenS28_OnSetResourcePrice, Cost) == 0x000000, "Member 'BattlePassScreenS28_OnSetResourcePrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetResourcePrice, PersistentResource) == 0x000008, "Member 'BattlePassScreenS28_OnSetResourcePrice::PersistentResource' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetWarningToolTip
// 0x0020 (0x0020 - 0x0000)
struct BattlePassScreenS28_OnSetWarningToolTip final
{
public:
	ERewardWarningTooltipType28                   WarningTooltipType;                                // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetWarningToolTip) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetWarningToolTip");
static_assert(sizeof(BattlePassScreenS28_OnSetWarningToolTip) == 0x000020, "Wrong size on BattlePassScreenS28_OnSetWarningToolTip");
static_assert(offsetof(BattlePassScreenS28_OnSetWarningToolTip, WarningTooltipType) == 0x000000, "Member 'BattlePassScreenS28_OnSetWarningToolTip::WarningTooltipType' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWarningToolTip, Description) == 0x000008, "Member 'BattlePassScreenS28_OnSetWarningToolTip::Description' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnSetWeeklyRewardsInfo
// 0x0020 (0x0020 - 0x0000)
struct BattlePassScreenS28_OnSetWeeklyRewardsInfo final
{
public:
	struct FTimespan                              DelayTimespan;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableRewards;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailablePages;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedPages;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnSetWeeklyRewardsInfo) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnSetWeeklyRewardsInfo");
static_assert(sizeof(BattlePassScreenS28_OnSetWeeklyRewardsInfo) == 0x000020, "Wrong size on BattlePassScreenS28_OnSetWeeklyRewardsInfo");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, DelayTimespan) == 0x000000, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::DelayTimespan' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, AvailableRewards) == 0x000008, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::AvailableRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, OwnedRewards) == 0x00000C, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, TotalRewards) == 0x000010, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::TotalRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, AvailablePages) == 0x000014, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::AvailablePages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, CompletedPages) == 0x000018, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::CompletedPages' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnSetWeeklyRewardsInfo, TotalPages) == 0x00001C, "Member 'BattlePassScreenS28_OnSetWeeklyRewardsInfo::TotalPages' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnTransitionItemDetails
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_OnTransitionItemDetails final
{
public:
	bool                                          bTransitionForward;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnTransitionItemDetails) == 0x000001, "Wrong alignment on BattlePassScreenS28_OnTransitionItemDetails");
static_assert(sizeof(BattlePassScreenS28_OnTransitionItemDetails) == 0x000001, "Wrong size on BattlePassScreenS28_OnTransitionItemDetails");
static_assert(offsetof(BattlePassScreenS28_OnTransitionItemDetails, bTransitionForward) == 0x000000, "Member 'BattlePassScreenS28_OnTransitionItemDetails::bTransitionForward' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnUpdateBattlePassRequiredBar
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_OnUpdateBattlePassRequiredBar final
{
public:
	bool                                          bPassRequiredVisible;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnUpdateBattlePassRequiredBar) == 0x000001, "Wrong alignment on BattlePassScreenS28_OnUpdateBattlePassRequiredBar");
static_assert(sizeof(BattlePassScreenS28_OnUpdateBattlePassRequiredBar) == 0x000001, "Wrong size on BattlePassScreenS28_OnUpdateBattlePassRequiredBar");
static_assert(offsetof(BattlePassScreenS28_OnUpdateBattlePassRequiredBar, bPassRequiredVisible) == 0x000000, "Member 'BattlePassScreenS28_OnUpdateBattlePassRequiredBar::bPassRequiredVisible' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnUpdateOwnedOrEquippedTag
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS28_OnUpdateOwnedOrEquippedTag final
{
public:
	class FText                                   StatusText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_OnUpdateOwnedOrEquippedTag) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnUpdateOwnedOrEquippedTag");
static_assert(sizeof(BattlePassScreenS28_OnUpdateOwnedOrEquippedTag) == 0x000018, "Wrong size on BattlePassScreenS28_OnUpdateOwnedOrEquippedTag");
static_assert(offsetof(BattlePassScreenS28_OnUpdateOwnedOrEquippedTag, StatusText) == 0x000000, "Member 'BattlePassScreenS28_OnUpdateOwnedOrEquippedTag::StatusText' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.OnUpdateStatusBar
// 0x0020 (0x0020 - 0x0000)
struct BattlePassScreenS28_OnUpdateStatusBar final
{
public:
	class FText                                   StatusText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBattlePassStatusBarTypeS28                   BarType;                                           // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS28_OnUpdateStatusBar) == 0x000008, "Wrong alignment on BattlePassScreenS28_OnUpdateStatusBar");
static_assert(sizeof(BattlePassScreenS28_OnUpdateStatusBar) == 0x000020, "Wrong size on BattlePassScreenS28_OnUpdateStatusBar");
static_assert(offsetof(BattlePassScreenS28_OnUpdateStatusBar, StatusText) == 0x000000, "Member 'BattlePassScreenS28_OnUpdateStatusBar::StatusText' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS28_OnUpdateStatusBar, BarType) == 0x000018, "Member 'BattlePassScreenS28_OnUpdateStatusBar::BarType' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.GetEquipButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_GetEquipButtonEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_GetEquipButtonEnable) == 0x000001, "Wrong alignment on BattlePassScreenS28_GetEquipButtonEnable");
static_assert(sizeof(BattlePassScreenS28_GetEquipButtonEnable) == 0x000001, "Wrong size on BattlePassScreenS28_GetEquipButtonEnable");
static_assert(offsetof(BattlePassScreenS28_GetEquipButtonEnable, ReturnValue) == 0x000000, "Member 'BattlePassScreenS28_GetEquipButtonEnable::ReturnValue' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.GetQuestPageDelay
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS28_GetQuestPageDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_GetQuestPageDelay) == 0x000008, "Wrong alignment on BattlePassScreenS28_GetQuestPageDelay");
static_assert(sizeof(BattlePassScreenS28_GetQuestPageDelay) == 0x000008, "Wrong size on BattlePassScreenS28_GetQuestPageDelay");
static_assert(offsetof(BattlePassScreenS28_GetQuestPageDelay, ReturnValue) == 0x000000, "Member 'BattlePassScreenS28_GetQuestPageDelay::ReturnValue' has a wrong offset!");

// Function BattlePassS28UI.BattlePassScreenS28.IsSeasonalCustomizationItemOwned
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS28_IsSeasonalCustomizationItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS28_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong alignment on BattlePassScreenS28_IsSeasonalCustomizationItemOwned");
static_assert(sizeof(BattlePassScreenS28_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong size on BattlePassScreenS28_IsSeasonalCustomizationItemOwned");
static_assert(offsetof(BattlePassScreenS28_IsSeasonalCustomizationItemOwned, ReturnValue) == 0x000000, "Member 'BattlePassScreenS28_IsSeasonalCustomizationItemOwned::ReturnValue' has a wrong offset!");

// Function BattlePassS28UI.FortBattlePassResourcesWidgetS28.OnBattleStarRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS28_OnBattleStarRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS28UI.FortBattlePassResourcesWidgetS28.OnStylePointsRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS28_OnStylePointsRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS28UI.FortBattlePassTutorialTooltipS28.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTutorialTooltipS28_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltipS28_SetText) == 0x000008, "Wrong alignment on FortBattlePassTutorialTooltipS28_SetText");
static_assert(sizeof(FortBattlePassTutorialTooltipS28_SetText) == 0x000018, "Wrong size on FortBattlePassTutorialTooltipS28_SetText");
static_assert(offsetof(FortBattlePassTutorialTooltipS28_SetText, Text) == 0x000000, "Member 'FortBattlePassTutorialTooltipS28_SetText::Text' has a wrong offset!");

}

