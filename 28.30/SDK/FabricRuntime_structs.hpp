#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FabricRuntime

#include "Basic.hpp"

#include "MetasoundEngine_structs.hpp"
#include "Engine_structs.hpp"
#include "HarmonixMetasound_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HarmonixMidi_structs.hpp"


namespace SDK
{

// Enum FabricRuntime.EFabricContinuousInteractionDirection
// NumValues: 0x0002
enum class EFabricContinuousInteractionDirection : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
};

// Enum FabricRuntime.EFabricInteractionToolStates
// NumValues: 0x0008
enum class EFabricInteractionToolStates : uint8
{
	Equipped                                 = 0,
	HoveredControl                           = 1,
	HoveredValidCablePort                    = 2,
	HoveredInvalid                           = 3,
	ContinuousSelected                       = 4,
	MomentarySelected                        = 5,
	CableSelected                            = 6,
	None                                     = 7,
};

// Enum FabricRuntime.EFabricInteractableType
// NumValues: 0x0004
enum class EFabricInteractableType : uint8
{
	Momentary                                = 0,
	Continuous                               = 1,
	Cable                                    = 2,
	None                                     = 3,
};

// Enum FabricRuntime.EFabricMetasoundPlayState
// NumValues: 0x0004
enum class EFabricMetasoundPlayState : uint8
{
	Playing                                  = 0,
	Rebuilding                               = 1,
	Paused                                   = 2,
	Stopped                                  = 3,
};

// Enum FabricRuntime.EFabricMetasoundMusicEventPriority
// NumValues: 0x0002
enum class EFabricMetasoundMusicEventPriority : uint8
{
	AboveEmotes                              = 0,
	BelowEmotes                              = 1,
};

// Enum FabricRuntime.EFabricNoteStyle
// NumValues: 0x0003
enum class EFabricNoteStyle : uint8
{
	Straight                                 = 0,
	Triplet                                  = 1,
	Dotted                                   = 2,
};

// Enum FabricRuntime.EFabricFloatProviderType
// NumValues: 0x0002
enum class EFabricFloatProviderType : uint8
{
	Continuous                               = 0,
	Instantaneous                            = 1,
};

// Enum FabricRuntime.EFabricWaveSyncType
// NumValues: 0x0002
enum class EFabricWaveSyncType : uint8
{
	Free                                     = 0,
	BeatSync                                 = 1,
};

// Enum FabricRuntime.EFabricWaveShape
// NumValues: 0x0006
enum class EFabricWaveShape : uint8
{
	Sine                                     = 0,
	Triangle                                 = 1,
	Saw                                      = 2,
	Square                                   = 3,
	RandomStepped                            = 4,
	RandomSmooth                             = 5,
};

// Enum FabricRuntime.EFabricValueSetterTransitionTiming
// NumValues: 0x0004
enum class EFabricValueSetterTransitionTiming : uint8
{
	Immediate                                = 0,
	NextBeat                                 = 1,
	NextBar                                  = 2,
	NextPhrase                               = 3,
};

// Enum FabricRuntime.EFabricCloneTransformBehavior
// NumValues: 0x0005
enum class EFabricCloneTransformBehavior : uint8
{
	None                                     = 0,
	Uniform                                  = 1,
	Stepped                                  = 2,
	SteppedCentered                          = 3,
	SteppedExponential                       = 4,
};

// Enum FabricRuntime.EJamFabricSyncType
// NumValues: 0x0003
enum class EJamFabricSyncType : uint8
{
	Disconnected                             = 0,
	FabricControlsJam                        = 1,
	Bidirectional                            = 2,
};

// Enum FabricRuntime.EFabricMetaSoundPinDirection
// NumValues: 0x0002
enum class EFabricMetaSoundPinDirection : uint8
{
	Input                                    = 0,
	Output                                   = 1,
};

// Enum FabricRuntime.EFabricMetasoundInputType
// NumValues: 0x0003
enum class EFabricMetasoundInputType : uint8
{
	ModulatedUserOption                      = 0,
	NonModulatedUserOption                   = 1,
	DirectInput                              = 2,
};

// Enum FabricRuntime.EFabricMetaSoundPatchWrapperQuality
// NumValues: 0x0002
enum class EFabricMetaSoundPatchWrapperQuality : uint8
{
	High                                     = 0,
	Low                                      = 1,
};

// Enum FabricRuntime.EFabricUserOptionType
// NumValues: 0x0005
enum class EFabricUserOptionType : uint8
{
	Boolean                                  = 0,
	Integer                                  = 1,
	Float                                    = 2,
	String                                   = 3,
	Enum                                     = 4,
};

// Enum FabricRuntime.ESequencerType
// NumValues: 0x0002
enum class ESequencerType : uint8
{
	MultiTrack                               = 0,
	SingleTrack                              = 1,
};

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapperPeakTamer
// 0x0024 (0x0024 - 0x0000)
struct FFabricMetaSoundPatchWrapperPeakTamer final
{
public:
	bool                                          bUseGameplaySmoothing;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSortSignals;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSignalsToTame;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x1C];                                       // 0x0008(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundPatchWrapperPeakTamer) == 0x000004, "Wrong alignment on FFabricMetaSoundPatchWrapperPeakTamer");
static_assert(sizeof(FFabricMetaSoundPatchWrapperPeakTamer) == 0x000024, "Wrong size on FFabricMetaSoundPatchWrapperPeakTamer");
static_assert(offsetof(FFabricMetaSoundPatchWrapperPeakTamer, bUseGameplaySmoothing) == 0x000000, "Member 'FFabricMetaSoundPatchWrapperPeakTamer::bUseGameplaySmoothing' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperPeakTamer, bSortSignals) == 0x000001, "Member 'FFabricMetaSoundPatchWrapperPeakTamer::bSortSignals' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperPeakTamer, MaxSignalsToTame) == 0x000004, "Member 'FFabricMetaSoundPatchWrapperPeakTamer::MaxSignalsToTame' has a wrong offset!");

// ScriptStruct FabricRuntime.InteractionData
// 0x000C (0x000C - 0x0000)
struct FInteractionData final
{
public:
	EFabricInteractionToolStates                  InteractionState;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortCreativeDeviceProp> InteractableOwnerDevice;                           // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionData) == 0x000004, "Wrong alignment on FInteractionData");
static_assert(sizeof(FInteractionData) == 0x00000C, "Wrong size on FInteractionData");
static_assert(offsetof(FInteractionData, InteractionState) == 0x000000, "Member 'FInteractionData::InteractionState' has a wrong offset!");
static_assert(offsetof(FInteractionData, InteractableOwnerDevice) == 0x000004, "Member 'FInteractionData::InteractableOwnerDevice' has a wrong offset!");

// ScriptStruct FabricRuntime.InteractionSplinePoints
// 0x0060 (0x0060 - 0x0000)
struct FInteractionSplinePoints final
{
public:
	struct FVector_NetQuantize10                  SplineStartLocation;                               // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  SplineStartForward;                                // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  SplineEndLocation;                                 // 0x0030(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  SplineEndForward;                                  // 0x0048(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionSplinePoints) == 0x000008, "Wrong alignment on FInteractionSplinePoints");
static_assert(sizeof(FInteractionSplinePoints) == 0x000060, "Wrong size on FInteractionSplinePoints");
static_assert(offsetof(FInteractionSplinePoints, SplineStartLocation) == 0x000000, "Member 'FInteractionSplinePoints::SplineStartLocation' has a wrong offset!");
static_assert(offsetof(FInteractionSplinePoints, SplineStartForward) == 0x000018, "Member 'FInteractionSplinePoints::SplineStartForward' has a wrong offset!");
static_assert(offsetof(FInteractionSplinePoints, SplineEndLocation) == 0x000030, "Member 'FInteractionSplinePoints::SplineEndLocation' has a wrong offset!");
static_assert(offsetof(FInteractionSplinePoints, SplineEndForward) == 0x000048, "Member 'FInteractionSplinePoints::SplineEndForward' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricProgressionPreset
// 0x0020 (0x0028 - 0x0008)
struct FFabricProgressionPreset final : public FTableRowBase
{
public:
	class FText                                   ProgressionName;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHarmonicProgression                          Interval0;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonicProgression                          Interval1;                                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonicProgression                          Interval2;                                         // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarmonicProgression                          Interval3;                                         // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricProgressionPreset) == 0x000008, "Wrong alignment on FFabricProgressionPreset");
static_assert(sizeof(FFabricProgressionPreset) == 0x000028, "Wrong size on FFabricProgressionPreset");
static_assert(offsetof(FFabricProgressionPreset, ProgressionName) == 0x000008, "Member 'FFabricProgressionPreset::ProgressionName' has a wrong offset!");
static_assert(offsetof(FFabricProgressionPreset, Interval0) == 0x000020, "Member 'FFabricProgressionPreset::Interval0' has a wrong offset!");
static_assert(offsetof(FFabricProgressionPreset, Interval1) == 0x000021, "Member 'FFabricProgressionPreset::Interval1' has a wrong offset!");
static_assert(offsetof(FFabricProgressionPreset, Interval2) == 0x000022, "Member 'FFabricProgressionPreset::Interval2' has a wrong offset!");
static_assert(offsetof(FFabricProgressionPreset, Interval3) == 0x000023, "Member 'FFabricProgressionPreset::Interval3' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricSignificanceBasedUpdateBucket
// 0x0010 (0x0010 - 0x0000)
struct FFabricSignificanceBasedUpdateBucket final
{
public:
	float                                         MinDistanceFromPlayer;                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFromPlayer;                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FramesPerUpdate;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxObjectsInBucket;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricSignificanceBasedUpdateBucket) == 0x000004, "Wrong alignment on FFabricSignificanceBasedUpdateBucket");
static_assert(sizeof(FFabricSignificanceBasedUpdateBucket) == 0x000010, "Wrong size on FFabricSignificanceBasedUpdateBucket");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucket, MinDistanceFromPlayer) == 0x000000, "Member 'FFabricSignificanceBasedUpdateBucket::MinDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucket, MaxDistanceFromPlayer) == 0x000004, "Member 'FFabricSignificanceBasedUpdateBucket::MaxDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucket, FramesPerUpdate) == 0x000008, "Member 'FFabricSignificanceBasedUpdateBucket::FramesPerUpdate' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucket, MaxObjectsInBucket) == 0x00000C, "Member 'FFabricSignificanceBasedUpdateBucket::MaxObjectsInBucket' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapperBinding
// 0x0048 (0x0048 - 0x0000)
struct FFabricMetaSoundPatchWrapperBinding
{
public:
	class FName                                   FriendlyName;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOnDedicatedServer;                           // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFabricMetaSoundPatchWrapperPeakTamer  PeakTamer;                                         // 0x0008(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   MetaSoundNodeName;                                 // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Signals;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bBoundToWatchEvents;                               // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundPatchWrapperBinding) == 0x000008, "Wrong alignment on FFabricMetaSoundPatchWrapperBinding");
static_assert(sizeof(FFabricMetaSoundPatchWrapperBinding) == 0x000048, "Wrong size on FFabricMetaSoundPatchWrapperBinding");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, FriendlyName) == 0x000000, "Member 'FFabricMetaSoundPatchWrapperBinding::FriendlyName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, bAllowOnDedicatedServer) == 0x000004, "Member 'FFabricMetaSoundPatchWrapperBinding::bAllowOnDedicatedServer' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, PeakTamer) == 0x000008, "Member 'FFabricMetaSoundPatchWrapperBinding::PeakTamer' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, MetaSoundNodeName) == 0x00002C, "Member 'FFabricMetaSoundPatchWrapperBinding::MetaSoundNodeName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, Signals) == 0x000030, "Member 'FFabricMetaSoundPatchWrapperBinding::Signals' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperBinding, bBoundToWatchEvents) == 0x000040, "Member 'FFabricMetaSoundPatchWrapperBinding::bBoundToWatchEvents' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapperWetDryOutputBinding
// 0x0090 (0x0090 - 0x0000)
struct FFabricMetaSoundPatchWrapperWetDryOutputBinding final
{
public:
	struct FFabricMetaSoundPatchWrapperBinding    WetOutputSignalBinding;                            // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundPatchWrapperBinding    DryOutputSignalBinding;                            // 0x0048(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundPatchWrapperWetDryOutputBinding) == 0x000008, "Wrong alignment on FFabricMetaSoundPatchWrapperWetDryOutputBinding");
static_assert(sizeof(FFabricMetaSoundPatchWrapperWetDryOutputBinding) == 0x000090, "Wrong size on FFabricMetaSoundPatchWrapperWetDryOutputBinding");
static_assert(offsetof(FFabricMetaSoundPatchWrapperWetDryOutputBinding, WetOutputSignalBinding) == 0x000000, "Member 'FFabricMetaSoundPatchWrapperWetDryOutputBinding::WetOutputSignalBinding' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapperWetDryOutputBinding, DryOutputSignalBinding) == 0x000048, "Member 'FFabricMetaSoundPatchWrapperWetDryOutputBinding::DryOutputSignalBinding' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricTimelineSyncServerSongPosition
// 0x001C (0x001C - 0x0000)
struct FFabricTimelineSyncServerSongPosition final
{
public:
	struct FMusicTimestamp                        Timestamp;                                         // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         SecondsIncludingCountIn;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tempo;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeatsIncludingCountIn;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetServerTimeWhenSent;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSigDenominator;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricTimelineSyncServerSongPosition) == 0x000004, "Wrong alignment on FFabricTimelineSyncServerSongPosition");
static_assert(sizeof(FFabricTimelineSyncServerSongPosition) == 0x00001C, "Wrong size on FFabricTimelineSyncServerSongPosition");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, Timestamp) == 0x000000, "Member 'FFabricTimelineSyncServerSongPosition::Timestamp' has a wrong offset!");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, SecondsIncludingCountIn) == 0x000008, "Member 'FFabricTimelineSyncServerSongPosition::SecondsIncludingCountIn' has a wrong offset!");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, Tempo) == 0x00000C, "Member 'FFabricTimelineSyncServerSongPosition::Tempo' has a wrong offset!");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, BeatsIncludingCountIn) == 0x000010, "Member 'FFabricTimelineSyncServerSongPosition::BeatsIncludingCountIn' has a wrong offset!");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, NetServerTimeWhenSent) == 0x000014, "Member 'FFabricTimelineSyncServerSongPosition::NetServerTimeWhenSent' has a wrong offset!");
static_assert(offsetof(FFabricTimelineSyncServerSongPosition, TimeSigDenominator) == 0x000018, "Member 'FFabricTimelineSyncServerSongPosition::TimeSigDenominator' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricSequencerStepChangedInfo
// 0x0010 (0x0010 - 0x0000)
struct FFabricSequencerStepChangedInfo final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      Cell;                                              // 0x000C(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricSequencerStepChangedInfo) == 0x000004, "Wrong alignment on FFabricSequencerStepChangedInfo");
static_assert(sizeof(FFabricSequencerStepChangedInfo) == 0x000010, "Wrong size on FFabricSequencerStepChangedInfo");
static_assert(offsetof(FFabricSequencerStepChangedInfo, Page) == 0x000000, "Member 'FFabricSequencerStepChangedInfo::Page' has a wrong offset!");
static_assert(offsetof(FFabricSequencerStepChangedInfo, Row) == 0x000004, "Member 'FFabricSequencerStepChangedInfo::Row' has a wrong offset!");
static_assert(offsetof(FFabricSequencerStepChangedInfo, Step) == 0x000008, "Member 'FFabricSequencerStepChangedInfo::Step' has a wrong offset!");
static_assert(offsetof(FFabricSequencerStepChangedInfo, Cell) == 0x00000C, "Member 'FFabricSequencerStepChangedInfo::Cell' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapper_PerPlatformInputTuning
// 0x0008 (0x0008 - 0x0000)
struct FFabricMetaSoundPatchWrapper_PerPlatformInputTuning
{
public:
	class FName                                   NodeInputName;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultValues;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundPatchWrapper_PerPlatformInputTuning) == 0x000004, "Wrong alignment on FFabricMetaSoundPatchWrapper_PerPlatformInputTuning");
static_assert(sizeof(FFabricMetaSoundPatchWrapper_PerPlatformInputTuning) == 0x000008, "Wrong size on FFabricMetaSoundPatchWrapper_PerPlatformInputTuning");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformInputTuning, NodeInputName) == 0x000000, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformInputTuning::NodeInputName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformInputTuning, bUseDefaultValues) == 0x000004, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformInputTuning::bUseDefaultValues' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapper_PerPlatformIntInputTuning
// 0x0058 (0x0060 - 0x0008)
struct FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning final : public FFabricMetaSoundPatchWrapper_PerPlatformInputTuning
{
public:
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      PerPlatformTuning;                                 // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning) == 0x000008, "Wrong alignment on FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning");
static_assert(sizeof(FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning) == 0x000060, "Wrong size on FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning, DefaultValue) == 0x000008, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning::DefaultValue' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning, PerPlatformTuning) == 0x000010, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning::PerPlatformTuning' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundSpeakerPatchWrapperEqBandsBinding
// 0x0008 (0x0050 - 0x0048)
struct FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding final : public FFabricMetaSoundPatchWrapperBinding
{
public:
	int32                                         PrimitiveDataIndex;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding) == 0x000008, "Wrong alignment on FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding");
static_assert(sizeof(FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding) == 0x000050, "Wrong size on FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding");
static_assert(offsetof(FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding, PrimitiveDataIndex) == 0x000048, "Member 'FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding::PrimitiveDataIndex' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricTextureProviderTexture
// 0x0018 (0x0018 - 0x0000)
struct FFabricTextureProviderTexture final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricTextureProviderTexture) == 0x000008, "Wrong alignment on FFabricTextureProviderTexture");
static_assert(sizeof(FFabricTextureProviderTexture) == 0x000018, "Wrong size on FFabricTextureProviderTexture");
static_assert(offsetof(FFabricTextureProviderTexture, Texture) == 0x000000, "Member 'FFabricTextureProviderTexture::Texture' has a wrong offset!");
static_assert(offsetof(FFabricTextureProviderTexture, Tint) == 0x000008, "Member 'FFabricTextureProviderTexture::Tint' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricLFOGenerator
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FFabricLFOGenerator final
{
public:
	EFabricWaveShape                              WaveShape;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shape;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialSeed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x64];                                      // 0x0014(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricLFOGenerator) == 0x000008, "Wrong alignment on FFabricLFOGenerator");
static_assert(sizeof(FFabricLFOGenerator) == 0x000078, "Wrong size on FFabricLFOGenerator");
static_assert(offsetof(FFabricLFOGenerator, WaveShape) == 0x000000, "Member 'FFabricLFOGenerator::WaveShape' has a wrong offset!");
static_assert(offsetof(FFabricLFOGenerator, Minimum) == 0x000004, "Member 'FFabricLFOGenerator::Minimum' has a wrong offset!");
static_assert(offsetof(FFabricLFOGenerator, Maximum) == 0x000008, "Member 'FFabricLFOGenerator::Maximum' has a wrong offset!");
static_assert(offsetof(FFabricLFOGenerator, Shape) == 0x00000C, "Member 'FFabricLFOGenerator::Shape' has a wrong offset!");
static_assert(offsetof(FFabricLFOGenerator, InitialSeed) == 0x000010, "Member 'FFabricLFOGenerator::InitialSeed' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricStepGenerator
// 0x0020 (0x0020 - 0x0000)
struct FFabricStepGenerator final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Values;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricStepGenerator) == 0x000008, "Wrong alignment on FFabricStepGenerator");
static_assert(sizeof(FFabricStepGenerator) == 0x000020, "Wrong size on FFabricStepGenerator");
static_assert(offsetof(FFabricStepGenerator, Values) == 0x000008, "Member 'FFabricStepGenerator::Values' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricValueSetterGenerator
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FFabricValueSetterGenerator final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PhraseLengthInBars;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4C];                                       // 0x000C(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricValueSetterGenerator) == 0x000008, "Wrong alignment on FFabricValueSetterGenerator");
static_assert(sizeof(FFabricValueSetterGenerator) == 0x000058, "Wrong size on FFabricValueSetterGenerator");
static_assert(offsetof(FFabricValueSetterGenerator, PhraseLengthInBars) == 0x000008, "Member 'FFabricValueSetterGenerator::PhraseLengthInBars' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshProviderMeshReferenceParamInfo
// 0x000C (0x000C - 0x0000)
struct FFabricMeshProviderMeshReferenceParamInfo
{
public:
	struct FMaterialParameterInfo                 MaterialParameterInfo;                             // 0x0000(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshProviderMeshReferenceParamInfo) == 0x000004, "Wrong alignment on FFabricMeshProviderMeshReferenceParamInfo");
static_assert(sizeof(FFabricMeshProviderMeshReferenceParamInfo) == 0x00000C, "Wrong size on FFabricMeshProviderMeshReferenceParamInfo");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParamInfo, MaterialParameterInfo) == 0x000000, "Member 'FFabricMeshProviderMeshReferenceParamInfo::MaterialParameterInfo' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshProviderMeshReferenceParamInfo_Scalar
// 0x0004 (0x0010 - 0x000C)
struct FFabricMeshProviderMeshReferenceParamInfo_Scalar final : public FFabricMeshProviderMeshReferenceParamInfo
{
public:
	float                                         Scalar;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshProviderMeshReferenceParamInfo_Scalar) == 0x000004, "Wrong alignment on FFabricMeshProviderMeshReferenceParamInfo_Scalar");
static_assert(sizeof(FFabricMeshProviderMeshReferenceParamInfo_Scalar) == 0x000010, "Wrong size on FFabricMeshProviderMeshReferenceParamInfo_Scalar");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParamInfo_Scalar, Scalar) == 0x00000C, "Member 'FFabricMeshProviderMeshReferenceParamInfo_Scalar::Scalar' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshProviderMeshReferenceParamInfo_Color
// 0x0010 (0x001C - 0x000C)
struct FFabricMeshProviderMeshReferenceParamInfo_Color final : public FFabricMeshProviderMeshReferenceParamInfo
{
public:
	struct FLinearColor                           Color;                                             // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshProviderMeshReferenceParamInfo_Color) == 0x000004, "Wrong alignment on FFabricMeshProviderMeshReferenceParamInfo_Color");
static_assert(sizeof(FFabricMeshProviderMeshReferenceParamInfo_Color) == 0x00001C, "Wrong size on FFabricMeshProviderMeshReferenceParamInfo_Color");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParamInfo_Color, Color) == 0x00000C, "Member 'FFabricMeshProviderMeshReferenceParamInfo_Color::Color' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshProviderMeshReferenceParams
// 0x0028 (0x0028 - 0x0000)
struct FFabricMeshProviderMeshReferenceParams final
{
public:
	double                                        UniformScale;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFabricMeshProviderMeshReferenceParamInfo_Scalar> ScalarParams;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFabricMeshProviderMeshReferenceParamInfo_Color> ColorParams;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshProviderMeshReferenceParams) == 0x000008, "Wrong alignment on FFabricMeshProviderMeshReferenceParams");
static_assert(sizeof(FFabricMeshProviderMeshReferenceParams) == 0x000028, "Wrong size on FFabricMeshProviderMeshReferenceParams");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParams, UniformScale) == 0x000000, "Member 'FFabricMeshProviderMeshReferenceParams::UniformScale' has a wrong offset!");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParams, ScalarParams) == 0x000008, "Member 'FFabricMeshProviderMeshReferenceParams::ScalarParams' has a wrong offset!");
static_assert(offsetof(FFabricMeshProviderMeshReferenceParams, ColorParams) == 0x000018, "Member 'FFabricMeshProviderMeshReferenceParams::ColorParams' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshProviderMeshReference
// 0x0038 (0x0038 - 0x0000)
struct FFabricMeshProviderMeshReference final
{
public:
	class UStreamableRenderAsset*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMeshProviderMeshReferenceParams Params;                                            // 0x0010(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshProviderMeshReference) == 0x000008, "Wrong alignment on FFabricMeshProviderMeshReference");
static_assert(sizeof(FFabricMeshProviderMeshReference) == 0x000038, "Wrong size on FFabricMeshProviderMeshReference");
static_assert(offsetof(FFabricMeshProviderMeshReference, Mesh) == 0x000000, "Member 'FFabricMeshProviderMeshReference::Mesh' has a wrong offset!");
static_assert(offsetof(FFabricMeshProviderMeshReference, Texture) == 0x000008, "Member 'FFabricMeshProviderMeshReference::Texture' has a wrong offset!");
static_assert(offsetof(FFabricMeshProviderMeshReference, Params) == 0x000010, "Member 'FFabricMeshProviderMeshReference::Params' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMeshInstanceReference
// 0x0048 (0x0048 - 0x0000)
struct FFabricMeshInstanceReference final
{
public:
	struct FFabricMeshProviderMeshReference       MeshReference;                                     // 0x0000(0x0038)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     InstanceTransforms;                                // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMeshInstanceReference) == 0x000008, "Wrong alignment on FFabricMeshInstanceReference");
static_assert(sizeof(FFabricMeshInstanceReference) == 0x000048, "Wrong size on FFabricMeshInstanceReference");
static_assert(offsetof(FFabricMeshInstanceReference, MeshReference) == 0x000000, "Member 'FFabricMeshInstanceReference::MeshReference' has a wrong offset!");
static_assert(offsetof(FFabricMeshInstanceReference, InstanceTransforms) == 0x000038, "Member 'FFabricMeshInstanceReference::InstanceTransforms' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundNodeInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FFabricMetaSoundNodeInfo final
{
public:
	struct FMetaSoundNodeHandle                   NodeHandle;                                        // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMetaSoundNodeHandle                   OutputConnectionHandle;                            // 0x0010(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMetaSoundNodeHandle                   InputConnectionHandle;                             // 0x0020(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMetaSoundBuilderNodeOutputHandle> InputNodeNamesToHandles;                           // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMetaSoundNodeHandle                   AnalyzerHandle;                                    // 0x0088(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMetasoundParameterPack*                AnalyzerParameterPack;                             // 0x0098(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnalyzerName;                                      // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetaSoundNodeHandle                   SwitcherHandle;                                    // 0x00A4(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMetaSoundNodeHandle                   SelectHandle;                                      // 0x00B4(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NodeEnabledInput;                                  // 0x00C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnalyzerNodeVisibleInput;                          // 0x00C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AnalyzerOutputNames;                               // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMetaSoundPatch*                        PatchSpawnedFrom;                                  // 0x00E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMetasoundParameterPack*                ParameterPack;                                     // 0x00E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundNodeInfo) == 0x000008, "Wrong alignment on FFabricMetaSoundNodeInfo");
static_assert(sizeof(FFabricMetaSoundNodeInfo) == 0x0000F0, "Wrong size on FFabricMetaSoundNodeInfo");
static_assert(offsetof(FFabricMetaSoundNodeInfo, NodeHandle) == 0x000000, "Member 'FFabricMetaSoundNodeInfo::NodeHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, OutputConnectionHandle) == 0x000010, "Member 'FFabricMetaSoundNodeInfo::OutputConnectionHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, InputConnectionHandle) == 0x000020, "Member 'FFabricMetaSoundNodeInfo::InputConnectionHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, Name) == 0x000030, "Member 'FFabricMetaSoundNodeInfo::Name' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, InputNodeNamesToHandles) == 0x000038, "Member 'FFabricMetaSoundNodeInfo::InputNodeNamesToHandles' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, AnalyzerHandle) == 0x000088, "Member 'FFabricMetaSoundNodeInfo::AnalyzerHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, AnalyzerParameterPack) == 0x000098, "Member 'FFabricMetaSoundNodeInfo::AnalyzerParameterPack' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, AnalyzerName) == 0x0000A0, "Member 'FFabricMetaSoundNodeInfo::AnalyzerName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, SwitcherHandle) == 0x0000A4, "Member 'FFabricMetaSoundNodeInfo::SwitcherHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, SelectHandle) == 0x0000B4, "Member 'FFabricMetaSoundNodeInfo::SelectHandle' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, NodeEnabledInput) == 0x0000C4, "Member 'FFabricMetaSoundNodeInfo::NodeEnabledInput' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, AnalyzerNodeVisibleInput) == 0x0000C8, "Member 'FFabricMetaSoundNodeInfo::AnalyzerNodeVisibleInput' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, AnalyzerOutputNames) == 0x0000D0, "Member 'FFabricMetaSoundNodeInfo::AnalyzerOutputNames' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, PatchSpawnedFrom) == 0x0000E0, "Member 'FFabricMetaSoundNodeInfo::PatchSpawnedFrom' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodeInfo, ParameterPack) == 0x0000E8, "Member 'FFabricMetaSoundNodeInfo::ParameterPack' has a wrong offset!");

// ScriptStruct FabricRuntime.MetaSoundCombinerNodeHandle
// 0x0150 (0x0150 - 0x0000)
struct FMetaSoundCombinerNodeHandle final
{
public:
	struct FFabricMetaSoundNodeInfo               NodeInfo;                                          // 0x0000(0x00F0)(NativeAccessSpecifierPublic)
	struct FMetaSoundBuilderNodeInputHandle       CombinerInput1;                                    // 0x00F0(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetaSoundBuilderNodeInputHandle       CombinerInput2;                                    // 0x0110(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMetaSoundBuilderNodeOutputHandle      CombinedOutput;                                    // 0x0130(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaSoundCombinerNodeHandle) == 0x000008, "Wrong alignment on FMetaSoundCombinerNodeHandle");
static_assert(sizeof(FMetaSoundCombinerNodeHandle) == 0x000150, "Wrong size on FMetaSoundCombinerNodeHandle");
static_assert(offsetof(FMetaSoundCombinerNodeHandle, NodeInfo) == 0x000000, "Member 'FMetaSoundCombinerNodeHandle::NodeInfo' has a wrong offset!");
static_assert(offsetof(FMetaSoundCombinerNodeHandle, CombinerInput1) == 0x0000F0, "Member 'FMetaSoundCombinerNodeHandle::CombinerInput1' has a wrong offset!");
static_assert(offsetof(FMetaSoundCombinerNodeHandle, CombinerInput2) == 0x000110, "Member 'FMetaSoundCombinerNodeHandle::CombinerInput2' has a wrong offset!");
static_assert(offsetof(FMetaSoundCombinerNodeHandle, CombinedOutput) == 0x000130, "Member 'FMetaSoundCombinerNodeHandle::CombinedOutput' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundNodePool
// 0x0020 (0x0020 - 0x0000)
struct FFabricMetaSoundNodePool final
{
public:
	int32                                         NumberAdded;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFabricMetaSoundNodeInfo>       FreeNodes;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMetaSoundPatch*                        PatchSpawnedFrom;                                  // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundNodePool) == 0x000008, "Wrong alignment on FFabricMetaSoundNodePool");
static_assert(sizeof(FFabricMetaSoundNodePool) == 0x000020, "Wrong size on FFabricMetaSoundNodePool");
static_assert(offsetof(FFabricMetaSoundNodePool, NumberAdded) == 0x000000, "Member 'FFabricMetaSoundNodePool::NumberAdded' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodePool, FreeNodes) == 0x000008, "Member 'FFabricMetaSoundNodePool::FreeNodes' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundNodePool, PatchSpawnedFrom) == 0x000018, "Member 'FFabricMetaSoundNodePool::PatchSpawnedFrom' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundUtilityParams
// 0x0008 (0x0008 - 0x0000)
struct FFabricMetaSoundUtilityParams final
{
public:
	class FName                                   SwitcherEnabledParam;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectEnabledParam;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundUtilityParams) == 0x000004, "Wrong alignment on FFabricMetaSoundUtilityParams");
static_assert(sizeof(FFabricMetaSoundUtilityParams) == 0x000008, "Wrong size on FFabricMetaSoundUtilityParams");
static_assert(offsetof(FFabricMetaSoundUtilityParams, SwitcherEnabledParam) == 0x000000, "Member 'FFabricMetaSoundUtilityParams::SwitcherEnabledParam' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUtilityParams, SelectEnabledParam) == 0x000004, "Member 'FFabricMetaSoundUtilityParams::SelectEnabledParam' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundUtilityPatches
// 0x0088 (0x0088 - 0x0000)
struct FFabricMetaSoundUtilityPatches final
{
public:
	TSoftObjectPtr<class UMetaSoundPatch>         CombinerNode;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaSoundPatch>         SwitcherNode;                                      // 0x0020(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaSoundPatch>         SelectNode;                                        // 0x0040(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaSoundPatch>         AnalyzerNode;                                      // 0x0060(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundUtilityParams          UtilityNodeParams;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundUtilityPatches) == 0x000008, "Wrong alignment on FFabricMetaSoundUtilityPatches");
static_assert(sizeof(FFabricMetaSoundUtilityPatches) == 0x000088, "Wrong size on FFabricMetaSoundUtilityPatches");
static_assert(offsetof(FFabricMetaSoundUtilityPatches, CombinerNode) == 0x000000, "Member 'FFabricMetaSoundUtilityPatches::CombinerNode' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUtilityPatches, SwitcherNode) == 0x000020, "Member 'FFabricMetaSoundUtilityPatches::SwitcherNode' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUtilityPatches, SelectNode) == 0x000040, "Member 'FFabricMetaSoundUtilityPatches::SelectNode' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUtilityPatches, AnalyzerNode) == 0x000060, "Member 'FFabricMetaSoundUtilityPatches::AnalyzerNode' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUtilityPatches, UtilityNodeParams) == 0x000080, "Member 'FFabricMetaSoundUtilityPatches::UtilityNodeParams' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricLoadedUtilityPatches
// 0x0028 (0x0028 - 0x0000)
struct FFabricLoadedUtilityPatches final
{
public:
	class UMetaSoundPatch*                        CombinerNode;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMetaSoundPatch*                        SwitcherNode;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMetaSoundPatch*                        SelectNode;                                        // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMetaSoundPatch*                        AnalyzerNode;                                      // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundUtilityParams          UtilityNodeParams;                                 // 0x0020(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricLoadedUtilityPatches) == 0x000008, "Wrong alignment on FFabricLoadedUtilityPatches");
static_assert(sizeof(FFabricLoadedUtilityPatches) == 0x000028, "Wrong size on FFabricLoadedUtilityPatches");
static_assert(offsetof(FFabricLoadedUtilityPatches, CombinerNode) == 0x000000, "Member 'FFabricLoadedUtilityPatches::CombinerNode' has a wrong offset!");
static_assert(offsetof(FFabricLoadedUtilityPatches, SwitcherNode) == 0x000008, "Member 'FFabricLoadedUtilityPatches::SwitcherNode' has a wrong offset!");
static_assert(offsetof(FFabricLoadedUtilityPatches, SelectNode) == 0x000010, "Member 'FFabricLoadedUtilityPatches::SelectNode' has a wrong offset!");
static_assert(offsetof(FFabricLoadedUtilityPatches, AnalyzerNode) == 0x000018, "Member 'FFabricLoadedUtilityPatches::AnalyzerNode' has a wrong offset!");
static_assert(offsetof(FFabricLoadedUtilityPatches, UtilityNodeParams) == 0x000020, "Member 'FFabricLoadedUtilityPatches::UtilityNodeParams' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundDirectInputInfo
// 0x0008 (0x0008 - 0x0000)
struct FFabricMetaSoundDirectInputInfo final
{
public:
	class FName                                   MetaSoundInputName;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFabricUserOptionType                         InputType;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundDirectInputInfo) == 0x000004, "Wrong alignment on FFabricMetaSoundDirectInputInfo");
static_assert(sizeof(FFabricMetaSoundDirectInputInfo) == 0x000008, "Wrong size on FFabricMetaSoundDirectInputInfo");
static_assert(offsetof(FFabricMetaSoundDirectInputInfo, MetaSoundInputName) == 0x000000, "Member 'FFabricMetaSoundDirectInputInfo::MetaSoundInputName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundDirectInputInfo, InputType) == 0x000004, "Member 'FFabricMetaSoundDirectInputInfo::InputType' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundUserOptionInputInfo
// 0x0018 (0x0018 - 0x0000)
struct FFabricMetaSoundUserOptionInputInfo final
{
public:
	class FString                                 UserOption;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetaSoundInputName;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundUserOptionInputInfo) == 0x000008, "Wrong alignment on FFabricMetaSoundUserOptionInputInfo");
static_assert(sizeof(FFabricMetaSoundUserOptionInputInfo) == 0x000018, "Wrong size on FFabricMetaSoundUserOptionInputInfo");
static_assert(offsetof(FFabricMetaSoundUserOptionInputInfo, UserOption) == 0x000000, "Member 'FFabricMetaSoundUserOptionInputInfo::UserOption' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundUserOptionInputInfo, MetaSoundInputName) == 0x000010, "Member 'FFabricMetaSoundUserOptionInputInfo::MetaSoundInputName' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundRuntimeInputInfo
// 0x0028 (0x0028 - 0x0000)
struct FFabricMetaSoundRuntimeInputInfo final
{
public:
	struct FFabricMetaSoundUserOptionInputInfo    InputInfo;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFabricMetasoundInputType                     InputType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFabricUserOptionType                         FabricKnobType;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DataType;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetaSoundInputNodeName;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModulated;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricMetaSoundRuntimeInputInfo) == 0x000008, "Wrong alignment on FFabricMetaSoundRuntimeInputInfo");
static_assert(sizeof(FFabricMetaSoundRuntimeInputInfo) == 0x000028, "Wrong size on FFabricMetaSoundRuntimeInputInfo");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, InputInfo) == 0x000000, "Member 'FFabricMetaSoundRuntimeInputInfo::InputInfo' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, InputType) == 0x000018, "Member 'FFabricMetaSoundRuntimeInputInfo::InputType' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, FabricKnobType) == 0x000019, "Member 'FFabricMetaSoundRuntimeInputInfo::FabricKnobType' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, DataType) == 0x00001C, "Member 'FFabricMetaSoundRuntimeInputInfo::DataType' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, MetaSoundInputNodeName) == 0x000020, "Member 'FFabricMetaSoundRuntimeInputInfo::MetaSoundInputNodeName' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundRuntimeInputInfo, bIsModulated) == 0x000024, "Member 'FFabricMetaSoundRuntimeInputInfo::bIsModulated' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricConnectedInputWrapperInfo
// 0x0230 (0x0230 - 0x0000)
struct FFabricConnectedInputWrapperInfo final
{
public:
	bool                                          bDirectlyConnected;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricMetaSoundPatchWrapper*           Wrapper;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundNodeInfo               OutputNode;                                        // 0x0010(0x00F0)(NativeAccessSpecifierPublic)
	struct FMetaSoundBuilderNodeOutputHandle      ConnectedNodeOutput;                               // 0x0100(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundNodeInfo               InputNode;                                         // 0x0120(0x00F0)(NativeAccessSpecifierPublic)
	struct FMetaSoundBuilderNodeInputHandle       CombinerNodeInput;                                 // 0x0210(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricConnectedInputWrapperInfo) == 0x000008, "Wrong alignment on FFabricConnectedInputWrapperInfo");
static_assert(sizeof(FFabricConnectedInputWrapperInfo) == 0x000230, "Wrong size on FFabricConnectedInputWrapperInfo");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, bDirectlyConnected) == 0x000000, "Member 'FFabricConnectedInputWrapperInfo::bDirectlyConnected' has a wrong offset!");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, Wrapper) == 0x000008, "Member 'FFabricConnectedInputWrapperInfo::Wrapper' has a wrong offset!");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, OutputNode) == 0x000010, "Member 'FFabricConnectedInputWrapperInfo::OutputNode' has a wrong offset!");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, ConnectedNodeOutput) == 0x000100, "Member 'FFabricConnectedInputWrapperInfo::ConnectedNodeOutput' has a wrong offset!");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, InputNode) == 0x000120, "Member 'FFabricConnectedInputWrapperInfo::InputNode' has a wrong offset!");
static_assert(offsetof(FFabricConnectedInputWrapperInfo, CombinerNodeInput) == 0x000210, "Member 'FFabricConnectedInputWrapperInfo::CombinerNodeInput' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning
// 0x0058 (0x0060 - 0x0008)
struct FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning final : public FFabricMetaSoundPatchWrapper_PerPlatformInputTuning
{
public:
	bool                                          bDefaultValue;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       PerPlatformTuning;                                 // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning) == 0x000008, "Wrong alignment on FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning");
static_assert(sizeof(FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning) == 0x000060, "Wrong size on FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning, bDefaultValue) == 0x000008, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning::bDefaultValue' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning, PerPlatformTuning) == 0x000010, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning::PerPlatformTuning' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning
// 0x0058 (0x0060 - 0x0008)
struct FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning final : public FFabricMetaSoundPatchWrapper_PerPlatformInputTuning
{
public:
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      PerPlatformTuning;                                 // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning) == 0x000008, "Wrong alignment on FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning");
static_assert(sizeof(FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning) == 0x000060, "Wrong size on FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning, DefaultValue) == 0x000008, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning::DefaultValue' has a wrong offset!");
static_assert(offsetof(FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning, PerPlatformTuning) == 0x000010, "Member 'FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning::PerPlatformTuning' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricSignificanceBasedUpdateBucketRuntimeGroup
// 0x0018 (0x0018 - 0x0000)
struct FFabricSignificanceBasedUpdateBucketRuntimeGroup final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UObject>>         ObjectsInGroup;                                    // 0x0008(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricSignificanceBasedUpdateBucketRuntimeGroup) == 0x000008, "Wrong alignment on FFabricSignificanceBasedUpdateBucketRuntimeGroup");
static_assert(sizeof(FFabricSignificanceBasedUpdateBucketRuntimeGroup) == 0x000018, "Wrong size on FFabricSignificanceBasedUpdateBucketRuntimeGroup");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntimeGroup, ObjectsInGroup) == 0x000008, "Member 'FFabricSignificanceBasedUpdateBucketRuntimeGroup::ObjectsInGroup' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricSignificanceBasedUpdateBucketRuntime
// 0x0028 (0x0028 - 0x0000)
struct FFabricSignificanceBasedUpdateBucketRuntime final
{
public:
	float                                         ActualMinSignificance;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualMaxSignificance;                             // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActualMaxObjectsInBucket;                          // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActualFramesPerUpdate;                             // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalObjectsInBucketCount;                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFabricSignificanceBasedUpdateBucketRuntimeGroup> UpdateGroups;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricSignificanceBasedUpdateBucketRuntime) == 0x000008, "Wrong alignment on FFabricSignificanceBasedUpdateBucketRuntime");
static_assert(sizeof(FFabricSignificanceBasedUpdateBucketRuntime) == 0x000028, "Wrong size on FFabricSignificanceBasedUpdateBucketRuntime");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, ActualMinSignificance) == 0x000000, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::ActualMinSignificance' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, ActualMaxSignificance) == 0x000004, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::ActualMaxSignificance' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, ActualMaxObjectsInBucket) == 0x000008, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::ActualMaxObjectsInBucket' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, ActualFramesPerUpdate) == 0x00000C, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::ActualFramesPerUpdate' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, TotalObjectsInBucketCount) == 0x000010, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::TotalObjectsInBucketCount' has a wrong offset!");
static_assert(offsetof(FFabricSignificanceBasedUpdateBucketRuntime, UpdateGroups) == 0x000018, "Member 'FFabricSignificanceBasedUpdateBucketRuntime::UpdateGroups' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricStepTrackPacked
// 0x0028 (0x0028 - 0x0000)
struct FFabricStepTrackPacked final
{
public:
	TArray<int32>                                 PackedEnabledSquares;                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 PackedContinuationSquares;                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	int32                                         TrackIndex;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricStepTrackPacked) == 0x000008, "Wrong alignment on FFabricStepTrackPacked");
static_assert(sizeof(FFabricStepTrackPacked) == 0x000028, "Wrong size on FFabricStepTrackPacked");
static_assert(offsetof(FFabricStepTrackPacked, PackedEnabledSquares) == 0x000000, "Member 'FFabricStepTrackPacked::PackedEnabledSquares' has a wrong offset!");
static_assert(offsetof(FFabricStepTrackPacked, PackedContinuationSquares) == 0x000010, "Member 'FFabricStepTrackPacked::PackedContinuationSquares' has a wrong offset!");
static_assert(offsetof(FFabricStepTrackPacked, TrackIndex) == 0x000020, "Member 'FFabricStepTrackPacked::TrackIndex' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricStepPagePacked
// 0x0018 (0x0018 - 0x0000)
struct FFabricStepPagePacked final
{
public:
	TArray<struct FFabricStepTrackPacked>         PackedTracks;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	int32                                         PageNumber;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricStepPagePacked) == 0x000008, "Wrong alignment on FFabricStepPagePacked");
static_assert(sizeof(FFabricStepPagePacked) == 0x000018, "Wrong size on FFabricStepPagePacked");
static_assert(offsetof(FFabricStepPagePacked, PackedTracks) == 0x000000, "Member 'FFabricStepPagePacked::PackedTracks' has a wrong offset!");
static_assert(offsetof(FFabricStepPagePacked, PageNumber) == 0x000010, "Member 'FFabricStepPagePacked::PageNumber' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricStepTablePacked
// 0x0028 (0x0028 - 0x0000)
struct FFabricStepTablePacked final
{
public:
	TArray<struct FFabricStepPagePacked>          PackedPages;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FStepSequenceNote>              Notes;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPublic)
	int32                                         StepSkipIndex;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricStepTablePacked) == 0x000008, "Wrong alignment on FFabricStepTablePacked");
static_assert(sizeof(FFabricStepTablePacked) == 0x000028, "Wrong size on FFabricStepTablePacked");
static_assert(offsetof(FFabricStepTablePacked, PackedPages) == 0x000000, "Member 'FFabricStepTablePacked::PackedPages' has a wrong offset!");
static_assert(offsetof(FFabricStepTablePacked, Notes) == 0x000010, "Member 'FFabricStepTablePacked::Notes' has a wrong offset!");
static_assert(offsetof(FFabricStepTablePacked, StepSkipIndex) == 0x000020, "Member 'FFabricStepTablePacked::StepSkipIndex' has a wrong offset!");

// ScriptStruct FabricRuntime.FabricStepSequencerComponentBaseInstanceData
// 0x0028 (0x0090 - 0x0068)
struct FFabricStepSequencerComponentBaseInstanceData final : public FActorComponentInstanceData
{
public:
	struct FFabricStepTablePacked                 PackedStepTable;                                   // 0x0068(0x0028)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFabricStepSequencerComponentBaseInstanceData) == 0x000008, "Wrong alignment on FFabricStepSequencerComponentBaseInstanceData");
static_assert(sizeof(FFabricStepSequencerComponentBaseInstanceData) == 0x000090, "Wrong size on FFabricStepSequencerComponentBaseInstanceData");
static_assert(offsetof(FFabricStepSequencerComponentBaseInstanceData, PackedStepTable) == 0x000068, "Member 'FFabricStepSequencerComponentBaseInstanceData::PackedStepTable' has a wrong offset!");

// ScriptStruct FabricRuntime.TrackRow
// 0x0010 (0x0010 - 0x0000)
struct FTrackRow final
{
public:
	TArray<class UFabricStepSequencerGridSquareComponent*> GridSquares;                                       // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackRow) == 0x000008, "Wrong alignment on FTrackRow");
static_assert(sizeof(FTrackRow) == 0x000010, "Wrong size on FTrackRow");
static_assert(offsetof(FTrackRow, GridSquares) == 0x000000, "Member 'FTrackRow::GridSquares' has a wrong offset!");

}

