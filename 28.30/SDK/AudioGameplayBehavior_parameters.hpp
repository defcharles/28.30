#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioGameplayBehavior

#include "Basic.hpp"

#include "AudioGameplayBehavior_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AudioGameplayBehavior.AudioGameplayBehavior.BP_OnGroupSet
// 0x0008 (0x0008 - 0x0000)
struct AudioGameplayBehavior_BP_OnGroupSet final
{
public:
	class UAudioComponentGroup*                   SoundGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_BP_OnGroupSet) == 0x000008, "Wrong alignment on AudioGameplayBehavior_BP_OnGroupSet");
static_assert(sizeof(AudioGameplayBehavior_BP_OnGroupSet) == 0x000008, "Wrong size on AudioGameplayBehavior_BP_OnGroupSet");
static_assert(offsetof(AudioGameplayBehavior_BP_OnGroupSet, SoundGroup) == 0x000000, "Member 'AudioGameplayBehavior_BP_OnGroupSet::SoundGroup' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetPlayState
// 0x0001 (0x0001 - 0x0000)
struct AudioGameplayBehavior_GetPlayState final
{
public:
	EAudioGameplayBehaviorPlayState               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_GetPlayState) == 0x000001, "Wrong alignment on AudioGameplayBehavior_GetPlayState");
static_assert(sizeof(AudioGameplayBehavior_GetPlayState) == 0x000001, "Wrong size on AudioGameplayBehavior_GetPlayState");
static_assert(offsetof(AudioGameplayBehavior_GetPlayState, ReturnValue) == 0x000000, "Member 'AudioGameplayBehavior_GetPlayState::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetStopState
// 0x0001 (0x0001 - 0x0000)
struct AudioGameplayBehavior_GetStopState final
{
public:
	EAudioGameplayBehaviorPlayState               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_GetStopState) == 0x000001, "Wrong alignment on AudioGameplayBehavior_GetStopState");
static_assert(sizeof(AudioGameplayBehavior_GetStopState) == 0x000001, "Wrong size on AudioGameplayBehavior_GetStopState");
static_assert(offsetof(AudioGameplayBehavior_GetStopState, ReturnValue) == 0x000000, "Member 'AudioGameplayBehavior_GetStopState::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.PlayFrom
// 0x0008 (0x0008 - 0x0000)
struct AudioGameplayBehavior_PlayFrom final
{
public:
	class UAudioComponentGroup*                   SoundGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_PlayFrom) == 0x000008, "Wrong alignment on AudioGameplayBehavior_PlayFrom");
static_assert(sizeof(AudioGameplayBehavior_PlayFrom) == 0x000008, "Wrong size on AudioGameplayBehavior_PlayFrom");
static_assert(offsetof(AudioGameplayBehavior_PlayFrom, SoundGroup) == 0x000000, "Member 'AudioGameplayBehavior_PlayFrom::SoundGroup' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.PlaySound
// 0x0060 (0x0060 - 0x0000)
struct AudioGameplayBehavior_PlaySound final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeInTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTargetVolume;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAttenuation;                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              InFadeCurve;                                       // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InRelativeLocation;                                // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRelativeRotation;                                // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FActiveVoice                           ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_PlaySound) == 0x000008, "Wrong alignment on AudioGameplayBehavior_PlaySound");
static_assert(sizeof(AudioGameplayBehavior_PlaySound) == 0x000060, "Wrong size on AudioGameplayBehavior_PlaySound");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, sound) == 0x000000, "Member 'AudioGameplayBehavior_PlaySound::sound' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InFadeInTime) == 0x000008, "Member 'AudioGameplayBehavior_PlaySound::InFadeInTime' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InTargetVolume) == 0x00000C, "Member 'AudioGameplayBehavior_PlaySound::InTargetVolume' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InStartTime) == 0x000010, "Member 'AudioGameplayBehavior_PlaySound::InStartTime' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, bDisableAttenuation) == 0x000014, "Member 'AudioGameplayBehavior_PlaySound::bDisableAttenuation' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InFadeCurve) == 0x000015, "Member 'AudioGameplayBehavior_PlaySound::InFadeCurve' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InRelativeLocation) == 0x000018, "Member 'AudioGameplayBehavior_PlaySound::InRelativeLocation' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, InRelativeRotation) == 0x000030, "Member 'AudioGameplayBehavior_PlaySound::InRelativeRotation' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_PlaySound, ReturnValue) == 0x000048, "Member 'AudioGameplayBehavior_PlaySound::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.SetPlayState
// 0x0001 (0x0001 - 0x0000)
struct AudioGameplayBehavior_SetPlayState final
{
public:
	EAudioGameplayBehaviorPlayState               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_SetPlayState) == 0x000001, "Wrong alignment on AudioGameplayBehavior_SetPlayState");
static_assert(sizeof(AudioGameplayBehavior_SetPlayState) == 0x000001, "Wrong size on AudioGameplayBehavior_SetPlayState");
static_assert(offsetof(AudioGameplayBehavior_SetPlayState, NewState) == 0x000000, "Member 'AudioGameplayBehavior_SetPlayState::NewState' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.StopAllPlayingVoices
// 0x0004 (0x0004 - 0x0000)
struct AudioGameplayBehavior_StopAllPlayingVoices final
{
public:
	float                                         InFadeOutTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_StopAllPlayingVoices) == 0x000004, "Wrong alignment on AudioGameplayBehavior_StopAllPlayingVoices");
static_assert(sizeof(AudioGameplayBehavior_StopAllPlayingVoices) == 0x000004, "Wrong size on AudioGameplayBehavior_StopAllPlayingVoices");
static_assert(offsetof(AudioGameplayBehavior_StopAllPlayingVoices, InFadeOutTime) == 0x000000, "Member 'AudioGameplayBehavior_StopAllPlayingVoices::InFadeOutTime' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.StopById
// 0x000C (0x000C - 0x0000)
struct AudioGameplayBehavior_StopById final
{
public:
	struct FPlayingId                             ID;                                                // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InFadeOutTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              InFadeCurve;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioGameplayBehavior_StopById) == 0x000004, "Wrong alignment on AudioGameplayBehavior_StopById");
static_assert(sizeof(AudioGameplayBehavior_StopById) == 0x00000C, "Wrong size on AudioGameplayBehavior_StopById");
static_assert(offsetof(AudioGameplayBehavior_StopById, ID) == 0x000000, "Member 'AudioGameplayBehavior_StopById::ID' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopById, InFadeOutTime) == 0x000004, "Member 'AudioGameplayBehavior_StopById::InFadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopById, InFadeCurve) == 0x000008, "Member 'AudioGameplayBehavior_StopById::InFadeCurve' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.StopComponent
// 0x0010 (0x0010 - 0x0000)
struct AudioGameplayBehavior_StopComponent final
{
public:
	class UAudioComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeOutTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              InFadeCurve;                                       // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioGameplayBehavior_StopComponent) == 0x000008, "Wrong alignment on AudioGameplayBehavior_StopComponent");
static_assert(sizeof(AudioGameplayBehavior_StopComponent) == 0x000010, "Wrong size on AudioGameplayBehavior_StopComponent");
static_assert(offsetof(AudioGameplayBehavior_StopComponent, Comp) == 0x000000, "Member 'AudioGameplayBehavior_StopComponent::Comp' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopComponent, InFadeOutTime) == 0x000008, "Member 'AudioGameplayBehavior_StopComponent::InFadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopComponent, InFadeCurve) == 0x00000C, "Member 'AudioGameplayBehavior_StopComponent::InFadeCurve' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.StopSound
// 0x0010 (0x0010 - 0x0000)
struct AudioGameplayBehavior_StopSound final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeOutTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              InFadeCurve;                                       // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioGameplayBehavior_StopSound) == 0x000008, "Wrong alignment on AudioGameplayBehavior_StopSound");
static_assert(sizeof(AudioGameplayBehavior_StopSound) == 0x000010, "Wrong size on AudioGameplayBehavior_StopSound");
static_assert(offsetof(AudioGameplayBehavior_StopSound, sound) == 0x000000, "Member 'AudioGameplayBehavior_StopSound::sound' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopSound, InFadeOutTime) == 0x000008, "Member 'AudioGameplayBehavior_StopSound::InFadeOutTime' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_StopSound, InFadeCurve) == 0x00000C, "Member 'AudioGameplayBehavior_StopSound::InFadeCurve' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.SubscribeToBoolParam
// 0x0010 (0x0010 - 0x0000)
struct AudioGameplayBehavior_SubscribeToBoolParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool ParamValue)>              Delegate;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_SubscribeToBoolParam) == 0x000004, "Wrong alignment on AudioGameplayBehavior_SubscribeToBoolParam");
static_assert(sizeof(AudioGameplayBehavior_SubscribeToBoolParam) == 0x000010, "Wrong size on AudioGameplayBehavior_SubscribeToBoolParam");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToBoolParam, ParamName) == 0x000000, "Member 'AudioGameplayBehavior_SubscribeToBoolParam::ParamName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToBoolParam, Delegate) == 0x000004, "Member 'AudioGameplayBehavior_SubscribeToBoolParam::Delegate' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.SubscribeToEvent
// 0x0010 (0x0010 - 0x0000)
struct AudioGameplayBehavior_SubscribeToEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName& EventName)>       Delegate;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_SubscribeToEvent) == 0x000004, "Wrong alignment on AudioGameplayBehavior_SubscribeToEvent");
static_assert(sizeof(AudioGameplayBehavior_SubscribeToEvent) == 0x000010, "Wrong size on AudioGameplayBehavior_SubscribeToEvent");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToEvent, EventName) == 0x000000, "Member 'AudioGameplayBehavior_SubscribeToEvent::EventName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToEvent, Delegate) == 0x000004, "Member 'AudioGameplayBehavior_SubscribeToEvent::Delegate' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.SubscribeToStringParam
// 0x0010 (0x0010 - 0x0000)
struct AudioGameplayBehavior_SubscribeToStringParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Value)>   Delegate;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_SubscribeToStringParam) == 0x000004, "Wrong alignment on AudioGameplayBehavior_SubscribeToStringParam");
static_assert(sizeof(AudioGameplayBehavior_SubscribeToStringParam) == 0x000010, "Wrong size on AudioGameplayBehavior_SubscribeToStringParam");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToStringParam, ParamName) == 0x000000, "Member 'AudioGameplayBehavior_SubscribeToStringParam::ParamName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_SubscribeToStringParam, Delegate) == 0x000004, "Member 'AudioGameplayBehavior_SubscribeToStringParam::Delegate' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetBoolParamValue
// 0x0008 (0x0008 - 0x0000)
struct AudioGameplayBehavior_GetBoolParamValue final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioGameplayBehavior_GetBoolParamValue) == 0x000004, "Wrong alignment on AudioGameplayBehavior_GetBoolParamValue");
static_assert(sizeof(AudioGameplayBehavior_GetBoolParamValue) == 0x000008, "Wrong size on AudioGameplayBehavior_GetBoolParamValue");
static_assert(offsetof(AudioGameplayBehavior_GetBoolParamValue, ParamName) == 0x000000, "Member 'AudioGameplayBehavior_GetBoolParamValue::ParamName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_GetBoolParamValue, ReturnValue) == 0x000004, "Member 'AudioGameplayBehavior_GetBoolParamValue::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetFloatParamValue
// 0x0008 (0x0008 - 0x0000)
struct AudioGameplayBehavior_GetFloatParamValue final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_GetFloatParamValue) == 0x000004, "Wrong alignment on AudioGameplayBehavior_GetFloatParamValue");
static_assert(sizeof(AudioGameplayBehavior_GetFloatParamValue) == 0x000008, "Wrong size on AudioGameplayBehavior_GetFloatParamValue");
static_assert(offsetof(AudioGameplayBehavior_GetFloatParamValue, ParamName) == 0x000000, "Member 'AudioGameplayBehavior_GetFloatParamValue::ParamName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_GetFloatParamValue, ReturnValue) == 0x000004, "Member 'AudioGameplayBehavior_GetFloatParamValue::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetSoundGroup
// 0x0008 (0x0008 - 0x0000)
struct AudioGameplayBehavior_GetSoundGroup final
{
public:
	class UAudioComponentGroup*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_GetSoundGroup) == 0x000008, "Wrong alignment on AudioGameplayBehavior_GetSoundGroup");
static_assert(sizeof(AudioGameplayBehavior_GetSoundGroup) == 0x000008, "Wrong size on AudioGameplayBehavior_GetSoundGroup");
static_assert(offsetof(AudioGameplayBehavior_GetSoundGroup, ReturnValue) == 0x000000, "Member 'AudioGameplayBehavior_GetSoundGroup::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.GetStringParamValue
// 0x0018 (0x0018 - 0x0000)
struct AudioGameplayBehavior_GetStringParamValue final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_GetStringParamValue) == 0x000008, "Wrong alignment on AudioGameplayBehavior_GetStringParamValue");
static_assert(sizeof(AudioGameplayBehavior_GetStringParamValue) == 0x000018, "Wrong size on AudioGameplayBehavior_GetStringParamValue");
static_assert(offsetof(AudioGameplayBehavior_GetStringParamValue, ParamName) == 0x000000, "Member 'AudioGameplayBehavior_GetStringParamValue::ParamName' has a wrong offset!");
static_assert(offsetof(AudioGameplayBehavior_GetStringParamValue, ReturnValue) == 0x000008, "Member 'AudioGameplayBehavior_GetStringParamValue::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.IsPlayingAny
// 0x0001 (0x0001 - 0x0000)
struct AudioGameplayBehavior_IsPlayingAny final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_IsPlayingAny) == 0x000001, "Wrong alignment on AudioGameplayBehavior_IsPlayingAny");
static_assert(sizeof(AudioGameplayBehavior_IsPlayingAny) == 0x000001, "Wrong size on AudioGameplayBehavior_IsPlayingAny");
static_assert(offsetof(AudioGameplayBehavior_IsPlayingAny, ReturnValue) == 0x000000, "Member 'AudioGameplayBehavior_IsPlayingAny::ReturnValue' has a wrong offset!");

// Function AudioGameplayBehavior.AudioGameplayBehavior.IsVirtualized
// 0x0001 (0x0001 - 0x0000)
struct AudioGameplayBehavior_IsVirtualized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioGameplayBehavior_IsVirtualized) == 0x000001, "Wrong alignment on AudioGameplayBehavior_IsVirtualized");
static_assert(sizeof(AudioGameplayBehavior_IsVirtualized) == 0x000001, "Wrong size on AudioGameplayBehavior_IsVirtualized");
static_assert(offsetof(AudioGameplayBehavior_IsVirtualized, ReturnValue) == 0x000000, "Member 'AudioGameplayBehavior_IsVirtualized::ReturnValue' has a wrong offset!");

}

