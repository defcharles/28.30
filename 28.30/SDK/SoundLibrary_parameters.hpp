#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "SoundLibrary_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function SoundLibrary.SoundLibraryContext.OnAddedToActor
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryContext_OnAddedToActor final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryContext_OnAddedToActor) == 0x000008, "Wrong alignment on SoundLibraryContext_OnAddedToActor");
static_assert(sizeof(SoundLibraryContext_OnAddedToActor) == 0x000008, "Wrong size on SoundLibraryContext_OnAddedToActor");
static_assert(offsetof(SoundLibraryContext_OnAddedToActor, InActor) == 0x000000, "Member 'SoundLibraryContext_OnAddedToActor::InActor' has a wrong offset!");

// Function SoundLibrary.SoundLibraryContext.OnRemovedFromActor
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryContext_OnRemovedFromActor final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryContext_OnRemovedFromActor) == 0x000008, "Wrong alignment on SoundLibraryContext_OnRemovedFromActor");
static_assert(sizeof(SoundLibraryContext_OnRemovedFromActor) == 0x000008, "Wrong size on SoundLibraryContext_OnRemovedFromActor");
static_assert(offsetof(SoundLibraryContext_OnRemovedFromActor, InActor) == 0x000000, "Member 'SoundLibraryContext_OnRemovedFromActor::InActor' has a wrong offset!");

// Function SoundLibrary.SoundLibraryContext.Play
// 0x0050 (0x0050 - 0x0000)
struct SoundLibraryContext_Play final
{
public:
	struct FSoundLibraryContextEventInput         InEventData;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UAudioComponent*>                OutComponents;                                     // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryContext_Play) == 0x000008, "Wrong alignment on SoundLibraryContext_Play");
static_assert(sizeof(SoundLibraryContext_Play) == 0x000050, "Wrong size on SoundLibraryContext_Play");
static_assert(offsetof(SoundLibraryContext_Play, InEventData) == 0x000000, "Member 'SoundLibraryContext_Play::InEventData' has a wrong offset!");
static_assert(offsetof(SoundLibraryContext_Play, OutComponents) == 0x000038, "Member 'SoundLibraryContext_Play::OutComponents' has a wrong offset!");
static_assert(offsetof(SoundLibraryContext_Play, ReturnValue) == 0x000048, "Member 'SoundLibraryContext_Play::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryContext.CreateEventName
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryContext_CreateEventName final
{
public:
	struct FGameplayTag                           OutEventName;                                      // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryContext_CreateEventName) == 0x000004, "Wrong alignment on SoundLibraryContext_CreateEventName");
static_assert(sizeof(SoundLibraryContext_CreateEventName) == 0x000008, "Wrong size on SoundLibraryContext_CreateEventName");
static_assert(offsetof(SoundLibraryContext_CreateEventName, OutEventName) == 0x000000, "Member 'SoundLibraryContext_CreateEventName::OutEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryContext_CreateEventName, ReturnValue) == 0x000004, "Member 'SoundLibraryContext_CreateEventName::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryContext.GatherActorTargets
// 0x0018 (0x0018 - 0x0000)
struct SoundLibraryContext_GatherActorTargets final
{
public:
	TArray<class AActor*>                         OutActors;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryContext_GatherActorTargets) == 0x000008, "Wrong alignment on SoundLibraryContext_GatherActorTargets");
static_assert(sizeof(SoundLibraryContext_GatherActorTargets) == 0x000018, "Wrong size on SoundLibraryContext_GatherActorTargets");
static_assert(offsetof(SoundLibraryContext_GatherActorTargets, OutActors) == 0x000000, "Member 'SoundLibraryContext_GatherActorTargets::OutActors' has a wrong offset!");
static_assert(offsetof(SoundLibraryContext_GatherActorTargets, ReturnValue) == 0x000010, "Member 'SoundLibraryContext_GatherActorTargets::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryAnimContext.ConfigureContext
// 0x0038 (0x0038 - 0x0000)
struct SoundLibraryAnimContext_ConfigureContext final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      InAnimation;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundLibraryAnimContextSettings       InSettings;                                        // 0x0010(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryAnimContext_ConfigureContext) == 0x000008, "Wrong alignment on SoundLibraryAnimContext_ConfigureContext");
static_assert(sizeof(SoundLibraryAnimContext_ConfigureContext) == 0x000038, "Wrong size on SoundLibraryAnimContext_ConfigureContext");
static_assert(offsetof(SoundLibraryAnimContext_ConfigureContext, OwningActor) == 0x000000, "Member 'SoundLibraryAnimContext_ConfigureContext::OwningActor' has a wrong offset!");
static_assert(offsetof(SoundLibraryAnimContext_ConfigureContext, InAnimation) == 0x000008, "Member 'SoundLibraryAnimContext_ConfigureContext::InAnimation' has a wrong offset!");
static_assert(offsetof(SoundLibraryAnimContext_ConfigureContext, InSettings) == 0x000010, "Member 'SoundLibraryAnimContext_ConfigureContext::InSettings' has a wrong offset!");

// Function SoundLibrary.SoundLibrary.AddSound
// 0x0010 (0x0010 - 0x0000)
struct SoundLibrary_AddSound final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             InSound;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrary_AddSound) == 0x000008, "Wrong alignment on SoundLibrary_AddSound");
static_assert(sizeof(SoundLibrary_AddSound) == 0x000010, "Wrong size on SoundLibrary_AddSound");
static_assert(offsetof(SoundLibrary_AddSound, InTag) == 0x000000, "Member 'SoundLibrary_AddSound::InTag' has a wrong offset!");
static_assert(offsetof(SoundLibrary_AddSound, InSound) == 0x000008, "Member 'SoundLibrary_AddSound::InSound' has a wrong offset!");

// Function SoundLibrary.SoundLibrary.SetChannel
// 0x0004 (0x0004 - 0x0000)
struct SoundLibrary_SetChannel final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrary_SetChannel) == 0x000004, "Wrong alignment on SoundLibrary_SetChannel");
static_assert(sizeof(SoundLibrary_SetChannel) == 0x000004, "Wrong size on SoundLibrary_SetChannel");
static_assert(offsetof(SoundLibrary_SetChannel, InTag) == 0x000000, "Member 'SoundLibrary_SetChannel::InTag' has a wrong offset!");

// Function SoundLibrary.SoundLibrary.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct SoundLibrary_SetPriority final
{
public:
	int32                                         InPriority;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrary_SetPriority) == 0x000004, "Wrong alignment on SoundLibrary_SetPriority");
static_assert(sizeof(SoundLibrary_SetPriority) == 0x000004, "Wrong size on SoundLibrary_SetPriority");
static_assert(offsetof(SoundLibrary_SetPriority, InPriority) == 0x000000, "Member 'SoundLibrary_SetPriority::InPriority' has a wrong offset!");

// Function SoundLibrary.SoundLibrary.FindSound
// 0x0010 (0x0010 - 0x0000)
struct SoundLibrary_FindSound final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrary_FindSound) == 0x000008, "Wrong alignment on SoundLibrary_FindSound");
static_assert(sizeof(SoundLibrary_FindSound) == 0x000010, "Wrong size on SoundLibrary_FindSound");
static_assert(offsetof(SoundLibrary_FindSound, InTag) == 0x000000, "Member 'SoundLibrary_FindSound::InTag' has a wrong offset!");
static_assert(offsetof(SoundLibrary_FindSound, ReturnValue) == 0x000008, "Member 'SoundLibrary_FindSound::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.AddLibraries
// 0x0010 (0x0010 - 0x0000)
struct SoundLibraryComponent_AddLibraries final
{
public:
	TArray<class USoundLibrary*>                  InLibraries;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_AddLibraries) == 0x000008, "Wrong alignment on SoundLibraryComponent_AddLibraries");
static_assert(sizeof(SoundLibraryComponent_AddLibraries) == 0x000010, "Wrong size on SoundLibraryComponent_AddLibraries");
static_assert(offsetof(SoundLibraryComponent_AddLibraries, InLibraries) == 0x000000, "Member 'SoundLibraryComponent_AddLibraries::InLibraries' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.AddLibrary
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryComponent_AddLibrary final
{
public:
	class USoundLibrary*                          InLibrary;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_AddLibrary) == 0x000008, "Wrong alignment on SoundLibraryComponent_AddLibrary");
static_assert(sizeof(SoundLibraryComponent_AddLibrary) == 0x000008, "Wrong size on SoundLibraryComponent_AddLibrary");
static_assert(offsetof(SoundLibraryComponent_AddLibrary, InLibrary) == 0x000000, "Member 'SoundLibraryComponent_AddLibrary::InLibrary' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.IsEventActive
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryComponent_IsEventActive final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryComponent_IsEventActive) == 0x000004, "Wrong alignment on SoundLibraryComponent_IsEventActive");
static_assert(sizeof(SoundLibraryComponent_IsEventActive) == 0x000008, "Wrong size on SoundLibraryComponent_IsEventActive");
static_assert(offsetof(SoundLibraryComponent_IsEventActive, InEventName) == 0x000000, "Member 'SoundLibraryComponent_IsEventActive::InEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_IsEventActive, ReturnValue) == 0x000004, "Member 'SoundLibraryComponent_IsEventActive::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.OnEventPlayed
// 0x0004 (0x0004 - 0x0000)
struct SoundLibraryComponent_OnEventPlayed final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_OnEventPlayed) == 0x000004, "Wrong alignment on SoundLibraryComponent_OnEventPlayed");
static_assert(sizeof(SoundLibraryComponent_OnEventPlayed) == 0x000004, "Wrong size on SoundLibraryComponent_OnEventPlayed");
static_assert(offsetof(SoundLibraryComponent_OnEventPlayed, InEventName) == 0x000000, "Member 'SoundLibraryComponent_OnEventPlayed::InEventName' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.OnEventStopped
// 0x0004 (0x0004 - 0x0000)
struct SoundLibraryComponent_OnEventStopped final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_OnEventStopped) == 0x000004, "Wrong alignment on SoundLibraryComponent_OnEventStopped");
static_assert(sizeof(SoundLibraryComponent_OnEventStopped) == 0x000004, "Wrong size on SoundLibraryComponent_OnEventStopped");
static_assert(offsetof(SoundLibraryComponent_OnEventStopped, InEventName) == 0x000000, "Member 'SoundLibraryComponent_OnEventStopped::InEventName' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.OnSoundPlayed
// 0x0010 (0x0010 - 0x0000)
struct SoundLibraryComponent_OnSoundPlayed final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        InComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_OnSoundPlayed) == 0x000008, "Wrong alignment on SoundLibraryComponent_OnSoundPlayed");
static_assert(sizeof(SoundLibraryComponent_OnSoundPlayed) == 0x000010, "Wrong size on SoundLibraryComponent_OnSoundPlayed");
static_assert(offsetof(SoundLibraryComponent_OnSoundPlayed, InEventName) == 0x000000, "Member 'SoundLibraryComponent_OnSoundPlayed::InEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_OnSoundPlayed, InComponent) == 0x000008, "Member 'SoundLibraryComponent_OnSoundPlayed::InComponent' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.OnSoundStopped
// 0x0018 (0x0018 - 0x0000)
struct SoundLibraryComponent_OnSoundStopped final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        InComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopped;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryComponent_OnSoundStopped) == 0x000008, "Wrong alignment on SoundLibraryComponent_OnSoundStopped");
static_assert(sizeof(SoundLibraryComponent_OnSoundStopped) == 0x000018, "Wrong size on SoundLibraryComponent_OnSoundStopped");
static_assert(offsetof(SoundLibraryComponent_OnSoundStopped, InEventName) == 0x000000, "Member 'SoundLibraryComponent_OnSoundStopped::InEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_OnSoundStopped, InComponent) == 0x000008, "Member 'SoundLibraryComponent_OnSoundStopped::InComponent' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_OnSoundStopped, bStopped) == 0x000010, "Member 'SoundLibraryComponent_OnSoundStopped::bStopped' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.PlayEvent
// 0x0020 (0x0020 - 0x0000)
struct SoundLibraryComponent_PlayEvent final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundLibraryPlayResult                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_PlayEvent) == 0x000008, "Wrong alignment on SoundLibraryComponent_PlayEvent");
static_assert(sizeof(SoundLibraryComponent_PlayEvent) == 0x000020, "Wrong size on SoundLibraryComponent_PlayEvent");
static_assert(offsetof(SoundLibraryComponent_PlayEvent, InEventName) == 0x000000, "Member 'SoundLibraryComponent_PlayEvent::InEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_PlayEvent, ReturnValue) == 0x000008, "Member 'SoundLibraryComponent_PlayEvent::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.RemoveLibraries
// 0x0010 (0x0010 - 0x0000)
struct SoundLibraryComponent_RemoveLibraries final
{
public:
	TArray<class USoundLibrary*>                  InLibraries;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_RemoveLibraries) == 0x000008, "Wrong alignment on SoundLibraryComponent_RemoveLibraries");
static_assert(sizeof(SoundLibraryComponent_RemoveLibraries) == 0x000010, "Wrong size on SoundLibraryComponent_RemoveLibraries");
static_assert(offsetof(SoundLibraryComponent_RemoveLibraries, InLibraries) == 0x000000, "Member 'SoundLibraryComponent_RemoveLibraries::InLibraries' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.RemoveLibrary
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryComponent_RemoveLibrary final
{
public:
	class USoundLibrary*                          InLibrary;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_RemoveLibrary) == 0x000008, "Wrong alignment on SoundLibraryComponent_RemoveLibrary");
static_assert(sizeof(SoundLibraryComponent_RemoveLibrary) == 0x000008, "Wrong size on SoundLibraryComponent_RemoveLibrary");
static_assert(offsetof(SoundLibraryComponent_RemoveLibrary, InLibrary) == 0x000000, "Member 'SoundLibraryComponent_RemoveLibrary::InLibrary' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.StopEvent
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryComponent_StopEvent final
{
public:
	struct FGameplayTag                           InEventName;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibraryComponent_StopEvent) == 0x000004, "Wrong alignment on SoundLibraryComponent_StopEvent");
static_assert(sizeof(SoundLibraryComponent_StopEvent) == 0x000008, "Wrong size on SoundLibraryComponent_StopEvent");
static_assert(offsetof(SoundLibraryComponent_StopEvent, InEventName) == 0x000000, "Member 'SoundLibraryComponent_StopEvent::InEventName' has a wrong offset!");
static_assert(offsetof(SoundLibraryComponent_StopEvent, ReturnValue) == 0x000004, "Member 'SoundLibraryComponent_StopEvent::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibraryComponent.GetContext
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryComponent_GetContext final
{
public:
	class USoundLibraryContext*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryComponent_GetContext) == 0x000008, "Wrong alignment on SoundLibraryComponent_GetContext");
static_assert(sizeof(SoundLibraryComponent_GetContext) == 0x000008, "Wrong size on SoundLibraryComponent_GetContext");
static_assert(offsetof(SoundLibraryComponent_GetContext, ReturnValue) == 0x000000, "Member 'SoundLibraryComponent_GetContext::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySimpleContext.ConfigureContext
// 0x0060 (0x0060 - 0x0000)
struct SoundLibrarySimpleContext_ConfigureContext final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundLibrarySimpleContextSettings     InSettings;                                        // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySimpleContext_ConfigureContext) == 0x000008, "Wrong alignment on SoundLibrarySimpleContext_ConfigureContext");
static_assert(sizeof(SoundLibrarySimpleContext_ConfigureContext) == 0x000060, "Wrong size on SoundLibrarySimpleContext_ConfigureContext");
static_assert(offsetof(SoundLibrarySimpleContext_ConfigureContext, OwningActor) == 0x000000, "Member 'SoundLibrarySimpleContext_ConfigureContext::OwningActor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySimpleContext_ConfigureContext, InSettings) == 0x000008, "Member 'SoundLibrarySimpleContext_ConfigureContext::InSettings' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.AddContext
// 0x0018 (0x0018 - 0x0000)
struct SoundLibrarySubsystem_AddContext final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundLibraryContext>       ContextClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryContext*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_AddContext) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_AddContext");
static_assert(sizeof(SoundLibrarySubsystem_AddContext) == 0x000018, "Wrong size on SoundLibrarySubsystem_AddContext");
static_assert(offsetof(SoundLibrarySubsystem_AddContext, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_AddContext::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_AddContext, ContextClass) == 0x000008, "Member 'SoundLibrarySubsystem_AddContext::ContextClass' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_AddContext, ReturnValue) == 0x000010, "Member 'SoundLibrarySubsystem_AddContext::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.AddLibraries
// 0x0018 (0x0018 - 0x0000)
struct SoundLibrarySubsystem_AddLibraries final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundLibrary*>                  Libraries;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_AddLibraries) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_AddLibraries");
static_assert(sizeof(SoundLibrarySubsystem_AddLibraries) == 0x000018, "Wrong size on SoundLibrarySubsystem_AddLibraries");
static_assert(offsetof(SoundLibrarySubsystem_AddLibraries, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_AddLibraries::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_AddLibraries, Libraries) == 0x000008, "Member 'SoundLibrarySubsystem_AddLibraries::Libraries' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.AddLibrariesFromCollections
// 0x0028 (0x0028 - 0x0000)
struct SoundLibrarySubsystem_AddLibrariesFromCollections final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CollectionTags;                                    // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_AddLibrariesFromCollections) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_AddLibrariesFromCollections");
static_assert(sizeof(SoundLibrarySubsystem_AddLibrariesFromCollections) == 0x000028, "Wrong size on SoundLibrarySubsystem_AddLibrariesFromCollections");
static_assert(offsetof(SoundLibrarySubsystem_AddLibrariesFromCollections, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_AddLibrariesFromCollections::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_AddLibrariesFromCollections, CollectionTags) == 0x000008, "Member 'SoundLibrarySubsystem_AddLibrariesFromCollections::CollectionTags' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.AddLibrary
// 0x0010 (0x0010 - 0x0000)
struct SoundLibrarySubsystem_AddLibrary final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibrary*                          Library;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_AddLibrary) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_AddLibrary");
static_assert(sizeof(SoundLibrarySubsystem_AddLibrary) == 0x000010, "Wrong size on SoundLibrarySubsystem_AddLibrary");
static_assert(offsetof(SoundLibrarySubsystem_AddLibrary, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_AddLibrary::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_AddLibrary, Library) == 0x000008, "Member 'SoundLibrarySubsystem_AddLibrary::Library' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.DisableEventsForActor
// 0x0008 (0x0008 - 0x0000)
struct SoundLibrarySubsystem_DisableEventsForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_DisableEventsForActor) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_DisableEventsForActor");
static_assert(sizeof(SoundLibrarySubsystem_DisableEventsForActor) == 0x000008, "Wrong size on SoundLibrarySubsystem_DisableEventsForActor");
static_assert(offsetof(SoundLibrarySubsystem_DisableEventsForActor, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_DisableEventsForActor::Actor' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.EnableEventsForActor
// 0x0008 (0x0008 - 0x0000)
struct SoundLibrarySubsystem_EnableEventsForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_EnableEventsForActor) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_EnableEventsForActor");
static_assert(sizeof(SoundLibrarySubsystem_EnableEventsForActor) == 0x000008, "Wrong size on SoundLibrarySubsystem_EnableEventsForActor");
static_assert(offsetof(SoundLibrarySubsystem_EnableEventsForActor, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_EnableEventsForActor::Actor' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.GetContext
// 0x0018 (0x0018 - 0x0000)
struct SoundLibrarySubsystem_GetContext final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundLibraryContext>       ContextClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibraryContext*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_GetContext) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_GetContext");
static_assert(sizeof(SoundLibrarySubsystem_GetContext) == 0x000018, "Wrong size on SoundLibrarySubsystem_GetContext");
static_assert(offsetof(SoundLibrarySubsystem_GetContext, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_GetContext::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_GetContext, ContextClass) == 0x000008, "Member 'SoundLibrarySubsystem_GetContext::ContextClass' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_GetContext, ReturnValue) == 0x000010, "Member 'SoundLibrarySubsystem_GetContext::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.PlaySound
// 0x0020 (0x0020 - 0x0000)
struct SoundLibrarySubsystem_PlaySound final
{
public:
	class USoundLibraryContext*                   Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundLibraryPlayResult                OutResults;                                        // 0x0008(0x0018)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_PlaySound) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_PlaySound");
static_assert(sizeof(SoundLibrarySubsystem_PlaySound) == 0x000020, "Wrong size on SoundLibrarySubsystem_PlaySound");
static_assert(offsetof(SoundLibrarySubsystem_PlaySound, Context) == 0x000000, "Member 'SoundLibrarySubsystem_PlaySound::Context' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_PlaySound, OutResults) == 0x000008, "Member 'SoundLibrarySubsystem_PlaySound::OutResults' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.PlaySoundSimple
// 0x0078 (0x0078 - 0x0000)
struct SoundLibrarySubsystem_PlaySoundSimple final
{
public:
	class AActor*                                 OwningActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundLibrarySimpleContextSettings     InSettings;                                        // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSoundLibraryPlayResult                ReturnValue;                                       // 0x0060(0x0018)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_PlaySoundSimple) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_PlaySoundSimple");
static_assert(sizeof(SoundLibrarySubsystem_PlaySoundSimple) == 0x000078, "Wrong size on SoundLibrarySubsystem_PlaySoundSimple");
static_assert(offsetof(SoundLibrarySubsystem_PlaySoundSimple, OwningActor) == 0x000000, "Member 'SoundLibrarySubsystem_PlaySoundSimple::OwningActor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_PlaySoundSimple, InSettings) == 0x000008, "Member 'SoundLibrarySubsystem_PlaySoundSimple::InSettings' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_PlaySoundSimple, ReturnValue) == 0x000060, "Member 'SoundLibrarySubsystem_PlaySoundSimple::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.RemoveContext
// 0x0018 (0x0018 - 0x0000)
struct SoundLibrarySubsystem_RemoveContext final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundLibraryContext>       ContextClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundLibrarySubsystem_RemoveContext) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_RemoveContext");
static_assert(sizeof(SoundLibrarySubsystem_RemoveContext) == 0x000018, "Wrong size on SoundLibrarySubsystem_RemoveContext");
static_assert(offsetof(SoundLibrarySubsystem_RemoveContext, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_RemoveContext::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_RemoveContext, ContextClass) == 0x000008, "Member 'SoundLibrarySubsystem_RemoveContext::ContextClass' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_RemoveContext, ReturnValue) == 0x000010, "Member 'SoundLibrarySubsystem_RemoveContext::ReturnValue' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibraries
// 0x0018 (0x0018 - 0x0000)
struct SoundLibrarySubsystem_RemoveLibraries final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundLibrary*>                  Libraries;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_RemoveLibraries) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_RemoveLibraries");
static_assert(sizeof(SoundLibrarySubsystem_RemoveLibraries) == 0x000018, "Wrong size on SoundLibrarySubsystem_RemoveLibraries");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibraries, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_RemoveLibraries::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibraries, Libraries) == 0x000008, "Member 'SoundLibrarySubsystem_RemoveLibraries::Libraries' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrariesFromCollections
// 0x0028 (0x0028 - 0x0000)
struct SoundLibrarySubsystem_RemoveLibrariesFromCollections final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CollectionTags;                                    // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_RemoveLibrariesFromCollections) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_RemoveLibrariesFromCollections");
static_assert(sizeof(SoundLibrarySubsystem_RemoveLibrariesFromCollections) == 0x000028, "Wrong size on SoundLibrarySubsystem_RemoveLibrariesFromCollections");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibrariesFromCollections, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_RemoveLibrariesFromCollections::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibrariesFromCollections, CollectionTags) == 0x000008, "Member 'SoundLibrarySubsystem_RemoveLibrariesFromCollections::CollectionTags' has a wrong offset!");

// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrary
// 0x0010 (0x0010 - 0x0000)
struct SoundLibrarySubsystem_RemoveLibrary final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundLibrary*                          Library;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibrarySubsystem_RemoveLibrary) == 0x000008, "Wrong alignment on SoundLibrarySubsystem_RemoveLibrary");
static_assert(sizeof(SoundLibrarySubsystem_RemoveLibrary) == 0x000010, "Wrong size on SoundLibrarySubsystem_RemoveLibrary");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibrary, Actor) == 0x000000, "Member 'SoundLibrarySubsystem_RemoveLibrary::Actor' has a wrong offset!");
static_assert(offsetof(SoundLibrarySubsystem_RemoveLibrary, Library) == 0x000008, "Member 'SoundLibrarySubsystem_RemoveLibrary::Library' has a wrong offset!");

// Function SoundLibrary.SoundLibraryTagHelperFunctions.MakeSoundLibraryTag
// 0x0008 (0x0008 - 0x0000)
struct SoundLibraryTagHelperFunctions_MakeSoundLibraryTag final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundLibraryTag                       ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundLibraryTagHelperFunctions_MakeSoundLibraryTag) == 0x000004, "Wrong alignment on SoundLibraryTagHelperFunctions_MakeSoundLibraryTag");
static_assert(sizeof(SoundLibraryTagHelperFunctions_MakeSoundLibraryTag) == 0x000008, "Wrong size on SoundLibraryTagHelperFunctions_MakeSoundLibraryTag");
static_assert(offsetof(SoundLibraryTagHelperFunctions_MakeSoundLibraryTag, tag) == 0x000000, "Member 'SoundLibraryTagHelperFunctions_MakeSoundLibraryTag::tag' has a wrong offset!");
static_assert(offsetof(SoundLibraryTagHelperFunctions_MakeSoundLibraryTag, ReturnValue) == 0x000004, "Member 'SoundLibraryTagHelperFunctions_MakeSoundLibraryTag::ReturnValue' has a wrong offset!");

}

