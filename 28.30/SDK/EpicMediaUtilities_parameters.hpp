#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function EpicMediaUtilities.EpicMediaServerTime.ClientReportServerTime
// 0x0010 (0x0010 - 0x0000)
struct EpicMediaServerTime_ClientReportServerTime final
{
public:
	double                                        requestUtcTime;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        serverUtcTime;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMediaServerTime_ClientReportServerTime) == 0x000008, "Wrong alignment on EpicMediaServerTime_ClientReportServerTime");
static_assert(sizeof(EpicMediaServerTime_ClientReportServerTime) == 0x000010, "Wrong size on EpicMediaServerTime_ClientReportServerTime");
static_assert(offsetof(EpicMediaServerTime_ClientReportServerTime, requestUtcTime) == 0x000000, "Member 'EpicMediaServerTime_ClientReportServerTime::requestUtcTime' has a wrong offset!");
static_assert(offsetof(EpicMediaServerTime_ClientReportServerTime, serverUtcTime) == 0x000008, "Member 'EpicMediaServerTime_ClientReportServerTime::serverUtcTime' has a wrong offset!");

// Function EpicMediaUtilities.EpicMediaServerTime.ServerRequestServerTime
// 0x0008 (0x0008 - 0x0000)
struct EpicMediaServerTime_ServerRequestServerTime final
{
public:
	double                                        requestUtcTime;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicMediaServerTime_ServerRequestServerTime) == 0x000008, "Wrong alignment on EpicMediaServerTime_ServerRequestServerTime");
static_assert(sizeof(EpicMediaServerTime_ServerRequestServerTime) == 0x000008, "Wrong size on EpicMediaServerTime_ServerRequestServerTime");
static_assert(offsetof(EpicMediaServerTime_ServerRequestServerTime, requestUtcTime) == 0x000000, "Member 'EpicMediaServerTime_ServerRequestServerTime::requestUtcTime' has a wrong offset!");

// Function EpicMediaUtilities.EpicMediaServerTime.GetTimeUtc
// 0x0010 (0x0010 - 0x0000)
struct EpicMediaServerTime_GetTimeUtc final
{
public:
	struct FDateTime                              OutDateTime;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicMediaServerTime_GetTimeUtc) == 0x000008, "Wrong alignment on EpicMediaServerTime_GetTimeUtc");
static_assert(sizeof(EpicMediaServerTime_GetTimeUtc) == 0x000010, "Wrong size on EpicMediaServerTime_GetTimeUtc");
static_assert(offsetof(EpicMediaServerTime_GetTimeUtc, OutDateTime) == 0x000000, "Member 'EpicMediaServerTime_GetTimeUtc::OutDateTime' has a wrong offset!");
static_assert(offsetof(EpicMediaServerTime_GetTimeUtc, ReturnValue) == 0x000008, "Member 'EpicMediaServerTime_GetTimeUtc::ReturnValue' has a wrong offset!");

}

