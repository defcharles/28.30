#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimQuickplayRuntime

#include "Basic.hpp"

#include "SparksCoreRuntime_structs.hpp"
#include "SparksCameraDirectorRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "PilgrimQuickplayRuntime_structs.hpp"
#include "PilgrimQPSharedRuntime_structs.hpp"
#include "PilgrimCoreRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PilgrimQuickplayRuntime.PilgrimGreenRoomLayoutSwitcher.OnLayoutChanged
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged final
{
public:
	int32                                         NewLayout;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged) == 0x000004, "Wrong alignment on PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged");
static_assert(sizeof(PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged) == 0x000004, "Wrong size on PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged");
static_assert(offsetof(PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged, NewLayout) == 0x000000, "Member 'PilgrimGreenRoomLayoutSwitcher_OnLayoutChanged::NewLayout' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimGreenRoomLayoutSwitcher.SetLayout
// 0x0004 (0x0004 - 0x0000)
struct PilgrimGreenRoomLayoutSwitcher_SetLayout final
{
public:
	int32                                         NewLayout;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimGreenRoomLayoutSwitcher_SetLayout) == 0x000004, "Wrong alignment on PilgrimGreenRoomLayoutSwitcher_SetLayout");
static_assert(sizeof(PilgrimGreenRoomLayoutSwitcher_SetLayout) == 0x000004, "Wrong size on PilgrimGreenRoomLayoutSwitcher_SetLayout");
static_assert(offsetof(PilgrimGreenRoomLayoutSwitcher_SetLayout, NewLayout) == 0x000000, "Member 'PilgrimGreenRoomLayoutSwitcher_SetLayout::NewLayout' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPawnComponent.SetInteractionEffectsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPawnComponent_SetInteractionEffectsEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPawnComponent_SetInteractionEffectsEnabled) == 0x000001, "Wrong alignment on PilgrimPawnComponent_SetInteractionEffectsEnabled");
static_assert(sizeof(PilgrimPawnComponent_SetInteractionEffectsEnabled) == 0x000001, "Wrong size on PilgrimPawnComponent_SetInteractionEffectsEnabled");
static_assert(offsetof(PilgrimPawnComponent_SetInteractionEffectsEnabled, bEnable) == 0x000000, "Member 'PilgrimPawnComponent_SetInteractionEffectsEnabled::bEnable' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPawnComponent.GetInteractionEffectsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPawnComponent_GetInteractionEffectsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPawnComponent_GetInteractionEffectsEnabled) == 0x000001, "Wrong alignment on PilgrimPawnComponent_GetInteractionEffectsEnabled");
static_assert(sizeof(PilgrimPawnComponent_GetInteractionEffectsEnabled) == 0x000001, "Wrong size on PilgrimPawnComponent_GetInteractionEffectsEnabled");
static_assert(offsetof(PilgrimPawnComponent_GetInteractionEffectsEnabled, ReturnValue) == 0x000000, "Member 'PilgrimPawnComponent_GetInteractionEffectsEnabled::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.EnqueueSpotlightMontages
// 0x0002 (0x0002 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages final
{
public:
	ESparksInstrumentType                         InstrumentType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages) == 0x000001, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages) == 0x000002, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages, InstrumentType) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages::InstrumentType' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages, ReturnValue) == 0x000001, "Member 'PilgrimPlayspaceComponent_IntroDirector_EnqueueSpotlightMontages::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.HasSpotlightMontageLoadFinished
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished) == 0x000004, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished) == 0x000008, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished, PlayerIndex) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished::PlayerIndex' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished, ReturnValue) == 0x000004, "Member 'PilgrimPlayspaceComponent_IntroDirector_HasSpotlightMontageLoadFinished::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.OnSpotlightMontageLoaded
// 0x0010 (0x0010 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LoadedMontage;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded) == 0x000008, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded) == 0x000010, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded, PlayerIndex) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded::PlayerIndex' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded, LoadedMontage) == 0x000008, "Member 'PilgrimPlayspaceComponent_IntroDirector_OnSpotlightMontageLoaded::LoadedMontage' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.RequestNextMontageForInstrument
// 0x0018 (0x0018 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument final
{
public:
	ESparksInstrumentType                         InstrumentType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument) == 0x000008, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument) == 0x000018, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument, InstrumentType) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument::InstrumentType' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument, PlayerPawn) == 0x000008, "Member 'PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument::PlayerPawn' has a wrong offset!");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument, PlayerIndex) == 0x000010, "Member 'PilgrimPlayspaceComponent_IntroDirector_RequestNextMontageForInstrument::PlayerIndex' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.EnableFloatingPawnFix
// 0x0001 (0x0001 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix) == 0x000001, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix) == 0x000001, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix, ReturnValue) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_EnableFloatingPawnFix::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.GetFloatingPawnFixIntervalSeconds
// 0x0004 (0x0004 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds) == 0x000004, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds) == 0x000004, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds, ReturnValue) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_GetFloatingPawnFixIntervalSeconds::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector.StartPlayerIntro
// 0x0008 (0x0008 - 0x0000)
struct PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro) == 0x000008, "Wrong alignment on PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro");
static_assert(sizeof(PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro) == 0x000008, "Wrong size on PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro");
static_assert(offsetof(PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro, PlayerState) == 0x000000, "Member 'PilgrimPlayspaceComponent_IntroDirector_StartPlayerIntro::PlayerState' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetBandState
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetBandState final
{
public:
	class AActor*                                 ContextActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimQuickplayBandStateComponent*    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetBandState) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetBandState");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetBandState) == 0x000010, "Wrong size on PilgrimQuickplayBandStateComponent_GetBandState");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetBandState, ContextActor) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetBandState::ContextActor' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetBandState, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayBandStateComponent_GetBandState::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.OnRep_CurrentSetlistIndex
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex final
{
public:
	int32                                         PrevSetlistIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex) == 0x000004, "Wrong alignment on PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex) == 0x000004, "Wrong size on PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex, PrevSetlistIndex) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_OnRep_CurrentSetlistIndex::PrevSetlistIndex' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.OnRep_SetlistVoteWinner
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner final
{
public:
	class UPilgrimPremadeSetlist*                 PrevSetlist;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner) == 0x000008, "Wrong size on PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner, PrevSetlist) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_OnRep_SetlistVoteWinner::PrevSetlist' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.AreAllPlayersReady
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayBandStateComponent_AreAllPlayersReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_AreAllPlayersReady) == 0x000001, "Wrong alignment on PilgrimQuickplayBandStateComponent_AreAllPlayersReady");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_AreAllPlayersReady) == 0x000001, "Wrong size on PilgrimQuickplayBandStateComponent_AreAllPlayersReady");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_AreAllPlayersReady, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_AreAllPlayersReady::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetCurrentSetlist
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetCurrentSetlist final
{
public:
	TScriptInterface<class IPilgrimSetlistInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetCurrentSetlist) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetCurrentSetlist");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetCurrentSetlist) == 0x000010, "Wrong size on PilgrimQuickplayBandStateComponent_GetCurrentSetlist");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetCurrentSetlist, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetCurrentSetlist::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetCurrentSetlistIndex
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex) == 0x000004, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex) == 0x000004, "Wrong size on PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetCurrentSetlistIndex::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetCurrentSetlistLength
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength) == 0x000004, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength) == 0x000004, "Wrong size on PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetCurrentSetlistLength::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetPlayersInBand
// 0x0018 (0x0018 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetPlayersInBand final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetPlayersInBand) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetPlayersInBand");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetPlayersInBand) == 0x000018, "Wrong size on PilgrimQuickplayBandStateComponent_GetPlayersInBand");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetPlayersInBand, Team) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetPlayersInBand::Team' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetPlayersInBand, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayBandStateComponent_GetPlayersInBand::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetPlayersInBandByController
// 0x0018 (0x0018 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetPlayersInBandByController final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetPlayersInBandByController) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetPlayersInBandByController");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetPlayersInBandByController) == 0x000018, "Wrong size on PilgrimQuickplayBandStateComponent_GetPlayersInBandByController");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetPlayersInBandByController, Controller) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetPlayersInBandByController::Controller' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetPlayersInBandByController, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayBandStateComponent_GetPlayersInBandByController::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetSetlistVoteWinner
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner final
{
public:
	class UPilgrimPremadeSetlist*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner) == 0x000008, "Wrong size on PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetSetlistVoteWinner::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetVoteCountForSetlist
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist final
{
public:
	class UPilgrimPremadeSetlist*                 Setlist;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist) == 0x000010, "Wrong size on PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist, Setlist) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist::Setlist' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayBandStateComponent_GetVoteCountForSetlist::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.GetVotersForSetlist
// 0x0018 (0x0018 - 0x0000)
struct PilgrimQuickplayBandStateComponent_GetVotersForSetlist final
{
public:
	class UPilgrimPremadeSetlist*                 Setlist;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_GetVotersForSetlist) == 0x000008, "Wrong alignment on PilgrimQuickplayBandStateComponent_GetVotersForSetlist");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_GetVotersForSetlist) == 0x000018, "Wrong size on PilgrimQuickplayBandStateComponent_GetVotersForSetlist");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetVotersForSetlist, Setlist) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_GetVotersForSetlist::Setlist' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_GetVotersForSetlist, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayBandStateComponent_GetVotersForSetlist::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent.IsReplayingPreviousSong
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong) == 0x000001, "Wrong alignment on PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong");
static_assert(sizeof(PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong) == 0x000001, "Wrong size on PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong");
static_assert(offsetof(PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayBandStateComponent_IsReplayingPreviousSong::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayEmoteBPFL.GetEmoteActionBinding
// 0x0030 (0x0030 - 0x0000)
struct PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding final
{
public:
	class FString                                 EmoteTemplateID;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmoteActionBinding                    OutCreatedEmote;                                   // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding) == 0x000008, "Wrong alignment on PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding");
static_assert(sizeof(PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding) == 0x000030, "Wrong size on PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding");
static_assert(offsetof(PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding, EmoteTemplateID) == 0x000000, "Member 'PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding::EmoteTemplateID' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding, OutCreatedEmote) == 0x000010, "Member 'PilgrimQuickplayEmoteBPFL_GetEmoteActionBinding::OutCreatedEmote' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetPilgrimQuickplayPlayerStateComponent
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimQuickplayPlayerStateComponent*  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent) == 0x000010, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent, PlayerState) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_GetPilgrimQuickplayPlayerStateComponent::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetSongVote
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetSongVote final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetSongVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetSongVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetSongVote) == 0x000010, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetSongVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSongVote, PlayerState) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetSongVote::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSongVote, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_GetSongVote::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.BroadcastEvent_SongResultDataChanged
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged) == 0x000004, "Wrong size on PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged, SetlistIndex) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_BroadcastEvent_SongResultDataChanged::SetlistIndex' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.ClientMatchRecorded
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoloMatch;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded, SetlistIndex) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded, bIsSoloMatch) == 0x000004, "Member 'PilgrimQuickplayPlayerStateComponent_ClientMatchRecorded::bIsSoloMatch' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.MulticastBroadcastNewHighscore
// 0x000C (0x000C - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaScore;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimPersonalBestType                      BestType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore) == 0x00000C, "Wrong size on PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore, TotalScore) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore::TotalScore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore, DeltaScore) == 0x000004, "Member 'PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore::DeltaScore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore, BestType) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_MulticastBroadcastNewHighscore::BestType' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.OnRep_SetlistVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote final
{
public:
	class UPilgrimPremadeSetlist*                 PrevSetlistVote;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote, PrevSetlistVote) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_OnRep_SetlistVote::PrevSetlistVote' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.OnRep_SongVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_OnRep_SongVote final
{
public:
	class UPilgrimSongMetadata*                   PrevSongVote;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_OnRep_SongVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_OnRep_SongVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_OnRep_SongVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_OnRep_SongVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_OnRep_SongVote, PrevSongVote) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_OnRep_SongVote::PrevSongVote' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SendHighscoreToServer
// 0x01A0 (0x01A0 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer final
{
public:
	struct FPilgrimPersonalBestResult             Highscore;                                         // 0x0000(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0198(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoaded;                                           // 0x019C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer) == 0x0001A0, "Wrong size on PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer, Highscore) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer::Highscore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer, SetlistIndex) == 0x000198, "Member 'PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer, bLoaded) == 0x00019C, "Member 'PilgrimQuickplayPlayerStateComponent_SendHighscoreToServer::bLoaded' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SendToClientsPerformanceData
// 0x0050 (0x0050 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplayPlayerPerformanceData NewPerformanceData;                                // 0x0008(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData) == 0x000050, "Wrong size on PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData, SetlistIndex) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData, NewPerformanceData) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_SendToClientsPerformanceData::NewPerformanceData' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SendToClientsSongResultData
// 0x0078 (0x0078 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplaySongResultData        NewPerformanceData;                                // 0x0008(0x0070)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData) == 0x000078, "Wrong size on PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData, SetlistIndex) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData, NewPerformanceData) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_SendToClientsSongResultData::NewPerformanceData' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SendToServerAllIntrosFinished
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished final
{
public:
	class UPilgrimQuickplayState_Intro*           IntroState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished, IntroState) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SendToServerAllIntrosFinished::IntroState' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SendToServerPerformanceData
// 0x0048 (0x0048 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData final
{
public:
	struct FPilgrimQuickplayPlayerPerformanceData NewPerformanceData;                                // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData) == 0x000048, "Wrong size on PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData, NewPerformanceData) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SendToServerPerformanceData::NewPerformanceData' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.ServerSetHighscore
// 0x0098 (0x0098 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_ServerSetHighscore final
{
public:
	struct FPilgrimPersonalBestResultRpl          Highscore;                                         // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoaded;                                           // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_ServerSetHighscore) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_ServerSetHighscore");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_ServerSetHighscore) == 0x000098, "Wrong size on PilgrimQuickplayPlayerStateComponent_ServerSetHighscore");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_ServerSetHighscore, Highscore) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_ServerSetHighscore::Highscore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_ServerSetHighscore, SetlistIndex) == 0x000090, "Member 'PilgrimQuickplayPlayerStateComponent_ServerSetHighscore::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_ServerSetHighscore, bLoaded) == 0x000094, "Member 'PilgrimQuickplayPlayerStateComponent_ServerSetHighscore::bLoaded' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetCloseupCameraTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime final
{
public:
	float                                         TotalTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime) == 0x000004, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime, TotalTime) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetCloseupCameraTime::TotalTime' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetHighscore
// 0x0098 (0x0098 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetHighscore final
{
public:
	struct FPilgrimPersonalBestResultRpl          Highscore;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoaded;                                           // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetHighscore) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetHighscore");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetHighscore) == 0x000098, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetHighscore");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetHighscore, Highscore) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetHighscore::Highscore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetHighscore, SetlistIndex) == 0x000090, "Member 'PilgrimQuickplayPlayerStateComponent_SetHighscore::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetHighscore, bLoaded) == 0x000094, "Member 'PilgrimQuickplayPlayerStateComponent_SetHighscore::bLoaded' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetPerformanceData
// 0x0048 (0x0048 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetPerformanceData final
{
public:
	struct FPilgrimQuickplayPlayerPerformanceData NewPerformanceData;                                // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetPerformanceData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetPerformanceData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetPerformanceData) == 0x000048, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetPerformanceData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetPerformanceData, NewPerformanceData) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetPerformanceData::NewPerformanceData' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetReachedNewHighscore
// 0x000C (0x000C - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaScore;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimPersonalBestType                      BestType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore) == 0x00000C, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore, TotalScore) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore::TotalScore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore, DeltaScore) == 0x000004, "Member 'PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore::DeltaScore' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore, BestType) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_SetReachedNewHighscore::BestType' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetSetlistVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetSetlistVote final
{
public:
	class UPilgrimPremadeSetlist*                 PlayerChosenSetlist;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetSetlistVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetSetlistVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetSetlistVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetSetlistVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetSetlistVote, PlayerChosenSetlist) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetSetlistVote::PlayerChosenSetlist' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetSongResultData
// 0x0070 (0x0070 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetSongResultData final
{
public:
	struct FPilgrimQuickplaySongResultData        NewSongResultData;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetSongResultData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetSongResultData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetSongResultData) == 0x000070, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetSongResultData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetSongResultData, NewSongResultData) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetSongResultData::NewSongResultData' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.SetSongVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_SetSongVote final
{
public:
	class UPilgrimSongMetadata*                   PlayerChosenSong;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_SetSongVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_SetSongVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_SetSongVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_SetSongVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_SetSongVote, PlayerChosenSong) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_SetSongVote::PlayerChosenSong' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetBandState
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetBandState final
{
public:
	class UPilgrimQuickplayBandStateComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetBandState) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetBandState");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetBandState) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetBandState");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetBandState, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetBandState::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetCloseupCameraTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime) == 0x000004, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetCloseupCameraTime::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetCurrentSetlistVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote final
{
public:
	class UPilgrimPremadeSetlist*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetCurrentSetlistVote::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetCurrentSongVote
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote final
{
public:
	class UPilgrimSongMetadata*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetCurrentSongVote::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetHighscoreResult
// 0x0098 (0x0098 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetHighscoreResult final
{
public:
	struct FPilgrimPersonalBestResultRpl          OutResult;                                         // 0x0000(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoaded;                                           // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0095(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetHighscoreResult");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult) == 0x000098, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetHighscoreResult");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult, OutResult) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetHighscoreResult::OutResult' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult, SetlistIndex) == 0x000090, "Member 'PilgrimQuickplayPlayerStateComponent_GetHighscoreResult::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult, bLoaded) == 0x000094, "Member 'PilgrimQuickplayPlayerStateComponent_GetHighscoreResult::bLoaded' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetHighscoreResult, ReturnValue) == 0x000095, "Member 'PilgrimQuickplayPlayerStateComponent_GetHighscoreResult::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetMainStateMachine
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetMainStateMachine final
{
public:
	class UGameplayStateMachine*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetMainStateMachine) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetMainStateMachine");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetMainStateMachine) == 0x000008, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetMainStateMachine");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetMainStateMachine, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetMainStateMachine::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetPerformanceData
// 0x0048 (0x0048 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetPerformanceData final
{
public:
	struct FPilgrimQuickplayPlayerPerformanceData ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetPerformanceData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetPerformanceData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetPerformanceData) == 0x000048, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetPerformanceData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetPerformanceData, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetPerformanceData::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetReachedNewHighscore
// 0x000C (0x000C - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore final
{
public:
	EPilgrimPersonalBestType                      BestType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetlistIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore) == 0x00000C, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore, BestType) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore::BestType' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore, SetlistIndex) == 0x000004, "Member 'PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_GetReachedNewHighscore::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetSetlistResultDataByIndex
// 0x00C8 (0x00C8 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex final
{
public:
	int32                                         SetlistIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplaySetlistResultData     ReturnValue;                                       // 0x0008(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex) == 0x0000C8, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex, SetlistIndex) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex::SetlistIndex' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex, ReturnValue) == 0x000008, "Member 'PilgrimQuickplayPlayerStateComponent_GetSetlistResultDataByIndex::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetSetlistResultProxies
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies final
{
public:
	TArray<class UPilgrimQuickplaySetlistResultProxyInstance*> SetlistProxy;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies) == 0x000010, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies, SetlistProxy) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetSetlistResultProxies::SetlistProxy' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent.GetSongResultData
// 0x0070 (0x0070 - 0x0000)
struct PilgrimQuickplayPlayerStateComponent_GetSongResultData final
{
public:
	struct FPilgrimQuickplaySongResultData        ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayerStateComponent_GetSongResultData) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayerStateComponent_GetSongResultData");
static_assert(sizeof(PilgrimQuickplayPlayerStateComponent_GetSongResultData) == 0x000070, "Wrong size on PilgrimQuickplayPlayerStateComponent_GetSongResultData");
static_assert(offsetof(PilgrimQuickplayPlayerStateComponent_GetSongResultData, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayerStateComponent_GetSongResultData::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.HandleDirectorResetEvent
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayPlayspace_HandleDirectorResetEvent final
{
public:
	struct FSparksCommonResetCameraDirectorEvent  Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_HandleDirectorResetEvent) == 0x000001, "Wrong alignment on PilgrimQuickplayPlayspace_HandleDirectorResetEvent");
static_assert(sizeof(PilgrimQuickplayPlayspace_HandleDirectorResetEvent) == 0x000001, "Wrong size on PilgrimQuickplayPlayspace_HandleDirectorResetEvent");
static_assert(offsetof(PilgrimQuickplayPlayspace_HandleDirectorResetEvent, Payload) == 0x000000, "Member 'PilgrimQuickplayPlayspace_HandleDirectorResetEvent::Payload' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.HandleDirectorStartEvent
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayPlayspace_HandleDirectorStartEvent final
{
public:
	struct FSparksCommonStartCameraDirectorEvent  Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_HandleDirectorStartEvent) == 0x000001, "Wrong alignment on PilgrimQuickplayPlayspace_HandleDirectorStartEvent");
static_assert(sizeof(PilgrimQuickplayPlayspace_HandleDirectorStartEvent) == 0x000001, "Wrong size on PilgrimQuickplayPlayspace_HandleDirectorStartEvent");
static_assert(offsetof(PilgrimQuickplayPlayspace_HandleDirectorStartEvent, Payload) == 0x000000, "Member 'PilgrimQuickplayPlayspace_HandleDirectorStartEvent::Payload' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.HandleDirectorStopEvent
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayPlayspace_HandleDirectorStopEvent final
{
public:
	struct FSparksCommonStopCameraDirectorEvent   Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_HandleDirectorStopEvent) == 0x000001, "Wrong alignment on PilgrimQuickplayPlayspace_HandleDirectorStopEvent");
static_assert(sizeof(PilgrimQuickplayPlayspace_HandleDirectorStopEvent) == 0x000001, "Wrong size on PilgrimQuickplayPlayspace_HandleDirectorStopEvent");
static_assert(offsetof(PilgrimQuickplayPlayspace_HandleDirectorStopEvent, Payload) == 0x000000, "Member 'PilgrimQuickplayPlayspace_HandleDirectorStopEvent::Payload' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.GetActivePilgrimQuickplayState
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState final
{
public:
	class UPilgrimQuickplayStateBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState");
static_assert(sizeof(PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState) == 0x000008, "Wrong size on PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState");
static_assert(offsetof(PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayspace_GetActivePilgrimQuickplayState::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.GetActivePilgrimStateId
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayPlayspace_GetActivePilgrimStateId final
{
public:
	EPilgrimQuickplayState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_GetActivePilgrimStateId) == 0x000001, "Wrong alignment on PilgrimQuickplayPlayspace_GetActivePilgrimStateId");
static_assert(sizeof(PilgrimQuickplayPlayspace_GetActivePilgrimStateId) == 0x000001, "Wrong size on PilgrimQuickplayPlayspace_GetActivePilgrimStateId");
static_assert(offsetof(PilgrimQuickplayPlayspace_GetActivePilgrimStateId, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayspace_GetActivePilgrimStateId::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.GetIsSinglePlayerGame
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayPlayspace_GetIsSinglePlayerGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_GetIsSinglePlayerGame) == 0x000001, "Wrong alignment on PilgrimQuickplayPlayspace_GetIsSinglePlayerGame");
static_assert(sizeof(PilgrimQuickplayPlayspace_GetIsSinglePlayerGame) == 0x000001, "Wrong size on PilgrimQuickplayPlayspace_GetIsSinglePlayerGame");
static_assert(offsetof(PilgrimQuickplayPlayspace_GetIsSinglePlayerGame, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayspace_GetIsSinglePlayerGame::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace.GetPilgrimQuickplayStateMachine
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine final
{
public:
	class UPilgrimQuickplayStateMachine*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine) == 0x000008, "Wrong alignment on PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine");
static_assert(sizeof(PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine) == 0x000008, "Wrong size on PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine");
static_assert(offsetof(PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayPlayspace_GetPilgrimQuickplayStateMachine::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayPlayspaceComponent_PlayerManager.BP_OnAppResumed
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed final
{
public:
	float                                         ElapsedTimeSeconds;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed) == 0x000004, "Wrong alignment on PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed");
static_assert(sizeof(PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed) == 0x000004, "Wrong size on PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed");
static_assert(offsetof(PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed, ElapsedTimeSeconds) == 0x000000, "Member 'PilgrimQuickplayPlayspaceComponent_PlayerManager_BP_OnAppResumed::ElapsedTimeSeconds' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBase.MarkStateDone
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayStateBase_MarkStateDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBase_MarkStateDone) == 0x000001, "Wrong alignment on PilgrimQuickplayStateBase_MarkStateDone");
static_assert(sizeof(PilgrimQuickplayStateBase_MarkStateDone) == 0x000001, "Wrong size on PilgrimQuickplayStateBase_MarkStateDone");
static_assert(offsetof(PilgrimQuickplayStateBase_MarkStateDone, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateBase_MarkStateDone::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBase.GetEventRouter
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateBase_GetEventRouter final
{
public:
	class UGameplayEventRouterComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBase_GetEventRouter) == 0x000008, "Wrong alignment on PilgrimQuickplayStateBase_GetEventRouter");
static_assert(sizeof(PilgrimQuickplayStateBase_GetEventRouter) == 0x000008, "Wrong size on PilgrimQuickplayStateBase_GetEventRouter");
static_assert(offsetof(PilgrimQuickplayStateBase_GetEventRouter, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateBase_GetEventRouter::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBase.GetPilgrimPlayspace
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateBase_GetPilgrimPlayspace final
{
public:
	class APilgrimQuickplayPlayspace*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBase_GetPilgrimPlayspace) == 0x000008, "Wrong alignment on PilgrimQuickplayStateBase_GetPilgrimPlayspace");
static_assert(sizeof(PilgrimQuickplayStateBase_GetPilgrimPlayspace) == 0x000008, "Wrong size on PilgrimQuickplayStateBase_GetPilgrimPlayspace");
static_assert(offsetof(PilgrimQuickplayStateBase_GetPilgrimPlayspace, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateBase_GetPilgrimPlayspace::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBase.GetPilgrimStateId
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayStateBase_GetPilgrimStateId final
{
public:
	EPilgrimQuickplayState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBase_GetPilgrimStateId) == 0x000001, "Wrong alignment on PilgrimQuickplayStateBase_GetPilgrimStateId");
static_assert(sizeof(PilgrimQuickplayStateBase_GetPilgrimStateId) == 0x000001, "Wrong size on PilgrimQuickplayStateBase_GetPilgrimStateId");
static_assert(offsetof(PilgrimQuickplayStateBase_GetPilgrimStateId, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateBase_GetPilgrimStateId::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBase.GetPilgrimStateMachine
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateBase_GetPilgrimStateMachine final
{
public:
	class UPilgrimQuickplayStateMachine*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBase_GetPilgrimStateMachine) == 0x000008, "Wrong alignment on PilgrimQuickplayStateBase_GetPilgrimStateMachine");
static_assert(sizeof(PilgrimQuickplayStateBase_GetPilgrimStateMachine) == 0x000008, "Wrong size on PilgrimQuickplayStateBase_GetPilgrimStateMachine");
static_assert(offsetof(PilgrimQuickplayStateBase_GetPilgrimStateMachine, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateBase_GetPilgrimStateMachine::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBPFL.GetPilgrimState
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateBPFL_GetPilgrimState final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimQuickplayState                        ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayStateBPFL_GetPilgrimState) == 0x000004, "Wrong alignment on PilgrimQuickplayStateBPFL_GetPilgrimState");
static_assert(sizeof(PilgrimQuickplayStateBPFL_GetPilgrimState) == 0x000008, "Wrong size on PilgrimQuickplayStateBPFL_GetPilgrimState");
static_assert(offsetof(PilgrimQuickplayStateBPFL_GetPilgrimState, tag) == 0x000000, "Member 'PilgrimQuickplayStateBPFL_GetPilgrimState::tag' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayStateBPFL_GetPilgrimState, ReturnValue) == 0x000004, "Member 'PilgrimQuickplayStateBPFL_GetPilgrimState::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateBPFL.GetStateTag
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateBPFL_GetStateTag final
{
public:
	EPilgrimQuickplayState                        State;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateBPFL_GetStateTag) == 0x000004, "Wrong alignment on PilgrimQuickplayStateBPFL_GetStateTag");
static_assert(sizeof(PilgrimQuickplayStateBPFL_GetStateTag) == 0x000008, "Wrong size on PilgrimQuickplayStateBPFL_GetStateTag");
static_assert(offsetof(PilgrimQuickplayStateBPFL_GetStateTag, State) == 0x000000, "Member 'PilgrimQuickplayStateBPFL_GetStateTag::State' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayStateBPFL_GetStateTag, ReturnValue) == 0x000004, "Member 'PilgrimQuickplayStateBPFL_GetStateTag::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.CleanUpStageForPlayer
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateMachine_CleanUpStageForPlayer final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_CleanUpStageForPlayer) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_CleanUpStageForPlayer");
static_assert(sizeof(PilgrimQuickplayStateMachine_CleanUpStageForPlayer) == 0x000008, "Wrong size on PilgrimQuickplayStateMachine_CleanUpStageForPlayer");
static_assert(offsetof(PilgrimQuickplayStateMachine_CleanUpStageForPlayer, Pawn) == 0x000000, "Member 'PilgrimQuickplayStateMachine_CleanUpStageForPlayer::Pawn' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.GetPlayerPawnsInPlayspace
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace final
{
public:
	TArray<class AFortPlayerPawn*>                PlayerPawns;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace");
static_assert(sizeof(PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace) == 0x000010, "Wrong size on PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace");
static_assert(offsetof(PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace, PlayerPawns) == 0x000000, "Member 'PilgrimQuickplayStateMachine_GetPlayerPawnsInPlayspace::PlayerPawns' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.PrepareStageForPlayer
// 0x0038 (0x0038 - 0x0000)
struct PilgrimQuickplayStateMachine_PrepareStageForPlayer final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportLocation;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TeleportRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_PrepareStageForPlayer) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_PrepareStageForPlayer");
static_assert(sizeof(PilgrimQuickplayStateMachine_PrepareStageForPlayer) == 0x000038, "Wrong size on PilgrimQuickplayStateMachine_PrepareStageForPlayer");
static_assert(offsetof(PilgrimQuickplayStateMachine_PrepareStageForPlayer, Pawn) == 0x000000, "Member 'PilgrimQuickplayStateMachine_PrepareStageForPlayer::Pawn' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayStateMachine_PrepareStageForPlayer, TeleportLocation) == 0x000008, "Member 'PilgrimQuickplayStateMachine_PrepareStageForPlayer::TeleportLocation' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayStateMachine_PrepareStageForPlayer, TeleportRotation) == 0x000020, "Member 'PilgrimQuickplayStateMachine_PrepareStageForPlayer::TeleportRotation' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.TeleportAllPlayers
// 0x0020 (0x0020 - 0x0000)
struct PilgrimQuickplayStateMachine_TeleportAllPlayers final
{
public:
	struct FGameplayTagContainer                  TeleportTagRequirements;                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_TeleportAllPlayers) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_TeleportAllPlayers");
static_assert(sizeof(PilgrimQuickplayStateMachine_TeleportAllPlayers) == 0x000020, "Wrong size on PilgrimQuickplayStateMachine_TeleportAllPlayers");
static_assert(offsetof(PilgrimQuickplayStateMachine_TeleportAllPlayers, TeleportTagRequirements) == 0x000000, "Member 'PilgrimQuickplayStateMachine_TeleportAllPlayers::TeleportTagRequirements' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.GetActivePilgrimStateId
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayStateMachine_GetActivePilgrimStateId final
{
public:
	EPilgrimQuickplayState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_GetActivePilgrimStateId) == 0x000001, "Wrong alignment on PilgrimQuickplayStateMachine_GetActivePilgrimStateId");
static_assert(sizeof(PilgrimQuickplayStateMachine_GetActivePilgrimStateId) == 0x000001, "Wrong size on PilgrimQuickplayStateMachine_GetActivePilgrimStateId");
static_assert(offsetof(PilgrimQuickplayStateMachine_GetActivePilgrimStateId, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateMachine_GetActivePilgrimStateId::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.GetActivePilgrimStateObject
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateMachine_GetActivePilgrimStateObject final
{
public:
	class UPilgrimQuickplayStateBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_GetActivePilgrimStateObject) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_GetActivePilgrimStateObject");
static_assert(sizeof(PilgrimQuickplayStateMachine_GetActivePilgrimStateObject) == 0x000008, "Wrong size on PilgrimQuickplayStateMachine_GetActivePilgrimStateObject");
static_assert(offsetof(PilgrimQuickplayStateMachine_GetActivePilgrimStateObject, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateMachine_GetActivePilgrimStateObject::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.GetDailyQuests
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayStateMachine_GetDailyQuests final
{
public:
	TArray<class UFortQuestItemDefinition*>       OutDailyQuests;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_GetDailyQuests) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_GetDailyQuests");
static_assert(sizeof(PilgrimQuickplayStateMachine_GetDailyQuests) == 0x000010, "Wrong size on PilgrimQuickplayStateMachine_GetDailyQuests");
static_assert(offsetof(PilgrimQuickplayStateMachine_GetDailyQuests, OutDailyQuests) == 0x000000, "Member 'PilgrimQuickplayStateMachine_GetDailyQuests::OutDailyQuests' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine.GetEventRouter
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplayStateMachine_GetEventRouter final
{
public:
	class UGameplayEventRouterComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayStateMachine_GetEventRouter) == 0x000008, "Wrong alignment on PilgrimQuickplayStateMachine_GetEventRouter");
static_assert(sizeof(PilgrimQuickplayStateMachine_GetEventRouter) == 0x000008, "Wrong size on PilgrimQuickplayStateMachine_GetEventRouter");
static_assert(offsetof(PilgrimQuickplayStateMachine_GetEventRouter, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayStateMachine_GetEventRouter::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_Intro.UpdateCameraWaitTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayState_Intro_UpdateCameraWaitTime final
{
public:
	float                                         NewWaitTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_Intro_UpdateCameraWaitTime) == 0x000004, "Wrong alignment on PilgrimQuickplayState_Intro_UpdateCameraWaitTime");
static_assert(sizeof(PilgrimQuickplayState_Intro_UpdateCameraWaitTime) == 0x000004, "Wrong size on PilgrimQuickplayState_Intro_UpdateCameraWaitTime");
static_assert(offsetof(PilgrimQuickplayState_Intro_UpdateCameraWaitTime, NewWaitTime) == 0x000000, "Member 'PilgrimQuickplayState_Intro_UpdateCameraWaitTime::NewWaitTime' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongGameplay.OnMusicBattleFinished
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished final
{
public:
	EMusicBattleEndReason                         EndReason;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished) == 0x000001, "Wrong alignment on PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished");
static_assert(sizeof(PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished) == 0x000001, "Wrong size on PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished");
static_assert(offsetof(PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished, EndReason) == 0x000000, "Member 'PilgrimQuickplayState_SongGameplay_OnMusicBattleFinished::EndReason' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongGameplay.OnMusicBattleStoppedEarly
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly final
{
public:
	EMusicBattleEndReason                         EndReason;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly) == 0x000001, "Wrong alignment on PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly");
static_assert(sizeof(PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly) == 0x000001, "Wrong size on PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly");
static_assert(offsetof(PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly, EndReason) == 0x000000, "Member 'PilgrimQuickplayState_SongGameplay_OnMusicBattleStoppedEarly::EndReason' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongGameplay.GetPilgrimMusicBattleInstances
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances final
{
public:
	TArray<class APilgrimMusicBattleInstance*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances) == 0x000008, "Wrong alignment on PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances");
static_assert(sizeof(PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances) == 0x000010, "Wrong size on PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances");
static_assert(offsetof(PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances, ReturnValue) == 0x000000, "Member 'PilgrimQuickplayState_SongGameplay_GetPilgrimMusicBattleInstances::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongResults.ClientUpdateStateEndTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime final
{
public:
	float                                         ServerWorldEndTimeSeconds;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime) == 0x000004, "Wrong alignment on PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime");
static_assert(sizeof(PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime) == 0x000004, "Wrong size on PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime");
static_assert(offsetof(PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime, ServerWorldEndTimeSeconds) == 0x000000, "Member 'PilgrimQuickplayState_SongResults_ClientUpdateStateEndTime::ServerWorldEndTimeSeconds' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongResults.OnPlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayState_SongResults_OnPlayerDisconnected final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisconnected;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayState_SongResults_OnPlayerDisconnected) == 0x000008, "Wrong alignment on PilgrimQuickplayState_SongResults_OnPlayerDisconnected");
static_assert(sizeof(PilgrimQuickplayState_SongResults_OnPlayerDisconnected) == 0x000010, "Wrong size on PilgrimQuickplayState_SongResults_OnPlayerDisconnected");
static_assert(offsetof(PilgrimQuickplayState_SongResults_OnPlayerDisconnected, PlayerState) == 0x000000, "Member 'PilgrimQuickplayState_SongResults_OnPlayerDisconnected::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayState_SongResults_OnPlayerDisconnected, bIsDisconnected) == 0x000008, "Member 'PilgrimQuickplayState_SongResults_OnPlayerDisconnected::bIsDisconnected' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongResults.ServerRecievedPlayPreviousSongFromClient
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient final
{
public:
	class UPilgrimPlayerControllerComponent*      ControllerComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimStateMachineMessage                   StateMachineMessage;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient) == 0x000008, "Wrong alignment on PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient");
static_assert(sizeof(PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient) == 0x000010, "Wrong size on PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient");
static_assert(offsetof(PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient, ControllerComponent) == 0x000000, "Member 'PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient::ControllerComponent' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient, StateMachineMessage) == 0x000008, "Member 'PilgrimQuickplayState_SongResults_ServerRecievedPlayPreviousSongFromClient::StateMachineMessage' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplayState_SongResults.ServerSetEndTime
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplayState_SongResults_ServerSetEndTime final
{
public:
	float                                         ServerWorldEndTimeSeconds;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayState_SongResults_ServerSetEndTime) == 0x000004, "Wrong alignment on PilgrimQuickplayState_SongResults_ServerSetEndTime");
static_assert(sizeof(PilgrimQuickplayState_SongResults_ServerSetEndTime) == 0x000004, "Wrong size on PilgrimQuickplayState_SongResults_ServerSetEndTime");
static_assert(offsetof(PilgrimQuickplayState_SongResults_ServerSetEndTime, ServerWorldEndTimeSeconds) == 0x000000, "Member 'PilgrimQuickplayState_SongResults_ServerSetEndTime::ServerWorldEndTimeSeconds' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplaySuspendHandleComponent.ServerOnTimedInputReceived
// 0x0018 (0x0018 - 0x0000)
struct PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived final
{
public:
	class UPilgrimPlayerControllerComponent*      PilgrimPC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimTimedInput                     TimedInput;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived) == 0x000008, "Wrong alignment on PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived");
static_assert(sizeof(PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived) == 0x000018, "Wrong size on PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived");
static_assert(offsetof(PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived, PilgrimPC) == 0x000000, "Member 'PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived::PilgrimPC' has a wrong offset!");
static_assert(offsetof(PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived, TimedInput) == 0x000008, "Member 'PilgrimQuickplaySuspendHandleComponent_ServerOnTimedInputReceived::TimedInput' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimQuickplaySuspendHandleComponent.ServerSyncHeartbeatMessageReceived
// 0x0008 (0x0008 - 0x0000)
struct PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived final
{
public:
	class UPilgrimPlayerControllerComponent*      PilgrimPC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived) == 0x000008, "Wrong alignment on PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived");
static_assert(sizeof(PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived) == 0x000008, "Wrong size on PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived");
static_assert(offsetof(PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived, PilgrimPC) == 0x000000, "Member 'PilgrimQuickplaySuspendHandleComponent_ServerSyncHeartbeatMessageReceived::PilgrimPC' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinDirector.SetupListeners
// 0x0008 (0x0008 - 0x0000)
struct PilgrimStandinDirector_SetupListeners final
{
public:
	class UGameplayEventRouterComponent*          EventRouter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinDirector_SetupListeners) == 0x000008, "Wrong alignment on PilgrimStandinDirector_SetupListeners");
static_assert(sizeof(PilgrimStandinDirector_SetupListeners) == 0x000008, "Wrong size on PilgrimStandinDirector_SetupListeners");
static_assert(offsetof(PilgrimStandinDirector_SetupListeners, EventRouter) == 0x000000, "Member 'PilgrimStandinDirector_SetupListeners::EventRouter' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinDirector.TeleportSpawnedStandins
// 0x0010 (0x0010 - 0x0000)
struct PilgrimStandinDirector_TeleportSpawnedStandins final
{
public:
	TArray<class AFortPlayerStart*>               Destinations;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinDirector_TeleportSpawnedStandins) == 0x000008, "Wrong alignment on PilgrimStandinDirector_TeleportSpawnedStandins");
static_assert(sizeof(PilgrimStandinDirector_TeleportSpawnedStandins) == 0x000010, "Wrong size on PilgrimStandinDirector_TeleportSpawnedStandins");
static_assert(offsetof(PilgrimStandinDirector_TeleportSpawnedStandins, Destinations) == 0x000000, "Member 'PilgrimStandinDirector_TeleportSpawnedStandins::Destinations' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinDirector.GetStandinPawns
// 0x0010 (0x0010 - 0x0000)
struct PilgrimStandinDirector_GetStandinPawns final
{
public:
	TArray<class AFortPlayerPawnAthena*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinDirector_GetStandinPawns) == 0x000008, "Wrong alignment on PilgrimStandinDirector_GetStandinPawns");
static_assert(sizeof(PilgrimStandinDirector_GetStandinPawns) == 0x000010, "Wrong size on PilgrimStandinDirector_GetStandinPawns");
static_assert(offsetof(PilgrimStandinDirector_GetStandinPawns, ReturnValue) == 0x000000, "Member 'PilgrimStandinDirector_GetStandinPawns::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinDirector.GetStandinStates
// 0x0010 (0x0010 - 0x0000)
struct PilgrimStandinDirector_GetStandinStates final
{
public:
	TArray<class AFortPlayerStateAthena*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinDirector_GetStandinStates) == 0x000008, "Wrong alignment on PilgrimStandinDirector_GetStandinStates");
static_assert(sizeof(PilgrimStandinDirector_GetStandinStates) == 0x000010, "Wrong size on PilgrimStandinDirector_GetStandinStates");
static_assert(offsetof(PilgrimStandinDirector_GetStandinStates, ReturnValue) == 0x000000, "Member 'PilgrimStandinDirector_GetStandinStates::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinPawnComponent.SetupListeners
// 0x0008 (0x0008 - 0x0000)
struct PilgrimStandinPawnComponent_SetupListeners final
{
public:
	class UGameplayEventRouterComponent*          EventRouter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinPawnComponent_SetupListeners) == 0x000008, "Wrong alignment on PilgrimStandinPawnComponent_SetupListeners");
static_assert(sizeof(PilgrimStandinPawnComponent_SetupListeners) == 0x000008, "Wrong size on PilgrimStandinPawnComponent_SetupListeners");
static_assert(offsetof(PilgrimStandinPawnComponent_SetupListeners, EventRouter) == 0x000000, "Member 'PilgrimStandinPawnComponent_SetupListeners::EventRouter' has a wrong offset!");

// Function PilgrimQuickplayRuntime.PilgrimStandinPawnComponent.StartInstrumentAnimation
// 0x0010 (0x0010 - 0x0000)
struct PilgrimStandinPawnComponent_StartInstrumentAnimation final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASparksMusicPlayspace*                  Playspace;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimStandinPawnComponent_StartInstrumentAnimation) == 0x000008, "Wrong alignment on PilgrimStandinPawnComponent_StartInstrumentAnimation");
static_assert(sizeof(PilgrimStandinPawnComponent_StartInstrumentAnimation) == 0x000010, "Wrong size on PilgrimStandinPawnComponent_StartInstrumentAnimation");
static_assert(offsetof(PilgrimStandinPawnComponent_StartInstrumentAnimation, PlayerState) == 0x000000, "Member 'PilgrimStandinPawnComponent_StartInstrumentAnimation::PlayerState' has a wrong offset!");
static_assert(offsetof(PilgrimStandinPawnComponent_StartInstrumentAnimation, Playspace) == 0x000008, "Member 'PilgrimStandinPawnComponent_StartInstrumentAnimation::Playspace' has a wrong offset!");

}

