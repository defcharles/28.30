#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsControl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum PhysicsControl.EResetToCachedTargetBehavior
// NumValues: 0x0002
enum class EResetToCachedTargetBehavior : uint8
{
	ResetImmediately                         = 0,
	ResetDuringUpdateControls                = 1,
};

// Enum PhysicsControl.EPhysicsMovementType
// NumValues: 0x0003
enum class EPhysicsMovementType : uint8
{
	Static                                   = 0,
	Kinematic                                = 1,
	Simulated                                = 2,
};

// Enum PhysicsControl.EPhysicsControlType
// NumValues: 0x0002
enum class EPhysicsControlType : uint8
{
	WorldSpace                               = 0,
	ParentSpace                              = 1,
};

// ScriptStruct PhysicsControl.RigidBodyWithControlReference
// 0x0000 (0x0010 - 0x0010)
struct FRigidBodyWithControlReference final : public FAnimNodeReference
{
};
static_assert(alignof(FRigidBodyWithControlReference) == 0x000008, "Wrong alignment on FRigidBodyWithControlReference");
static_assert(sizeof(FRigidBodyWithControlReference) == 0x000010, "Wrong size on FRigidBodyWithControlReference");

// ScriptStruct PhysicsControl.PhysicsControlSetUpdate
// 0x0018 (0x0018 - 0x0000)
struct FPhysicsControlSetUpdate final
{
public:
	class FName                                   SetName;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Names;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlSetUpdate) == 0x000008, "Wrong alignment on FPhysicsControlSetUpdate");
static_assert(sizeof(FPhysicsControlSetUpdate) == 0x000018, "Wrong size on FPhysicsControlSetUpdate");
static_assert(offsetof(FPhysicsControlSetUpdate, SetName) == 0x000000, "Member 'FPhysicsControlSetUpdate::SetName' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSetUpdate, Names) == 0x000008, "Member 'FPhysicsControlSetUpdate::Names' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSetUpdates
// 0x0020 (0x0020 - 0x0000)
struct FPhysicsControlSetUpdates final
{
public:
	TArray<struct FPhysicsControlSetUpdate>       ControlSetUpdates;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlSetUpdate>       ModifierSetUpdates;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlSetUpdates) == 0x000008, "Wrong alignment on FPhysicsControlSetUpdates");
static_assert(sizeof(FPhysicsControlSetUpdates) == 0x000020, "Wrong size on FPhysicsControlSetUpdates");
static_assert(offsetof(FPhysicsControlSetUpdates, ControlSetUpdates) == 0x000000, "Member 'FPhysicsControlSetUpdates::ControlSetUpdates' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSetUpdates, ModifierSetUpdates) == 0x000010, "Member 'FPhysicsControlSetUpdates::ModifierSetUpdates' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlModifierSparseData
// 0x000C (0x000C - 0x0000)
struct FPhysicsControlModifierSparseData final
{
public:
	EPhysicsMovementType                          MovementType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableMovementType : 1;                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGravityMultiplier : 1;                      // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlModifierSparseData) == 0x000004, "Wrong alignment on FPhysicsControlModifierSparseData");
static_assert(sizeof(FPhysicsControlModifierSparseData) == 0x00000C, "Wrong size on FPhysicsControlModifierSparseData");
static_assert(offsetof(FPhysicsControlModifierSparseData, MovementType) == 0x000000, "Member 'FPhysicsControlModifierSparseData::MovementType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierSparseData, GravityMultiplier) == 0x000004, "Member 'FPhysicsControlModifierSparseData::GravityMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlModifierData
// 0x0008 (0x0008 - 0x0000)
struct FPhysicsControlModifierData final
{
public:
	EPhysicsMovementType                          MovementType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlModifierData) == 0x000004, "Wrong alignment on FPhysicsControlModifierData");
static_assert(sizeof(FPhysicsControlModifierData) == 0x000008, "Wrong size on FPhysicsControlModifierData");
static_assert(offsetof(FPhysicsControlModifierData, MovementType) == 0x000000, "Member 'FPhysicsControlModifierData::MovementType' has a wrong offset!");
static_assert(offsetof(FPhysicsControlModifierData, GravityMultiplier) == 0x000004, "Member 'FPhysicsControlModifierData::GravityMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSparseData
// 0x002C (0x002C - 0x0000)
struct FPhysicsControlSparseData final
{
public:
	float                                         LinearStrength;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingRatio;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearExtraDamping;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrength;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatio;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDamping;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetVelocityMultiplier;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTargetVelocityMultiplier;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearStrength : 1;                         // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearDampingRatio : 1;                     // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearExtraDamping : 1;                     // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxForce : 1;                               // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularStrength : 1;                        // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularDampingRatio : 1;                    // 0x0028(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularExtraDamping : 1;                    // 0x0028(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMaxTorque : 1;                              // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableLinearTargetVelocityMultiplier : 1;         // 0x0029(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableAngularTargetVelocityMultiplier : 1;        // 0x0029(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnablebEnabled : 1;                               // 0x0029(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlSparseData) == 0x000004, "Wrong alignment on FPhysicsControlSparseData");
static_assert(sizeof(FPhysicsControlSparseData) == 0x00002C, "Wrong size on FPhysicsControlSparseData");
static_assert(offsetof(FPhysicsControlSparseData, LinearStrength) == 0x000000, "Member 'FPhysicsControlSparseData::LinearStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearDampingRatio) == 0x000004, "Member 'FPhysicsControlSparseData::LinearDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearExtraDamping) == 0x000008, "Member 'FPhysicsControlSparseData::LinearExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, MaxForce) == 0x00000C, "Member 'FPhysicsControlSparseData::MaxForce' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularStrength) == 0x000010, "Member 'FPhysicsControlSparseData::AngularStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularDampingRatio) == 0x000014, "Member 'FPhysicsControlSparseData::AngularDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularExtraDamping) == 0x000018, "Member 'FPhysicsControlSparseData::AngularExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, MaxTorque) == 0x00001C, "Member 'FPhysicsControlSparseData::MaxTorque' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, LinearTargetVelocityMultiplier) == 0x000020, "Member 'FPhysicsControlSparseData::LinearTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSparseData, AngularTargetVelocityMultiplier) == 0x000024, "Member 'FPhysicsControlSparseData::AngularTargetVelocityMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlData
// 0x002C (0x002C - 0x0000)
struct FPhysicsControlData final
{
public:
	float                                         LinearStrength;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingRatio;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearExtraDamping;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrength;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatio;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDamping;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetVelocityMultiplier;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularTargetVelocityMultiplier;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlData) == 0x000004, "Wrong alignment on FPhysicsControlData");
static_assert(sizeof(FPhysicsControlData) == 0x00002C, "Wrong size on FPhysicsControlData");
static_assert(offsetof(FPhysicsControlData, LinearStrength) == 0x000000, "Member 'FPhysicsControlData::LinearStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearDampingRatio) == 0x000004, "Member 'FPhysicsControlData::LinearDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearExtraDamping) == 0x000008, "Member 'FPhysicsControlData::LinearExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, MaxForce) == 0x00000C, "Member 'FPhysicsControlData::MaxForce' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularStrength) == 0x000010, "Member 'FPhysicsControlData::AngularStrength' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularDampingRatio) == 0x000014, "Member 'FPhysicsControlData::AngularDampingRatio' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularExtraDamping) == 0x000018, "Member 'FPhysicsControlData::AngularExtraDamping' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, MaxTorque) == 0x00001C, "Member 'FPhysicsControlData::MaxTorque' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, LinearTargetVelocityMultiplier) == 0x000020, "Member 'FPhysicsControlData::LinearTargetVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlData, AngularTargetVelocityMultiplier) == 0x000024, "Member 'FPhysicsControlData::AngularTargetVelocityMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlMultiplier
// 0x0070 (0x0070 - 0x0000)
struct FPhysicsControlMultiplier final
{
public:
	struct FVector                                LinearStrengthMultiplier;                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearDampingRatioMultiplier;                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearExtraDampingMultiplier;                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxForceMultiplier;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStrengthMultiplier;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingRatioMultiplier;                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularExtraDampingMultiplier;                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorqueMultiplier;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlMultiplier) == 0x000008, "Wrong alignment on FPhysicsControlMultiplier");
static_assert(sizeof(FPhysicsControlMultiplier) == 0x000070, "Wrong size on FPhysicsControlMultiplier");
static_assert(offsetof(FPhysicsControlMultiplier, LinearStrengthMultiplier) == 0x000000, "Member 'FPhysicsControlMultiplier::LinearStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, LinearDampingRatioMultiplier) == 0x000018, "Member 'FPhysicsControlMultiplier::LinearDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, LinearExtraDampingMultiplier) == 0x000030, "Member 'FPhysicsControlMultiplier::LinearExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, MaxForceMultiplier) == 0x000048, "Member 'FPhysicsControlMultiplier::MaxForceMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularStrengthMultiplier) == 0x000060, "Member 'FPhysicsControlMultiplier::AngularStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularDampingRatioMultiplier) == 0x000064, "Member 'FPhysicsControlMultiplier::AngularDampingRatioMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, AngularExtraDampingMultiplier) == 0x000068, "Member 'FPhysicsControlMultiplier::AngularExtraDampingMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlMultiplier, MaxTorqueMultiplier) == 0x00006C, "Member 'FPhysicsControlMultiplier::MaxTorqueMultiplier' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlTarget
// 0x0068 (0x0068 - 0x0000)
struct FPhysicsControlTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetVelocity;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetAngularVelocity;                             // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyControlPointToTarget;                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlTarget) == 0x000008, "Wrong alignment on FPhysicsControlTarget");
static_assert(sizeof(FPhysicsControlTarget) == 0x000068, "Wrong size on FPhysicsControlTarget");
static_assert(offsetof(FPhysicsControlTarget, TargetPosition) == 0x000000, "Member 'FPhysicsControlTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetVelocity) == 0x000018, "Member 'FPhysicsControlTarget::TargetVelocity' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetOrientation) == 0x000030, "Member 'FPhysicsControlTarget::TargetOrientation' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, TargetAngularVelocity) == 0x000048, "Member 'FPhysicsControlTarget::TargetAngularVelocity' has a wrong offset!");
static_assert(offsetof(FPhysicsControlTarget, bApplyControlPointToTarget) == 0x000060, "Member 'FPhysicsControlTarget::bApplyControlPointToTarget' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlSettings
// 0x0028 (0x0028 - 0x0000)
struct FPhysicsControlSettings final
{
public:
	struct FVector                                ControlPoint;                                      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkeletalAnimationVelocityMultiplier;               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCollision;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyControlChildObject;                           // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlSettings) == 0x000008, "Wrong alignment on FPhysicsControlSettings");
static_assert(sizeof(FPhysicsControlSettings) == 0x000028, "Wrong size on FPhysicsControlSettings");
static_assert(offsetof(FPhysicsControlSettings, ControlPoint) == 0x000000, "Member 'FPhysicsControlSettings::ControlPoint' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSettings, bUseSkeletalAnimation) == 0x000018, "Member 'FPhysicsControlSettings::bUseSkeletalAnimation' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSettings, SkeletalAnimationVelocityMultiplier) == 0x00001C, "Member 'FPhysicsControlSettings::SkeletalAnimationVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSettings, bDisableCollision) == 0x000020, "Member 'FPhysicsControlSettings::bDisableCollision' has a wrong offset!");
static_assert(offsetof(FPhysicsControlSettings, bOnlyControlChildObject) == 0x000021, "Member 'FPhysicsControlSettings::bOnlyControlChildObject' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControl
// 0x0148 (0x0148 - 0x0000)
struct FPhysicsControl final
{
public:
	class UMeshComponent*                         ParentMeshComponent;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         ChildMeshComponent;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x001C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0048(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x00B8(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlSettings                ControlSettings;                                   // 0x0120(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControl) == 0x000008, "Wrong alignment on FPhysicsControl");
static_assert(sizeof(FPhysicsControl) == 0x000148, "Wrong size on FPhysicsControl");
static_assert(offsetof(FPhysicsControl, ParentMeshComponent) == 0x000000, "Member 'FPhysicsControl::ParentMeshComponent' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ParentBoneName) == 0x000008, "Member 'FPhysicsControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ChildMeshComponent) == 0x000010, "Member 'FPhysicsControl::ChildMeshComponent' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ChildBoneName) == 0x000018, "Member 'FPhysicsControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlData) == 0x00001C, "Member 'FPhysicsControl::ControlData' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlMultiplier) == 0x000048, "Member 'FPhysicsControl::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlTarget) == 0x0000B8, "Member 'FPhysicsControl::ControlTarget' has a wrong offset!");
static_assert(offsetof(FPhysicsControl, ControlSettings) == 0x000120, "Member 'FPhysicsControl::ControlSettings' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlLimbSetupData
// 0x000C (0x000C - 0x0000)
struct FPhysicsControlLimbSetupData final
{
public:
	class FName                                   LimbName;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIncludeParentBone : 1;                            // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateWorldSpaceControls : 1;                     // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateParentSpaceControls : 1;                    // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreateBodyModifiers : 1;                          // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlLimbSetupData) == 0x000004, "Wrong alignment on FPhysicsControlLimbSetupData");
static_assert(sizeof(FPhysicsControlLimbSetupData) == 0x00000C, "Wrong size on FPhysicsControlLimbSetupData");
static_assert(offsetof(FPhysicsControlLimbSetupData, LimbName) == 0x000000, "Member 'FPhysicsControlLimbSetupData::LimbName' has a wrong offset!");
static_assert(offsetof(FPhysicsControlLimbSetupData, StartBone) == 0x000004, "Member 'FPhysicsControlLimbSetupData::StartBone' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlLimbBones
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPhysicsControlLimbBones final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsControlLimbBones) == 0x000008, "Wrong alignment on FPhysicsControlLimbBones");
static_assert(sizeof(FPhysicsControlLimbBones) == 0x000020, "Wrong size on FPhysicsControlLimbBones");

// ScriptStruct PhysicsControl.PhysicsControlNames
// 0x0010 (0x0010 - 0x0000)
struct FPhysicsControlNames final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNames) == 0x000008, "Wrong alignment on FPhysicsControlNames");
static_assert(sizeof(FPhysicsControlNames) == 0x000010, "Wrong size on FPhysicsControlNames");
static_assert(offsetof(FPhysicsControlNames, Names) == 0x000000, "Member 'FPhysicsControlNames::Names' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodySetupData
// 0x0070 (0x0070 - 0x0000)
struct FRigidBodySetupData final
{
public:
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    DefaultWorldSpaceControlData;                      // 0x0010(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    DefaultParentSpaceControlData;                     // 0x003C(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            DefaultBodyModifierData;                           // 0x0068(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodySetupData) == 0x000008, "Wrong alignment on FRigidBodySetupData");
static_assert(sizeof(FRigidBodySetupData) == 0x000070, "Wrong size on FRigidBodySetupData");
static_assert(offsetof(FRigidBodySetupData, LimbSetupData) == 0x000000, "Member 'FRigidBodySetupData::LimbSetupData' has a wrong offset!");
static_assert(offsetof(FRigidBodySetupData, DefaultWorldSpaceControlData) == 0x000010, "Member 'FRigidBodySetupData::DefaultWorldSpaceControlData' has a wrong offset!");
static_assert(offsetof(FRigidBodySetupData, DefaultParentSpaceControlData) == 0x00003C, "Member 'FRigidBodySetupData::DefaultParentSpaceControlData' has a wrong offset!");
static_assert(offsetof(FRigidBodySetupData, DefaultBodyModifierData) == 0x000068, "Member 'FRigidBodySetupData::DefaultBodyModifierData' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControl
// 0x0034 (0x0034 - 0x0000)
struct FRigidBodyControl final
{
public:
	class FName                                   ParentBoneName;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0008(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControl) == 0x000004, "Wrong alignment on FRigidBodyControl");
static_assert(sizeof(FRigidBodyControl) == 0x000034, "Wrong size on FRigidBodyControl");
static_assert(offsetof(FRigidBodyControl, ParentBoneName) == 0x000000, "Member 'FRigidBodyControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FRigidBodyControl, ChildBoneName) == 0x000004, "Member 'FRigidBodyControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(FRigidBodyControl, ControlData) == 0x000008, "Member 'FRigidBodyControl::ControlData' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlCreation
// 0x0048 (0x0048 - 0x0000)
struct FRigidBodyControlCreation final
{
public:
	struct FRigidBodyControl                      Control;                                           // 0x0000(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Sets;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControlCreation) == 0x000008, "Wrong alignment on FRigidBodyControlCreation");
static_assert(sizeof(FRigidBodyControlCreation) == 0x000048, "Wrong size on FRigidBodyControlCreation");
static_assert(offsetof(FRigidBodyControlCreation, Control) == 0x000000, "Member 'FRigidBodyControlCreation::Control' has a wrong offset!");
static_assert(offsetof(FRigidBodyControlCreation, Sets) == 0x000038, "Member 'FRigidBodyControlCreation::Sets' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyModifier
// 0x0020 (0x0020 - 0x0000)
struct FRigidBodyModifier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierData            ModifierData;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Sets;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyModifier) == 0x000008, "Wrong alignment on FRigidBodyModifier");
static_assert(sizeof(FRigidBodyModifier) == 0x000020, "Wrong size on FRigidBodyModifier");
static_assert(offsetof(FRigidBodyModifier, BoneName) == 0x000000, "Member 'FRigidBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(FRigidBodyModifier, ModifierData) == 0x000004, "Member 'FRigidBodyModifier::ModifierData' has a wrong offset!");
static_assert(offsetof(FRigidBodyModifier, Sets) == 0x000010, "Member 'FRigidBodyModifier::Sets' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyModifierCreation
// 0x0030 (0x0030 - 0x0000)
struct FRigidBodyModifierCreation final
{
public:
	struct FRigidBodyModifier                     Modifier;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           Sets;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyModifierCreation) == 0x000008, "Wrong alignment on FRigidBodyModifierCreation");
static_assert(sizeof(FRigidBodyModifierCreation) == 0x000030, "Wrong size on FRigidBodyModifierCreation");
static_assert(offsetof(FRigidBodyModifierCreation, Modifier) == 0x000000, "Member 'FRigidBodyModifierCreation::Modifier' has a wrong offset!");
static_assert(offsetof(FRigidBodyModifierCreation, Sets) == 0x000020, "Member 'FRigidBodyModifierCreation::Sets' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlAndBodyModifierCreations
// 0x0020 (0x0020 - 0x0000)
struct FRigidBodyControlAndBodyModifierCreations final
{
public:
	TArray<struct FRigidBodyControlCreation>      Controls;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRigidBodyModifierCreation>     Modifiers;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControlAndBodyModifierCreations) == 0x000008, "Wrong alignment on FRigidBodyControlAndBodyModifierCreations");
static_assert(sizeof(FRigidBodyControlAndBodyModifierCreations) == 0x000020, "Wrong size on FRigidBodyControlAndBodyModifierCreations");
static_assert(offsetof(FRigidBodyControlAndBodyModifierCreations, Controls) == 0x000000, "Member 'FRigidBodyControlAndBodyModifierCreations::Controls' has a wrong offset!");
static_assert(offsetof(FRigidBodyControlAndBodyModifierCreations, Modifiers) == 0x000010, "Member 'FRigidBodyControlAndBodyModifierCreations::Modifiers' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlNamedControlParameters
// 0x0030 (0x0030 - 0x0000)
struct FPhysicsControlNamedControlParameters final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlSparseData              Data;                                              // 0x0004(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNamedControlParameters) == 0x000004, "Wrong alignment on FPhysicsControlNamedControlParameters");
static_assert(sizeof(FPhysicsControlNamedControlParameters) == 0x000030, "Wrong size on FPhysicsControlNamedControlParameters");
static_assert(offsetof(FPhysicsControlNamedControlParameters, Name) == 0x000000, "Member 'FPhysicsControlNamedControlParameters::Name' has a wrong offset!");
static_assert(offsetof(FPhysicsControlNamedControlParameters, Data) == 0x000004, "Member 'FPhysicsControlNamedControlParameters::Data' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlNamedModifierParameters
// 0x0010 (0x0010 - 0x0000)
struct FPhysicsControlNamedModifierParameters final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlModifierSparseData      Data;                                              // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlNamedModifierParameters) == 0x000004, "Wrong alignment on FPhysicsControlNamedModifierParameters");
static_assert(sizeof(FPhysicsControlNamedModifierParameters) == 0x000010, "Wrong size on FPhysicsControlNamedModifierParameters");
static_assert(offsetof(FPhysicsControlNamedModifierParameters, Name) == 0x000000, "Member 'FPhysicsControlNamedModifierParameters::Name' has a wrong offset!");
static_assert(offsetof(FPhysicsControlNamedModifierParameters, Data) == 0x000004, "Member 'FPhysicsControlNamedModifierParameters::Data' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlControlAndModifierParameters
// 0x0020 (0x0020 - 0x0000)
struct FPhysicsControlControlAndModifierParameters final
{
public:
	TArray<struct FPhysicsControlNamedControlParameters> ControlParameters;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedModifierParameters> ModifierParameters;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlControlAndModifierParameters) == 0x000008, "Wrong alignment on FPhysicsControlControlAndModifierParameters");
static_assert(sizeof(FPhysicsControlControlAndModifierParameters) == 0x000020, "Wrong size on FPhysicsControlControlAndModifierParameters");
static_assert(offsetof(FPhysicsControlControlAndModifierParameters, ControlParameters) == 0x000000, "Member 'FPhysicsControlControlAndModifierParameters::ControlParameters' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierParameters, ModifierParameters) == 0x000010, "Member 'FPhysicsControlControlAndModifierParameters::ModifierParameters' has a wrong offset!");

// ScriptStruct PhysicsControl.PhysicsControlControlAndModifierUpdates
// 0x0020 (0x0020 - 0x0000)
struct FPhysicsControlControlAndModifierUpdates final
{
public:
	TArray<struct FPhysicsControlNamedControlParameters> ControlParameters;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsControlNamedModifierParameters> ModifierParameters;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicsControlControlAndModifierUpdates) == 0x000008, "Wrong alignment on FPhysicsControlControlAndModifierUpdates");
static_assert(sizeof(FPhysicsControlControlAndModifierUpdates) == 0x000020, "Wrong size on FPhysicsControlControlAndModifierUpdates");
static_assert(offsetof(FPhysicsControlControlAndModifierUpdates, ControlParameters) == 0x000000, "Member 'FPhysicsControlControlAndModifierUpdates::ControlParameters' has a wrong offset!");
static_assert(offsetof(FPhysicsControlControlAndModifierUpdates, ModifierParameters) == 0x000010, "Member 'FPhysicsControlControlAndModifierUpdates::ModifierParameters' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlTarget
// 0x0050 (0x0050 - 0x0000)
struct FRigidBodyControlTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetPoint;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTargetPoint : 1;                               // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigidBodyControlTarget) == 0x000008, "Wrong alignment on FRigidBodyControlTarget");
static_assert(sizeof(FRigidBodyControlTarget) == 0x000050, "Wrong size on FRigidBodyControlTarget");
static_assert(offsetof(FRigidBodyControlTarget, TargetPosition) == 0x000000, "Member 'FRigidBodyControlTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FRigidBodyControlTarget, TargetOrientation) == 0x000018, "Member 'FRigidBodyControlTarget::TargetOrientation' has a wrong offset!");
static_assert(offsetof(FRigidBodyControlTarget, TargetPoint) == 0x000030, "Member 'FRigidBodyControlTarget::TargetPoint' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyControlTargets
// 0x0050 (0x0050 - 0x0000)
struct FRigidBodyControlTargets final
{
public:
	TMap<class FName, struct FRigidBodyControlTarget> Targets;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyControlTargets) == 0x000008, "Wrong alignment on FRigidBodyControlTargets");
static_assert(sizeof(FRigidBodyControlTargets) == 0x000050, "Wrong size on FRigidBodyControlTargets");
static_assert(offsetof(FRigidBodyControlTargets, Targets) == 0x000000, "Member 'FRigidBodyControlTargets::Targets' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyKinematicTarget
// 0x0038 (0x0038 - 0x0000)
struct FRigidBodyKinematicTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetOrientation;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseSkeletalAnimation : 1;                         // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigidBodyKinematicTarget) == 0x000008, "Wrong alignment on FRigidBodyKinematicTarget");
static_assert(sizeof(FRigidBodyKinematicTarget) == 0x000038, "Wrong size on FRigidBodyKinematicTarget");
static_assert(offsetof(FRigidBodyKinematicTarget, TargetPosition) == 0x000000, "Member 'FRigidBodyKinematicTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FRigidBodyKinematicTarget, TargetOrientation) == 0x000018, "Member 'FRigidBodyKinematicTarget::TargetOrientation' has a wrong offset!");

// ScriptStruct PhysicsControl.RigidBodyKinematicTargets
// 0x0050 (0x0050 - 0x0000)
struct FRigidBodyKinematicTargets final
{
public:
	TMap<class FName, struct FRigidBodyKinematicTarget> Targets;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigidBodyKinematicTargets) == 0x000008, "Wrong alignment on FRigidBodyKinematicTargets");
static_assert(sizeof(FRigidBodyKinematicTargets) == 0x000050, "Wrong size on FRigidBodyKinematicTargets");
static_assert(offsetof(FRigidBodyKinematicTargets, Targets) == 0x000000, "Member 'FRigidBodyKinematicTargets::Targets' has a wrong offset!");

// ScriptStruct PhysicsControl.AnimNode_RigidBodyWithControl
// 0x0CC8 (0x0D90 - 0x00C8)
struct alignas(0x10) FAnimNode_RigidBodyWithControl final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x128];                                     // 0x00D0(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x01F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0210(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0228(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0240(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0258(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimSpaceSettings                      SimSpaceSettings;                                  // 0x0270(0x0060)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedBoundsScale;                                 // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateCacheEveryFrame;                             // 0x02D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BaseBoneRef;                                       // 0x02D8(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x02E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulationSpace                              SimulationSpace;                                   // 0x02E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableCollisionBetweenConstraintBodies;     // 0x02E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExternalClothCollision;                        // 0x02E7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x1];                                      // 0x02E8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableWorldGeometry : 1;                          // 0x02E9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideWorldGravity : 1;                         // 0x02E9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransferBoneVelocities : 1;                       // 0x02E9(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFreezeIncomingPoseOnStart : 1;                    // 0x02E9(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bModifyConstraintTransformsToMatchSkeleton : 1;    // 0x02E9(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldSpaceMinimumScale;                            // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationResetTime;                               // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControls;                                   // 0x02F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                BoneToBodyNameMap;                                 // 0x02F8(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodySetupData                    SetupData;                                         // 0x0348(0x0070)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodyControlAndBodyModifierCreations AdditionalControlsAndBodyModifiers;                // 0x03B8(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlSetUpdates              AdditionalSets;                                    // 0x03D8(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters InitialControlAndBodyModifierUpdates;              // 0x03F8(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierParameters ControlAndModifierParameters;                      // 0x0418(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPhysicsControlControlAndModifierUpdates ControlAndModifierUpdates;                         // 0x0438(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodyControlTargets               ControlTargets;                                    // 0x0458(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FRigidBodyKinematicTargets             KinematicTargets;                                  // 0x04A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          PhysicsAssetAuthoredSkeletalMesh;                  // 0x04F8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConstraintProfile;                                 // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_504[0x5C];                                     // 0x0504(0x005C)(Fixing Size After Last Property [ Dumper-7 ])
	ESimulationTiming                             SimulationTiming;                                  // 0x0560(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_561[0x82F];                                    // 0x0561(0x082F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyWithControl) == 0x000010, "Wrong alignment on FAnimNode_RigidBodyWithControl");
static_assert(sizeof(FAnimNode_RigidBodyWithControl) == 0x000D90, "Wrong size on FAnimNode_RigidBodyWithControl");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverridePhysicsAsset) == 0x0000C8, "Member 'FAnimNode_RigidBodyWithControl::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverrideWorldGravity) == 0x0001F8, "Member 'FAnimNode_RigidBodyWithControl::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ExternalForce) == 0x000210, "Member 'FAnimNode_RigidBodyWithControl::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentLinearAccScale) == 0x000228, "Member 'FAnimNode_RigidBodyWithControl::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentLinearVelScale) == 0x000240, "Member 'FAnimNode_RigidBodyWithControl::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ComponentAppliedLinearAccClamp) == 0x000258, "Member 'FAnimNode_RigidBodyWithControl::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimSpaceSettings) == 0x000270, "Member 'FAnimNode_RigidBodyWithControl::SimSpaceSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, CachedBoundsScale) == 0x0002D0, "Member 'FAnimNode_RigidBodyWithControl::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, UpdateCacheEveryFrame) == 0x0002D4, "Member 'FAnimNode_RigidBodyWithControl::UpdateCacheEveryFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, BaseBoneRef) == 0x0002D8, "Member 'FAnimNode_RigidBodyWithControl::BaseBoneRef' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, OverlapChannel) == 0x0002E4, "Member 'FAnimNode_RigidBodyWithControl::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimulationSpace) == 0x0002E5, "Member 'FAnimNode_RigidBodyWithControl::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bForceDisableCollisionBetweenConstraintBodies) == 0x0002E6, "Member 'FAnimNode_RigidBodyWithControl::bForceDisableCollisionBetweenConstraintBodies' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bUseExternalClothCollision) == 0x0002E7, "Member 'FAnimNode_RigidBodyWithControl::bUseExternalClothCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, WorldSpaceMinimumScale) == 0x0002EC, "Member 'FAnimNode_RigidBodyWithControl::WorldSpaceMinimumScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, EvaluationResetTime) == 0x0002F0, "Member 'FAnimNode_RigidBodyWithControl::EvaluationResetTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, bEnableControls) == 0x0002F4, "Member 'FAnimNode_RigidBodyWithControl::bEnableControls' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, BoneToBodyNameMap) == 0x0002F8, "Member 'FAnimNode_RigidBodyWithControl::BoneToBodyNameMap' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SetupData) == 0x000348, "Member 'FAnimNode_RigidBodyWithControl::SetupData' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, AdditionalControlsAndBodyModifiers) == 0x0003B8, "Member 'FAnimNode_RigidBodyWithControl::AdditionalControlsAndBodyModifiers' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, AdditionalSets) == 0x0003D8, "Member 'FAnimNode_RigidBodyWithControl::AdditionalSets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, InitialControlAndBodyModifierUpdates) == 0x0003F8, "Member 'FAnimNode_RigidBodyWithControl::InitialControlAndBodyModifierUpdates' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlAndModifierParameters) == 0x000418, "Member 'FAnimNode_RigidBodyWithControl::ControlAndModifierParameters' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlAndModifierUpdates) == 0x000438, "Member 'FAnimNode_RigidBodyWithControl::ControlAndModifierUpdates' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ControlTargets) == 0x000458, "Member 'FAnimNode_RigidBodyWithControl::ControlTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, KinematicTargets) == 0x0004A8, "Member 'FAnimNode_RigidBodyWithControl::KinematicTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, PhysicsAssetAuthoredSkeletalMesh) == 0x0004F8, "Member 'FAnimNode_RigidBodyWithControl::PhysicsAssetAuthoredSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, ConstraintProfile) == 0x000500, "Member 'FAnimNode_RigidBodyWithControl::ConstraintProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBodyWithControl, SimulationTiming) == 0x000560, "Member 'FAnimNode_RigidBodyWithControl::SimulationTiming' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialPhysicsControl
// 0x0150 (0x0150 - 0x0000)
struct FInitialPhysicsControl final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentMeshComponentName;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChildActor;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildMeshComponentName;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBoneName;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ControlData;                                       // 0x0020(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlMultiplier              ControlMultiplier;                                 // 0x0050(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlTarget                  ControlTarget;                                     // 0x00C0(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlSettings                ControlSettings;                                   // 0x0128(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInitialPhysicsControl) == 0x000008, "Wrong alignment on FInitialPhysicsControl");
static_assert(sizeof(FInitialPhysicsControl) == 0x000150, "Wrong size on FInitialPhysicsControl");
static_assert(offsetof(FInitialPhysicsControl, ParentActor) == 0x000000, "Member 'FInitialPhysicsControl::ParentActor' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ParentMeshComponentName) == 0x000008, "Member 'FInitialPhysicsControl::ParentMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ParentBoneName) == 0x00000C, "Member 'FInitialPhysicsControl::ParentBoneName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildActor) == 0x000010, "Member 'FInitialPhysicsControl::ChildActor' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildMeshComponentName) == 0x000018, "Member 'FInitialPhysicsControl::ChildMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ChildBoneName) == 0x00001C, "Member 'FInitialPhysicsControl::ChildBoneName' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlData) == 0x000020, "Member 'FInitialPhysicsControl::ControlData' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlMultiplier) == 0x000050, "Member 'FInitialPhysicsControl::ControlMultiplier' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlTarget) == 0x0000C0, "Member 'FInitialPhysicsControl::ControlTarget' has a wrong offset!");
static_assert(offsetof(FInitialPhysicsControl, ControlSettings) == 0x000128, "Member 'FInitialPhysicsControl::ControlSettings' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialBodyModifier
// 0x0070 (0x0070 - 0x0000)
struct FInitialBodyModifier final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshComponentName;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsMovementType                          MovementType;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                KinematicTargetPosition;                           // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  KinematicTargetOrientation;                        // 0x0040(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalAnimation;                             // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitialBodyModifier) == 0x000010, "Wrong alignment on FInitialBodyModifier");
static_assert(sizeof(FInitialBodyModifier) == 0x000070, "Wrong size on FInitialBodyModifier");
static_assert(offsetof(FInitialBodyModifier, Actor) == 0x000000, "Member 'FInitialBodyModifier::Actor' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, MeshComponentName) == 0x000008, "Member 'FInitialBodyModifier::MeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, BoneName) == 0x00000C, "Member 'FInitialBodyModifier::BoneName' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, MovementType) == 0x000010, "Member 'FInitialBodyModifier::MovementType' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, GravityMultiplier) == 0x000018, "Member 'FInitialBodyModifier::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, KinematicTargetPosition) == 0x000020, "Member 'FInitialBodyModifier::KinematicTargetPosition' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, KinematicTargetOrientation) == 0x000040, "Member 'FInitialBodyModifier::KinematicTargetOrientation' has a wrong offset!");
static_assert(offsetof(FInitialBodyModifier, bUseSkeletalAnimation) == 0x000060, "Member 'FInitialBodyModifier::bUseSkeletalAnimation' has a wrong offset!");

// ScriptStruct PhysicsControl.InitialCharacterControls
// 0x00D8 (0x00D8 - 0x0000)
struct FInitialCharacterControls final
{
public:
	class AActor*                                 CharacterActor;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkeletalMeshComponentName;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhysicsControlLimbSetupData>   LimbSetupData;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    WorldSpaceControlData;                             // 0x0020(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlSettings                WorldSpaceControlSettings;                         // 0x0050(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPhysicsControlData                    ParentSpaceControlData;                            // 0x0078(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicsControlSettings                ParentSpaceControlSettings;                        // 0x00A8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EPhysicsMovementType                          PhysicsMovementType;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitialCharacterControls) == 0x000008, "Wrong alignment on FInitialCharacterControls");
static_assert(sizeof(FInitialCharacterControls) == 0x0000D8, "Wrong size on FInitialCharacterControls");
static_assert(offsetof(FInitialCharacterControls, CharacterActor) == 0x000000, "Member 'FInitialCharacterControls::CharacterActor' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, SkeletalMeshComponentName) == 0x000008, "Member 'FInitialCharacterControls::SkeletalMeshComponentName' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, LimbSetupData) == 0x000010, "Member 'FInitialCharacterControls::LimbSetupData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, WorldSpaceControlData) == 0x000020, "Member 'FInitialCharacterControls::WorldSpaceControlData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, WorldSpaceControlSettings) == 0x000050, "Member 'FInitialCharacterControls::WorldSpaceControlSettings' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, ParentSpaceControlData) == 0x000078, "Member 'FInitialCharacterControls::ParentSpaceControlData' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, ParentSpaceControlSettings) == 0x0000A8, "Member 'FInitialCharacterControls::ParentSpaceControlSettings' has a wrong offset!");
static_assert(offsetof(FInitialCharacterControls, PhysicsMovementType) == 0x0000D0, "Member 'FInitialCharacterControls::PhysicsMovementType' has a wrong offset!");

}

