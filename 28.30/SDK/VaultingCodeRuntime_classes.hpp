#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultingCodeRuntime

#include "Basic.hpp"

#include "FortniteAI_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ContextualTraversalRuntime_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "VaultingCodeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VaultingCodeRuntime.FortMovementMode_ExtLogicHurdle
// 0x0050 (0x01C8 - 0x0178)
class UFortMovementMode_ExtLogicHurdle final : public UFortMovementMode_ExtLogicTraversalBase
{
public:
	struct FGameplayTagContainer                  HurdleTag;                                         // 0x0178(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HurdleStartedTag;                                  // 0x0198(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  HurdleFinishedTag;                                 // 0x01A0(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         DestroyPropsSweepDistance;                         // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DestroyPropsWindowSillOffsetDistance;              // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_DestroyProp(class ABuildingProp* BuildPropToDestroy);
	void BP_GetAnimationMontageInformation(const struct FSynchedActionInfo& SynchedActionInfo, EHurdleType Type, bool bIsNarrowOpening, bool bIsCrouched, class UAnimMontage** AnimMontage, class FName* StartSectionName, class FName* MontageMiddleSectionName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovementMode_ExtLogicHurdle">();
	}
	static class UFortMovementMode_ExtLogicHurdle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovementMode_ExtLogicHurdle>();
	}
};
static_assert(alignof(UFortMovementMode_ExtLogicHurdle) == 0x000008, "Wrong alignment on UFortMovementMode_ExtLogicHurdle");
static_assert(sizeof(UFortMovementMode_ExtLogicHurdle) == 0x0001C8, "Wrong size on UFortMovementMode_ExtLogicHurdle");
static_assert(offsetof(UFortMovementMode_ExtLogicHurdle, HurdleTag) == 0x000178, "Member 'UFortMovementMode_ExtLogicHurdle::HurdleTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ExtLogicHurdle, HurdleStartedTag) == 0x000198, "Member 'UFortMovementMode_ExtLogicHurdle::HurdleStartedTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ExtLogicHurdle, HurdleFinishedTag) == 0x0001A0, "Member 'UFortMovementMode_ExtLogicHurdle::HurdleFinishedTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ExtLogicHurdle, DestroyPropsSweepDistance) == 0x0001C0, "Member 'UFortMovementMode_ExtLogicHurdle::DestroyPropsSweepDistance' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ExtLogicHurdle, DestroyPropsWindowSillOffsetDistance) == 0x0001C4, "Member 'UFortMovementMode_ExtLogicHurdle::DestroyPropsWindowSillOffsetDistance' has a wrong offset!");

// Class VaultingCodeRuntime.HurdleNavLinkProcessor
// 0x0000 (0x0028 - 0x0028)
class UHurdleNavLinkProcessor final : public UFortCustomNavLinkProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HurdleNavLinkProcessor">();
	}
	static class UHurdleNavLinkProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHurdleNavLinkProcessor>();
	}
};
static_assert(alignof(UHurdleNavLinkProcessor) == 0x000008, "Wrong alignment on UHurdleNavLinkProcessor");
static_assert(sizeof(UHurdleNavLinkProcessor) == 0x000028, "Wrong size on UHurdleNavLinkProcessor");

// Class VaultingCodeRuntime.HurdleCameraMode
// 0x0200 (0x1DA0 - 0x1BA0)
class UHurdleCameraMode final : public UFortCameraMode_ThirdPerson
{
public:
	struct FVector                                StartCameraOriginInterpSpeed;                      // 0x1BA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ApexCameraOriginInterpSpeed;                       // 0x1BB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                EndCameraOriginInterpSpeed;                        // 0x1BD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConstantSpeedCameraTrackInterpolationExponent;     // 0x1BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraOriginVerticalThreshold;                     // 0x1BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FallingVerticalInterpSpeed;                        // 0x1BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FallSpeedThreshold;                                // 0x1BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NonSprintFOV;                                      // 0x1BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideSpectatorCamera;                          // 0x1BFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BFD[0x3];                                     // 0x1BFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHurdleTargetingData                   HurdleTargetingData;                               // 0x1C00(0x0130)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D30[0x70];                                    // 0x1D30(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HurdleCameraMode">();
	}
	static class UHurdleCameraMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHurdleCameraMode>();
	}
};
static_assert(alignof(UHurdleCameraMode) == 0x000010, "Wrong alignment on UHurdleCameraMode");
static_assert(sizeof(UHurdleCameraMode) == 0x001DA0, "Wrong size on UHurdleCameraMode");
static_assert(offsetof(UHurdleCameraMode, StartCameraOriginInterpSpeed) == 0x001BA0, "Member 'UHurdleCameraMode::StartCameraOriginInterpSpeed' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, ApexCameraOriginInterpSpeed) == 0x001BB8, "Member 'UHurdleCameraMode::ApexCameraOriginInterpSpeed' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, EndCameraOriginInterpSpeed) == 0x001BD0, "Member 'UHurdleCameraMode::EndCameraOriginInterpSpeed' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, ConstantSpeedCameraTrackInterpolationExponent) == 0x001BE8, "Member 'UHurdleCameraMode::ConstantSpeedCameraTrackInterpolationExponent' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, CameraOriginVerticalThreshold) == 0x001BEC, "Member 'UHurdleCameraMode::CameraOriginVerticalThreshold' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, FallingVerticalInterpSpeed) == 0x001BF0, "Member 'UHurdleCameraMode::FallingVerticalInterpSpeed' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, FallSpeedThreshold) == 0x001BF4, "Member 'UHurdleCameraMode::FallSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, NonSprintFOV) == 0x001BF8, "Member 'UHurdleCameraMode::NonSprintFOV' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, bOverrideSpectatorCamera) == 0x001BFC, "Member 'UHurdleCameraMode::bOverrideSpectatorCamera' has a wrong offset!");
static_assert(offsetof(UHurdleCameraMode, HurdleTargetingData) == 0x001C00, "Member 'UHurdleCameraMode::HurdleTargetingData' has a wrong offset!");

// Class VaultingCodeRuntime.HurdleComponent
// 0x0A90 (0x0B38 - 0x00A8)
class UHurdleComponent final : public UFortPawnComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHurdleInputConfig                     HurdleInputConfig;                                 // 0x00B0(0x0620)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FHurdleInputConfigCache                HurdleInputConfigCache;                            // 0x06D0(0x00A0)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMovementMode_BaseExtLogic> MovementModeExtension;                             // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SynchedActionMMETag;                               // 0x0778(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HurdleEnabled;                                     // 0x0780(0x0028)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AutoHurdleEnabled;                                 // 0x07A8(0x0028)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D0[0x138];                                    // 0x07D0(0x0138)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedHurdleTargetingData         ReplayHurdleTargetingData;                         // 0x0908(0x0070)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	double                                        LastTeleportTime;                                  // 0x0978(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FHurdleTargetingData                   ParallelTargetingData;                             // 0x0980(0x0130)(Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AB0[0x1];                                      // 0x0AB0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EHurdleState                                  ReplicatedHurdleState;                             // 0x0AB1(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AB2[0x3E];                                     // 0x0AB2(0x003E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HighlightPositionOffset;                           // 0x0AF0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                HighlightNormalMultiplier;                         // 0x0B08(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                HighlightScale;                                    // 0x0B20(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BP_HandleHurdleEnded();
	void BP_HandleHurdleStarted(const struct FHurdleTargetingData& TargetingData, const struct FSynchedActionInfo& SynchedActionInfo);
	void BP_HandleSpringJump();
	void HandleNavLinkMoveStarted(const struct FVector& LinkEndPoint);
	void HandleOwnerJumpInput(bool bPressed);
	void HandleOwnerMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode);
	void HandleOwnerTeleported(class AFortPawn* TeleportedOwner);
	void HandleTargetingDataInvalid(const struct FHurdleTargetingData& TargetingData);
	void HandleTargetingDataValid(const struct FHurdleTargetingData& TargetingData);
	void OnMutatorUpdated();
	void OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void OnRep_ReplicatedHurdleState();
	void OnRep_ReplicatedLastTeleportTime();
	void RegisterMutatorUpdatedDelegate(class APawn* AffectedPawn);
	void ServerStartHurdle(const struct FReplicatedHurdleTargetingData& InReplicatedTargetingData, const double ClientLastTeleportTime);
	void UnregisterMutatorUpdatedDelegate();

	void BP_CanStartHurdle(bool* OutCanStartHurdle) const;
	bool BP_IsTacticalSprinting() const;
	bool BP_UseAutoHurdle() const;
	struct FTransform GetHurdleHighlightTransform() const;
	bool IsUsingGamepad() const;
	bool ShouldShowHurdleIndicator() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HurdleComponent">();
	}
	static class UHurdleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHurdleComponent>();
	}
};
static_assert(alignof(UHurdleComponent) == 0x000008, "Wrong alignment on UHurdleComponent");
static_assert(sizeof(UHurdleComponent) == 0x000B38, "Wrong size on UHurdleComponent");
static_assert(offsetof(UHurdleComponent, HurdleInputConfig) == 0x0000B0, "Member 'UHurdleComponent::HurdleInputConfig' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, HurdleInputConfigCache) == 0x0006D0, "Member 'UHurdleComponent::HurdleInputConfigCache' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, MovementModeExtension) == 0x000770, "Member 'UHurdleComponent::MovementModeExtension' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, SynchedActionMMETag) == 0x000778, "Member 'UHurdleComponent::SynchedActionMMETag' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, HurdleEnabled) == 0x000780, "Member 'UHurdleComponent::HurdleEnabled' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, AutoHurdleEnabled) == 0x0007A8, "Member 'UHurdleComponent::AutoHurdleEnabled' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, ReplayHurdleTargetingData) == 0x000908, "Member 'UHurdleComponent::ReplayHurdleTargetingData' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, LastTeleportTime) == 0x000978, "Member 'UHurdleComponent::LastTeleportTime' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, ParallelTargetingData) == 0x000980, "Member 'UHurdleComponent::ParallelTargetingData' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, ReplicatedHurdleState) == 0x000AB1, "Member 'UHurdleComponent::ReplicatedHurdleState' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, HighlightPositionOffset) == 0x000AF0, "Member 'UHurdleComponent::HighlightPositionOffset' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, HighlightNormalMultiplier) == 0x000B08, "Member 'UHurdleComponent::HighlightNormalMultiplier' has a wrong offset!");
static_assert(offsetof(UHurdleComponent, HighlightScale) == 0x000B20, "Member 'UHurdleComponent::HighlightScale' has a wrong offset!");

// Class VaultingCodeRuntime.HurdleLibrary
// 0x0000 (0x0028 - 0x0028)
class UHurdleLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool PerformHurdleTargeting(const class ACharacter* Character, struct FHurdleInputConfigCache* HurdleInputConfig, struct FHurdleTargetingData* OutTargetingData, bool bIsAutoHurdle, const struct FVector& OverrideAimDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HurdleLibrary">();
	}
	static class UHurdleLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHurdleLibrary>();
	}
};
static_assert(alignof(UHurdleLibrary) == 0x000008, "Wrong alignment on UHurdleLibrary");
static_assert(sizeof(UHurdleLibrary) == 0x000028, "Wrong size on UHurdleLibrary");

}

