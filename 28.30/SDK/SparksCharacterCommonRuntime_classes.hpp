#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCharacterCommonRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SparksCharacterCommonRuntime_structs.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class SparksCharacterCommonRuntime.SparksAnimationSubsystem
// 0x0088 (0x00B8 - 0x0030)
class USparksAnimationSubsystem final : public UWorldSubsystem
{
public:
	TSoftObjectPtr<class USparksInstrumentAnimations> Anims_Default;                                     // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USparksInstrumentAnimations> Anims_Light;                                       // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumAnimationRefs;                                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x1C];                                      // 0x009C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USparksInstrumentAnimations* GetLoadedSparksAnimations();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksAnimationSubsystem">();
	}
	static class USparksAnimationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksAnimationSubsystem>();
	}
};
static_assert(alignof(USparksAnimationSubsystem) == 0x000008, "Wrong alignment on USparksAnimationSubsystem");
static_assert(sizeof(USparksAnimationSubsystem) == 0x0000B8, "Wrong size on USparksAnimationSubsystem");
static_assert(offsetof(USparksAnimationSubsystem, Anims_Default) == 0x000030, "Member 'USparksAnimationSubsystem::Anims_Default' has a wrong offset!");
static_assert(offsetof(USparksAnimationSubsystem, Anims_Light) == 0x000050, "Member 'USparksAnimationSubsystem::Anims_Light' has a wrong offset!");
static_assert(offsetof(USparksAnimationSubsystem, NumAnimationRefs) == 0x000098, "Member 'USparksAnimationSubsystem::NumAnimationRefs' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksBaseLayerAnimInstance
// 0x0050 (0x04C0 - 0x0470)
class USparksBaseLayerAnimInstance final : public UFortBaseLayerAnimInstance
{
public:
	float                                         MinTempo;                                          // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTempo;                                          // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 BPMBucketMaxTempos;                                // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BPMBucketCooldownSeconds;                          // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USparksInstrumentAnimPlayerStateComponent* InstrumentPSC;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASparksMusicPlayspace*                  SparksPlayspace;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SongTempo;                                         // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPMBucketCooldownRemaining;                        // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPMBucket;                                         // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBPMBucket;                                 // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         Instrument;                                        // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPlayMidiAnimations;                            // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMusicBeatIsActive;                                // 0x04B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoamingOrNotAnimatable;                         // 0x04B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransitionBeat;                                   // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksAnimatableState                        AnimatableState;                                   // 0x04B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsRoaming;                                        // 0x04B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B7[0x9];                                      // 0x04B7(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInstrumentPSCInitialized(class USparksInstrumentAnimPlayerStateComponent* NewInstrumentPSC);
	void SetIsRoaming(bool bInIsRoaming);

	ESparksAnimatableState GetAnimatableState() const;
	bool GetIsRoaming() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksBaseLayerAnimInstance">();
	}
	static class USparksBaseLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksBaseLayerAnimInstance>();
	}
};
static_assert(alignof(USparksBaseLayerAnimInstance) == 0x000010, "Wrong alignment on USparksBaseLayerAnimInstance");
static_assert(sizeof(USparksBaseLayerAnimInstance) == 0x0004C0, "Wrong size on USparksBaseLayerAnimInstance");
static_assert(offsetof(USparksBaseLayerAnimInstance, MinTempo) == 0x000468, "Member 'USparksBaseLayerAnimInstance::MinTempo' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, MaxTempo) == 0x00046C, "Member 'USparksBaseLayerAnimInstance::MaxTempo' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, BPMBucketMaxTempos) == 0x000470, "Member 'USparksBaseLayerAnimInstance::BPMBucketMaxTempos' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, BPMBucketCooldownSeconds) == 0x000480, "Member 'USparksBaseLayerAnimInstance::BPMBucketCooldownSeconds' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, InstrumentPSC) == 0x000488, "Member 'USparksBaseLayerAnimInstance::InstrumentPSC' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, SparksPlayspace) == 0x000490, "Member 'USparksBaseLayerAnimInstance::SparksPlayspace' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, MusicClock) == 0x000498, "Member 'USparksBaseLayerAnimInstance::MusicClock' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, SongTempo) == 0x0004A0, "Member 'USparksBaseLayerAnimInstance::SongTempo' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, BPMBucketCooldownRemaining) == 0x0004A4, "Member 'USparksBaseLayerAnimInstance::BPMBucketCooldownRemaining' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, BPMBucket) == 0x0004A8, "Member 'USparksBaseLayerAnimInstance::BPMBucket' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, PreviousBPMBucket) == 0x0004AC, "Member 'USparksBaseLayerAnimInstance::PreviousBPMBucket' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, Instrument) == 0x0004B0, "Member 'USparksBaseLayerAnimInstance::Instrument' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, bCanPlayMidiAnimations) == 0x0004B1, "Member 'USparksBaseLayerAnimInstance::bCanPlayMidiAnimations' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, bMusicBeatIsActive) == 0x0004B2, "Member 'USparksBaseLayerAnimInstance::bMusicBeatIsActive' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, bIsRoamingOrNotAnimatable) == 0x0004B3, "Member 'USparksBaseLayerAnimInstance::bIsRoamingOrNotAnimatable' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, bTransitionBeat) == 0x0004B4, "Member 'USparksBaseLayerAnimInstance::bTransitionBeat' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, AnimatableState) == 0x0004B5, "Member 'USparksBaseLayerAnimInstance::AnimatableState' has a wrong offset!");
static_assert(offsetof(USparksBaseLayerAnimInstance, bIsRoaming) == 0x0004B6, "Member 'USparksBaseLayerAnimInstance::bIsRoaming' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimInstance
// 0x0020 (0x1640 - 0x1620)
#pragma pack(push, 0x1)
class alignas(0x10) USparksInstrumentAnimInstance : public UFortPlayerAnimInstanceProxy
{
public:
	TWeakObjectPtr<class ASparksMusicPlayspace>   SparksMusicPlayspace;                              // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1628[0x10];                                    // 0x1628(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMidiEventDriver(TScriptInterface<class IMidiEventDriverInterface> NewMidiEventDriver);

	TScriptInterface<class IMidiEventDriverInterface> GetMidiEventDriver() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimInstance">();
	}
	static class USparksInstrumentAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(USparksInstrumentAnimInstance) == 0x000010, "Wrong alignment on USparksInstrumentAnimInstance");
static_assert(sizeof(USparksInstrumentAnimInstance) == 0x001640, "Wrong size on USparksInstrumentAnimInstance");
static_assert(offsetof(USparksInstrumentAnimInstance, SparksMusicPlayspace) == 0x001620, "Member 'USparksInstrumentAnimInstance::SparksMusicPlayspace' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksGuitarAnimInstance
// 0x0000 (0x1640 - 0x1640)
class USparksGuitarAnimInstance : public USparksInstrumentAnimInstance
{
public:
	int32                                         FretNumber;                                        // 0x1638(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_163C[0x4];                                     // 0x163C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetFretNumberFromMidiNote(const uint8 MidiNote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksGuitarAnimInstance">();
	}
	static class USparksGuitarAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksGuitarAnimInstance>();
	}
};
static_assert(alignof(USparksGuitarAnimInstance) == 0x000010, "Wrong alignment on USparksGuitarAnimInstance");
static_assert(sizeof(USparksGuitarAnimInstance) == 0x001640, "Wrong size on USparksGuitarAnimInstance");
static_assert(offsetof(USparksGuitarAnimInstance, FretNumber) == 0x001638, "Member 'USparksGuitarAnimInstance::FretNumber' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksBassAnimInstance
// 0x0000 (0x1640 - 0x1640)
class USparksBassAnimInstance final : public USparksGuitarAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksBassAnimInstance">();
	}
	static class USparksBassAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksBassAnimInstance>();
	}
};
static_assert(alignof(USparksBassAnimInstance) == 0x000010, "Wrong alignment on USparksBassAnimInstance");
static_assert(sizeof(USparksBassAnimInstance) == 0x001640, "Wrong size on USparksBassAnimInstance");

// Class SparksCharacterCommonRuntime.SparksDrumsAnimInstance
// 0x0000 (0x1640 - 0x1640)
class USparksDrumsAnimInstance final : public USparksInstrumentAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksDrumsAnimInstance">();
	}
	static class USparksDrumsAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksDrumsAnimInstance>();
	}
};
static_assert(alignof(USparksDrumsAnimInstance) == 0x000010, "Wrong alignment on USparksDrumsAnimInstance");
static_assert(sizeof(USparksDrumsAnimInstance) == 0x001640, "Wrong size on USparksDrumsAnimInstance");

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimations
// 0x0030 (0x0060 - 0x0030)
class USparksInstrumentAnimations final : public UDataAsset
{
public:
	TSubclassOf<class USparksBaseLayerAnimInstance> BandPlayAnimBP;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              InstrumentAnimBPs[0x5];                            // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSubclassOf<class UAnimInstance> GetAnimClassForInstrument(ESparksInstrumentType Instrument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimations">();
	}
	static class USparksInstrumentAnimations* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimations>();
	}
};
static_assert(alignof(USparksInstrumentAnimations) == 0x000008, "Wrong alignment on USparksInstrumentAnimations");
static_assert(sizeof(USparksInstrumentAnimations) == 0x000060, "Wrong size on USparksInstrumentAnimations");
static_assert(offsetof(USparksInstrumentAnimations, BandPlayAnimBP) == 0x000030, "Member 'USparksInstrumentAnimations::BandPlayAnimBP' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimations, InstrumentAnimBPs) == 0x000038, "Member 'USparksInstrumentAnimations::InstrumentAnimBPs' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimPlayerStateComponent
// 0x0158 (0x01F8 - 0x00A0)
class USparksInstrumentAnimPlayerStateComponent final : public UPlayerStateComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USparksInstrumentAnimations*            InstrumentAnimations;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASparksMusicPlayspace*                  SparksPlayspace;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMusicClockComponent*                   MusicClock;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESparksInstrumentType                         CosmeticInstrumentType;                            // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESparksAnimatableState                        AnimatableState;                                   // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanPlayMidiAnimations;                            // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASparksMusicPlayspace>      SparksPlayspaceType;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ASparksMusicPlayspace* Playspace)> BP_OnEnteredSparksMusicPlayspace;                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ASparksMusicPlayspace* Playspace)> BP_OnExitedSparksMusicPlayspace;                   // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x18];                                     // 0x0118(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UMusicClockComponent* MusicClock)> BP_OnPlayerMusicClockChanged;                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver)> BP_OnPlayerMidiEventDriverChanged;                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x18];                                     // 0x0168(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESparksInstrumentType CosmeticInstrumentType)> BP_OnPlayerCosmeticInstrumentTypeChanged;          // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x18];                                     // 0x0190(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESparksAnimatableState AnimatableState)> BP_OnPlayerAnimatableStateChanged;                 // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x18];                                     // 0x01B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bCanPlayMidiAnimations)> BP_OnPlayerCanPlayMidiAnimationsChanged;           // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x18];                                     // 0x01E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSwapToInstrument(ESparksInstrumentType NewInstrumentType);
	void HandlePawnFinishedCharacterCustomization(class AFortPlayerPawn* Pawn);
	void HandlePlayerPawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void LinkInstrumentAnimationLayer(class USparksInstrumentAnimations* Animations);
	void OverridePlayspace(class ASparksMusicPlayspace* Playspace);
	void SetAnimatableState(ESparksAnimatableState NewAnimatableState);
	void SetCanPlayMidiAnimations(bool bNewCanPlayMidiAnimations);
	void SetCosmeticInstrumentType(ESparksInstrumentType NewCosmeticInstrumentType);
	void SetMidiEventDriver(TScriptInterface<class IMidiEventDriverInterface> NewMidiEventDriver);
	void SetMusicClock(class UMusicClockComponent* NewMusicClock);
	void SwapCosmeticInstrument(ESparksInstrumentType NewInstrumentType);
	void UnlinkInstrumentAnimationLayer();

	bool CanPlayMidiAnimations() const;
	ESparksAnimatableState GetAnimatableState() const;
	ESparksInstrumentType GetCosmeticInstrumentType() const;
	class FName GetCurrentTrackName() const;
	class USparksInstrumentAnimations* GetInstrumentAnimations() const;
	class USparksBaseLayerAnimInstance* GetLinkedInstrumentAnimationLayer() const;
	TScriptInterface<class IMidiEventDriverInterface> GetMidiEventDriver() const;
	class UMusicClockComponent* GetMusicClock() const;
	ESparksInstrumentType GetRecentOrFirstInstrument() const;
	class ASparksMusicPlayspace* GetSparksPlayspace() const;
	ESparksInstrumentType GetTrackInstrumentType() const;
	bool IsInstrumentAnimationLayerLinked() const;
	bool IsUsable() const;
	bool PlayerHasCosmeticInstrument(ESparksInstrumentType InstrumentType) const;
	bool PlayerHasTrackInstrument(ESparksInstrumentType InstrumentType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimPlayerStateComponent">();
	}
	static class USparksInstrumentAnimPlayerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimPlayerStateComponent>();
	}
};
static_assert(alignof(USparksInstrumentAnimPlayerStateComponent) == 0x000008, "Wrong alignment on USparksInstrumentAnimPlayerStateComponent");
static_assert(sizeof(USparksInstrumentAnimPlayerStateComponent) == 0x0001F8, "Wrong size on USparksInstrumentAnimPlayerStateComponent");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, InstrumentAnimations) == 0x0000A8, "Member 'USparksInstrumentAnimPlayerStateComponent::InstrumentAnimations' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, SparksPlayspace) == 0x0000B0, "Member 'USparksInstrumentAnimPlayerStateComponent::SparksPlayspace' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, MusicClock) == 0x0000B8, "Member 'USparksInstrumentAnimPlayerStateComponent::MusicClock' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, MidiEventDriver) == 0x0000C0, "Member 'USparksInstrumentAnimPlayerStateComponent::MidiEventDriver' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, CosmeticInstrumentType) == 0x0000D0, "Member 'USparksInstrumentAnimPlayerStateComponent::CosmeticInstrumentType' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, AnimatableState) == 0x0000D1, "Member 'USparksInstrumentAnimPlayerStateComponent::AnimatableState' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, bCanPlayMidiAnimations) == 0x0000D2, "Member 'USparksInstrumentAnimPlayerStateComponent::bCanPlayMidiAnimations' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, SparksPlayspaceType) == 0x0000D8, "Member 'USparksInstrumentAnimPlayerStateComponent::SparksPlayspaceType' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnEnteredSparksMusicPlayspace) == 0x0000E0, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnEnteredSparksMusicPlayspace' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnExitedSparksMusicPlayspace) == 0x000108, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnExitedSparksMusicPlayspace' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnPlayerMusicClockChanged) == 0x000130, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnPlayerMusicClockChanged' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnPlayerMidiEventDriverChanged) == 0x000158, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnPlayerMidiEventDriverChanged' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnPlayerCosmeticInstrumentTypeChanged) == 0x000180, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnPlayerCosmeticInstrumentTypeChanged' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnPlayerAnimatableStateChanged) == 0x0001A8, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnPlayerAnimatableStateChanged' has a wrong offset!");
static_assert(offsetof(USparksInstrumentAnimPlayerStateComponent, BP_OnPlayerCanPlayMidiAnimationsChanged) == 0x0001D0, "Member 'USparksInstrumentAnimPlayerStateComponent::BP_OnPlayerCanPlayMidiAnimationsChanged' has a wrong offset!");

// Class SparksCharacterCommonRuntime.SparksMicAnimInstance
// 0x0000 (0x1640 - 0x1640)
class USparksMicAnimInstance final : public USparksInstrumentAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMicAnimInstance">();
	}
	static class USparksMicAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksMicAnimInstance>();
	}
};
static_assert(alignof(USparksMicAnimInstance) == 0x000010, "Wrong alignment on USparksMicAnimInstance");
static_assert(sizeof(USparksMicAnimInstance) == 0x001640, "Wrong size on USparksMicAnimInstance");

}

