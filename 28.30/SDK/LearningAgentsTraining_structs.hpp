#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgentsTraining

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LearningAgentsTraining.ELearningAgentsCompletion
// NumValues: 0x0002
enum class ELearningAgentsCompletion : uint8
{
	Truncation                               = 0,
	Termination                              = 1,
};

// Enum LearningAgentsTraining.ELearningAgentsTrainerDevice
// NumValues: 0x0002
enum class ELearningAgentsTrainerDevice : uint8
{
	CPU                                      = 0,
	GPU                                      = 1,
};

// ScriptStruct LearningAgentsTraining.LearningAgentsImitationTrainerSettings
// 0x0004 (0x0004 - 0x0000)
struct FLearningAgentsImitationTrainerSettings final
{
public:
	float                                         TrainerCommunicationTimeout;                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLearningAgentsImitationTrainerSettings) == 0x000004, "Wrong alignment on FLearningAgentsImitationTrainerSettings");
static_assert(sizeof(FLearningAgentsImitationTrainerSettings) == 0x000004, "Wrong size on FLearningAgentsImitationTrainerSettings");
static_assert(offsetof(FLearningAgentsImitationTrainerSettings, TrainerCommunicationTimeout) == 0x000000, "Member 'FLearningAgentsImitationTrainerSettings::TrainerCommunicationTimeout' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsImitationTrainerTrainingSettings
// 0x001C (0x001C - 0x0000)
struct FLearningAgentsImitationTrainerTrainingSettings final
{
public:
	int32                                         NumberOfIterations;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRate;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRateDecay;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightDecay;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BatchSize;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsTrainerDevice                  Device;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTensorboard;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLearningAgentsImitationTrainerTrainingSettings) == 0x000004, "Wrong alignment on FLearningAgentsImitationTrainerTrainingSettings");
static_assert(sizeof(FLearningAgentsImitationTrainerTrainingSettings) == 0x00001C, "Wrong size on FLearningAgentsImitationTrainerTrainingSettings");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, NumberOfIterations) == 0x000000, "Member 'FLearningAgentsImitationTrainerTrainingSettings::NumberOfIterations' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, LearningRate) == 0x000004, "Member 'FLearningAgentsImitationTrainerTrainingSettings::LearningRate' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, LearningRateDecay) == 0x000008, "Member 'FLearningAgentsImitationTrainerTrainingSettings::LearningRateDecay' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, WeightDecay) == 0x00000C, "Member 'FLearningAgentsImitationTrainerTrainingSettings::WeightDecay' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, BatchSize) == 0x000010, "Member 'FLearningAgentsImitationTrainerTrainingSettings::BatchSize' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, RandomSeed) == 0x000014, "Member 'FLearningAgentsImitationTrainerTrainingSettings::RandomSeed' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, Device) == 0x000018, "Member 'FLearningAgentsImitationTrainerTrainingSettings::Device' has a wrong offset!");
static_assert(offsetof(FLearningAgentsImitationTrainerTrainingSettings, bUseTensorboard) == 0x000019, "Member 'FLearningAgentsImitationTrainerTrainingSettings::bUseTensorboard' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsRecorderPathSettings
// 0x0020 (0x0020 - 0x0000)
struct FLearningAgentsRecorderPathSettings final
{
public:
	struct FDirectoryPath                         IntermediateRelativePath;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordingsSubdirectory;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLearningAgentsRecorderPathSettings) == 0x000008, "Wrong alignment on FLearningAgentsRecorderPathSettings");
static_assert(sizeof(FLearningAgentsRecorderPathSettings) == 0x000020, "Wrong size on FLearningAgentsRecorderPathSettings");
static_assert(offsetof(FLearningAgentsRecorderPathSettings, IntermediateRelativePath) == 0x000000, "Member 'FLearningAgentsRecorderPathSettings::IntermediateRelativePath' has a wrong offset!");
static_assert(offsetof(FLearningAgentsRecorderPathSettings, RecordingsSubdirectory) == 0x000010, "Member 'FLearningAgentsRecorderPathSettings::RecordingsSubdirectory' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsRecord
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FLearningAgentsRecord final
{
public:
	int32                                         StepNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObservationDimNum;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionDimNum;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x24];                                       // 0x000C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLearningAgentsRecord) == 0x000008, "Wrong alignment on FLearningAgentsRecord");
static_assert(sizeof(FLearningAgentsRecord) == 0x000030, "Wrong size on FLearningAgentsRecord");
static_assert(offsetof(FLearningAgentsRecord, StepNum) == 0x000000, "Member 'FLearningAgentsRecord::StepNum' has a wrong offset!");
static_assert(offsetof(FLearningAgentsRecord, ObservationDimNum) == 0x000004, "Member 'FLearningAgentsRecord::ObservationDimNum' has a wrong offset!");
static_assert(offsetof(FLearningAgentsRecord, ActionDimNum) == 0x000008, "Member 'FLearningAgentsRecord::ActionDimNum' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsTrainerSettings
// 0x0014 (0x0014 - 0x0000)
struct FLearningAgentsTrainerSettings final
{
public:
	ELearningAgentsCompletion                     MaxStepsCompletion;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStepNum;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumRecordedEpisodesPerIteration;               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumRecordedStepsPerIteration;                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrainerCommunicationTimeout;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLearningAgentsTrainerSettings) == 0x000004, "Wrong alignment on FLearningAgentsTrainerSettings");
static_assert(sizeof(FLearningAgentsTrainerSettings) == 0x000014, "Wrong size on FLearningAgentsTrainerSettings");
static_assert(offsetof(FLearningAgentsTrainerSettings, MaxStepsCompletion) == 0x000000, "Member 'FLearningAgentsTrainerSettings::MaxStepsCompletion' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerSettings, MaxStepNum) == 0x000004, "Member 'FLearningAgentsTrainerSettings::MaxStepNum' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerSettings, MaximumRecordedEpisodesPerIteration) == 0x000008, "Member 'FLearningAgentsTrainerSettings::MaximumRecordedEpisodesPerIteration' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerSettings, MaximumRecordedStepsPerIteration) == 0x00000C, "Member 'FLearningAgentsTrainerSettings::MaximumRecordedStepsPerIteration' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerSettings, TrainerCommunicationTimeout) == 0x000010, "Member 'FLearningAgentsTrainerSettings::TrainerCommunicationTimeout' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsTrainerGameSettings
// 0x000C (0x000C - 0x0000)
struct FLearningAgentsTrainerGameSettings final
{
public:
	bool                                          bUseFixedTimeStep;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedTimeStepFrequency;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetMaxPhysicsStepToFixedTimeStep;                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableVSync;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUnlitViewportRendering;                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLearningAgentsTrainerGameSettings) == 0x000004, "Wrong alignment on FLearningAgentsTrainerGameSettings");
static_assert(sizeof(FLearningAgentsTrainerGameSettings) == 0x00000C, "Wrong size on FLearningAgentsTrainerGameSettings");
static_assert(offsetof(FLearningAgentsTrainerGameSettings, bUseFixedTimeStep) == 0x000000, "Member 'FLearningAgentsTrainerGameSettings::bUseFixedTimeStep' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerGameSettings, FixedTimeStepFrequency) == 0x000004, "Member 'FLearningAgentsTrainerGameSettings::FixedTimeStepFrequency' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerGameSettings, bSetMaxPhysicsStepToFixedTimeStep) == 0x000008, "Member 'FLearningAgentsTrainerGameSettings::bSetMaxPhysicsStepToFixedTimeStep' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerGameSettings, bDisableVSync) == 0x000009, "Member 'FLearningAgentsTrainerGameSettings::bDisableVSync' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerGameSettings, bUseUnlitViewportRendering) == 0x00000A, "Member 'FLearningAgentsTrainerGameSettings::bUseUnlitViewportRendering' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsTrainerTrainingSettings
// 0x0058 (0x0058 - 0x0000)
struct FLearningAgentsTrainerTrainingSettings final
{
public:
	int32                                         NumberOfIterations;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRatePolicy;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRateCritic;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRateDecay;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightDecay;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialActionScale;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyBatchSize;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticBatchSize;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyWindowSize;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EpsilonClip;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnRegularizationWeight;                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionRegularizationWeight;                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionEntropyWeight;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaeLambda;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdvantageNormalization;                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumAdvantage;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumAdvantage;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfStepsToTrimAtStartOfEpisode;               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfStepsToTrimAtEndOfEpisode;                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscountFactor;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsTrainerDevice                  Device;                                            // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTensorboard;                                   // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLearningAgentsTrainerTrainingSettings) == 0x000004, "Wrong alignment on FLearningAgentsTrainerTrainingSettings");
static_assert(sizeof(FLearningAgentsTrainerTrainingSettings) == 0x000058, "Wrong size on FLearningAgentsTrainerTrainingSettings");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, NumberOfIterations) == 0x000000, "Member 'FLearningAgentsTrainerTrainingSettings::NumberOfIterations' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, LearningRatePolicy) == 0x000004, "Member 'FLearningAgentsTrainerTrainingSettings::LearningRatePolicy' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, LearningRateCritic) == 0x000008, "Member 'FLearningAgentsTrainerTrainingSettings::LearningRateCritic' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, LearningRateDecay) == 0x00000C, "Member 'FLearningAgentsTrainerTrainingSettings::LearningRateDecay' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, WeightDecay) == 0x000010, "Member 'FLearningAgentsTrainerTrainingSettings::WeightDecay' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, InitialActionScale) == 0x000014, "Member 'FLearningAgentsTrainerTrainingSettings::InitialActionScale' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, PolicyBatchSize) == 0x000018, "Member 'FLearningAgentsTrainerTrainingSettings::PolicyBatchSize' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, CriticBatchSize) == 0x00001C, "Member 'FLearningAgentsTrainerTrainingSettings::CriticBatchSize' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, PolicyWindowSize) == 0x000020, "Member 'FLearningAgentsTrainerTrainingSettings::PolicyWindowSize' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, EpsilonClip) == 0x000024, "Member 'FLearningAgentsTrainerTrainingSettings::EpsilonClip' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, ReturnRegularizationWeight) == 0x000028, "Member 'FLearningAgentsTrainerTrainingSettings::ReturnRegularizationWeight' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, ActionRegularizationWeight) == 0x00002C, "Member 'FLearningAgentsTrainerTrainingSettings::ActionRegularizationWeight' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, ActionEntropyWeight) == 0x000030, "Member 'FLearningAgentsTrainerTrainingSettings::ActionEntropyWeight' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, GaeLambda) == 0x000034, "Member 'FLearningAgentsTrainerTrainingSettings::GaeLambda' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, bAdvantageNormalization) == 0x000038, "Member 'FLearningAgentsTrainerTrainingSettings::bAdvantageNormalization' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, MinimumAdvantage) == 0x00003C, "Member 'FLearningAgentsTrainerTrainingSettings::MinimumAdvantage' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, MaximumAdvantage) == 0x000040, "Member 'FLearningAgentsTrainerTrainingSettings::MaximumAdvantage' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, NumberOfStepsToTrimAtStartOfEpisode) == 0x000044, "Member 'FLearningAgentsTrainerTrainingSettings::NumberOfStepsToTrimAtStartOfEpisode' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, NumberOfStepsToTrimAtEndOfEpisode) == 0x000048, "Member 'FLearningAgentsTrainerTrainingSettings::NumberOfStepsToTrimAtEndOfEpisode' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, RandomSeed) == 0x00004C, "Member 'FLearningAgentsTrainerTrainingSettings::RandomSeed' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, DiscountFactor) == 0x000050, "Member 'FLearningAgentsTrainerTrainingSettings::DiscountFactor' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, Device) == 0x000054, "Member 'FLearningAgentsTrainerTrainingSettings::Device' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerTrainingSettings, bUseTensorboard) == 0x000055, "Member 'FLearningAgentsTrainerTrainingSettings::bUseTensorboard' has a wrong offset!");

// ScriptStruct LearningAgentsTraining.LearningAgentsTrainerPathSettings
// 0x0030 (0x0030 - 0x0000)
struct FLearningAgentsTrainerPathSettings final
{
public:
	struct FDirectoryPath                         EditorEngineRelativePath;                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NonEditorEngineRelativePath;                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         IntermediateRelativePath;                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLearningAgentsTrainerPathSettings) == 0x000008, "Wrong alignment on FLearningAgentsTrainerPathSettings");
static_assert(sizeof(FLearningAgentsTrainerPathSettings) == 0x000030, "Wrong size on FLearningAgentsTrainerPathSettings");
static_assert(offsetof(FLearningAgentsTrainerPathSettings, EditorEngineRelativePath) == 0x000000, "Member 'FLearningAgentsTrainerPathSettings::EditorEngineRelativePath' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerPathSettings, NonEditorEngineRelativePath) == 0x000010, "Member 'FLearningAgentsTrainerPathSettings::NonEditorEngineRelativePath' has a wrong offset!");
static_assert(offsetof(FLearningAgentsTrainerPathSettings, IntermediateRelativePath) == 0x000020, "Member 'FLearningAgentsTrainerPathSettings::IntermediateRelativePath' has a wrong offset!");

}

