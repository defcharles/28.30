#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicalRimlight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PhysicalRimlight.PhysicalRimlight_C
// 0x00C0 (0x0350 - 0x0290)
class APhysicalRimlight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Right_Side_Rim_Light;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RightSideRim_Transform;                            // 0x02B0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rim_Light_Physical_Intensity;                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RimlightDistanceFromCamera;                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RimlightOffsetFromCamera;                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   PlayerPawnAthenaRef;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class FString                                 l_cvarName;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        RimlightVerticalOffset;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RimlightIntensity;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Day_Phase_Update(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void ExecuteUbergraph_PhysicalRimlight(int32 EntryPoint);
	void InitRim(double RimlightIntensity_0);
	void PhysicalRimlight_AutoGenFunc(const class FString& CVarName);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RimlightAttemptValidation();
	void Set_Rim_Light_Location_And_Color(double Intensity);
	void Set_Rimlight_Color_and_Intensity(double Rimlight_Intensity);
	void Update_Rimlight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PhysicalRimlight_C">();
	}
	static class APhysicalRimlight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicalRimlight_C>();
	}
};
static_assert(alignof(APhysicalRimlight_C) == 0x000010, "Wrong alignment on APhysicalRimlight_C");
static_assert(sizeof(APhysicalRimlight_C) == 0x000350, "Wrong size on APhysicalRimlight_C");
static_assert(offsetof(APhysicalRimlight_C, UberGraphFrame) == 0x000290, "Member 'APhysicalRimlight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, SpotLight) == 0x000298, "Member 'APhysicalRimlight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, DefaultSceneRoot) == 0x0002A0, "Member 'APhysicalRimlight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, Right_Side_Rim_Light) == 0x0002A8, "Member 'APhysicalRimlight_C::Right_Side_Rim_Light' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, RightSideRim_Transform) == 0x0002B0, "Member 'APhysicalRimlight_C::RightSideRim_Transform' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, Rim_Light_Physical_Intensity) == 0x000310, "Member 'APhysicalRimlight_C::Rim_Light_Physical_Intensity' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, RimlightDistanceFromCamera) == 0x000318, "Member 'APhysicalRimlight_C::RimlightDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, RimlightOffsetFromCamera) == 0x000320, "Member 'APhysicalRimlight_C::RimlightOffsetFromCamera' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, PlayerPawnAthenaRef) == 0x000328, "Member 'APhysicalRimlight_C::PlayerPawnAthenaRef' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, l_cvarName) == 0x000330, "Member 'APhysicalRimlight_C::l_cvarName' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, RimlightVerticalOffset) == 0x000340, "Member 'APhysicalRimlight_C::RimlightVerticalOffset' has a wrong offset!");
static_assert(offsetof(APhysicalRimlight_C, RimlightIntensity) == 0x000348, "Member 'APhysicalRimlight_C::RimlightIntensity' has a wrong offset!");

}

