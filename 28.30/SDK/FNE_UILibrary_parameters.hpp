#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNE_UILibrary

#include "Basic.hpp"

#include "FNE_UILibrary_structs.hpp"


namespace SDK::Params
{

// Function FNE_UILibrary.FNE_ModularButton.RegisterModularBlock
// 0x0008 (0x0008 - 0x0000)
struct FNE_ModularButton_RegisterModularBlock final
{
public:
	class UFNE_UIBlock*                           bLock;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_ModularButton_RegisterModularBlock) == 0x000008, "Wrong alignment on FNE_ModularButton_RegisterModularBlock");
static_assert(sizeof(FNE_ModularButton_RegisterModularBlock) == 0x000008, "Wrong size on FNE_ModularButton_RegisterModularBlock");
static_assert(offsetof(FNE_ModularButton_RegisterModularBlock, bLock) == 0x000000, "Member 'FNE_ModularButton_RegisterModularBlock::bLock' has a wrong offset!");

// Function FNE_UILibrary.FNE_ModularButton.RequestInstantTransitionOnBlocks
// 0x0001 (0x0001 - 0x0000)
struct FNE_ModularButton_RequestInstantTransitionOnBlocks final
{
public:
	EFNE_UIBlockInstantTransitionState            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_ModularButton_RequestInstantTransitionOnBlocks) == 0x000001, "Wrong alignment on FNE_ModularButton_RequestInstantTransitionOnBlocks");
static_assert(sizeof(FNE_ModularButton_RequestInstantTransitionOnBlocks) == 0x000001, "Wrong size on FNE_ModularButton_RequestInstantTransitionOnBlocks");
static_assert(offsetof(FNE_ModularButton_RequestInstantTransitionOnBlocks, State) == 0x000000, "Member 'FNE_ModularButton_RequestInstantTransitionOnBlocks::State' has a wrong offset!");

// Function FNE_UILibrary.FNE_ModularButton.RequestTransitionOnBlocks
// 0x0001 (0x0001 - 0x0000)
struct FNE_ModularButton_RequestTransitionOnBlocks final
{
public:
	EFNE_UIBlockVisualState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_ModularButton_RequestTransitionOnBlocks) == 0x000001, "Wrong alignment on FNE_ModularButton_RequestTransitionOnBlocks");
static_assert(sizeof(FNE_ModularButton_RequestTransitionOnBlocks) == 0x000001, "Wrong size on FNE_ModularButton_RequestTransitionOnBlocks");
static_assert(offsetof(FNE_ModularButton_RequestTransitionOnBlocks, State) == 0x000000, "Member 'FNE_ModularButton_RequestTransitionOnBlocks::State' has a wrong offset!");

// Function FNE_UILibrary.FNE_ModularButton.SetBlocksTiming
// 0x002C (0x002C - 0x0000)
struct FNE_ModularButton_SetBlocksTiming final
{
public:
	struct FFNE_UIBlockTiming                     Timing;                                            // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_ModularButton_SetBlocksTiming) == 0x000004, "Wrong alignment on FNE_ModularButton_SetBlocksTiming");
static_assert(sizeof(FNE_ModularButton_SetBlocksTiming) == 0x00002C, "Wrong size on FNE_ModularButton_SetBlocksTiming");
static_assert(offsetof(FNE_ModularButton_SetBlocksTiming, Timing) == 0x000000, "Member 'FNE_ModularButton_SetBlocksTiming::Timing' has a wrong offset!");

// Function FNE_UILibrary.FNE_ModularButton.UnregisterModularBlock
// 0x0008 (0x0008 - 0x0000)
struct FNE_ModularButton_UnregisterModularBlock final
{
public:
	class UFNE_UIBlock*                           bLock;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_ModularButton_UnregisterModularBlock) == 0x000008, "Wrong alignment on FNE_ModularButton_UnregisterModularBlock");
static_assert(sizeof(FNE_ModularButton_UnregisterModularBlock) == 0x000008, "Wrong size on FNE_ModularButton_UnregisterModularBlock");
static_assert(offsetof(FNE_ModularButton_UnregisterModularBlock, bLock) == 0x000000, "Member 'FNE_ModularButton_UnregisterModularBlock::bLock' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlock.GetTransitionTime
// 0x0008 (0x0008 - 0x0000)
struct FNE_UIBlock_GetTransitionTime final
{
public:
	EFNE_UIBlockVisualState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_UIBlock_GetTransitionTime) == 0x000004, "Wrong alignment on FNE_UIBlock_GetTransitionTime");
static_assert(sizeof(FNE_UIBlock_GetTransitionTime) == 0x000008, "Wrong size on FNE_UIBlock_GetTransitionTime");
static_assert(offsetof(FNE_UIBlock_GetTransitionTime, State) == 0x000000, "Member 'FNE_UIBlock_GetTransitionTime::State' has a wrong offset!");
static_assert(offsetof(FNE_UIBlock_GetTransitionTime, ReturnValue) == 0x000004, "Member 'FNE_UIBlock_GetTransitionTime::ReturnValue' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlock.PlayTransition
// 0x0010 (0x0010 - 0x0000)
struct FNE_UIBlock_PlayTransition final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayForward;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_UIBlock_PlayTransition) == 0x000008, "Wrong alignment on FNE_UIBlock_PlayTransition");
static_assert(sizeof(FNE_UIBlock_PlayTransition) == 0x000010, "Wrong size on FNE_UIBlock_PlayTransition");
static_assert(offsetof(FNE_UIBlock_PlayTransition, Animation) == 0x000000, "Member 'FNE_UIBlock_PlayTransition::Animation' has a wrong offset!");
static_assert(offsetof(FNE_UIBlock_PlayTransition, bPlayForward) == 0x000008, "Member 'FNE_UIBlock_PlayTransition::bPlayForward' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlock.RequestInstantTransition
// 0x0001 (0x0001 - 0x0000)
struct FNE_UIBlock_RequestInstantTransition final
{
public:
	EFNE_UIBlockInstantTransitionState            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_UIBlock_RequestInstantTransition) == 0x000001, "Wrong alignment on FNE_UIBlock_RequestInstantTransition");
static_assert(sizeof(FNE_UIBlock_RequestInstantTransition) == 0x000001, "Wrong size on FNE_UIBlock_RequestInstantTransition");
static_assert(offsetof(FNE_UIBlock_RequestInstantTransition, State) == 0x000000, "Member 'FNE_UIBlock_RequestInstantTransition::State' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlock.RequestTransition
// 0x0001 (0x0001 - 0x0000)
struct FNE_UIBlock_RequestTransition final
{
public:
	EFNE_UIBlockVisualState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_UIBlock_RequestTransition) == 0x000001, "Wrong alignment on FNE_UIBlock_RequestTransition");
static_assert(sizeof(FNE_UIBlock_RequestTransition) == 0x000001, "Wrong size on FNE_UIBlock_RequestTransition");
static_assert(offsetof(FNE_UIBlock_RequestTransition, State) == 0x000000, "Member 'FNE_UIBlock_RequestTransition::State' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlock.SetBlockTiming
// 0x002C (0x002C - 0x0000)
struct FNE_UIBlock_SetBlockTiming final
{
public:
	struct FFNE_UIBlockTiming                     Timing;                                            // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_UIBlock_SetBlockTiming) == 0x000004, "Wrong alignment on FNE_UIBlock_SetBlockTiming");
static_assert(sizeof(FNE_UIBlock_SetBlockTiming) == 0x00002C, "Wrong size on FNE_UIBlock_SetBlockTiming");
static_assert(offsetof(FNE_UIBlock_SetBlockTiming, Timing) == 0x000000, "Member 'FNE_UIBlock_SetBlockTiming::Timing' has a wrong offset!");

// Function FNE_UILibrary.FNE_UIBlueprintFunctionLibrary.PlayAnimationDuringTime
// 0x0018 (0x0018 - 0x0000)
struct FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayForward;                                      // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime) == 0x000008, "Wrong alignment on FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime");
static_assert(sizeof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime) == 0x000018, "Wrong size on FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime");
static_assert(offsetof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime, Widget) == 0x000000, "Member 'FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime::Widget' has a wrong offset!");
static_assert(offsetof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime, Animation) == 0x000008, "Member 'FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime::Animation' has a wrong offset!");
static_assert(offsetof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime, PlayTime) == 0x000010, "Member 'FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime::PlayTime' has a wrong offset!");
static_assert(offsetof(FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime, bPlayForward) == 0x000014, "Member 'FNE_UIBlueprintFunctionLibrary_PlayAnimationDuringTime::bPlayForward' has a wrong offset!");

// Function FNE_UILibrary.FNE_CTAButton.BP_SetSecondaryText
// 0x0018 (0x0018 - 0x0000)
struct FNE_CTAButton_BP_SetSecondaryText final
{
public:
	class FText                                   ButtonSecondaryText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_CTAButton_BP_SetSecondaryText) == 0x000008, "Wrong alignment on FNE_CTAButton_BP_SetSecondaryText");
static_assert(sizeof(FNE_CTAButton_BP_SetSecondaryText) == 0x000018, "Wrong size on FNE_CTAButton_BP_SetSecondaryText");
static_assert(offsetof(FNE_CTAButton_BP_SetSecondaryText, ButtonSecondaryText) == 0x000000, "Member 'FNE_CTAButton_BP_SetSecondaryText::ButtonSecondaryText' has a wrong offset!");

// Function FNE_UILibrary.FNE_CTAButton.BP_SetText
// 0x0018 (0x0018 - 0x0000)
struct FNE_CTAButton_BP_SetText final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_CTAButton_BP_SetText) == 0x000008, "Wrong alignment on FNE_CTAButton_BP_SetText");
static_assert(sizeof(FNE_CTAButton_BP_SetText) == 0x000018, "Wrong size on FNE_CTAButton_BP_SetText");
static_assert(offsetof(FNE_CTAButton_BP_SetText, ButtonText) == 0x000000, "Member 'FNE_CTAButton_BP_SetText::ButtonText' has a wrong offset!");

// Function FNE_UILibrary.FNE_CTAButton.SetSecondaryText
// 0x0018 (0x0018 - 0x0000)
struct FNE_CTAButton_SetSecondaryText final
{
public:
	class FText                                   ButtonSecondaryText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_CTAButton_SetSecondaryText) == 0x000008, "Wrong alignment on FNE_CTAButton_SetSecondaryText");
static_assert(sizeof(FNE_CTAButton_SetSecondaryText) == 0x000018, "Wrong size on FNE_CTAButton_SetSecondaryText");
static_assert(offsetof(FNE_CTAButton_SetSecondaryText, ButtonSecondaryText) == 0x000000, "Member 'FNE_CTAButton_SetSecondaryText::ButtonSecondaryText' has a wrong offset!");

// Function FNE_UILibrary.FNE_CTAButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct FNE_CTAButton_SetText final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_CTAButton_SetText) == 0x000008, "Wrong alignment on FNE_CTAButton_SetText");
static_assert(sizeof(FNE_CTAButton_SetText) == 0x000018, "Wrong size on FNE_CTAButton_SetText");
static_assert(offsetof(FNE_CTAButton_SetText, ButtonText) == 0x000000, "Member 'FNE_CTAButton_SetText::ButtonText' has a wrong offset!");

}

