#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassMovement

#include "Basic.hpp"

#include "MassEntity_classes.hpp"
#include "MassMovement_structs.hpp"
#include "MassSpawner_classes.hpp"


namespace SDK
{

// Class MassMovement.MassApplyMovementProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UMassApplyMovementProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassApplyMovementProcessor">();
	}
	static class UMassApplyMovementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassApplyMovementProcessor>();
	}
};
static_assert(alignof(UMassApplyMovementProcessor) == 0x000008, "Wrong alignment on UMassApplyMovementProcessor");
static_assert(sizeof(UMassApplyMovementProcessor) == 0x000360, "Wrong size on UMassApplyMovementProcessor");

// Class MassMovement.MassMovementSettings
// 0x0010 (0x0038 - 0x0028)
class UMassMovementSettings final : public UMassModuleSettings
{
public:
	TArray<struct FMassMovementStyle>             MovementStyles;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassMovementSettings">();
	}
	static class UMassMovementSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassMovementSettings>();
	}
};
static_assert(alignof(UMassMovementSettings) == 0x000008, "Wrong alignment on UMassMovementSettings");
static_assert(sizeof(UMassMovementSettings) == 0x000038, "Wrong size on UMassMovementSettings");
static_assert(offsetof(UMassMovementSettings, MovementStyles) == 0x000028, "Member 'UMassMovementSettings::MovementStyles' has a wrong offset!");

// Class MassMovement.MassMovementTrait
// 0x0028 (0x0050 - 0x0028)
class UMassMovementTrait final : public UMassEntityTraitBase
{
public:
	struct FMassMovementParameters                Movement;                                          // 0x0028(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassMovementTrait">();
	}
	static class UMassMovementTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassMovementTrait>();
	}
};
static_assert(alignof(UMassMovementTrait) == 0x000008, "Wrong alignment on UMassMovementTrait");
static_assert(sizeof(UMassMovementTrait) == 0x000050, "Wrong size on UMassMovementTrait");
static_assert(offsetof(UMassMovementTrait, Movement) == 0x000028, "Member 'UMassMovementTrait::Movement' has a wrong offset!");

// Class MassMovement.MassSimpleMovementTrait
// 0x0000 (0x0028 - 0x0028)
class UMassSimpleMovementTrait final : public UMassEntityTraitBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSimpleMovementTrait">();
	}
	static class UMassSimpleMovementTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSimpleMovementTrait>();
	}
};
static_assert(alignof(UMassSimpleMovementTrait) == 0x000008, "Wrong alignment on UMassSimpleMovementTrait");
static_assert(sizeof(UMassSimpleMovementTrait) == 0x000028, "Wrong size on UMassSimpleMovementTrait");

// Class MassMovement.MassSimpleMovementProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UMassSimpleMovementProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSimpleMovementProcessor">();
	}
	static class UMassSimpleMovementProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSimpleMovementProcessor>();
	}
};
static_assert(alignof(UMassSimpleMovementProcessor) == 0x000008, "Wrong alignment on UMassSimpleMovementProcessor");
static_assert(sizeof(UMassSimpleMovementProcessor) == 0x000360, "Wrong size on UMassSimpleMovementProcessor");

// Class MassMovement.MassVelocityRandomizerTrait
// 0x0010 (0x0038 - 0x0028)
class UMassVelocityRandomizerTrait final : public UMassEntityTraitBase
{
public:
	float                                         MinSpeed;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeed;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetZComponent;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassVelocityRandomizerTrait">();
	}
	static class UMassVelocityRandomizerTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassVelocityRandomizerTrait>();
	}
};
static_assert(alignof(UMassVelocityRandomizerTrait) == 0x000008, "Wrong alignment on UMassVelocityRandomizerTrait");
static_assert(sizeof(UMassVelocityRandomizerTrait) == 0x000038, "Wrong size on UMassVelocityRandomizerTrait");
static_assert(offsetof(UMassVelocityRandomizerTrait, MinSpeed) == 0x000028, "Member 'UMassVelocityRandomizerTrait::MinSpeed' has a wrong offset!");
static_assert(offsetof(UMassVelocityRandomizerTrait, MaxSpeed) == 0x00002C, "Member 'UMassVelocityRandomizerTrait::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UMassVelocityRandomizerTrait, bSetZComponent) == 0x000030, "Member 'UMassVelocityRandomizerTrait::bSetZComponent' has a wrong offset!");

// Class MassMovement.MassRandomVelocityInitializer
// 0x02B8 (0x0390 - 0x00D8)
class UMassRandomVelocityInitializer final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeed;                                          // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeed;                                          // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetZComponent;                                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassRandomVelocityInitializer">();
	}
	static class UMassRandomVelocityInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassRandomVelocityInitializer>();
	}
};
static_assert(alignof(UMassRandomVelocityInitializer) == 0x000008, "Wrong alignment on UMassRandomVelocityInitializer");
static_assert(sizeof(UMassRandomVelocityInitializer) == 0x000390, "Wrong size on UMassRandomVelocityInitializer");
static_assert(offsetof(UMassRandomVelocityInitializer, MinSpeed) == 0x000380, "Member 'UMassRandomVelocityInitializer::MinSpeed' has a wrong offset!");
static_assert(offsetof(UMassRandomVelocityInitializer, MaxSpeed) == 0x000384, "Member 'UMassRandomVelocityInitializer::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UMassRandomVelocityInitializer, bSetZComponent) == 0x000388, "Member 'UMassRandomVelocityInitializer::bSetZComponent' has a wrong offset!");

}

