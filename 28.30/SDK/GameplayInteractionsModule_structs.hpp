#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayInteractionsModule

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "SmartObjectsModule_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "StructUtils_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GameplayInteractionsModule.EGameplayTaskActuationResult
// NumValues: 0x0004
enum class EGameplayTaskActuationResult : uint8
{
	None                                     = 0,
	RequestFailed                            = 1,
	Failed                                   = 2,
	Succeeded                                = 3,
};

// Enum GameplayInteractionsModule.EGameplayInteractionAbortReason
// NumValues: 0x0003
enum class EGameplayInteractionAbortReason : uint8
{
	Unset                                    = 0,
	ExternalAbort                            = 1,
	InternalAbort                            = 2,
};

// Enum GameplayInteractionsModule.EGameplayInteractionModifyGameplayTagOperation
// NumValues: 0x0002
enum class EGameplayInteractionModifyGameplayTagOperation : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
};

// Enum GameplayInteractionsModule.EGameplayInteractionTaskModify
// NumValues: 0x0005
enum class EGameplayInteractionTaskModify : uint8
{
	OnEnterStateUndoOnExitState              = 0,
	OnEnterState                             = 1,
	OnExitState                              = 2,
	OnExitStateFailed                        = 3,
	OnExitStateSucceeded                     = 4,
};

// Enum GameplayInteractionsModule.EGameplayInteractionTaskTrigger
// NumValues: 0x0004
enum class EGameplayInteractionTaskTrigger : uint8
{
	OnEnterState                             = 0,
	OnExitState                              = 1,
	OnExitStateFailed                        = 2,
	OnExitStateSucceeded                     = 3,
};

// Enum GameplayInteractionsModule.EGameplayInteractionMatchSlotTagSource
// NumValues: 0x0002
enum class EGameplayInteractionMatchSlotTagSource : uint8
{
	ActivityTags                             = 0,
	RuntimeTags                              = 1,
};

// Enum GameplayInteractionsModule.EGameplayInteractionSlotReferenceType
// NumValues: 0x0002
enum class EGameplayInteractionSlotReferenceType : uint8
{
	ByActivityTag                            = 0,
	ByLinkTag                                = 1,
};

// Enum GameplayInteractionsModule.EGameplayInteractionSyncSlotTransitionState
// NumValues: 0x0003
enum class EGameplayInteractionSyncSlotTransitionState : uint8
{
	WaitingForFromTag                        = 0,
	WaitingForToTag                          = 1,
	Completed                                = 2,
};

// Enum GameplayInteractionsModule.EPlayContextualAnimExecutionMethod
// NumValues: 0x0004
enum class EPlayContextualAnimExecutionMethod : uint8
{
	StartInteraction                         = 0,
	JoinInteraction                          = 1,
	TransitionAllActors                      = 2,
	TransitionSingleActor                    = 3,
};

// ScriptStruct GameplayInteractionsModule.GameplayInteractionAbortContext
// 0x0001 (0x0001 - 0x0000)
struct FGameplayInteractionAbortContext final
{
public:
	EGameplayInteractionAbortReason               Reason;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionAbortContext) == 0x000001, "Wrong alignment on FGameplayInteractionAbortContext");
static_assert(sizeof(FGameplayInteractionAbortContext) == 0x000001, "Wrong size on FGameplayInteractionAbortContext");
static_assert(offsetof(FGameplayInteractionAbortContext, Reason) == 0x000000, "Member 'FGameplayInteractionAbortContext::Reason' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionContext
// 0x0068 (0x0068 - 0x0000)
struct FGameplayInteractionContext final
{
public:
	struct FStateTreeInstanceData                 StateTreeInstanceData;                             // 0x0000(0x0010)(Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectClaimHandle                ClaimedHandle;                                     // 0x0010(0x0020)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectSlotEntranceHandle         SlotEntranceHandle;                                // 0x0030(0x0018)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayInteractionAbortContext       AbortContext;                                      // 0x0048(0x0001)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ContextActor;                                      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SmartObjectActor;                                  // 0x0058(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayInteractionSmartObjectBehaviorDefinition* Definition;                                        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGameplayInteractionContext) == 0x000008, "Wrong alignment on FGameplayInteractionContext");
static_assert(sizeof(FGameplayInteractionContext) == 0x000068, "Wrong size on FGameplayInteractionContext");
static_assert(offsetof(FGameplayInteractionContext, StateTreeInstanceData) == 0x000000, "Member 'FGameplayInteractionContext::StateTreeInstanceData' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, ClaimedHandle) == 0x000010, "Member 'FGameplayInteractionContext::ClaimedHandle' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, SlotEntranceHandle) == 0x000030, "Member 'FGameplayInteractionContext::SlotEntranceHandle' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, AbortContext) == 0x000048, "Member 'FGameplayInteractionContext::AbortContext' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, ContextActor) == 0x000050, "Member 'FGameplayInteractionContext::ContextActor' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, SmartObjectActor) == 0x000058, "Member 'FGameplayInteractionContext::SmartObjectActor' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionContext, Definition) == 0x000060, "Member 'FGameplayInteractionContext::Definition' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSlotUserData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGameplayInteractionSlotUserData final : public FSmartObjectSlotStateData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSlotUserData) == 0x000004, "Wrong alignment on FGameplayInteractionSlotUserData");
static_assert(sizeof(FGameplayInteractionSlotUserData) == 0x000008, "Wrong size on FGameplayInteractionSlotUserData");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FGameplayInteractionStateTreeTask : public FStateTreeTaskBase
{
};
static_assert(alignof(FGameplayInteractionStateTreeTask) == 0x000008, "Wrong alignment on FGameplayInteractionStateTreeTask");
static_assert(sizeof(FGameplayInteractionStateTreeTask) == 0x000020, "Wrong size on FGameplayInteractionStateTreeTask");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionStateTreeCondition
// 0x0000 (0x0020 - 0x0020)
struct FGameplayInteractionStateTreeCondition : public FStateTreeConditionBase
{
};
static_assert(alignof(FGameplayInteractionStateTreeCondition) == 0x000008, "Wrong alignment on FGameplayInteractionStateTreeCondition");
static_assert(sizeof(FGameplayInteractionStateTreeCondition) == 0x000020, "Wrong size on FGameplayInteractionStateTreeCondition");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionMatchSlotTagsConditionInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FGameplayInteractionMatchSlotTagsConditionInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 Slot;                                              // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToMatch;                                       // 0x0010(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionMatchSlotTagsConditionInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionMatchSlotTagsConditionInstanceData");
static_assert(sizeof(FGameplayInteractionMatchSlotTagsConditionInstanceData) == 0x000030, "Wrong size on FGameplayInteractionMatchSlotTagsConditionInstanceData");
static_assert(offsetof(FGameplayInteractionMatchSlotTagsConditionInstanceData, Slot) == 0x000000, "Member 'FGameplayInteractionMatchSlotTagsConditionInstanceData::Slot' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionMatchSlotTagsConditionInstanceData, TagsToMatch) == 0x000010, "Member 'FGameplayInteractionMatchSlotTagsConditionInstanceData::TagsToMatch' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSlotTagsMatchCondition
// 0x0008 (0x0028 - 0x0020)
struct FGameplayInteractionSlotTagsMatchCondition final : public FGameplayInteractionStateTreeCondition
{
public:
	EGameplayInteractionMatchSlotTagSource        Source;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSlotTagsMatchCondition) == 0x000008, "Wrong alignment on FGameplayInteractionSlotTagsMatchCondition");
static_assert(sizeof(FGameplayInteractionSlotTagsMatchCondition) == 0x000028, "Wrong size on FGameplayInteractionSlotTagsMatchCondition");
static_assert(offsetof(FGameplayInteractionSlotTagsMatchCondition, Source) == 0x000020, "Member 'FGameplayInteractionSlotTagsMatchCondition::Source' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSlotTagsMatchCondition, MatchType) == 0x000021, "Member 'FGameplayInteractionSlotTagsMatchCondition::MatchType' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSlotTagsMatchCondition, bExactMatch) == 0x000022, "Member 'FGameplayInteractionSlotTagsMatchCondition::bExactMatch' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSlotTagsMatchCondition, bInvert) == 0x000023, "Member 'FGameplayInteractionSlotTagsMatchCondition::bInvert' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionQuerySlotTagsConditionInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FGameplayInteractionQuerySlotTagsConditionInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 Slot;                                              // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionQuerySlotTagsConditionInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionQuerySlotTagsConditionInstanceData");
static_assert(sizeof(FGameplayInteractionQuerySlotTagsConditionInstanceData) == 0x000010, "Wrong size on FGameplayInteractionQuerySlotTagsConditionInstanceData");
static_assert(offsetof(FGameplayInteractionQuerySlotTagsConditionInstanceData, Slot) == 0x000000, "Member 'FGameplayInteractionQuerySlotTagsConditionInstanceData::Slot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionQuerySlotTagCondition
// 0x0058 (0x0078 - 0x0020)
struct FGameplayInteractionQuerySlotTagCondition final : public FGameplayInteractionStateTreeCondition
{
public:
	EGameplayInteractionMatchSlotTagSource        Source;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0028(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionQuerySlotTagCondition) == 0x000008, "Wrong alignment on FGameplayInteractionQuerySlotTagCondition");
static_assert(sizeof(FGameplayInteractionQuerySlotTagCondition) == 0x000078, "Wrong size on FGameplayInteractionQuerySlotTagCondition");
static_assert(offsetof(FGameplayInteractionQuerySlotTagCondition, Source) == 0x000020, "Member 'FGameplayInteractionQuerySlotTagCondition::Source' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionQuerySlotTagCondition, TagQuery) == 0x000028, "Member 'FGameplayInteractionQuerySlotTagCondition::TagQuery' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionQuerySlotTagCondition, bInvert) == 0x000070, "Member 'FGameplayInteractionQuerySlotTagCondition::bInvert' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionIsSlotHandleValidConditionInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FGameplayInteractionIsSlotHandleValidConditionInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 Slot;                                              // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionIsSlotHandleValidConditionInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionIsSlotHandleValidConditionInstanceData");
static_assert(sizeof(FGameplayInteractionIsSlotHandleValidConditionInstanceData) == 0x000010, "Wrong size on FGameplayInteractionIsSlotHandleValidConditionInstanceData");
static_assert(offsetof(FGameplayInteractionIsSlotHandleValidConditionInstanceData, Slot) == 0x000000, "Member 'FGameplayInteractionIsSlotHandleValidConditionInstanceData::Slot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionIsSlotHandleValidCondition
// 0x0008 (0x0028 - 0x0020)
struct FGameplayInteractionIsSlotHandleValidCondition final : public FGameplayInteractionStateTreeCondition
{
public:
	bool                                          bInvert;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionIsSlotHandleValidCondition) == 0x000008, "Wrong alignment on FGameplayInteractionIsSlotHandleValidCondition");
static_assert(sizeof(FGameplayInteractionIsSlotHandleValidCondition) == 0x000028, "Wrong size on FGameplayInteractionIsSlotHandleValidCondition");
static_assert(offsetof(FGameplayInteractionIsSlotHandleValidCondition, bInvert) == 0x000020, "Member 'FGameplayInteractionIsSlotHandleValidCondition::bInvert' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionFindSlotTaskInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FGameplayInteractionFindSlotTaskInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 ReferenceSlot;                                     // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 ResultSlot;                                        // 0x0010(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionFindSlotTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionFindSlotTaskInstanceData");
static_assert(sizeof(FGameplayInteractionFindSlotTaskInstanceData) == 0x000020, "Wrong size on FGameplayInteractionFindSlotTaskInstanceData");
static_assert(offsetof(FGameplayInteractionFindSlotTaskInstanceData, ReferenceSlot) == 0x000000, "Member 'FGameplayInteractionFindSlotTaskInstanceData::ReferenceSlot' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionFindSlotTaskInstanceData, ResultSlot) == 0x000010, "Member 'FGameplayInteractionFindSlotTaskInstanceData::ResultSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionFindSlotTask
// 0x0010 (0x0030 - 0x0020)
struct FGameplayInteractionFindSlotTask final : public FGameplayInteractionStateTreeTask
{
public:
	EGameplayInteractionSlotReferenceType         ReferenceType;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FindByTag;                                         // 0x0024(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionFindSlotTask) == 0x000008, "Wrong alignment on FGameplayInteractionFindSlotTask");
static_assert(sizeof(FGameplayInteractionFindSlotTask) == 0x000030, "Wrong size on FGameplayInteractionFindSlotTask");
static_assert(offsetof(FGameplayInteractionFindSlotTask, ReferenceType) == 0x000020, "Member 'FGameplayInteractionFindSlotTask::ReferenceType' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionFindSlotTask, FindByTag) == 0x000024, "Member 'FGameplayInteractionFindSlotTask::FindByTag' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionGetSlotActorTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FGameplayInteractionGetSlotActorTaskInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ResultActor;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionGetSlotActorTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionGetSlotActorTaskInstanceData");
static_assert(sizeof(FGameplayInteractionGetSlotActorTaskInstanceData) == 0x000018, "Wrong size on FGameplayInteractionGetSlotActorTaskInstanceData");
static_assert(offsetof(FGameplayInteractionGetSlotActorTaskInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionGetSlotActorTaskInstanceData::TargetSlot' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionGetSlotActorTaskInstanceData, ResultActor) == 0x000010, "Member 'FGameplayInteractionGetSlotActorTaskInstanceData::ResultActor' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionGetSlotActorTask
// 0x0008 (0x0028 - 0x0020)
struct FGameplayInteractionGetSlotActorTask final : public FGameplayInteractionStateTreeTask
{
public:
	bool                                          bFailIfNotFound;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionGetSlotActorTask) == 0x000008, "Wrong alignment on FGameplayInteractionGetSlotActorTask");
static_assert(sizeof(FGameplayInteractionGetSlotActorTask) == 0x000028, "Wrong size on FGameplayInteractionGetSlotActorTask");
static_assert(offsetof(FGameplayInteractionGetSlotActorTask, bFailIfNotFound) == 0x000020, "Member 'FGameplayInteractionGetSlotActorTask::bFailIfNotFound' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionListenSlotEventsTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FGameplayInteractionListenSlotEventsTaskInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionListenSlotEventsTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionListenSlotEventsTaskInstanceData");
static_assert(sizeof(FGameplayInteractionListenSlotEventsTaskInstanceData) == 0x000018, "Wrong size on FGameplayInteractionListenSlotEventsTaskInstanceData");
static_assert(offsetof(FGameplayInteractionListenSlotEventsTaskInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionListenSlotEventsTaskInstanceData::TargetSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionListenSlotEventsTask
// 0x0008 (0x0028 - 0x0020)
struct FGameplayInteractionListenSlotEventsTask final : public FGameplayInteractionStateTreeTask
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionListenSlotEventsTask) == 0x000008, "Wrong alignment on FGameplayInteractionListenSlotEventsTask");
static_assert(sizeof(FGameplayInteractionListenSlotEventsTask) == 0x000028, "Wrong size on FGameplayInteractionListenSlotEventsTask");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionModifySlotTagTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FGameplayInteractionModifySlotTagTaskInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagRemoved;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionModifySlotTagTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionModifySlotTagTaskInstanceData");
static_assert(sizeof(FGameplayInteractionModifySlotTagTaskInstanceData) == 0x000018, "Wrong size on FGameplayInteractionModifySlotTagTaskInstanceData");
static_assert(offsetof(FGameplayInteractionModifySlotTagTaskInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionModifySlotTagTaskInstanceData::TargetSlot' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionModifySlotTagTaskInstanceData, bTagRemoved) == 0x000010, "Member 'FGameplayInteractionModifySlotTagTaskInstanceData::bTagRemoved' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionModifySlotTagTask
// 0x0010 (0x0030 - 0x0020)
struct FGameplayInteractionModifySlotTagTask final : public FGameplayInteractionStateTreeTask
{
public:
	EGameplayInteractionTaskModify                Modify;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleExternalStopAsFailure;                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayInteractionModifyGameplayTagOperation Operation;                                         // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           tag;                                               // 0x0024(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionModifySlotTagTask) == 0x000008, "Wrong alignment on FGameplayInteractionModifySlotTagTask");
static_assert(sizeof(FGameplayInteractionModifySlotTagTask) == 0x000030, "Wrong size on FGameplayInteractionModifySlotTagTask");
static_assert(offsetof(FGameplayInteractionModifySlotTagTask, Modify) == 0x000020, "Member 'FGameplayInteractionModifySlotTagTask::Modify' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionModifySlotTagTask, bHandleExternalStopAsFailure) == 0x000021, "Member 'FGameplayInteractionModifySlotTagTask::bHandleExternalStopAsFailure' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionModifySlotTagTask, Operation) == 0x000022, "Member 'FGameplayInteractionModifySlotTagTask::Operation' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionModifySlotTagTask, tag) == 0x000024, "Member 'FGameplayInteractionModifySlotTagTask::tag' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSendSlotEventTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FGameplayInteractionSendSlotEventTaskInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayInteractionSendSlotEventTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionSendSlotEventTaskInstanceData");
static_assert(sizeof(FGameplayInteractionSendSlotEventTaskInstanceData) == 0x000010, "Wrong size on FGameplayInteractionSendSlotEventTaskInstanceData");
static_assert(offsetof(FGameplayInteractionSendSlotEventTaskInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionSendSlotEventTaskInstanceData::TargetSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSendSlotEventTask
// 0x0020 (0x0040 - 0x0020)
struct FGameplayInteractionSendSlotEventTask final : public FGameplayInteractionStateTreeTask
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0020(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       Payload;                                           // 0x0028(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	EGameplayInteractionTaskTrigger               Trigger;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleExternalStopAsFailure;                      // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldTriggerOnReselect;                          // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSendSlotEventTask) == 0x000008, "Wrong alignment on FGameplayInteractionSendSlotEventTask");
static_assert(sizeof(FGameplayInteractionSendSlotEventTask) == 0x000040, "Wrong size on FGameplayInteractionSendSlotEventTask");
static_assert(offsetof(FGameplayInteractionSendSlotEventTask, EventTag) == 0x000020, "Member 'FGameplayInteractionSendSlotEventTask::EventTag' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSendSlotEventTask, Payload) == 0x000028, "Member 'FGameplayInteractionSendSlotEventTask::Payload' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSendSlotEventTask, Trigger) == 0x000038, "Member 'FGameplayInteractionSendSlotEventTask::Trigger' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSendSlotEventTask, bHandleExternalStopAsFailure) == 0x000039, "Member 'FGameplayInteractionSendSlotEventTask::bHandleExternalStopAsFailure' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSendSlotEventTask, bShouldTriggerOnReselect) == 0x00003A, "Member 'FGameplayInteractionSendSlotEventTask::bShouldTriggerOnReselect' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSetSlotEnabledInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FGameplayInteractionSetSlotEnabledInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialState;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSetSlotEnabledInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionSetSlotEnabledInstanceData");
static_assert(sizeof(FGameplayInteractionSetSlotEnabledInstanceData) == 0x000018, "Wrong size on FGameplayInteractionSetSlotEnabledInstanceData");
static_assert(offsetof(FGameplayInteractionSetSlotEnabledInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionSetSlotEnabledInstanceData::TargetSlot' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSetSlotEnabledInstanceData, bInitialState) == 0x000010, "Member 'FGameplayInteractionSetSlotEnabledInstanceData::bInitialState' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSetSlotEnabledTask
// 0x0008 (0x0028 - 0x0020)
struct FGameplayInteractionSetSlotEnabledTask final : public FGameplayInteractionStateTreeTask
{
public:
	EGameplayInteractionTaskModify                Modify;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleExternalStopAsFailure;                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableSlot;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSetSlotEnabledTask) == 0x000008, "Wrong alignment on FGameplayInteractionSetSlotEnabledTask");
static_assert(sizeof(FGameplayInteractionSetSlotEnabledTask) == 0x000028, "Wrong size on FGameplayInteractionSetSlotEnabledTask");
static_assert(offsetof(FGameplayInteractionSetSlotEnabledTask, Modify) == 0x000020, "Member 'FGameplayInteractionSetSlotEnabledTask::Modify' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSetSlotEnabledTask, bHandleExternalStopAsFailure) == 0x000021, "Member 'FGameplayInteractionSetSlotEnabledTask::bHandleExternalStopAsFailure' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSetSlotEnabledTask, bEnableSlot) == 0x000022, "Member 'FGameplayInteractionSetSlotEnabledTask::bEnableSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSyncSlotTagStateInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FGameplayInteractionSyncSlotTagStateInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSyncSlotTagStateInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionSyncSlotTagStateInstanceData");
static_assert(sizeof(FGameplayInteractionSyncSlotTagStateInstanceData) == 0x000020, "Wrong size on FGameplayInteractionSyncSlotTagStateInstanceData");
static_assert(offsetof(FGameplayInteractionSyncSlotTagStateInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionSyncSlotTagStateInstanceData::TargetSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSyncSlotTagStateTask
// 0x0010 (0x0030 - 0x0020)
struct FGameplayInteractionSyncSlotTagStateTask final : public FGameplayInteractionStateTreeTask
{
public:
	struct FGameplayTag                           TagToMonitor;                                      // 0x0020(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BreakEventTag;                                     // 0x0024(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSyncSlotTagStateTask) == 0x000008, "Wrong alignment on FGameplayInteractionSyncSlotTagStateTask");
static_assert(sizeof(FGameplayInteractionSyncSlotTagStateTask) == 0x000030, "Wrong size on FGameplayInteractionSyncSlotTagStateTask");
static_assert(offsetof(FGameplayInteractionSyncSlotTagStateTask, TagToMonitor) == 0x000020, "Member 'FGameplayInteractionSyncSlotTagStateTask::TagToMonitor' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSyncSlotTagStateTask, BreakEventTag) == 0x000024, "Member 'FGameplayInteractionSyncSlotTagStateTask::BreakEventTag' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSyncSlotTagTransitionInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FGameplayInteractionSyncSlotTagTransitionInstanceData final
{
public:
	struct FSmartObjectSlotHandle                 TargetSlot;                                        // 0x0000(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSyncSlotTagTransitionInstanceData) == 0x000008, "Wrong alignment on FGameplayInteractionSyncSlotTagTransitionInstanceData");
static_assert(sizeof(FGameplayInteractionSyncSlotTagTransitionInstanceData) == 0x000020, "Wrong size on FGameplayInteractionSyncSlotTagTransitionInstanceData");
static_assert(offsetof(FGameplayInteractionSyncSlotTagTransitionInstanceData, TargetSlot) == 0x000000, "Member 'FGameplayInteractionSyncSlotTagTransitionInstanceData::TargetSlot' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.GameplayInteractionSyncSlotTagTransitionTask
// 0x0010 (0x0030 - 0x0020)
struct FGameplayInteractionSyncSlotTagTransitionTask final : public FGameplayInteractionStateTreeTask
{
public:
	struct FGameplayTag                           TransitionFromTag;                                 // 0x0020(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TransitionToTag;                                   // 0x0024(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TransitionEventTag;                                // 0x0028(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayInteractionSyncSlotTagTransitionTask) == 0x000008, "Wrong alignment on FGameplayInteractionSyncSlotTagTransitionTask");
static_assert(sizeof(FGameplayInteractionSyncSlotTagTransitionTask) == 0x000030, "Wrong size on FGameplayInteractionSyncSlotTagTransitionTask");
static_assert(offsetof(FGameplayInteractionSyncSlotTagTransitionTask, TransitionFromTag) == 0x000020, "Member 'FGameplayInteractionSyncSlotTagTransitionTask::TransitionFromTag' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSyncSlotTagTransitionTask, TransitionToTag) == 0x000024, "Member 'FGameplayInteractionSyncSlotTagTransitionTask::TransitionToTag' has a wrong offset!");
static_assert(offsetof(FGameplayInteractionSyncSlotTagTransitionTask, TransitionEventTag) == 0x000028, "Member 'FGameplayInteractionSyncSlotTagTransitionTask::TransitionEventTag' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.PlayMontageStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FPlayMontageStateTreeTaskInstanceData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComputedDuration;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayMontageStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FPlayMontageStateTreeTaskInstanceData");
static_assert(sizeof(FPlayMontageStateTreeTaskInstanceData) == 0x000010, "Wrong size on FPlayMontageStateTreeTaskInstanceData");
static_assert(offsetof(FPlayMontageStateTreeTaskInstanceData, Actor) == 0x000000, "Member 'FPlayMontageStateTreeTaskInstanceData::Actor' has a wrong offset!");
static_assert(offsetof(FPlayMontageStateTreeTaskInstanceData, ComputedDuration) == 0x000008, "Member 'FPlayMontageStateTreeTaskInstanceData::ComputedDuration' has a wrong offset!");
static_assert(offsetof(FPlayMontageStateTreeTaskInstanceData, Time) == 0x00000C, "Member 'FPlayMontageStateTreeTaskInstanceData::Time' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.PlayMontageStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FPlayMontageStateTreeTask final : public FGameplayInteractionStateTreeTask
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPlayMontageStateTreeTask) == 0x000008, "Wrong alignment on FPlayMontageStateTreeTask");
static_assert(sizeof(FPlayMontageStateTreeTask) == 0x000028, "Wrong size on FPlayMontageStateTreeTask");
static_assert(offsetof(FPlayMontageStateTreeTask, Montage) == 0x000020, "Member 'FPlayMontageStateTreeTask::Montage' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.StateTreeTask_FindSlotEntranceLocation_InstanceData
// 0x00A0 (0x00A0 - 0x0000)
struct FStateTreeTask_FindSlotEntranceLocation_InstanceData final
{
public:
	class AActor*                                 UserActor;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 ReferenceSlot;                                     // 0x0008(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EntryTransform;                                    // 0x0020(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EntranceTags;                                      // 0x0080(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateTreeTask_FindSlotEntranceLocation_InstanceData) == 0x000010, "Wrong alignment on FStateTreeTask_FindSlotEntranceLocation_InstanceData");
static_assert(sizeof(FStateTreeTask_FindSlotEntranceLocation_InstanceData) == 0x0000A0, "Wrong size on FStateTreeTask_FindSlotEntranceLocation_InstanceData");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation_InstanceData, UserActor) == 0x000000, "Member 'FStateTreeTask_FindSlotEntranceLocation_InstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation_InstanceData, ReferenceSlot) == 0x000008, "Member 'FStateTreeTask_FindSlotEntranceLocation_InstanceData::ReferenceSlot' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation_InstanceData, EntryTransform) == 0x000020, "Member 'FStateTreeTask_FindSlotEntranceLocation_InstanceData::EntryTransform' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation_InstanceData, EntranceTags) == 0x000080, "Member 'FStateTreeTask_FindSlotEntranceLocation_InstanceData::EntranceTags' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.StateTreeTask_FindSlotEntranceLocation
// 0x0018 (0x0038 - 0x0020)
struct FStateTreeTask_FindSlotEntranceLocation final : public FGameplayInteractionStateTreeTask
{
public:
	EFSmartObjectSlotEntrySelectionMethod         SelectMethod;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProjectNavigationLocation;                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTraceGroundLocation;                              // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckTransitionTrajectory;                        // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckEntranceLocationOverlap;                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckSlotLocationOverlap;                         // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSlotLocationAsFallbackCandidate;               // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESmartObjectSlotNavigationLocationType        LocationType;                                      // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USmartObjectSlotValidationFilter> ValidationFilter;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateTreeTask_FindSlotEntranceLocation) == 0x000008, "Wrong alignment on FStateTreeTask_FindSlotEntranceLocation");
static_assert(sizeof(FStateTreeTask_FindSlotEntranceLocation) == 0x000038, "Wrong size on FStateTreeTask_FindSlotEntranceLocation");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, SelectMethod) == 0x000020, "Member 'FStateTreeTask_FindSlotEntranceLocation::SelectMethod' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bProjectNavigationLocation) == 0x000021, "Member 'FStateTreeTask_FindSlotEntranceLocation::bProjectNavigationLocation' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bTraceGroundLocation) == 0x000022, "Member 'FStateTreeTask_FindSlotEntranceLocation::bTraceGroundLocation' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bCheckTransitionTrajectory) == 0x000023, "Member 'FStateTreeTask_FindSlotEntranceLocation::bCheckTransitionTrajectory' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bCheckEntranceLocationOverlap) == 0x000024, "Member 'FStateTreeTask_FindSlotEntranceLocation::bCheckEntranceLocationOverlap' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bCheckSlotLocationOverlap) == 0x000025, "Member 'FStateTreeTask_FindSlotEntranceLocation::bCheckSlotLocationOverlap' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, bUseSlotLocationAsFallbackCandidate) == 0x000026, "Member 'FStateTreeTask_FindSlotEntranceLocation::bUseSlotLocationAsFallbackCandidate' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, LocationType) == 0x000027, "Member 'FStateTreeTask_FindSlotEntranceLocation::LocationType' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_FindSlotEntranceLocation, ValidationFilter) == 0x000028, "Member 'FStateTreeTask_FindSlotEntranceLocation::ValidationFilter' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.StateTreeTask_GetSlotEntranceLocation_InstanceData
// 0x0038 (0x0038 - 0x0000)
struct FStateTreeTask_GetSlotEntranceLocation_InstanceData final
{
public:
	struct FSmartObjectSlotEntranceHandle         SlotEntranceHandle;                                // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EntranceTags;                                      // 0x0018(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateTreeTask_GetSlotEntranceLocation_InstanceData) == 0x000008, "Wrong alignment on FStateTreeTask_GetSlotEntranceLocation_InstanceData");
static_assert(sizeof(FStateTreeTask_GetSlotEntranceLocation_InstanceData) == 0x000038, "Wrong size on FStateTreeTask_GetSlotEntranceLocation_InstanceData");
static_assert(offsetof(FStateTreeTask_GetSlotEntranceLocation_InstanceData, SlotEntranceHandle) == 0x000000, "Member 'FStateTreeTask_GetSlotEntranceLocation_InstanceData::SlotEntranceHandle' has a wrong offset!");
static_assert(offsetof(FStateTreeTask_GetSlotEntranceLocation_InstanceData, EntranceTags) == 0x000018, "Member 'FStateTreeTask_GetSlotEntranceLocation_InstanceData::EntranceTags' has a wrong offset!");

// ScriptStruct GameplayInteractionsModule.StateTreeTask_GetSlotEntranceLocation
// 0x0008 (0x0028 - 0x0020)
struct FStateTreeTask_GetSlotEntranceLocation final : public FGameplayInteractionStateTreeTask
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateTreeTask_GetSlotEntranceLocation) == 0x000008, "Wrong alignment on FStateTreeTask_GetSlotEntranceLocation");
static_assert(sizeof(FStateTreeTask_GetSlotEntranceLocation) == 0x000028, "Wrong size on FStateTreeTask_GetSlotEntranceLocation");

// ScriptStruct GameplayInteractionsModule.StateTreeTask_PlayContextualAnim
// 0x0000 (0x0020 - 0x0020)
struct FStateTreeTask_PlayContextualAnim final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FStateTreeTask_PlayContextualAnim) == 0x000008, "Wrong alignment on FStateTreeTask_PlayContextualAnim");
static_assert(sizeof(FStateTreeTask_PlayContextualAnim) == 0x000020, "Wrong size on FStateTreeTask_PlayContextualAnim");

}

