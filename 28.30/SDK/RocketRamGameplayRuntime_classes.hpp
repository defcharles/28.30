#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RocketRamGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class RocketRamGameplayRuntime.AbilityTask_ApplyRootMotion_RocketRam
// 0x0038 (0x0138 - 0x0100)
class UAbilityTask_ApplyRootMotion_RocketRam final : public UAbilityTask_ApplyRootMotionConstantForce
{
public:
	struct FVector                                InitialDirection;                                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinSpeed;                                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxSpeed;                                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            SpeedCurve;                                        // 0x0120(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FloorTraceHeight;                                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0130(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UAbilityTask_ApplyRootMotion_RocketRam* ApplyRootMotion_RocketRam(class UGameplayAbility* InOwningAbility, class FName InTaskInstanceName, float InDuration, const struct FVector& InInitialDirection, float InMinSpeed, float InMaxSpeed, class UCurveFloat* InSpeedCurve, float InFloorTraceHeight, class UCurveVector* InPathOffsetCurve, ERootMotionFinishVelocityMode InVelocityOnFinishMode, const struct FVector& InSetVelocityOnFinish, float InClampVelocityOnFinish);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotion_RocketRam">();
	}
	static class UAbilityTask_ApplyRootMotion_RocketRam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotion_RocketRam>();
	}
};
static_assert(alignof(UAbilityTask_ApplyRootMotion_RocketRam) == 0x000008, "Wrong alignment on UAbilityTask_ApplyRootMotion_RocketRam");
static_assert(sizeof(UAbilityTask_ApplyRootMotion_RocketRam) == 0x000138, "Wrong size on UAbilityTask_ApplyRootMotion_RocketRam");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, InitialDirection) == 0x000100, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::InitialDirection' has a wrong offset!");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, MinSpeed) == 0x000118, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::MinSpeed' has a wrong offset!");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, MaxSpeed) == 0x00011C, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, SpeedCurve) == 0x000120, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::SpeedCurve' has a wrong offset!");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, FloorTraceHeight) == 0x000128, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::FloorTraceHeight' has a wrong offset!");
static_assert(offsetof(UAbilityTask_ApplyRootMotion_RocketRam, PathOffsetCurve) == 0x000130, "Member 'UAbilityTask_ApplyRootMotion_RocketRam::PathOffsetCurve' has a wrong offset!");

// Class RocketRamGameplayRuntime.RocketRamItemLayerAnimInstance
// 0x00E0 (0x07D0 - 0x06F0)
class URocketRamItemLayerAnimInstance final : public UFortItemLayerAnimInstance
{
public:
	bool                                          bIsRRWindUp;                                       // 0x06F0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRSlowAcceleration;                             // 0x06F1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRActiveThrust;                                 // 0x06F2(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRFreeFall;                                     // 0x06F3(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRFastFreeFall;                                 // 0x06F4(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRBraking;                                      // 0x06F5(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRRecovery;                                     // 0x06F6(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRRecoveryDelayed;                              // 0x06F7(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRRRecoveryHalfSecDelay;                         // 0x06F8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRROff;                                          // 0x06F9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x06FA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSliding;                                        // 0x06FB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouchingLocal;                                 // 0x06FC(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         XInput;                                            // 0x0700(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YInput;                                            // 0x0704(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pitch;                                             // 0x0708(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x070C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallImpactPitch;                                   // 0x0710(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallImpactYaw;                                     // 0x0714(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponLaunchDirection;                             // 0x0718(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoneRotOn;                                      // 0x0730(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPitchAndYawRot;                                 // 0x0731(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNoMortar;                                       // 0x0732(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGoingUp;                                        // 0x0733(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpFromGround;                                 // 0x0734(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving2DLocal;                                  // 0x0735(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_736[0x2];                                      // 0x0736(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditiveSquatAlpha;                                // 0x0738(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpAddCurveAlpha;                                 // 0x073C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsHeadAddAlpha;                                  // 0x0740(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpAddOffsetAlpha;                                // 0x0744(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsImpactWallBackup;                               // 0x0748(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLandingDetected;                                // 0x0749(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWallImpact;                                     // 0x074A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApexTimerEnd;                                   // 0x074B(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            WeaponRocketRam;                                   // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FBImpactGroundStateAlpha;                          // 0x0760(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBGroundSlideToFBWait;                            // 0x0764(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBThrustingToFBApex;                              // 0x0765(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBApexToFBToMortar;                               // 0x0766(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBOffGroundToFBImpactGround;                      // 0x0767(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBOffWallToFBImpactWall;                          // 0x0768(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBDetectGroundToFBToImpactGround;                 // 0x0769(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76A[0x2];                                      // 0x076A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FBJumpStateAlpha;                                  // 0x076C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FBToApexStateAlpha;                                // 0x0770(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBDetectSlideToFBToSlide;                         // 0x0774(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFBOffToFBWait;                                    // 0x0775(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_776[0x2];                                      // 0x0776(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UBPullLeverStateAlpha;                             // 0x0778(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UBSquatStateAlpha;                                 // 0x077C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UBJumpStateAlpha;                                  // 0x0780(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUBSquatToUBJump;                                  // 0x0784(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUBJumpToUBWait;                                   // 0x0785(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUBJumpToUBToGroundImpact;                         // 0x0786(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUBWaitToUBImpactGround;                           // 0x0787(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUBOffToUBWait;                                    // 0x0788(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_789[0x47];                                     // 0x0789(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RocketRamItemLayerAnimInstance">();
	}
	static class URocketRamItemLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URocketRamItemLayerAnimInstance>();
	}
};
static_assert(alignof(URocketRamItemLayerAnimInstance) == 0x000010, "Wrong alignment on URocketRamItemLayerAnimInstance");
static_assert(sizeof(URocketRamItemLayerAnimInstance) == 0x0007D0, "Wrong size on URocketRamItemLayerAnimInstance");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRWindUp) == 0x0006F0, "Member 'URocketRamItemLayerAnimInstance::bIsRRWindUp' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRSlowAcceleration) == 0x0006F1, "Member 'URocketRamItemLayerAnimInstance::bIsRRSlowAcceleration' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRActiveThrust) == 0x0006F2, "Member 'URocketRamItemLayerAnimInstance::bIsRRActiveThrust' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRFreeFall) == 0x0006F3, "Member 'URocketRamItemLayerAnimInstance::bIsRRFreeFall' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRFastFreeFall) == 0x0006F4, "Member 'URocketRamItemLayerAnimInstance::bIsRRFastFreeFall' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRBraking) == 0x0006F5, "Member 'URocketRamItemLayerAnimInstance::bIsRRBraking' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRRecovery) == 0x0006F6, "Member 'URocketRamItemLayerAnimInstance::bIsRRRecovery' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRRecoveryDelayed) == 0x0006F7, "Member 'URocketRamItemLayerAnimInstance::bIsRRRecoveryDelayed' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRRRecoveryHalfSecDelay) == 0x0006F8, "Member 'URocketRamItemLayerAnimInstance::bIsRRRecoveryHalfSecDelay' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsRROff) == 0x0006F9, "Member 'URocketRamItemLayerAnimInstance::bIsRROff' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsFalling) == 0x0006FA, "Member 'URocketRamItemLayerAnimInstance::bIsFalling' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsSliding) == 0x0006FB, "Member 'URocketRamItemLayerAnimInstance::bIsSliding' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsCrouchingLocal) == 0x0006FC, "Member 'URocketRamItemLayerAnimInstance::bIsCrouchingLocal' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, XInput) == 0x000700, "Member 'URocketRamItemLayerAnimInstance::XInput' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, YInput) == 0x000704, "Member 'URocketRamItemLayerAnimInstance::YInput' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, pitch) == 0x000708, "Member 'URocketRamItemLayerAnimInstance::pitch' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, Yaw) == 0x00070C, "Member 'URocketRamItemLayerAnimInstance::Yaw' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, WallImpactPitch) == 0x000710, "Member 'URocketRamItemLayerAnimInstance::WallImpactPitch' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, WallImpactYaw) == 0x000714, "Member 'URocketRamItemLayerAnimInstance::WallImpactYaw' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, WeaponLaunchDirection) == 0x000718, "Member 'URocketRamItemLayerAnimInstance::WeaponLaunchDirection' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsBoneRotOn) == 0x000730, "Member 'URocketRamItemLayerAnimInstance::bIsBoneRotOn' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsPitchAndYawRot) == 0x000731, "Member 'URocketRamItemLayerAnimInstance::bIsPitchAndYawRot' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsNoMortar) == 0x000732, "Member 'URocketRamItemLayerAnimInstance::bIsNoMortar' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsGoingUp) == 0x000733, "Member 'URocketRamItemLayerAnimInstance::bIsGoingUp' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsJumpFromGround) == 0x000734, "Member 'URocketRamItemLayerAnimInstance::bIsJumpFromGround' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsMoving2DLocal) == 0x000735, "Member 'URocketRamItemLayerAnimInstance::bIsMoving2DLocal' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, AdditiveSquatAlpha) == 0x000738, "Member 'URocketRamItemLayerAnimInstance::AdditiveSquatAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, JumpAddCurveAlpha) == 0x00073C, "Member 'URocketRamItemLayerAnimInstance::JumpAddCurveAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, ArmsHeadAddAlpha) == 0x000740, "Member 'URocketRamItemLayerAnimInstance::ArmsHeadAddAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, JumpAddOffsetAlpha) == 0x000744, "Member 'URocketRamItemLayerAnimInstance::JumpAddOffsetAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsImpactWallBackup) == 0x000748, "Member 'URocketRamItemLayerAnimInstance::bIsImpactWallBackup' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsLandingDetected) == 0x000749, "Member 'URocketRamItemLayerAnimInstance::bIsLandingDetected' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsWallImpact) == 0x00074A, "Member 'URocketRamItemLayerAnimInstance::bIsWallImpact' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bIsApexTimerEnd) == 0x00074B, "Member 'URocketRamItemLayerAnimInstance::bIsApexTimerEnd' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, FortPlayerPawn) == 0x000750, "Member 'URocketRamItemLayerAnimInstance::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, WeaponRocketRam) == 0x000758, "Member 'URocketRamItemLayerAnimInstance::WeaponRocketRam' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, FBImpactGroundStateAlpha) == 0x000760, "Member 'URocketRamItemLayerAnimInstance::FBImpactGroundStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBGroundSlideToFBWait) == 0x000764, "Member 'URocketRamItemLayerAnimInstance::bFBGroundSlideToFBWait' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBThrustingToFBApex) == 0x000765, "Member 'URocketRamItemLayerAnimInstance::bFBThrustingToFBApex' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBApexToFBToMortar) == 0x000766, "Member 'URocketRamItemLayerAnimInstance::bFBApexToFBToMortar' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBOffGroundToFBImpactGround) == 0x000767, "Member 'URocketRamItemLayerAnimInstance::bFBOffGroundToFBImpactGround' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBOffWallToFBImpactWall) == 0x000768, "Member 'URocketRamItemLayerAnimInstance::bFBOffWallToFBImpactWall' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBDetectGroundToFBToImpactGround) == 0x000769, "Member 'URocketRamItemLayerAnimInstance::bFBDetectGroundToFBToImpactGround' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, FBJumpStateAlpha) == 0x00076C, "Member 'URocketRamItemLayerAnimInstance::FBJumpStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, FBToApexStateAlpha) == 0x000770, "Member 'URocketRamItemLayerAnimInstance::FBToApexStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBDetectSlideToFBToSlide) == 0x000774, "Member 'URocketRamItemLayerAnimInstance::bFBDetectSlideToFBToSlide' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bFBOffToFBWait) == 0x000775, "Member 'URocketRamItemLayerAnimInstance::bFBOffToFBWait' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, UBPullLeverStateAlpha) == 0x000778, "Member 'URocketRamItemLayerAnimInstance::UBPullLeverStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, UBSquatStateAlpha) == 0x00077C, "Member 'URocketRamItemLayerAnimInstance::UBSquatStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, UBJumpStateAlpha) == 0x000780, "Member 'URocketRamItemLayerAnimInstance::UBJumpStateAlpha' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bUBSquatToUBJump) == 0x000784, "Member 'URocketRamItemLayerAnimInstance::bUBSquatToUBJump' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bUBJumpToUBWait) == 0x000785, "Member 'URocketRamItemLayerAnimInstance::bUBJumpToUBWait' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bUBJumpToUBToGroundImpact) == 0x000786, "Member 'URocketRamItemLayerAnimInstance::bUBJumpToUBToGroundImpact' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bUBWaitToUBImpactGround) == 0x000787, "Member 'URocketRamItemLayerAnimInstance::bUBWaitToUBImpactGround' has a wrong offset!");
static_assert(offsetof(URocketRamItemLayerAnimInstance, bUBOffToUBWait) == 0x000788, "Member 'URocketRamItemLayerAnimInstance::bUBOffToUBWait' has a wrong offset!");

}

