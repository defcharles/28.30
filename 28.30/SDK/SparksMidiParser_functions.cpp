#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksMidiParser

#include "Basic.hpp"

#include "SparksMidiParser_classes.hpp"
#include "SparksMidiParser_parameters.hpp"


namespace SDK
{

// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEvent.ListenForMidiNoteEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   EventNote                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventStart                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventEnd                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEvent* UAsyncAction_ListenForMidiNoteEvent::ListenForMidiNoteEvent(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const uint8 EventNote, const float SecondsBeforeEventStart, const float SecondsBeforeEventEnd)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEvent");

	Params::AsyncAction_ListenForMidiNoteEvent_ListenForMidiNoteEvent Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventNote = EventNote;
	Parms.SecondsBeforeEventStart = SecondsBeforeEventStart;
	Parms.SecondsBeforeEventEnd = SecondsBeforeEventEnd;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEvent.ListenForMidiNoteEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           EventNotes                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventStart                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventEnd                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEvent* UAsyncAction_ListenForMidiNoteEvent::ListenForMidiNoteEvents(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<uint8>& EventNotes, const float SecondsBeforeEventStart, const float SecondsBeforeEventEnd)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEvents");

	Params::AsyncAction_ListenForMidiNoteEvent_ListenForMidiNoteEvents Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventNotes = std::move(EventNotes);
	Parms.SecondsBeforeEventStart = SecondsBeforeEventStart;
	Parms.SecondsBeforeEventEnd = SecondsBeforeEventEnd;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEvent.ListenForMidiNoteEvents_WithParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNoteEventListenerParams     Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEvent* UAsyncAction_ListenForMidiNoteEvent::ListenForMidiNoteEvents_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiNoteEventListenerParams& Params_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEvents_WithParams");

	Params::AsyncAction_ListenForMidiNoteEvent_ListenForMidiNoteEvents_WithParams Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.Params_0 = std::move(Params_0);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiTextEvent.ListenForMidiTextEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventStart                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiTextEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiTextEvent* UAsyncAction_ListenForMidiTextEvent::ListenForMidiTextEvent(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const class FString& EventString, const float SecondsBeforeEventStart)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiTextEvent");

	Params::AsyncAction_ListenForMidiTextEvent_ListenForMidiTextEvent Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventString = std::move(EventString);
	Parms.SecondsBeforeEventStart = SecondsBeforeEventStart;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiTextEvent.ListenForMidiTextEvents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   EventStrings                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   SecondsBeforeEventStart                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiTextEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiTextEvent* UAsyncAction_ListenForMidiTextEvent::ListenForMidiTextEvents(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<class FString>& EventStrings, const float SecondsBeforeEventStart)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiTextEvents");

	Params::AsyncAction_ListenForMidiTextEvent_ListenForMidiTextEvents Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventStrings = std::move(EventStrings);
	Parms.SecondsBeforeEventStart = SecondsBeforeEventStart;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiTextEvent.ListenForMidiTextEvents_WithParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiTextEventListenerParams     Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiTextEvent*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiTextEvent* UAsyncAction_ListenForMidiTextEvent::ListenForMidiTextEvents_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiTextEventListenerParams& Params_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiTextEvents_WithParams");

	Params::AsyncAction_ListenForMidiTextEvent_ListenForMidiTextEvents_WithParams Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.Params_0 = std::move(Params_0);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEventPools.ListenForMidiNoteEventPools
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   EventNote                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           WatchNotes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMidiNoteEvent_DelayPool> DelayPools                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEventPools*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEventPools* UAsyncAction_ListenForMidiNoteEventPools::ListenForMidiNoteEventPools(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const uint8 EventNote, const TArray<uint8>& WatchNotes, const TArray<struct FMidiNoteEvent_DelayPool>& DelayPools)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEventPools");

	Params::AsyncAction_ListenForMidiNoteEventPools_ListenForMidiNoteEventPools Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventNote = EventNote;
	Parms.WatchNotes = std::move(WatchNotes);
	Parms.DelayPools = std::move(DelayPools);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEventPools.ListenForMidiNoteEventsPools
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MidiTrackName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           EventNotes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>                           WatchNotes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMidiNoteEvent_DelayPool> DelayPools                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEventPools*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEventPools* UAsyncAction_ListenForMidiNoteEventPools::ListenForMidiNoteEventsPools(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<uint8>& EventNotes, const TArray<uint8>& WatchNotes, const TArray<struct FMidiNoteEvent_DelayPool>& DelayPools)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEventsPools");

	Params::AsyncAction_ListenForMidiNoteEventPools_ListenForMidiNoteEventsPools Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.MidiTrackName = MidiTrackName;
	Parms.EventNotes = std::move(EventNotes);
	Parms.WatchNotes = std::move(WatchNotes);
	Parms.DelayPools = std::move(DelayPools);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.AsyncAction_ListenForMidiNoteEventPools.ListenForMidiNoteEventsPools_WithParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>MidiEventDriver                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNotePoolEventListenerParams Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAsyncAction_ListenForMidiNoteEventPools*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_ListenForMidiNoteEventPools* UAsyncAction_ListenForMidiNoteEventPools::ListenForMidiNoteEventsPools_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiNotePoolEventListenerParams& Params_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ListenForMidiNoteEventsPools_WithParams");

	Params::AsyncAction_ListenForMidiNoteEventPools_ListenForMidiNoteEventsPools_WithParams Parms{};

	Parms.MidiEventDriver = MidiEventDriver;
	Parms.Params_0 = std::move(Params_0);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetCurrentMidiSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IMidiEventDriverInterface::GetCurrentMidiSeconds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMidiSeconds");

	Params::MidiEventDriverInterface_GetCurrentMidiSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetCurrentMidiTick
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IMidiEventDriverInterface::GetCurrentMidiTick() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMidiTick");

	Params::MidiEventDriverInterface_GetCurrentMidiTick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetMidiPlaybackState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMidiPlaybackState               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiPlaybackState IMidiEventDriverInterface::GetMidiPlaybackState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiPlaybackState");

	Params::MidiEventDriverInterface_GetMidiPlaybackState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetMidiTrackNameFromSparksInstrument
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESparksInstrumentType                   InstrumentType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IMidiEventDriverInterface::GetMidiTrackNameFromSparksInstrument(const ESparksInstrumentType InstrumentType) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiTrackNameFromSparksInstrument");

	Params::MidiEventDriverInterface_GetMidiTrackNameFromSparksInstrument Parms{};

	Parms.InstrumentType = InstrumentType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetParsedMidiEventData
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UParsedMidiEventData*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParsedMidiEventData* IMidiEventDriverInterface::GetParsedMidiEventData() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetParsedMidiEventData");

	Params::MidiEventDriverInterface_GetParsedMidiEventData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.GetSparksInstrumentFromMidiTrackName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESparksInstrumentType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESparksInstrumentType IMidiEventDriverInterface::GetSparksInstrumentFromMidiTrackName(const class FName TrackName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSparksInstrumentFromMidiTrackName");

	Params::MidiEventDriverInterface_GetSparksInstrumentFromMidiTrackName Parms{};

	Parms.TrackName = TrackName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.IsPlaybackEnded
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMidiEventDriverInterface::IsPlaybackEnded() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPlaybackEnded");

	Params::MidiEventDriverInterface_IsPlaybackEnded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.SecondsToTick
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Seconds                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IMidiEventDriverInterface::SecondsToTick(const float Seconds) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SecondsToTick");

	Params::MidiEventDriverInterface_SecondsToTick Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventDriverInterface.TickToSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Tick                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IMidiEventDriverInterface::TickToSeconds(const int32 Tick) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TickToSeconds");

	Params::MidiEventDriverInterface_TickToSeconds Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.MidiEventListenerSubsystem.CancelAllListenersForDriver
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMidiEventDriverInterface>Driver                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiEventListenerSubsystem::CancelAllListenersForDriver(const TScriptInterface<class IMidiEventDriverInterface>& Driver)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CancelAllListenersForDriver");

	Params::MidiEventListenerSubsystem_CancelAllListenersForDriver Parms{};

	Parms.Driver = Driver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SparksMidiParser.MidiEventListenerSubsystem.CancelListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMidiEventListenerHandle         Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMidiEventListenerSubsystem::CancelListener(const struct FMidiEventListenerHandle& Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CancelListener");

	Params::MidiEventListenerSubsystem_CancelListener Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SparksMidiParser.MidiEventListenerSubsystem.IsListenerActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMidiEventListenerHandle         Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMidiEventListenerSubsystem::IsListenerActive(const struct FMidiEventListenerHandle& Handle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsListenerActive");

	Params::MidiEventListenerSubsystem_IsListenerActive Parms{};

	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetAllMidiNoteEvents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FMidiNoteEventList>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FMidiNoteEventList> UParsedMidiEventData::GetAllMidiNoteEvents() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAllMidiNoteEvents");

	Params::ParsedMidiEventData_GetAllMidiNoteEvents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetAllMidiTextEvents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FMidiTextEventList>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FMidiTextEventList> UParsedMidiEventData::GetAllMidiTextEvents() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAllMidiTextEvents");

	Params::ParsedMidiEventData_GetAllMidiTextEvents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetMidiFile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UMidiFile*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UMidiFile* UParsedMidiEventData::GetMidiFile() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiFile");

	Params::ParsedMidiEventData_GetMidiFile Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetMidiNoteEvents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FParsedMidiNoteEvent>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FParsedMidiNoteEvent> UParsedMidiEventData::GetMidiNoteEvents(const class FName TrackName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiNoteEvents");

	Params::ParsedMidiEventData_GetMidiNoteEvents Parms{};

	Parms.TrackName = TrackName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetMidiNoteEventsWithInts
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           MidiEventInts                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FParsedMidiNoteEvent>     OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UParsedMidiEventData::GetMidiNoteEventsWithInts(const class FName TrackName, const TArray<uint8>& MidiEventInts, TArray<struct FParsedMidiNoteEvent>* OutArray) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiNoteEventsWithInts");

	Params::ParsedMidiEventData_GetMidiNoteEventsWithInts Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventInts = std::move(MidiEventInts);

	UObject::ProcessEvent(Func, &Parms);

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function SparksMidiParser.ParsedMidiEventData.GetMidiTextEvents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FParsedMidiTextEvent>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FParsedMidiTextEvent> UParsedMidiEventData::GetMidiTextEvents(const class FName TrackName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiTextEvents");

	Params::ParsedMidiEventData_GetMidiTextEvents Parms{};

	Parms.TrackName = TrackName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetMidiTextEventsWithStrings
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   MidiEventStrings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FParsedMidiTextEvent>     OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UParsedMidiEventData::GetMidiTextEventsWithStrings(const class FName TrackName, const TArray<class FString>& MidiEventStrings, TArray<struct FParsedMidiTextEvent>* OutArray) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiTextEventsWithStrings");

	Params::ParsedMidiEventData_GetMidiTextEventsWithStrings Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventStrings = std::move(MidiEventStrings);

	UObject::ProcessEvent(Func, &Parms);

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function SparksMidiParser.ParsedMidiEventData.GetPreviousMidiNoteEventsWithInts
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           MidiEventInts                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   UpToMidiTick                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMidiNoteEventList>       OutResults                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UParsedMidiEventData::GetPreviousMidiNoteEventsWithInts(const class FName TrackName, const TArray<uint8>& MidiEventInts, const int32 UpToMidiTick, TArray<struct FMidiNoteEventList>* OutResults) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPreviousMidiNoteEventsWithInts");

	Params::ParsedMidiEventData_GetPreviousMidiNoteEventsWithInts Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventInts = std::move(MidiEventInts);
	Parms.UpToMidiTick = UpToMidiTick;

	UObject::ProcessEvent(Func, &Parms);

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);
}


// Function SparksMidiParser.ParsedMidiEventData.GetPreviousMidiTextEventsWithStrings
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   MidiEventStrings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   UpToMidiTick                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMidiTextEventList>       OutResults                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UParsedMidiEventData::GetPreviousMidiTextEventsWithStrings(const class FName TrackName, const TArray<class FString>& MidiEventStrings, const int32 UpToMidiTick, TArray<struct FMidiTextEventList>* OutResults) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPreviousMidiTextEventsWithStrings");

	Params::ParsedMidiEventData_GetPreviousMidiTextEventsWithStrings Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventStrings = std::move(MidiEventStrings);
	Parms.UpToMidiTick = UpToMidiTick;

	UObject::ProcessEvent(Func, &Parms);

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);
}


// Function SparksMidiParser.ParsedMidiEventData.GetRecentOrFirstMidiNoteEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           MidiEventInts                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   UpToMidiTick                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FParsedMidiNoteEvent             OutResult                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UParsedMidiEventData::GetRecentOrFirstMidiNoteEvent(const class FName TrackName, const TArray<uint8>& MidiEventInts, const int32 UpToMidiTick, struct FParsedMidiNoteEvent* OutResult) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRecentOrFirstMidiNoteEvent");

	Params::ParsedMidiEventData_GetRecentOrFirstMidiNoteEvent Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventInts = std::move(MidiEventInts);
	Parms.UpToMidiTick = UpToMidiTick;

	UObject::ProcessEvent(Func, &Parms);

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}


// Function SparksMidiParser.ParsedMidiEventData.GetRecentOrFirstMidiTextEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   MidiEventStrings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   UpToMidiTick                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FParsedMidiTextEvent             OutResult                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UParsedMidiEventData::GetRecentOrFirstMidiTextEvent(const class FName TrackName, const TArray<class FString>& MidiEventStrings, const int32 UpToMidiTick, struct FParsedMidiTextEvent* OutResult) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRecentOrFirstMidiTextEvent");

	Params::ParsedMidiEventData_GetRecentOrFirstMidiTextEvent Parms{};

	Parms.TrackName = TrackName;
	Parms.MidiEventStrings = std::move(MidiEventStrings);
	Parms.UpToMidiTick = UpToMidiTick;

	UObject::ProcessEvent(Func, &Parms);

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}

}

