#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscoveryBrowserUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "DiscoveryBrowserUI_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function DiscoveryBrowserUI.FortDiscoverHomespace.OnPeekPushPercentMobileCVarChanged
// 0x0004 (0x0004 - 0x0000)
struct FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged final
{
public:
	float                                         PeekPushPercent;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged) == 0x000004, "Wrong alignment on FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged");
static_assert(sizeof(FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged) == 0x000004, "Wrong size on FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged");
static_assert(offsetof(FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged, PeekPushPercent) == 0x000000, "Member 'FortDiscoverHomespace_OnPeekPushPercentMobileCVarChanged::PeekPushPercent' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserListView.NavigateToActivityInFirstRow
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserListView_NavigateToActivityInFirstRow final
{
public:
	int32                                         ActivityItemIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserListView_NavigateToActivityInFirstRow) == 0x000004, "Wrong alignment on FortActivityBrowserListView_NavigateToActivityInFirstRow");
static_assert(sizeof(FortActivityBrowserListView_NavigateToActivityInFirstRow) == 0x000004, "Wrong size on FortActivityBrowserListView_NavigateToActivityInFirstRow");
static_assert(offsetof(FortActivityBrowserListView_NavigateToActivityInFirstRow, ActivityItemIndex) == 0x000000, "Member 'FortActivityBrowserListView_NavigateToActivityInFirstRow::ActivityItemIndex' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.BP_PartyInformationUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated final
{
public:
	bool                                          bInIsTileSelected;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated) == 0x000001, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated) == 0x000001, "Wrong size on FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated, bInIsTileSelected) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_BP_PartyInformationUpdated::bInIsTileSelected' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.GetCTAButtonText
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText, ReturnValue) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_GetCTAButtonText::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnGameActivityChanged
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged final
{
public:
	class UFortGameActivity*                      GameActivity;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged) == 0x000008, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged, GameActivity) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnGameActivityChanged::GameActivity' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnTextureLoadingComplete
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete final
{
public:
	const class UTexture*                         ThumbnailTexture;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete) == 0x000008, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete, ThumbnailTexture) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnTextureLoadingComplete::ThumbnailTexture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnTileActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged) == 0x000001, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged) == 0x000001, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged, bIsTileActive) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnTileActiveChanged::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.OnUpdateColumnSize
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize final
{
public:
	int32                                         NewColumnSize;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize) == 0x000004, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize) == 0x000004, "Wrong size on FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize, NewColumnSize) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_OnUpdateColumnSize::NewColumnSize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateCTAButtonInfo
// 0x0020 (0x0020 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo final
{
public:
	class FText                                   InteractionText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInteractionFound;                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo) == 0x000020, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo, InteractionText) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo::InteractionText' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo, bInteractionFound) == 0x000018, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInfo::bInteractionFound' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateCTAButtonInteraction
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction final
{
public:
	bool                                          bIsInteractionEnabled;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction) == 0x000001, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction) == 0x000001, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction, bIsInteractionEnabled) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateCTAButtonInteraction::bIsInteractionEnabled' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateIslandThumbnail
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail final
{
public:
	const class UTexture*                         ThumbnailTexture;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail) == 0x000008, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail, ThumbnailTexture) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateIslandThumbnail::ThumbnailTexture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateLastInteraction
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction final
{
public:
	class FText                                   LastInteraction;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction, LastInteraction) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateLastInteraction::LastInteraction' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateOtherPlayersSubText
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText final
{
public:
	class FText                                   OtherPlayersSubText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText, OtherPlayersSubText) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateOtherPlayersSubText::OtherPlayersSubText' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdatePartyMemberNames
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames final
{
public:
	class FText                                   Names;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames, Names) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdatePartyMemberNames::Names' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateRichPresence
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence final
{
public:
	class FText                                   RichPresence;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence, RichPresence) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateRichPresence::RichPresence' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.UpdateSingleFriendName
// 0x0018 (0x0018 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName final
{
public:
	class FText                                   SingleFriendName;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName) == 0x000008, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName) == 0x000018, "Wrong size on FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName, SingleFriendName) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_UpdateSingleFriendName::SingleFriendName' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile.GetMaxPartySize
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize) == 0x000004, "Wrong alignment on FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize");
static_assert(sizeof(FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize) == 0x000004, "Wrong size on FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize");
static_assert(offsetof(FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize, ReturnValue) == 0x000000, "Member 'FortActivityBrowserPlayWithFriendsTile_GetMaxPartySize::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnCategoryItemChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnCategoryItemChanged final
{
public:
	bool                                          bPlayAnimation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(sizeof(FortActivityBrowserRow_OnCategoryItemChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnCategoryItemChanged");
static_assert(offsetof(FortActivityBrowserRow_OnCategoryItemChanged, bPlayAnimation) == 0x000000, "Member 'FortActivityBrowserRow_OnCategoryItemChanged::bPlayAnimation' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowIsActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowIsActiveChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowIsActiveChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowIsActiveChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowIsActiveChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRow_OnRowIsActiveChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowIsSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowIsSelectedChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowIsSelectedChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowIsSelectedChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowIsSelectedChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowIsSelectedChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowIsSelectedChanged, bIsSelected) == 0x000000, "Member 'FortActivityBrowserRow_OnRowIsSelectedChanged::bIsSelected' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowMoveDown
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowMoveDown final
{
public:
	bool                                          bMovingOffscreen;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowMoveDown) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowMoveDown");
static_assert(sizeof(FortActivityBrowserRow_OnRowMoveDown) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowMoveDown");
static_assert(offsetof(FortActivityBrowserRow_OnRowMoveDown, bMovingOffscreen) == 0x000000, "Member 'FortActivityBrowserRow_OnRowMoveDown::bMovingOffscreen' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowMoveUp
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowMoveUp final
{
public:
	bool                                          bMovingOffscreen;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowMoveUp) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowMoveUp");
static_assert(sizeof(FortActivityBrowserRow_OnRowMoveUp) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowMoveUp");
static_assert(offsetof(FortActivityBrowserRow_OnRowMoveUp, bMovingOffscreen) == 0x000000, "Member 'FortActivityBrowserRow_OnRowMoveUp::bMovingOffscreen' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.OnRowPeekStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_OnRowPeekStateChanged final
{
public:
	bool                                          bIsInPeekState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(sizeof(FortActivityBrowserRow_OnRowPeekStateChanged) == 0x000001, "Wrong size on FortActivityBrowserRow_OnRowPeekStateChanged");
static_assert(offsetof(FortActivityBrowserRow_OnRowPeekStateChanged, bIsInPeekState) == 0x000000, "Member 'FortActivityBrowserRow_OnRowPeekStateChanged::bIsInPeekState' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsActive");
static_assert(sizeof(FortActivityBrowserRow_GetIsActive) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsActive");
static_assert(offsetof(FortActivityBrowserRow_GetIsActive, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsActive::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsInPeekState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsInPeekState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsInPeekState");
static_assert(sizeof(FortActivityBrowserRow_GetIsInPeekState) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsInPeekState");
static_assert(offsetof(FortActivityBrowserRow_GetIsInPeekState, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsInPeekState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRow.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRow_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRow_GetIsSelected) == 0x000001, "Wrong alignment on FortActivityBrowserRow_GetIsSelected");
static_assert(sizeof(FortActivityBrowserRow_GetIsSelected) == 0x000001, "Wrong size on FortActivityBrowserRow_GetIsSelected");
static_assert(offsetof(FortActivityBrowserRow_GetIsSelected, ReturnValue) == 0x000000, "Member 'FortActivityBrowserRow_GetIsSelected::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowList.OnQueryStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserRowList_OnQueryStatusChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong alignment on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(sizeof(FortActivityBrowserRowList_OnQueryStatusChanged) == 0x000001, "Wrong size on FortActivityBrowserRowList_OnQueryStatusChanged");
static_assert(offsetof(FortActivityBrowserRowList_OnQueryStatusChanged, bIsActive) == 0x000000, "Member 'FortActivityBrowserRowList_OnQueryStatusChanged::bIsActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserView.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityBrowserView_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserView_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityBrowserView_GetInvalidActivityReason");
static_assert(sizeof(FortActivityBrowserView_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityBrowserView_GetInvalidActivityReason");
static_assert(offsetof(FortActivityBrowserView_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityBrowserView_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowView.HandleVerticalSwipe
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserRowView_HandleVerticalSwipe final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowView_HandleVerticalSwipe) == 0x000004, "Wrong alignment on FortActivityBrowserRowView_HandleVerticalSwipe");
static_assert(sizeof(FortActivityBrowserRowView_HandleVerticalSwipe) == 0x000004, "Wrong size on FortActivityBrowserRowView_HandleVerticalSwipe");
static_assert(offsetof(FortActivityBrowserRowView_HandleVerticalSwipe, Direction) == 0x000000, "Member 'FortActivityBrowserRowView_HandleVerticalSwipe::Direction' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowView.OnListViewScrolled
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserRowView_OnListViewScrolled final
{
public:
	float                                         ItemOffset;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRemaining;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowView_OnListViewScrolled) == 0x000004, "Wrong alignment on FortActivityBrowserRowView_OnListViewScrolled");
static_assert(sizeof(FortActivityBrowserRowView_OnListViewScrolled) == 0x000008, "Wrong size on FortActivityBrowserRowView_OnListViewScrolled");
static_assert(offsetof(FortActivityBrowserRowView_OnListViewScrolled, ItemOffset) == 0x000000, "Member 'FortActivityBrowserRowView_OnListViewScrolled::ItemOffset' has a wrong offset!");
static_assert(offsetof(FortActivityBrowserRowView_OnListViewScrolled, DistanceRemaining) == 0x000004, "Member 'FortActivityBrowserRowView_OnListViewScrolled::DistanceRemaining' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserRowView.OnRowChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityBrowserRowView_OnRowChanged final
{
public:
	int32                                         NewCategoryIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserRowView_OnRowChanged) == 0x000004, "Wrong alignment on FortActivityBrowserRowView_OnRowChanged");
static_assert(sizeof(FortActivityBrowserRowView_OnRowChanged) == 0x000004, "Wrong size on FortActivityBrowserRowView_OnRowChanged");
static_assert(offsetof(FortActivityBrowserRowView_OnRowChanged, NewCategoryIndex) == 0x000000, "Member 'FortActivityBrowserRowView_OnRowChanged::NewCategoryIndex' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityBrowserTile.HandleDisplayTileDetailsHoldTriggered
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered) == 0x000008, "Wrong alignment on FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered");
static_assert(sizeof(FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered) == 0x000008, "Wrong size on FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered");
static_assert(offsetof(FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered, Button) == 0x000000, "Member 'FortActivityBrowserTile_HandleDisplayTileDetailsHoldTriggered::Button' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryTile.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityCategoryTile_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryTile_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityCategoryTile_OnTileActiveSet");
static_assert(sizeof(FortActivityCategoryTile_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityCategoryTile_OnTileActiveSet");
static_assert(offsetof(FortActivityCategoryTile_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityCategoryTile_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.NavigateFromPanel
// 0x0018 (0x0018 - 0x0000)
struct FortActivityCategoryView_NavigateFromPanel final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityCategoryTilePanel*         NavigatingPanel;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortActivityCategoryTilePanel*         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_NavigateFromPanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_NavigateFromPanel");
static_assert(sizeof(FortActivityCategoryView_NavigateFromPanel) == 0x000018, "Wrong size on FortActivityCategoryView_NavigateFromPanel");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, Direction) == 0x000000, "Member 'FortActivityCategoryView_NavigateFromPanel::Direction' has a wrong offset!");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, NavigatingPanel) == 0x000008, "Member 'FortActivityCategoryView_NavigateFromPanel::NavigatingPanel' has a wrong offset!");
static_assert(offsetof(FortActivityCategoryView_NavigateFromPanel, ReturnValue) == 0x000010, "Member 'FortActivityCategoryView_NavigateFromPanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.OnCategoryTilePanelSelected
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_OnCategoryTilePanelSelected final
{
public:
	const class UFortActivityCategoryTilePanel*   SelectedPanel;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_OnCategoryTilePanelSelected) == 0x000008, "Wrong alignment on FortActivityCategoryView_OnCategoryTilePanelSelected");
static_assert(sizeof(FortActivityCategoryView_OnCategoryTilePanelSelected) == 0x000008, "Wrong size on FortActivityCategoryView_OnCategoryTilePanelSelected");
static_assert(offsetof(FortActivityCategoryView_OnCategoryTilePanelSelected, SelectedPanel) == 0x000000, "Member 'FortActivityCategoryView_OnCategoryTilePanelSelected::SelectedPanel' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.GetCurrentSelectedPanel
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_GetCurrentSelectedPanel final
{
public:
	const class UFortActivityCategoryTilePanel*   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_GetCurrentSelectedPanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_GetCurrentSelectedPanel");
static_assert(sizeof(FortActivityCategoryView_GetCurrentSelectedPanel) == 0x000008, "Wrong size on FortActivityCategoryView_GetCurrentSelectedPanel");
static_assert(offsetof(FortActivityCategoryView_GetCurrentSelectedPanel, ReturnValue) == 0x000000, "Member 'FortActivityCategoryView_GetCurrentSelectedPanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityCategoryView.GetTopMostVisiblePanel
// 0x0008 (0x0008 - 0x0000)
struct FortActivityCategoryView_GetTopMostVisiblePanel final
{
public:
	class UFortActivityCategoryTilePanel*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityCategoryView_GetTopMostVisiblePanel) == 0x000008, "Wrong alignment on FortActivityCategoryView_GetTopMostVisiblePanel");
static_assert(sizeof(FortActivityCategoryView_GetTopMostVisiblePanel) == 0x000008, "Wrong size on FortActivityCategoryView_GetTopMostVisiblePanel");
static_assert(offsetof(FortActivityCategoryView_GetTopMostVisiblePanel, ReturnValue) == 0x000000, "Member 'FortActivityCategoryView_GetTopMostVisiblePanel::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnMoviePlayingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_OnMoviePlayingChanged final
{
public:
	bool                                          bIsPlaying;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong alignment on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(sizeof(FortActivityDiscoverView_OnMoviePlayingChanged) == 0x000001, "Wrong size on FortActivityDiscoverView_OnMoviePlayingChanged");
static_assert(offsetof(FortActivityDiscoverView_OnMoviePlayingChanged, bIsPlaying) == 0x000000, "Member 'FortActivityDiscoverView_OnMoviePlayingChanged::bIsPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityDiscoverView_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(sizeof(FortActivityDiscoverView_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityDiscoverView_OnPreviewImageChanged");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityDiscoverView_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityDiscoverView_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetCurrentTexture
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetCurrentTexture final
{
public:
	const class UTexture*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetCurrentTexture) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetCurrentTexture");
static_assert(sizeof(FortActivityDiscoverView_GetCurrentTexture) == 0x000008, "Wrong size on FortActivityDiscoverView_GetCurrentTexture");
static_assert(offsetof(FortActivityDiscoverView_GetCurrentTexture, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetCurrentTexture::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetKeyArtOutroAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetKeyArtOutroAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetKeyArtOutroAnimation) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetKeyArtOutroAnimation");
static_assert(sizeof(FortActivityDiscoverView_GetKeyArtOutroAnimation) == 0x000008, "Wrong size on FortActivityDiscoverView_GetKeyArtOutroAnimation");
static_assert(offsetof(FortActivityDiscoverView_GetKeyArtOutroAnimation, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetKeyArtOutroAnimation::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetMovieWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetMovieWidget final
{
public:
	class UFortActivatableMovieWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetMovieWidget) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetMovieWidget");
static_assert(sizeof(FortActivityDiscoverView_GetMovieWidget) == 0x000008, "Wrong size on FortActivityDiscoverView_GetMovieWidget");
static_assert(offsetof(FortActivityDiscoverView_GetMovieWidget, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetMovieWidget::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.GetPromotedMovieWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivityDiscoverView_GetPromotedMovieWidget final
{
public:
	class UFortActivatableMovieWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_GetPromotedMovieWidget) == 0x000008, "Wrong alignment on FortActivityDiscoverView_GetPromotedMovieWidget");
static_assert(sizeof(FortActivityDiscoverView_GetPromotedMovieWidget) == 0x000008, "Wrong size on FortActivityDiscoverView_GetPromotedMovieWidget");
static_assert(offsetof(FortActivityDiscoverView_GetPromotedMovieWidget, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_GetPromotedMovieWidget::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsImageLoading
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsImageLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsImageLoading) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsImageLoading");
static_assert(sizeof(FortActivityDiscoverView_IsImageLoading) == 0x000001, "Wrong size on FortActivityDiscoverView_IsImageLoading");
static_assert(offsetof(FortActivityDiscoverView_IsImageLoading, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsImageLoading::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsInOutroState
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsInOutroState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsInOutroState) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsInOutroState");
static_assert(sizeof(FortActivityDiscoverView_IsInOutroState) == 0x000001, "Wrong size on FortActivityDiscoverView_IsInOutroState");
static_assert(offsetof(FortActivityDiscoverView_IsInOutroState, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsInOutroState::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingPromotedContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingPromotedContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingPromotedContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingPromotedContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingPromotedContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingPromotedContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverView.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverView_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityDiscoverView_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityDiscoverView_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityDiscoverView_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverView_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverViewV2.UpdateMiscActionBindingVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility) == 0x000001, "Wrong alignment on FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility");
static_assert(sizeof(FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility) == 0x000001, "Wrong size on FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility");
static_assert(offsetof(FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility, bVisible) == 0x000000, "Member 'FortActivityDiscoverViewV2_UpdateMiscActionBindingVisibility::bVisible' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverViewV2.IsShowingPromotedContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverViewV2_IsShowingPromotedContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverViewV2_IsShowingPromotedContent) == 0x000001, "Wrong alignment on FortActivityDiscoverViewV2_IsShowingPromotedContent");
static_assert(sizeof(FortActivityDiscoverViewV2_IsShowingPromotedContent) == 0x000001, "Wrong size on FortActivityDiscoverViewV2_IsShowingPromotedContent");
static_assert(offsetof(FortActivityDiscoverViewV2_IsShowingPromotedContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverViewV2_IsShowingPromotedContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityDiscoverViewV2.IsShowingSeasonalContent
// 0x0001 (0x0001 - 0x0000)
struct FortActivityDiscoverViewV2_IsShowingSeasonalContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityDiscoverViewV2_IsShowingSeasonalContent) == 0x000001, "Wrong alignment on FortActivityDiscoverViewV2_IsShowingSeasonalContent");
static_assert(sizeof(FortActivityDiscoverViewV2_IsShowingSeasonalContent) == 0x000001, "Wrong size on FortActivityDiscoverViewV2_IsShowingSeasonalContent");
static_assert(offsetof(FortActivityDiscoverViewV2_IsShowingSeasonalContent, ReturnValue) == 0x000000, "Member 'FortActivityDiscoverViewV2_IsShowingSeasonalContent::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityListView.AddTileType
// 0x0010 (0x0010 - 0x0000)
struct FortActivityListView_AddTileType final
{
public:
	EActivityBrowserTileStyle                     style;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortActivityBrowserTileBase> WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityListView_AddTileType) == 0x000008, "Wrong alignment on FortActivityListView_AddTileType");
static_assert(sizeof(FortActivityListView_AddTileType) == 0x000010, "Wrong size on FortActivityListView_AddTileType");
static_assert(offsetof(FortActivityListView_AddTileType, style) == 0x000000, "Member 'FortActivityListView_AddTileType::style' has a wrong offset!");
static_assert(offsetof(FortActivityListView_AddTileType, WidgetClass) == 0x000008, "Member 'FortActivityListView_AddTileType::WidgetClass' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityListView.GetInViewCount
// 0x0004 (0x0004 - 0x0000)
struct FortActivityListView_GetInViewCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong alignment on FortActivityListView_GetInViewCount");
static_assert(sizeof(FortActivityListView_GetInViewCount) == 0x000004, "Wrong size on FortActivityListView_GetInViewCount");
static_assert(offsetof(FortActivityListView_GetInViewCount, ReturnValue) == 0x000000, "Member 'FortActivityListView_GetInViewCount::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityLobbyTile_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(sizeof(FortActivityLobbyTile_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityLobbyTile_OnPreviewImageChanged");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityLobbyTile_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityLobbyTile_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.GetChildActivityDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortActivityLobbyTile_GetChildActivityDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_GetChildActivityDisplayName) == 0x000008, "Wrong alignment on FortActivityLobbyTile_GetChildActivityDisplayName");
static_assert(sizeof(FortActivityLobbyTile_GetChildActivityDisplayName) == 0x000018, "Wrong size on FortActivityLobbyTile_GetChildActivityDisplayName");
static_assert(offsetof(FortActivityLobbyTile_GetChildActivityDisplayName, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_GetChildActivityDisplayName::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.IsActivityEpicCreated
// 0x0001 (0x0001 - 0x0000)
struct FortActivityLobbyTile_IsActivityEpicCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong alignment on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(sizeof(FortActivityLobbyTile_IsActivityEpicCreated) == 0x000001, "Wrong size on FortActivityLobbyTile_IsActivityEpicCreated");
static_assert(offsetof(FortActivityLobbyTile_IsActivityEpicCreated, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_IsActivityEpicCreated::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityLobbyTile.ShouldShowSubmodeSelectButton
// 0x0001 (0x0001 - 0x0000)
struct FortActivityLobbyTile_ShouldShowSubmodeSelectButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityLobbyTile_ShouldShowSubmodeSelectButton) == 0x000001, "Wrong alignment on FortActivityLobbyTile_ShouldShowSubmodeSelectButton");
static_assert(sizeof(FortActivityLobbyTile_ShouldShowSubmodeSelectButton) == 0x000001, "Wrong size on FortActivityLobbyTile_ShouldShowSubmodeSelectButton");
static_assert(offsetof(FortActivityLobbyTile_ShouldShowSubmodeSelectButton, ReturnValue) == 0x000000, "Member 'FortActivityLobbyTile_ShouldShowSubmodeSelectButton::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.OnActivityChanged
// 0x0018 (0x0018 - 0x0000)
struct FortActivityModeSetSelectionModal_OnActivityChanged final
{
public:
	const class UFortGameActivity*                GameActivity;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartingSelectedMnemonic;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_OnActivityChanged) == 0x000008, "Wrong alignment on FortActivityModeSetSelectionModal_OnActivityChanged");
static_assert(sizeof(FortActivityModeSetSelectionModal_OnActivityChanged) == 0x000018, "Wrong size on FortActivityModeSetSelectionModal_OnActivityChanged");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnActivityChanged, GameActivity) == 0x000000, "Member 'FortActivityModeSetSelectionModal_OnActivityChanged::GameActivity' has a wrong offset!");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnActivityChanged, StartingSelectedMnemonic) == 0x000008, "Member 'FortActivityModeSetSelectionModal_OnActivityChanged::StartingSelectedMnemonic' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityModeSetSelectionModal_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityModeSetSelectionModal_OnPreviewImageChanged");
static_assert(sizeof(FortActivityModeSetSelectionModal_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityModeSetSelectionModal_OnPreviewImageChanged");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityModeSetSelectionModal_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityModeSetSelectionModal_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityModeSetSelectionModal_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.SetHabaneroValues
// 0x0002 (0x0002 - 0x0000)
struct FortActivityModeSetSelectionModal_SetHabaneroValues final
{
public:
	bool                                          bHabaneroEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHabaneroExists;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_SetHabaneroValues) == 0x000001, "Wrong alignment on FortActivityModeSetSelectionModal_SetHabaneroValues");
static_assert(sizeof(FortActivityModeSetSelectionModal_SetHabaneroValues) == 0x000002, "Wrong size on FortActivityModeSetSelectionModal_SetHabaneroValues");
static_assert(offsetof(FortActivityModeSetSelectionModal_SetHabaneroValues, bHabaneroEnabled) == 0x000000, "Member 'FortActivityModeSetSelectionModal_SetHabaneroValues::bHabaneroEnabled' has a wrong offset!");
static_assert(offsetof(FortActivityModeSetSelectionModal_SetHabaneroValues, bHabaneroExists) == 0x000001, "Member 'FortActivityModeSetSelectionModal_SetHabaneroValues::bHabaneroExists' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.SetIsRankedSwitchAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable final
{
public:
	bool                                          bIsRankedSwitchAvailable;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable) == 0x000001, "Wrong alignment on FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable");
static_assert(sizeof(FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable) == 0x000001, "Wrong size on FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable");
static_assert(offsetof(FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable, bIsRankedSwitchAvailable) == 0x000000, "Member 'FortActivityModeSetSelectionModal_SetIsRankedSwitchAvailable::bIsRankedSwitchAvailable' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityModeSetSelectionModal.IsCreativeModeSetActivity
// 0x0001 (0x0001 - 0x0000)
struct FortActivityModeSetSelectionModal_IsCreativeModeSetActivity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityModeSetSelectionModal_IsCreativeModeSetActivity) == 0x000001, "Wrong alignment on FortActivityModeSetSelectionModal_IsCreativeModeSetActivity");
static_assert(sizeof(FortActivityModeSetSelectionModal_IsCreativeModeSetActivity) == 0x000001, "Wrong size on FortActivityModeSetSelectionModal_IsCreativeModeSetActivity");
static_assert(offsetof(FortActivityModeSetSelectionModal_IsCreativeModeSetActivity, ReturnValue) == 0x000000, "Member 'FortActivityModeSetSelectionModal_IsCreativeModeSetActivity::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySelector.OnEnableColorScheme
// 0x0001 (0x0001 - 0x0000)
struct FortActivitySelector_OnEnableColorScheme final
{
public:
	bool                                          bIsColorSchemeActive;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySelector_OnEnableColorScheme) == 0x000001, "Wrong alignment on FortActivitySelector_OnEnableColorScheme");
static_assert(sizeof(FortActivitySelector_OnEnableColorScheme) == 0x000001, "Wrong size on FortActivitySelector_OnEnableColorScheme");
static_assert(offsetof(FortActivitySelector_OnEnableColorScheme, bIsColorSchemeActive) == 0x000000, "Member 'FortActivitySelector_OnEnableColorScheme::bIsColorSchemeActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivitySelector.OnSwapColorScheme
// 0x0001 (0x0001 - 0x0000)
struct FortActivitySelector_OnSwapColorScheme final
{
public:
	bool                                          bInIsUsingAlternateColorScheme;                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivitySelector_OnSwapColorScheme) == 0x000001, "Wrong alignment on FortActivitySelector_OnSwapColorScheme");
static_assert(sizeof(FortActivitySelector_OnSwapColorScheme) == 0x000001, "Wrong size on FortActivitySelector_OnSwapColorScheme");
static_assert(offsetof(FortActivitySelector_OnSwapColorScheme, bInIsUsingAlternateColorScheme) == 0x000000, "Member 'FortActivitySelector_OnSwapColorScheme::bInIsUsingAlternateColorScheme' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnFriendsPlayingChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnFriendsPlayingChanged final
{
public:
	int32                                         NumPlaying;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnFriendsPlayingChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnFriendsPlayingChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnFriendsPlayingChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnFriendsPlayingChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnFriendsPlayingChanged, NumPlaying) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnFriendsPlayingChanged::NumPlaying' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnIsFavoriteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnIsFavoriteChanged final
{
public:
	bool                                          bIsFavorite;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnIsFavoriteChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnIsFavoriteChanged, bIsFavorite) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnIsFavoriteChanged::bIsFavorite' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnLogoImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_OnLogoImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnLogoImageChanged) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_OnLogoImageChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnLogoImageChanged) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_OnLogoImageChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnLogoImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnLogoImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnLogoImageChanged, Texture) == 0x000008, "Member 'FortActivityTileDetailsDisplay_OnLogoImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPartySizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPartySizeChanged final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPartySizeChanged) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_OnPartySizeChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPartySizeChanged, PartySize) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPartySizeChanged::PartySize' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnPreviewImageChanged) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_OnPreviewImageChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortActivityTileDetailsDisplay_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnRequiresPurchaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged final
{
public:
	bool                                          bRequiresPurchase;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged, bRequiresPurchase) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnRequiresPurchaseChanged::bRequiresPurchase' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnRespondToTileViewVisibilityChange
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange, bIsVisible) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnRespondToTileViewVisibilityChange::bIsVisible' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(sizeof(FortActivityTileDetailsDisplay_OnTileActiveSet) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_OnTileActiveSet");
static_assert(offsetof(FortActivityTileDetailsDisplay_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'FortActivityTileDetailsDisplay_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.ShouldPlayTileVideo
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_ShouldPlayTileVideo final
{
public:
	bool                                          bOutResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_ShouldPlayTileVideo");
static_assert(sizeof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_ShouldPlayTileVideo");
static_assert(offsetof(FortActivityTileDetailsDisplay_ShouldPlayTileVideo, bOutResult) == 0x000000, "Member 'FortActivityTileDetailsDisplay_ShouldPlayTileVideo::bOutResult' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.UpdateCCU
// 0x0004 (0x0004 - 0x0000)
struct FortActivityTileDetailsDisplay_UpdateCCU final
{
public:
	int32                                         CCUCount;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_UpdateCCU) == 0x000004, "Wrong alignment on FortActivityTileDetailsDisplay_UpdateCCU");
static_assert(sizeof(FortActivityTileDetailsDisplay_UpdateCCU) == 0x000004, "Wrong size on FortActivityTileDetailsDisplay_UpdateCCU");
static_assert(offsetof(FortActivityTileDetailsDisplay_UpdateCCU, CCUCount) == 0x000000, "Member 'FortActivityTileDetailsDisplay_UpdateCCU::CCUCount' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.UpdateSqueegeeWidgets
// 0x0008 (0x0008 - 0x0000)
struct FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets final
{
public:
	class UFortGameActivity*                      GameActivity;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets");
static_assert(sizeof(FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets) == 0x000008, "Wrong size on FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets");
static_assert(offsetof(FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets, GameActivity) == 0x000000, "Member 'FortActivityTileDetailsDisplay_UpdateSqueegeeWidgets::GameActivity' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.DoesActivityRequirePurchase
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_DoesActivityRequirePurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_DoesActivityRequirePurchase");
static_assert(sizeof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_DoesActivityRequirePurchase");
static_assert(offsetof(FortActivityTileDetailsDisplay_DoesActivityRequirePurchase, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_DoesActivityRequirePurchase::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetActivityCreatorDisplayText
// 0x0010 (0x0010 - 0x0000)
struct FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText) == 0x000010, "Wrong size on FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetActivityCreatorDisplayText::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetActivitySelector
// 0x0008 (0x0008 - 0x0000)
struct FortActivityTileDetailsDisplay_GetActivitySelector final
{
public:
	class UFortActivitySelector*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetActivitySelector) == 0x000008, "Wrong alignment on FortActivityTileDetailsDisplay_GetActivitySelector");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetActivitySelector) == 0x000008, "Wrong size on FortActivityTileDetailsDisplay_GetActivitySelector");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetActivitySelector, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetActivitySelector::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_GetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetInvalidActivityReason) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_GetInvalidActivityReason");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetInvalidActivityReason, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetInvalidActivityReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.GetIsActivityLockedReason
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_GetIsActivityLockedReason final
{
public:
	EFortActivityIsLockedReason                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_GetIsActivityLockedReason) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_GetIsActivityLockedReason");
static_assert(sizeof(FortActivityTileDetailsDisplay_GetIsActivityLockedReason) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_GetIsActivityLockedReason");
static_assert(offsetof(FortActivityTileDetailsDisplay_GetIsActivityLockedReason, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_GetIsActivityLockedReason::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityFavorited
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityFavorited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityFavorited) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityFavorited");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityFavorited, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityFavorited::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsActivityLocked
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsActivityLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsActivityLocked) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsActivityLocked");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsActivityLocked) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsActivityLocked");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsActivityLocked, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsActivityLocked::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileDetailsDisplay.IsModeSetActivity
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileDetailsDisplay_IsModeSetActivity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileDetailsDisplay_IsModeSetActivity) == 0x000001, "Wrong alignment on FortActivityTileDetailsDisplay_IsModeSetActivity");
static_assert(sizeof(FortActivityTileDetailsDisplay_IsModeSetActivity) == 0x000001, "Wrong size on FortActivityTileDetailsDisplay_IsModeSetActivity");
static_assert(offsetof(FortActivityTileDetailsDisplay_IsModeSetActivity, ReturnValue) == 0x000000, "Member 'FortActivityTileDetailsDisplay_IsModeSetActivity::ReturnValue' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileView.RespondToVisibilityChange
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileView_RespondToVisibilityChange final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileView_RespondToVisibilityChange) == 0x000001, "Wrong alignment on FortActivityTileView_RespondToVisibilityChange");
static_assert(sizeof(FortActivityTileView_RespondToVisibilityChange) == 0x000001, "Wrong size on FortActivityTileView_RespondToVisibilityChange");
static_assert(offsetof(FortActivityTileView_RespondToVisibilityChange, bIsVisible) == 0x000000, "Member 'FortActivityTileView_RespondToVisibilityChange::bIsVisible' has a wrong offset!");

// Function DiscoveryBrowserUI.FortActivityTileView.SetListenForMouseWheelInput
// 0x0001 (0x0001 - 0x0000)
struct FortActivityTileView_SetListenForMouseWheelInput final
{
public:
	bool                                          bListenForInput;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityTileView_SetListenForMouseWheelInput) == 0x000001, "Wrong alignment on FortActivityTileView_SetListenForMouseWheelInput");
static_assert(sizeof(FortActivityTileView_SetListenForMouseWheelInput) == 0x000001, "Wrong size on FortActivityTileView_SetListenForMouseWheelInput");
static_assert(offsetof(FortActivityTileView_SetListenForMouseWheelInput, bListenForInput) == 0x000000, "Member 'FortActivityTileView_SetListenForMouseWheelInput::bListenForInput' has a wrong offset!");

// Function DiscoveryBrowserUI.FortDiscoverItemListView.GetInViewCount
// 0x0004 (0x0004 - 0x0000)
struct FortDiscoverItemListView_GetInViewCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDiscoverItemListView_GetInViewCount) == 0x000004, "Wrong alignment on FortDiscoverItemListView_GetInViewCount");
static_assert(sizeof(FortDiscoverItemListView_GetInViewCount) == 0x000004, "Wrong size on FortDiscoverItemListView_GetInViewCount");
static_assert(offsetof(FortDiscoverItemListView_GetInViewCount, ReturnValue) == 0x000000, "Member 'FortDiscoverItemListView_GetInViewCount::ReturnValue' has a wrong offset!");

}

