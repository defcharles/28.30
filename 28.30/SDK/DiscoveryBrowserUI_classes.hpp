#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscoveryBrowserUI

#include "Basic.hpp"

#include "ModelViewViewModel_classes.hpp"
#include "UMG_classes.hpp"
#include "DiscoveryBrowserUI_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CommonUI_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonUILegacy_classes.hpp"


namespace SDK
{

// Class DiscoveryBrowserUI.DiscoverSelectedActivityViewModel
// 0x0030 (0x0098 - 0x0068)
class UDiscoverSelectedActivityViewModel final : public UMVVMViewModelBase
{
public:
	bool                                          bLoading;                                          // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasPartyData;                                     // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsActiveInvite;                                   // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPartyPrivate;                                   // 0x006B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPartySize;                                  // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   RichPresenceText;                                  // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UFortActivityViewModel*                 ActivityVM;                                        // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DiscoverSelectedActivityViewModel">();
	}
	static class UDiscoverSelectedActivityViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDiscoverSelectedActivityViewModel>();
	}
};
static_assert(alignof(UDiscoverSelectedActivityViewModel) == 0x000008, "Wrong alignment on UDiscoverSelectedActivityViewModel");
static_assert(sizeof(UDiscoverSelectedActivityViewModel) == 0x000098, "Wrong size on UDiscoverSelectedActivityViewModel");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, bLoading) == 0x000068, "Member 'UDiscoverSelectedActivityViewModel::bLoading' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, bHasPartyData) == 0x000069, "Member 'UDiscoverSelectedActivityViewModel::bHasPartyData' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, bIsActiveInvite) == 0x00006A, "Member 'UDiscoverSelectedActivityViewModel::bIsActiveInvite' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, bIsPartyPrivate) == 0x00006B, "Member 'UDiscoverSelectedActivityViewModel::bIsPartyPrivate' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, CurrentPartySize) == 0x00006C, "Member 'UDiscoverSelectedActivityViewModel::CurrentPartySize' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, RichPresenceText) == 0x000070, "Member 'UDiscoverSelectedActivityViewModel::RichPresenceText' has a wrong offset!");
static_assert(offsetof(UDiscoverSelectedActivityViewModel, ActivityVM) == 0x000088, "Member 'UDiscoverSelectedActivityViewModel::ActivityVM' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityListItemWrapper
// 0x0010 (0x0038 - 0x0028)
class UFortActivityListItemWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityListItemWrapper">();
	}
	static class UFortActivityListItemWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityListItemWrapper>();
	}
};
static_assert(alignof(UFortActivityListItemWrapper) == 0x000008, "Wrong alignment on UFortActivityListItemWrapper");
static_assert(sizeof(UFortActivityListItemWrapper) == 0x000038, "Wrong size on UFortActivityListItemWrapper");

// Class DiscoveryBrowserUI.FortDiscoverHomespace
// 0x0000 (0x0420 - 0x0420)
class UFortDiscoverHomespace : public UScrollableActivatableWidget
{
public:
	void OnPeekPushPercentMobileCVarChanged(float PeekPushPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDiscoverHomespace">();
	}
	static class UFortDiscoverHomespace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDiscoverHomespace>();
	}
};
static_assert(alignof(UFortDiscoverHomespace) == 0x000008, "Wrong alignment on UFortDiscoverHomespace");
static_assert(sizeof(UFortDiscoverHomespace) == 0x000420, "Wrong size on UFortDiscoverHomespace");

// Class DiscoveryBrowserUI.FortDiscoverPreviewManager
// 0x00C8 (0x00F0 - 0x0028)
class UFortDiscoverPreviewManager final : public UObject
{
public:
	uint8                                         Pad_28[0xC8];                                      // 0x0028(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDiscoverPreviewManager">();
	}
	static class UFortDiscoverPreviewManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDiscoverPreviewManager>();
	}
};
static_assert(alignof(UFortDiscoverPreviewManager) == 0x000008, "Wrong alignment on UFortDiscoverPreviewManager");
static_assert(sizeof(UFortDiscoverPreviewManager) == 0x0000F0, "Wrong size on UFortDiscoverPreviewManager");

// Class DiscoveryBrowserUI.FortActivityBrowserColorSchemeAsset
// 0x0050 (0x0080 - 0x0030)
class UFortActivityBrowserColorSchemeAsset final : public UDataAsset
{
public:
	TMap<class UMaterialParameterCollection*, struct FColorSchemeParamaterValues> MaterialCollectionOverrides;                       // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserColorSchemeAsset">();
	}
	static class UFortActivityBrowserColorSchemeAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserColorSchemeAsset>();
	}
};
static_assert(alignof(UFortActivityBrowserColorSchemeAsset) == 0x000008, "Wrong alignment on UFortActivityBrowserColorSchemeAsset");
static_assert(sizeof(UFortActivityBrowserColorSchemeAsset) == 0x000080, "Wrong size on UFortActivityBrowserColorSchemeAsset");
static_assert(offsetof(UFortActivityBrowserColorSchemeAsset, MaterialCollectionOverrides) == 0x000030, "Member 'UFortActivityBrowserColorSchemeAsset::MaterialCollectionOverrides' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserListView
// 0x0238 (0x04D0 - 0x0298)
class UFortActivityBrowserListView final : public UListViewBase
{
public:
	uint8                                         Pad_298[0xE8];                                     // 0x0298(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalNavigationTimeThreshold;                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHabaneroDisplayData*               HabaneroDisplayData;                               // 0x0388(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortActivityBrowserRow>    DiscoverItemRowClass;                              // 0x0390(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivityBrowserRow>    HomebarItemRowClass;                               // 0x0398(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, TSubclassOf<class UFortActivityBrowserRow>> RowTypes;                                          // 0x03A0(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                          bUseTinyOffsetWhenScrollingIntoView;               // 0x03F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F1[0xDF];                                     // 0x03F1(0x00DF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NavigateToActivityInFirstRow(int32 ActivityItemIndex);

	void HandleVisibleEntriesChanged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserListView">();
	}
	static class UFortActivityBrowserListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserListView>();
	}
};
static_assert(alignof(UFortActivityBrowserListView) == 0x000008, "Wrong alignment on UFortActivityBrowserListView");
static_assert(sizeof(UFortActivityBrowserListView) == 0x0004D0, "Wrong size on UFortActivityBrowserListView");
static_assert(offsetof(UFortActivityBrowserListView, DirectionalNavigationTimeThreshold) == 0x000380, "Member 'UFortActivityBrowserListView::DirectionalNavigationTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, HabaneroDisplayData) == 0x000388, "Member 'UFortActivityBrowserListView::HabaneroDisplayData' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, DiscoverItemRowClass) == 0x000390, "Member 'UFortActivityBrowserListView::DiscoverItemRowClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, HomebarItemRowClass) == 0x000398, "Member 'UFortActivityBrowserListView::HomebarItemRowClass' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, RowTypes) == 0x0003A0, "Member 'UFortActivityBrowserListView::RowTypes' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserListView, bUseTinyOffsetWhenScrollingIntoView) == 0x0003F0, "Member 'UFortActivityBrowserListView::bUseTinyOffsetWhenScrollingIntoView' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserTileBase
// 0x0060 (0x14F0 - 0x1490)
class UFortActivityBrowserTileBase : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x60];                                    // 0x1490(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserTileBase">();
	}
	static class UFortActivityBrowserTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserTileBase>();
	}
};
static_assert(alignof(UFortActivityBrowserTileBase) == 0x000010, "Wrong alignment on UFortActivityBrowserTileBase");
static_assert(sizeof(UFortActivityBrowserTileBase) == 0x0014F0, "Wrong size on UFortActivityBrowserTileBase");

// Class DiscoveryBrowserUI.FortActivityBrowserPlayWithFriendsTile
// 0x00E0 (0x15D0 - 0x14F0)
class UFortActivityBrowserPlayWithFriendsTile : public UFortActivityBrowserTileBase
{
public:
	int32                                         MaxNamesToDisplay;                                 // 0x14F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxPortraitsToDisplay;                             // 0x14F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14F8[0x10];                                    // 0x14F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortJoinablePartyPortraitsDisplay*     PartyMembersAvatarsDisplay;                        // 0x1508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsActiveInvite;                                   // 0x1510(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1511[0x3];                                     // 0x1511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPartySize;                                  // 0x1514(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsPartyPrivate;                                   // 0x1518(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1519[0x7];                                     // 0x1519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameActivity*                      CachedGameActivity;                                // 0x1520(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1528[0x10];                                    // 0x1528(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USocialUser>             CachedTargetSocialUser;                            // 0x1538(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   CurrentCTAButtonText;                              // 0x1540(0x0018)(Transient, NativeAccessSpecifierPrivate)
	class FText                                   JoinPartyText;                                     // 0x1558(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   RequestToJoinText;                                 // 0x1570(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    JoinFriendInputAction_Touch;                       // 0x1588(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1598[0x38];                                    // 0x1598(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_PartyInformationUpdated(bool bInIsTileSelected);
	class FText GetCTAButtonText();
	void HandleCTAButtonClicked();
	void OnGameActivityChanged(class UFortGameActivity* GameActivity);
	void OnTextureBeginLoading();
	void OnTextureLoadingComplete(const class UTexture* ThumbnailTexture);
	void OnTileActiveChanged(const bool bIsTileActive);
	void OnUpdateColumnSize(int32 NewColumnSize);
	void OpenSidebar();
	void UpdateCTAButtonInfo(const class FText& InteractionText, const bool bInteractionFound);
	void UpdateCTAButtonInteraction(const bool bIsInteractionEnabled);
	void UpdateIslandThumbnail(const class UTexture* ThumbnailTexture);
	void UpdateLastInteraction(const class FText& LastInteraction);
	void UpdateOtherPlayersSubText(const class FText& OtherPlayersSubText);
	void UpdatePartyMemberNames(const class FText& Names);
	void UpdateRichPresence(const class FText& RichPresence);
	void UpdateSingleFriendName(const class FText& SingleFriendName);

	const int32 GetMaxPartySize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserPlayWithFriendsTile">();
	}
	static class UFortActivityBrowserPlayWithFriendsTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserPlayWithFriendsTile>();
	}
};
static_assert(alignof(UFortActivityBrowserPlayWithFriendsTile) == 0x000010, "Wrong alignment on UFortActivityBrowserPlayWithFriendsTile");
static_assert(sizeof(UFortActivityBrowserPlayWithFriendsTile) == 0x0015D0, "Wrong size on UFortActivityBrowserPlayWithFriendsTile");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, MaxNamesToDisplay) == 0x0014F0, "Member 'UFortActivityBrowserPlayWithFriendsTile::MaxNamesToDisplay' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, MaxPortraitsToDisplay) == 0x0014F4, "Member 'UFortActivityBrowserPlayWithFriendsTile::MaxPortraitsToDisplay' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, PartyMembersAvatarsDisplay) == 0x001508, "Member 'UFortActivityBrowserPlayWithFriendsTile::PartyMembersAvatarsDisplay' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, bIsActiveInvite) == 0x001510, "Member 'UFortActivityBrowserPlayWithFriendsTile::bIsActiveInvite' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, CurrentPartySize) == 0x001514, "Member 'UFortActivityBrowserPlayWithFriendsTile::CurrentPartySize' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, bIsPartyPrivate) == 0x001518, "Member 'UFortActivityBrowserPlayWithFriendsTile::bIsPartyPrivate' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, CachedGameActivity) == 0x001520, "Member 'UFortActivityBrowserPlayWithFriendsTile::CachedGameActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, CachedTargetSocialUser) == 0x001538, "Member 'UFortActivityBrowserPlayWithFriendsTile::CachedTargetSocialUser' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, CurrentCTAButtonText) == 0x001540, "Member 'UFortActivityBrowserPlayWithFriendsTile::CurrentCTAButtonText' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, JoinPartyText) == 0x001558, "Member 'UFortActivityBrowserPlayWithFriendsTile::JoinPartyText' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, RequestToJoinText) == 0x001570, "Member 'UFortActivityBrowserPlayWithFriendsTile::RequestToJoinText' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserPlayWithFriendsTile, JoinFriendInputAction_Touch) == 0x001588, "Member 'UFortActivityBrowserPlayWithFriendsTile::JoinFriendInputAction_Touch' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRow
// 0x00C0 (0x03A8 - 0x02E8)
class UFortActivityBrowserRow : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0xB0];                                     // 0x02E8(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_CategoryName;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinimumVisibilityPercentageForRowActivation;       // 0x03A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCategoryItemChanged(const bool bPlayAnimation);
	void OnRowIsActiveChanged(const bool bIsActive);
	void OnRowIsSelectedChanged(const bool bIsSelected);
	void OnRowMoveDown(const bool bMovingOffscreen);
	void OnRowMoveUp(const bool bMovingOffscreen);
	void OnRowPeekStateChanged(const bool bIsInPeekState);

	bool GetIsActive() const;
	bool GetIsInPeekState() const;
	bool GetIsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRow">();
	}
	static class UFortActivityBrowserRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRow>();
	}
};
static_assert(alignof(UFortActivityBrowserRow) == 0x000008, "Wrong alignment on UFortActivityBrowserRow");
static_assert(sizeof(UFortActivityBrowserRow) == 0x0003A8, "Wrong size on UFortActivityBrowserRow");
static_assert(offsetof(UFortActivityBrowserRow, Text_CategoryName) == 0x000398, "Member 'UFortActivityBrowserRow::Text_CategoryName' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRow, MinimumVisibilityPercentageForRowActivation) == 0x0003A0, "Member 'UFortActivityBrowserRow::MinimumVisibilityPercentageForRowActivation' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRowList
// 0x0020 (0x03C8 - 0x03A8)
class UFortActivityBrowserRowList : public UFortActivityBrowserRow
{
public:
	class UFortActivityListView*                  ListView_Activities;                               // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageLeft;                                   // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageRight;                                  // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x8];                                      // 0x03C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnQueryStatusChanged(bool bIsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRowList">();
	}
	static class UFortActivityBrowserRowList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRowList>();
	}
};
static_assert(alignof(UFortActivityBrowserRowList) == 0x000008, "Wrong alignment on UFortActivityBrowserRowList");
static_assert(sizeof(UFortActivityBrowserRowList) == 0x0003C8, "Wrong size on UFortActivityBrowserRowList");
static_assert(offsetof(UFortActivityBrowserRowList, ListView_Activities) == 0x0003A8, "Member 'UFortActivityBrowserRowList::ListView_Activities' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowList, Button_PageLeft) == 0x0003B0, "Member 'UFortActivityBrowserRowList::Button_PageLeft' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowList, Button_PageRight) == 0x0003B8, "Member 'UFortActivityBrowserRowList::Button_PageRight' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserView
// 0x00B8 (0x0508 - 0x0450)
class UFortActivityBrowserView : public UFortActivityView
{
public:
	bool                                          bShowCustomMatchmakingModalButton;                 // 0x0450(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowSpectateMatchModalButton;                     // 0x0451(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowMobileGameDetailsButton;                      // 0x0452(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowMobileAcceptButton;                           // 0x0453(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowBackToTopButton;                              // 0x0454(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DiscoverySurfaceName;                              // 0x0458(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45C[0xAC];                                     // 0x045C(0x00AC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSurfaceDataDirty();

	EFortInvalidActivityReason GetInvalidActivityReason() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserView">();
	}
	static class UFortActivityBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserView>();
	}
};
static_assert(alignof(UFortActivityBrowserView) == 0x000008, "Wrong alignment on UFortActivityBrowserView");
static_assert(sizeof(UFortActivityBrowserView) == 0x000508, "Wrong size on UFortActivityBrowserView");
static_assert(offsetof(UFortActivityBrowserView, bShowCustomMatchmakingModalButton) == 0x000450, "Member 'UFortActivityBrowserView::bShowCustomMatchmakingModalButton' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, bShowSpectateMatchModalButton) == 0x000451, "Member 'UFortActivityBrowserView::bShowSpectateMatchModalButton' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, bShowMobileGameDetailsButton) == 0x000452, "Member 'UFortActivityBrowserView::bShowMobileGameDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, bShowMobileAcceptButton) == 0x000453, "Member 'UFortActivityBrowserView::bShowMobileAcceptButton' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, bShowBackToTopButton) == 0x000454, "Member 'UFortActivityBrowserView::bShowBackToTopButton' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserView, DiscoverySurfaceName) == 0x000458, "Member 'UFortActivityBrowserView::DiscoverySurfaceName' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserRowView
// 0x01B8 (0x06C0 - 0x0508)
class UFortActivityBrowserRowView : public UFortActivityBrowserView
{
public:
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseWheelScrollTimeThreshold;                     // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityBrowserListView*           BrowserList_Activities;                            // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_520[0x60];                                     // 0x0520(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0580(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_584[0xC];                                      // 0x0584(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0590(0x0110)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	class UFortSwipePanel*                        SwipePanel_Navigation;                             // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A8[0x18];                                     // 0x06A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleVerticalSwipe(const int32 Direction);
	void OnActivityUpdated();
	void OnListViewScrolled(float ItemOffset, float DistanceRemaining);
	void OnQueryActivitiesFinished();
	void OnRowChanged(const int32 NewCategoryIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserRowView">();
	}
	static class UFortActivityBrowserRowView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserRowView>();
	}
};
static_assert(alignof(UFortActivityBrowserRowView) == 0x000010, "Wrong alignment on UFortActivityBrowserRowView");
static_assert(sizeof(UFortActivityBrowserRowView) == 0x0006C0, "Wrong size on UFortActivityBrowserRowView");
static_assert(offsetof(UFortActivityBrowserRowView, MouseWheelScrollTimeThreshold) == 0x000510, "Member 'UFortActivityBrowserRowView::MouseWheelScrollTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowView, BrowserList_Activities) == 0x000518, "Member 'UFortActivityBrowserRowView::BrowserList_Activities' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowView, TabNameID) == 0x000580, "Member 'UFortActivityBrowserRowView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowView, TabButtonLabelInfo) == 0x000590, "Member 'UFortActivityBrowserRowView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityBrowserRowView, SwipePanel_Navigation) == 0x0006A0, "Member 'UFortActivityBrowserRowView::SwipePanel_Navigation' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserTile
// 0x0060 (0x1550 - 0x14F0)
class UFortActivityBrowserTile : public UFortActivityBrowserTileBase
{
public:
	class UFortActivityTileDetailsDisplay*        Display_TileDetails;                               // 0x14F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14F8[0x58];                                    // 0x14F8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivitySelected();
	void HandleDisplayTileDetailsHoldTriggered(class UCommonButtonBase* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserTile">();
	}
	static class UFortActivityBrowserTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserTile>();
	}
};
static_assert(alignof(UFortActivityBrowserTile) == 0x000010, "Wrong alignment on UFortActivityBrowserTile");
static_assert(sizeof(UFortActivityBrowserTile) == 0x001550, "Wrong size on UFortActivityBrowserTile");
static_assert(offsetof(UFortActivityBrowserTile, Display_TileDetails) == 0x0014F0, "Member 'UFortActivityBrowserTile::Display_TileDetails' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerBrowserView
// 0x0158 (0x0660 - 0x0508)
class UFortActivityPlayerBrowserView : public UFortActivityBrowserView
{
public:
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameActivityProvider*              ActivityProvider;                                  // 0x0510(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortActivityTileView*                  TileView_PlayerActivities;                         // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TabNameID;                                         // 0x0520(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_524[0xC];                                      // 0x0524(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0530(0x0110)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	EFortCreativeDiscoveryPlayHistoryType         PlayHistoryProviderType;                           // 0x0640(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_641[0x1F];                                     // 0x0641(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnTileViewUpdated();
	void OnPlayViewIntro();
	void OnQueryActivitiesComplete();
	void OnQueryActivitiesStarted();
	void PlayViewIntro();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerBrowserView">();
	}
	static class UFortActivityPlayerBrowserView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerBrowserView>();
	}
};
static_assert(alignof(UFortActivityPlayerBrowserView) == 0x000010, "Wrong alignment on UFortActivityPlayerBrowserView");
static_assert(sizeof(UFortActivityPlayerBrowserView) == 0x000660, "Wrong size on UFortActivityPlayerBrowserView");
static_assert(offsetof(UFortActivityPlayerBrowserView, ActivityProvider) == 0x000510, "Member 'UFortActivityPlayerBrowserView::ActivityProvider' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TileView_PlayerActivities) == 0x000518, "Member 'UFortActivityPlayerBrowserView::TileView_PlayerActivities' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TabNameID) == 0x000520, "Member 'UFortActivityPlayerBrowserView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, TabButtonLabelInfo) == 0x000530, "Member 'UFortActivityPlayerBrowserView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserView, PlayHistoryProviderType) == 0x000640, "Member 'UFortActivityPlayerBrowserView::PlayHistoryProviderType' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityCategoryPageView
// 0x0040 (0x06A0 - 0x0660)
class UFortActivityCategoryPageView : public UFortActivityPlayerBrowserView
{
public:
	uint8                                         Pad_660[0x8];                                      // 0x0660(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonRichTextBlock*                   Text_CategoryTitle;                                // 0x0668(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_BackToTop;                                  // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0678(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0680(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MobileAccept;                               // 0x0688(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MobileShowGameDetails;                      // 0x0690(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCategoryPageView">();
	}
	static class UFortActivityCategoryPageView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCategoryPageView>();
	}
};
static_assert(alignof(UFortActivityCategoryPageView) == 0x000010, "Wrong alignment on UFortActivityCategoryPageView");
static_assert(sizeof(UFortActivityCategoryPageView) == 0x0006A0, "Wrong size on UFortActivityCategoryPageView");
static_assert(offsetof(UFortActivityCategoryPageView, Text_CategoryTitle) == 0x000668, "Member 'UFortActivityCategoryPageView::Text_CategoryTitle' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryPageView, Button_BackToTop) == 0x000670, "Member 'UFortActivityCategoryPageView::Button_BackToTop' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryPageView, Button_CloseTouch) == 0x000678, "Member 'UFortActivityCategoryPageView::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryPageView, Button_Back) == 0x000680, "Member 'UFortActivityCategoryPageView::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryPageView, Button_MobileAccept) == 0x000688, "Member 'UFortActivityCategoryPageView::Button_MobileAccept' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryPageView, Button_MobileShowGameDetails) == 0x000690, "Member 'UFortActivityCategoryPageView::Button_MobileShowGameDetails' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityTileViewTileBase
// 0x0090 (0x1520 - 0x1490)
class UFortActivityTileViewTileBase : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x90];                                    // 0x1490(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityTileViewTileBase">();
	}
	static class UFortActivityTileViewTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityTileViewTileBase>();
	}
};
static_assert(alignof(UFortActivityTileViewTileBase) == 0x000010, "Wrong alignment on UFortActivityTileViewTileBase");
static_assert(sizeof(UFortActivityTileViewTileBase) == 0x001520, "Wrong size on UFortActivityTileViewTileBase");

// Class DiscoveryBrowserUI.FortActivityCategoryTile
// 0x0010 (0x1530 - 0x1520)
class UFortActivityCategoryTile : public UFortActivityTileViewTileBase
{
public:
	class UCommonTextBlock*                       Text_CategoryTitle;                                // 0x1520(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1528[0x8];                                     // 0x1528(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTileActiveSet(const bool bIsTileActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCategoryTile">();
	}
	static class UFortActivityCategoryTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCategoryTile>();
	}
};
static_assert(alignof(UFortActivityCategoryTile) == 0x000010, "Wrong alignment on UFortActivityCategoryTile");
static_assert(sizeof(UFortActivityCategoryTile) == 0x001530, "Wrong size on UFortActivityCategoryTile");
static_assert(offsetof(UFortActivityCategoryTile, Text_CategoryTitle) == 0x001520, "Member 'UFortActivityCategoryTile::Text_CategoryTitle' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityCategoryTilePanel
// 0x0070 (0x0358 - 0x02E8)
class UFortActivityCategoryTilePanel : public UCommonUserWidget
{
public:
	class UFortActivityTileView*                  TileView_Categories;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Title;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TileViewQueryThreshold;                            // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCreativeDiscoveryActivityProvider* CachedActivityProvider;                            // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x50];                                     // 0x0308(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCategoryTilePanel">();
	}
	static class UFortActivityCategoryTilePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCategoryTilePanel>();
	}
};
static_assert(alignof(UFortActivityCategoryTilePanel) == 0x000008, "Wrong alignment on UFortActivityCategoryTilePanel");
static_assert(sizeof(UFortActivityCategoryTilePanel) == 0x000358, "Wrong size on UFortActivityCategoryTilePanel");
static_assert(offsetof(UFortActivityCategoryTilePanel, TileView_Categories) == 0x0002E8, "Member 'UFortActivityCategoryTilePanel::TileView_Categories' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryTilePanel, Text_Title) == 0x0002F0, "Member 'UFortActivityCategoryTilePanel::Text_Title' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryTilePanel, TileViewQueryThreshold) == 0x0002F8, "Member 'UFortActivityCategoryTilePanel::TileViewQueryThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryTilePanel, CachedActivityProvider) == 0x000300, "Member 'UFortActivityCategoryTilePanel::CachedActivityProvider' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityCategoryView
// 0x0148 (0x0650 - 0x0508)
class UFortActivityCategoryView final : public UFortActivityBrowserView
{
public:
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TabNameID;                                         // 0x0510(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_514[0xC];                                      // 0x0514(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0520(0x0110)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UFortActivityCategoryTilePanel*         TilePanel_Featured;                                // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityCategoryTilePanel*         TilePanel_All;                                     // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityCategoryTilePanel*         CurrentSelectedPanel;                              // 0x0640(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortActivityCategoryTilePanel* NavigateFromPanel(EUINavigation Direction, class UFortActivityCategoryTilePanel* NavigatingPanel);
	void OnCategoryTilePanelSelected(const class UFortActivityCategoryTilePanel* SelectedPanel);
	void OnSurfaceDataReady();

	const class UFortActivityCategoryTilePanel* GetCurrentSelectedPanel() const;
	class UFortActivityCategoryTilePanel* GetTopMostVisiblePanel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCategoryView">();
	}
	static class UFortActivityCategoryView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCategoryView>();
	}
};
static_assert(alignof(UFortActivityCategoryView) == 0x000010, "Wrong alignment on UFortActivityCategoryView");
static_assert(sizeof(UFortActivityCategoryView) == 0x000650, "Wrong size on UFortActivityCategoryView");
static_assert(offsetof(UFortActivityCategoryView, TabNameID) == 0x000510, "Member 'UFortActivityCategoryView::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryView, TabButtonLabelInfo) == 0x000520, "Member 'UFortActivityCategoryView::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryView, TilePanel_Featured) == 0x000630, "Member 'UFortActivityCategoryView::TilePanel_Featured' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryView, TilePanel_All) == 0x000638, "Member 'UFortActivityCategoryView::TilePanel_All' has a wrong offset!");
static_assert(offsetof(UFortActivityCategoryView, CurrentSelectedPanel) == 0x000640, "Member 'UFortActivityCategoryView::CurrentSelectedPanel' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityCreatorPageView
// 0x0080 (0x0720 - 0x06A0)
class UFortActivityCreatorPageView : public UFortActivityCategoryPageView
{
public:
	uint8                                         Pad_6A0[0x28];                                     // 0x06A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmountOfCreatorLinkEntriesQueried;                 // 0x06C8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ProcessedCreatorLinkEntries;                       // 0x06CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AmountOfEntriesQueried;                            // 0x06D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D4[0x4C];                                     // 0x06D4(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCreatorActivitiesQueryFinished();
	void OnNoContentFoundForCreator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityCreatorPageView">();
	}
	static class UFortActivityCreatorPageView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityCreatorPageView>();
	}
};
static_assert(alignof(UFortActivityCreatorPageView) == 0x000010, "Wrong alignment on UFortActivityCreatorPageView");
static_assert(sizeof(UFortActivityCreatorPageView) == 0x000720, "Wrong size on UFortActivityCreatorPageView");
static_assert(offsetof(UFortActivityCreatorPageView, AmountOfCreatorLinkEntriesQueried) == 0x0006C8, "Member 'UFortActivityCreatorPageView::AmountOfCreatorLinkEntriesQueried' has a wrong offset!");
static_assert(offsetof(UFortActivityCreatorPageView, ProcessedCreatorLinkEntries) == 0x0006CC, "Member 'UFortActivityCreatorPageView::ProcessedCreatorLinkEntries' has a wrong offset!");
static_assert(offsetof(UFortActivityCreatorPageView, AmountOfEntriesQueried) == 0x0006D0, "Member 'UFortActivityCreatorPageView::AmountOfEntriesQueried' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityDiscoverView
// 0x00A0 (0x0760 - 0x06C0)
class UFortActivityDiscoverView final : public UFortActivityBrowserRowView
{
public:
	bool                                          bPlayDetailsAnimationOnScreenOpen;                 // 0x06C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetailsDisplayUpdateDelay;                         // 0x06C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivatableMovieWidget> MovieWidgetClass;                                  // 0x06C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityDetailsDisplay*            DetailsDisplay_SelectedActivity;                   // 0x06D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityDetailsDisplay*            DetailsDisplay_PromotedActivity;                   // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           Panel_VideoSlot;                                   // 0x06E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           Panel_PromotedVideoSlot;                           // 0x06E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivatableMovieWidget*            ActivityMovieWidget;                               // 0x06F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivatableMovieWidget*            PromotedActivityMovieWidget;                       // 0x06F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_700[0x48];                                     // 0x0700(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       BoundKeyArtOutroAnimation;                         // 0x0748(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_750[0x10];                                     // 0x0750(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckUpdateDetailsDelay();
	void HandleMovieWidgetMediaPreEndEvent();
	void HandleMovieWidgetMediaStarted();
	void OnMoviePlayingChanged(const bool bIsPlaying);
	void OnMoviePreEndEvent();
	void OnPlayKeyArtIntro();
	void OnPlayKeyArtOutro();
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnUpdateDetailsDisplay();

	const class UTexture* GetCurrentTexture() const;
	class UWidgetAnimation* GetKeyArtOutroAnimation() const;
	class UFortActivatableMovieWidget* GetMovieWidget() const;
	class UFortActivatableMovieWidget* GetPromotedMovieWidget() const;
	bool IsImageLoading() const;
	bool IsInOutroState() const;
	bool IsShowingPromotedContent() const;
	bool IsShowingSeasonalContent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityDiscoverView">();
	}
	static class UFortActivityDiscoverView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityDiscoverView>();
	}
};
static_assert(alignof(UFortActivityDiscoverView) == 0x000010, "Wrong alignment on UFortActivityDiscoverView");
static_assert(sizeof(UFortActivityDiscoverView) == 0x000760, "Wrong size on UFortActivityDiscoverView");
static_assert(offsetof(UFortActivityDiscoverView, bPlayDetailsAnimationOnScreenOpen) == 0x0006C0, "Member 'UFortActivityDiscoverView::bPlayDetailsAnimationOnScreenOpen' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, DetailsDisplayUpdateDelay) == 0x0006C4, "Member 'UFortActivityDiscoverView::DetailsDisplayUpdateDelay' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, MovieWidgetClass) == 0x0006C8, "Member 'UFortActivityDiscoverView::MovieWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, DetailsDisplay_SelectedActivity) == 0x0006D0, "Member 'UFortActivityDiscoverView::DetailsDisplay_SelectedActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, DetailsDisplay_PromotedActivity) == 0x0006D8, "Member 'UFortActivityDiscoverView::DetailsDisplay_PromotedActivity' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, Panel_VideoSlot) == 0x0006E0, "Member 'UFortActivityDiscoverView::Panel_VideoSlot' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, Panel_PromotedVideoSlot) == 0x0006E8, "Member 'UFortActivityDiscoverView::Panel_PromotedVideoSlot' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, ActivityMovieWidget) == 0x0006F0, "Member 'UFortActivityDiscoverView::ActivityMovieWidget' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, PromotedActivityMovieWidget) == 0x0006F8, "Member 'UFortActivityDiscoverView::PromotedActivityMovieWidget' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverView, BoundKeyArtOutroAnimation) == 0x000748, "Member 'UFortActivityDiscoverView::BoundKeyArtOutroAnimation' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityDiscoverViewV2
// 0x0150 (0x0810 - 0x06C0)
class UFortActivityDiscoverViewV2 : public UFortActivityBrowserRowView
{
public:
	TMulticastInlineDelegate<void()>              OnActivityRequested;                               // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortDiscoverPreviewManager*            DiscoverPreviewManager;                            // 0x06D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D8[0x28];                                     // 0x06D8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UDiscoverSelectedActivityViewModel*     SelectedActivityVM;                                // 0x0700(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   SoftCustomMatchmakingModalClass;                   // 0x0708(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   SoftSpectateMatchModalClass;                       // 0x0728(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    BackToTopInputAction;                              // 0x0750(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_760[0x8];                                      // 0x0760(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CustomKeyInputAction;                              // 0x0768(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_778[0x8];                                      // 0x0778(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ShowSpectateMatchModalInputAction;                 // 0x0780(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_790[0x8];                                      // 0x0790(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    JoinAsSpectatorInputAction;                        // 0x0798(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7A8[0x8];                                      // 0x07A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    JoinAsPlayerInputAction;                           // 0x07B0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C0[0x8];                                      // 0x07C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    SelectActivityInputAction_Touch;                   // 0x07C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D8[0x38];                                     // 0x07D8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeactivationTransitionCompleted();
	void FireDiscoverExitedAnalyticEvent();
	void StartDiscoverAnalyticSession();
	void UpdateMiscActionBindingVisibility(bool bVisible);

	bool IsShowingPromotedContent() const;
	bool IsShowingSeasonalContent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityDiscoverViewV2">();
	}
	static class UFortActivityDiscoverViewV2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityDiscoverViewV2>();
	}
};
static_assert(alignof(UFortActivityDiscoverViewV2) == 0x000010, "Wrong alignment on UFortActivityDiscoverViewV2");
static_assert(sizeof(UFortActivityDiscoverViewV2) == 0x000810, "Wrong size on UFortActivityDiscoverViewV2");
static_assert(offsetof(UFortActivityDiscoverViewV2, OnActivityRequested) == 0x0006C0, "Member 'UFortActivityDiscoverViewV2::OnActivityRequested' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, DiscoverPreviewManager) == 0x0006D0, "Member 'UFortActivityDiscoverViewV2::DiscoverPreviewManager' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, SelectedActivityVM) == 0x000700, "Member 'UFortActivityDiscoverViewV2::SelectedActivityVM' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, SoftCustomMatchmakingModalClass) == 0x000708, "Member 'UFortActivityDiscoverViewV2::SoftCustomMatchmakingModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, SoftSpectateMatchModalClass) == 0x000728, "Member 'UFortActivityDiscoverViewV2::SoftSpectateMatchModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, BackToTopInputAction) == 0x000750, "Member 'UFortActivityDiscoverViewV2::BackToTopInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, CustomKeyInputAction) == 0x000768, "Member 'UFortActivityDiscoverViewV2::CustomKeyInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, ShowSpectateMatchModalInputAction) == 0x000780, "Member 'UFortActivityDiscoverViewV2::ShowSpectateMatchModalInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, JoinAsSpectatorInputAction) == 0x000798, "Member 'UFortActivityDiscoverViewV2::JoinAsSpectatorInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, JoinAsPlayerInputAction) == 0x0007B0, "Member 'UFortActivityDiscoverViewV2::JoinAsPlayerInputAction' has a wrong offset!");
static_assert(offsetof(UFortActivityDiscoverViewV2, SelectActivityInputAction_Touch) == 0x0007C8, "Member 'UFortActivityDiscoverViewV2::SelectActivityInputAction_Touch' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityListView
// 0x0190 (0x0428 - 0x0298)
class UFortActivityListView final : public UListViewBase
{
public:
	uint8                                         Pad_298[0xE8];                                     // 0x0298(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalNavigationTimeThreshold;                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  orientation;                                       // 0x0384(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x0388(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCircularNavigationEnabled;                        // 0x038C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EActivityBrowserTileStyle, TSubclassOf<class UFortActivityBrowserTileBase>> TileTypes;                                         // 0x0390(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E0[0x48];                                     // 0x03E0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTileType(EActivityBrowserTileStyle style, TSubclassOf<class UFortActivityBrowserTileBase> WidgetClass);

	int32 GetInViewCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityListView">();
	}
	static class UFortActivityListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityListView>();
	}
};
static_assert(alignof(UFortActivityListView) == 0x000008, "Wrong alignment on UFortActivityListView");
static_assert(sizeof(UFortActivityListView) == 0x000428, "Wrong size on UFortActivityListView");
static_assert(offsetof(UFortActivityListView, DirectionalNavigationTimeThreshold) == 0x000380, "Member 'UFortActivityListView::DirectionalNavigationTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, orientation) == 0x000384, "Member 'UFortActivityListView::orientation' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, EntrySpacing) == 0x000388, "Member 'UFortActivityListView::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, bCircularNavigationEnabled) == 0x00038C, "Member 'UFortActivityListView::bCircularNavigationEnabled' has a wrong offset!");
static_assert(offsetof(UFortActivityListView, TileTypes) == 0x000390, "Member 'UFortActivityListView::TileTypes' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityLobbyTile
// 0x0080 (0x1560 - 0x14E0)
class UFortActivityLobbyTile : public UCommonButtonLegacy
{
public:
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x14E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityBrowserTag*                ActivityBrowserTag_EpicOriginal;                   // 0x14E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivityModeSetSelectionModalBase> ActivityModeSetSelectionModalClass;                // 0x14F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortGameActivityProvider*              ActivityProvider;                                  // 0x14F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1500[0x60];                                    // 0x1500(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDetailsUpdated();
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void ShowModeSetSelectionModal();

	class FText GetChildActivityDisplayName() const;
	bool IsActivityEpicCreated() const;
	bool ShouldShowSubmodeSelectButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityLobbyTile">();
	}
	static class UFortActivityLobbyTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityLobbyTile>();
	}
};
static_assert(alignof(UFortActivityLobbyTile) == 0x000010, "Wrong alignment on UFortActivityLobbyTile");
static_assert(sizeof(UFortActivityLobbyTile) == 0x001560, "Wrong size on UFortActivityLobbyTile");
static_assert(offsetof(UFortActivityLobbyTile, Text_ActivityName) == 0x0014E0, "Member 'UFortActivityLobbyTile::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, ActivityBrowserTag_EpicOriginal) == 0x0014E8, "Member 'UFortActivityLobbyTile::ActivityBrowserTag_EpicOriginal' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, ActivityModeSetSelectionModalClass) == 0x0014F0, "Member 'UFortActivityLobbyTile::ActivityModeSetSelectionModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityLobbyTile, ActivityProvider) == 0x0014F8, "Member 'UFortActivityLobbyTile::ActivityProvider' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityModeSetSelectionModal
// 0x0068 (0x0480 - 0x0418)
class UFortActivityModeSetSelectionModal : public UFortActivityModeSetSelectionModalBase
{
public:
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x28];                                     // 0x0420(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Back;                                       // 0x0448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_BackBoard;                                  // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityModeSetSelection*          List_SubModeList;                                  // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivitySquadFillButton*           Button_ActivitySquadFill;                          // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityPrivacyButton*             Button_ActivityPrivacy;                            // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityHabaneroButton*            Button_Activity_Habanero;                          // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivityChanged(const class UFortGameActivity* GameActivity, const class FString& StartingSelectedMnemonic);
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnSubModeSelected();
	void OnSubModeSelectionChanged();
	void SaveSelectionAndClose();
	void SetHabaneroValues(bool bHabaneroEnabled, bool bHabaneroExists);
	void SetIsRankedSwitchAvailable(const bool bIsRankedSwitchAvailable);

	bool IsCreativeModeSetActivity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityModeSetSelectionModal">();
	}
	static class UFortActivityModeSetSelectionModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityModeSetSelectionModal>();
	}
};
static_assert(alignof(UFortActivityModeSetSelectionModal) == 0x000008, "Wrong alignment on UFortActivityModeSetSelectionModal");
static_assert(sizeof(UFortActivityModeSetSelectionModal) == 0x000480, "Wrong size on UFortActivityModeSetSelectionModal");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Text_ActivityName) == 0x000418, "Member 'UFortActivityModeSetSelectionModal::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Button_Back) == 0x000448, "Member 'UFortActivityModeSetSelectionModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Button_BackBoard) == 0x000450, "Member 'UFortActivityModeSetSelectionModal::Button_BackBoard' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, List_SubModeList) == 0x000458, "Member 'UFortActivityModeSetSelectionModal::List_SubModeList' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Button_ActivitySquadFill) == 0x000460, "Member 'UFortActivityModeSetSelectionModal::Button_ActivitySquadFill' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Button_ActivityPrivacy) == 0x000468, "Member 'UFortActivityModeSetSelectionModal::Button_ActivityPrivacy' has a wrong offset!");
static_assert(offsetof(UFortActivityModeSetSelectionModal, Button_Activity_Habanero) == 0x000470, "Member 'UFortActivityModeSetSelectionModal::Button_Activity_Habanero' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityPlayerBrowserTile
// 0x0060 (0x1580 - 0x1520)
class UFortActivityPlayerBrowserTile : public UFortActivityTileViewTileBase
{
public:
	class UFortActivityTileDetailsDisplay*        Display_TileDetails;                               // 0x1520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_LastPlayedDate;                               // 0x1528(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1530[0x50];                                    // 0x1530(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivitySelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityPlayerBrowserTile">();
	}
	static class UFortActivityPlayerBrowserTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityPlayerBrowserTile>();
	}
};
static_assert(alignof(UFortActivityPlayerBrowserTile) == 0x000010, "Wrong alignment on UFortActivityPlayerBrowserTile");
static_assert(sizeof(UFortActivityPlayerBrowserTile) == 0x001580, "Wrong size on UFortActivityPlayerBrowserTile");
static_assert(offsetof(UFortActivityPlayerBrowserTile, Display_TileDetails) == 0x001520, "Member 'UFortActivityPlayerBrowserTile::Display_TileDetails' has a wrong offset!");
static_assert(offsetof(UFortActivityPlayerBrowserTile, Text_LastPlayedDate) == 0x001528, "Member 'UFortActivityPlayerBrowserTile::Text_LastPlayedDate' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivitySelector
// 0x00E8 (0x0110 - 0x0028)
class UFortActivitySelector final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            SelectedContextWidget;                             // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivityCreatorPageView*           CachedCreatorPageView;                             // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UFortActivityBrowserColorSchemeAsset*> ColorSchemes;                                      // 0x0078(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UFortActivityBrowserColorSchemeAsset*   CurrentColorScheme;                                // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x40];                                      // 0x00D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfirmSelectedActivity();
	void HandleShowActivityDetails();
	void OnEnableColorScheme(const bool bIsColorSchemeActive);
	void OnSwapColorScheme(const bool bInIsUsingAlternateColorScheme);
	void OpenCreatorPage();
	void ToggleFavorite();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivitySelector">();
	}
	static class UFortActivitySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivitySelector>();
	}
};
static_assert(alignof(UFortActivitySelector) == 0x000008, "Wrong alignment on UFortActivitySelector");
static_assert(sizeof(UFortActivitySelector) == 0x000110, "Wrong size on UFortActivitySelector");
static_assert(offsetof(UFortActivitySelector, SelectedContextWidget) == 0x000038, "Member 'UFortActivitySelector::SelectedContextWidget' has a wrong offset!");
static_assert(offsetof(UFortActivitySelector, CachedCreatorPageView) == 0x000060, "Member 'UFortActivitySelector::CachedCreatorPageView' has a wrong offset!");
static_assert(offsetof(UFortActivitySelector, ColorSchemes) == 0x000078, "Member 'UFortActivitySelector::ColorSchemes' has a wrong offset!");
static_assert(offsetof(UFortActivitySelector, CurrentColorScheme) == 0x0000C8, "Member 'UFortActivitySelector::CurrentColorScheme' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityTileDetailsDisplay
// 0x0180 (0x1710 - 0x1590)
class UFortActivityTileDetailsDisplay : public UUIKitHoldableModularButton
{
public:
	TMulticastInlineDelegate<void()>              OnActivitySelectedDelegate;                        // 0x1588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnActivityUnSelectedDelegate;                      // 0x1598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          bShowDetailsButton;                                // 0x15A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15A9[0x3];                                     // 0x15A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultColumnSize;                                 // 0x15AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_ActivityName;                                 // 0x15B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_PlayerCount;                                  // 0x15B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Favorite;                                   // 0x15C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Details;                                    // 0x15C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityBrowserTag*                ActivityBrowserTag_EpicOriginal;                   // 0x15D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Text_DebugId;                                      // 0x15D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortActivityVideoCycle*                ActivityVideoCycleWidget;                          // 0x15E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<uint32, ECreativeLinkPreviewSize>        MinColumnSizeToImageSize;                          // 0x15E8(0x0050)(Config, NativeAccessSpecifierPrivate)
	uint8                                         MaxMobileColumnSize;                               // 0x1638(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MinMobileColumnSize;                               // 0x1639(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsVideoEnabledForDynamicTileSizingV2;             // 0x163A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_163B[0x5];                                     // 0x163B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortActivityDetailsModal>  ActivityDetailsModalClass;                         // 0x1640(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivityCreatorPageView> ActivityCreatorPageViewClass;                      // 0x1648(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortCampaignPurchaseScreen> ActivityCampaignPurchaseScreenClass;               // 0x1650(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortActivityBrowserAttributionsModal> ActivityAttributionsClass;                         // 0x1658(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1660[0xB0];                                    // 0x1660(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivitySelected();
	void HandleShowActivityDetails();
	void OnDetailsUpdated();
	void OnFriendsPlayingChanged(int32 NumPlaying);
	void OnIsFavoriteChanged(const bool bIsFavorite);
	void OnLocalPlayerDemoted();
	void OnLocalPlayerPromotedToLeader();
	void OnLogoImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnPartySizeChanged(const int32 PartySize);
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnRequiresPurchaseChanged(const bool bRequiresPurchase);
	void OnRespondToTileViewVisibilityChange(bool bIsVisible);
	void OnTileActiveSet(const bool bIsTileActive);
	void OnTileClicked();
	void ShouldPlayTileVideo(bool* bOutResult);
	void StartTileVideo();
	void StopTileVideo();
	void UpdateActivitySelector();
	void UpdateCCU(const int32 CCUCount);
	void UpdateFromFortActivityViewModel();
	void UpdateSqueegeeWidgets(class UFortGameActivity* GameActivity);

	void BroadcastOnActivityConfirmed() const;
	bool DoesActivityRequirePurchase() const;
	class FString GetActivityCreatorDisplayText() const;
	class UFortActivitySelector* GetActivitySelector() const;
	EFortInvalidActivityReason GetInvalidActivityReason() const;
	EFortActivityIsLockedReason GetIsActivityLockedReason() const;
	bool IsActivityFavorited() const;
	bool IsActivityLocked() const;
	bool IsModeSetActivity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityTileDetailsDisplay">();
	}
	static class UFortActivityTileDetailsDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityTileDetailsDisplay>();
	}
};
static_assert(alignof(UFortActivityTileDetailsDisplay) == 0x000010, "Wrong alignment on UFortActivityTileDetailsDisplay");
static_assert(sizeof(UFortActivityTileDetailsDisplay) == 0x001710, "Wrong size on UFortActivityTileDetailsDisplay");
static_assert(offsetof(UFortActivityTileDetailsDisplay, OnActivitySelectedDelegate) == 0x001588, "Member 'UFortActivityTileDetailsDisplay::OnActivitySelectedDelegate' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, OnActivityUnSelectedDelegate) == 0x001598, "Member 'UFortActivityTileDetailsDisplay::OnActivityUnSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, bShowDetailsButton) == 0x0015A8, "Member 'UFortActivityTileDetailsDisplay::bShowDetailsButton' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, DefaultColumnSize) == 0x0015AC, "Member 'UFortActivityTileDetailsDisplay::DefaultColumnSize' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Text_ActivityName) == 0x0015B0, "Member 'UFortActivityTileDetailsDisplay::Text_ActivityName' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Text_PlayerCount) == 0x0015B8, "Member 'UFortActivityTileDetailsDisplay::Text_PlayerCount' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Button_Favorite) == 0x0015C0, "Member 'UFortActivityTileDetailsDisplay::Button_Favorite' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Button_Details) == 0x0015C8, "Member 'UFortActivityTileDetailsDisplay::Button_Details' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityBrowserTag_EpicOriginal) == 0x0015D0, "Member 'UFortActivityTileDetailsDisplay::ActivityBrowserTag_EpicOriginal' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, Text_DebugId) == 0x0015D8, "Member 'UFortActivityTileDetailsDisplay::Text_DebugId' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityVideoCycleWidget) == 0x0015E0, "Member 'UFortActivityTileDetailsDisplay::ActivityVideoCycleWidget' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, MinColumnSizeToImageSize) == 0x0015E8, "Member 'UFortActivityTileDetailsDisplay::MinColumnSizeToImageSize' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, MaxMobileColumnSize) == 0x001638, "Member 'UFortActivityTileDetailsDisplay::MaxMobileColumnSize' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, MinMobileColumnSize) == 0x001639, "Member 'UFortActivityTileDetailsDisplay::MinMobileColumnSize' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, bIsVideoEnabledForDynamicTileSizingV2) == 0x00163A, "Member 'UFortActivityTileDetailsDisplay::bIsVideoEnabledForDynamicTileSizingV2' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityDetailsModalClass) == 0x001640, "Member 'UFortActivityTileDetailsDisplay::ActivityDetailsModalClass' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityCreatorPageViewClass) == 0x001648, "Member 'UFortActivityTileDetailsDisplay::ActivityCreatorPageViewClass' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityCampaignPurchaseScreenClass) == 0x001650, "Member 'UFortActivityTileDetailsDisplay::ActivityCampaignPurchaseScreenClass' has a wrong offset!");
static_assert(offsetof(UFortActivityTileDetailsDisplay, ActivityAttributionsClass) == 0x001658, "Member 'UFortActivityTileDetailsDisplay::ActivityAttributionsClass' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityTileView
// 0x0000 (0x0C00 - 0x0C00)
class UFortActivityTileView final : public UCommonTileView
{
public:
	void NavigateToTop();
	void RespondToVisibilityChange(bool bIsVisible);
	void SetListenForMouseWheelInput(bool bListenForInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityTileView">();
	}
	static class UFortActivityTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityTileView>();
	}
};
static_assert(alignof(UFortActivityTileView) == 0x000010, "Wrong alignment on UFortActivityTileView");
static_assert(sizeof(UFortActivityTileView) == 0x000C00, "Wrong size on UFortActivityTileView");

// Class DiscoveryBrowserUI.FortDiscoverItemBrowserRow
// 0x0050 (0x03F8 - 0x03A8)
class UFortDiscoverItemBrowserRow : public UFortActivityBrowserRow
{
public:
	class UFortDiscoverItemListView*              ListView_Tiles;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageLeft;                                   // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PageRight;                                  // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x38];                                     // 0x03C0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDiscoverItemBrowserRow">();
	}
	static class UFortDiscoverItemBrowserRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDiscoverItemBrowserRow>();
	}
};
static_assert(alignof(UFortDiscoverItemBrowserRow) == 0x000008, "Wrong alignment on UFortDiscoverItemBrowserRow");
static_assert(sizeof(UFortDiscoverItemBrowserRow) == 0x0003F8, "Wrong size on UFortDiscoverItemBrowserRow");
static_assert(offsetof(UFortDiscoverItemBrowserRow, ListView_Tiles) == 0x0003A8, "Member 'UFortDiscoverItemBrowserRow::ListView_Tiles' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemBrowserRow, Button_PageLeft) == 0x0003B0, "Member 'UFortDiscoverItemBrowserRow::Button_PageLeft' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemBrowserRow, Button_PageRight) == 0x0003B8, "Member 'UFortDiscoverItemBrowserRow::Button_PageRight' has a wrong offset!");

// Class DiscoveryBrowserUI.FortDiscoverItemListView
// 0x0150 (0x03E8 - 0x0298)
class UFortDiscoverItemListView final : public UListViewBase
{
public:
	uint8                                         Pad_298[0xE8];                                     // 0x0298(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalNavigationTimeThreshold;                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortActivityBrowserPlayWithFriendsTile> PlayWithFriendsEntryWidgetClass;                   // 0x0388(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortActivityBrowserTileBase> ActivityEntryWidgetClass;                          // 0x0390(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOrientation                                  orientation;                                       // 0x0398(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCircularNavigationEnabled;                        // 0x03A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A1[0x47];                                     // 0x03A1(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const int32 GetInViewCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDiscoverItemListView">();
	}
	static class UFortDiscoverItemListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDiscoverItemListView>();
	}
};
static_assert(alignof(UFortDiscoverItemListView) == 0x000008, "Wrong alignment on UFortDiscoverItemListView");
static_assert(sizeof(UFortDiscoverItemListView) == 0x0003E8, "Wrong size on UFortDiscoverItemListView");
static_assert(offsetof(UFortDiscoverItemListView, DirectionalNavigationTimeThreshold) == 0x000380, "Member 'UFortDiscoverItemListView::DirectionalNavigationTimeThreshold' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemListView, PlayWithFriendsEntryWidgetClass) == 0x000388, "Member 'UFortDiscoverItemListView::PlayWithFriendsEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemListView, ActivityEntryWidgetClass) == 0x000390, "Member 'UFortDiscoverItemListView::ActivityEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemListView, orientation) == 0x000398, "Member 'UFortDiscoverItemListView::orientation' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemListView, EntrySpacing) == 0x00039C, "Member 'UFortDiscoverItemListView::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UFortDiscoverItemListView, bCircularNavigationEnabled) == 0x0003A0, "Member 'UFortDiscoverItemListView::bCircularNavigationEnabled' has a wrong offset!");

// Class DiscoveryBrowserUI.ActivityLibraryComponent
// 0x0018 (0x00B8 - 0x00A0)
class UActivityLibraryComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivitySelector*                  ActivitySelector;                                  // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivityLibraryComponent">();
	}
	static class UActivityLibraryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityLibraryComponent>();
	}
};
static_assert(alignof(UActivityLibraryComponent) == 0x000008, "Wrong alignment on UActivityLibraryComponent");
static_assert(sizeof(UActivityLibraryComponent) == 0x0000B8, "Wrong size on UActivityLibraryComponent");
static_assert(offsetof(UActivityLibraryComponent, ActivitySelector) == 0x0000B0, "Member 'UActivityLibraryComponent::ActivitySelector' has a wrong offset!");

// Class DiscoveryBrowserUI.FortActivityBrowserContext
// 0x0018 (0x0048 - 0x0030)
class UFortActivityBrowserContext final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActivityBrowserContext">();
	}
	static class UFortActivityBrowserContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActivityBrowserContext>();
	}
};
static_assert(alignof(UFortActivityBrowserContext) == 0x000008, "Wrong alignment on UFortActivityBrowserContext");
static_assert(sizeof(UFortActivityBrowserContext) == 0x000048, "Wrong size on UFortActivityBrowserContext");

// Class DiscoveryBrowserUI.OverrideMatchmakingUIComponent
// 0x0040 (0x00E0 - 0x00A0)
class UOverrideMatchmakingUIComponent : public UActorComponent
{
public:
	struct FMatchmakingUIOverride                 MatchmakingUIOverride;                             // 0x00A0(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OverrideMatchmakingUIComponent">();
	}
	static class UOverrideMatchmakingUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverrideMatchmakingUIComponent>();
	}
};
static_assert(alignof(UOverrideMatchmakingUIComponent) == 0x000008, "Wrong alignment on UOverrideMatchmakingUIComponent");
static_assert(sizeof(UOverrideMatchmakingUIComponent) == 0x0000E0, "Wrong size on UOverrideMatchmakingUIComponent");
static_assert(offsetof(UOverrideMatchmakingUIComponent, MatchmakingUIOverride) == 0x0000A0, "Member 'UOverrideMatchmakingUIComponent::MatchmakingUIOverride' has a wrong offset!");

}

