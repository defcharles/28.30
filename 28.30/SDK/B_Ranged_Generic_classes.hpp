#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Ranged_Generic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "En_ShellTypes_01_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Ranged_Generic.B_Ranged_Generic_C
// 0x03C0 (0x2040 - 0x1C80)
class AB_Ranged_Generic_C final : public AFortWeaponRanged
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1C80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         AnimateScopePostProcess_DownSightPostProcessAmount_393D8BA5486879173797EF8C9B8D4642; // 0x1C88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimateScopePostProcess__Direction_393D8BA5486879173797EF8C9B8D4642; // 0x1C8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C8D[0x3];                                     // 0x1C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimateScopePostProcess;                           // 0x1C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         OpticGlint;                                        // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDestroyEffect;                                  // 0x1CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CA1[0x7];                                     // 0x1CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WeaponDurabilityDestroyEffect;                     // 0x1CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WeaponDurabilityDestroyEffectIcon;                 // 0x1CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Reload_Particles;                              // 0x1CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShellsOnFire_;                                  // 0x1CB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShellsOnReload_;                                // 0x1CBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseShellsOnPump_;                                  // 0x1CBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CBC[0x4];                                     // 0x1CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Shell_Burst_FX;                                    // 0x1CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Shell_Looping_FX;                                  // 0x1CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Reload_System;                                     // 0x1CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Reload_Smoke_Material;                             // 0x1CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   ReloadSocketName;                                  // 0x1CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagToApplyOpticGlint;                              // 0x1CE4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortAIPawn*>                    Array_Of_Active_Enemy_AI;                          // 0x1CE8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Scope___Render_Enemies_To_Custom_Depth_Buffer;     // 0x1CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1CF9[0x3];                                     // 0x1CF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Shells_Socket_Name;                                // 0x1CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	En_ShellTypes_01                              ShellTypeSelect;                                   // 0x1D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D01[0x7];                                     // 0x1D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Shells_Spawn_Rate_Scale;                           // 0x1D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShellsRotationRate;                                // 0x1D10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shells_Velocity;                                   // 0x1D28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shells_Gravity;                                    // 0x1D40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shells_Size;                                       // 0x1D58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Scope_Vignette_Blur_Screen_Percentage;      // 0x1D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeCameraOffsetX;                                // 0x1D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeCameraOffsetY;                                // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scope_Camera_Offset_Amount;                        // 0x1D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Inherit_Parent_Velocity;                           // 0x1D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cylindrical_Radius;                                // 0x1D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cylindrical_Height;                                // 0x1DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shell_Color;                                       // 0x1DA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Spawned_Shells;                                    // 0x1DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          DebugShellsSocket_;                                // 0x1DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1DC1[0x7];                                     // 0x1DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_ScopeZoomIn;                                 // 0x1DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_ScopeZoomOut;                                // 0x1DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Alteration_Ambient_PS;                             // 0x1DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ReticleHUDElementTags;                             // 0x1DE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Is_Wind_Enabled;                                   // 0x1E00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E01[0x7];                                     // 0x1E01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        MuzzleWindParticleSystem;                          // 0x1E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHideReticleAfterDelay;                       // 0x1E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E11[0x7];                                     // 0x1E11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               MuzzleWindParticleSpawned;                         // 0x1E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         StencilBufferValue;                                // 0x1E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E24[0x4];                                     // 0x1E24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve_PitchOffset;                                 // 0x1E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_ScopedInLoop;                                // 0x1E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ScopeZoomInComp;                                   // 0x1E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ScopedInLoopComp;                                  // 0x1E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ScopeZoomOutComp;                                  // 0x1E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Alteration_Ambient_PS_Max_Draw_Distance;           // 0x1E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Muzzle_PS_Max_Draw_Distance;                       // 0x1E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Beam_PS_Max_Draw_Distance;                         // 0x1E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reload_PS_Max_Draw_Distance;                       // 0x1E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shells_PS_Max_Draw_Distance;                       // 0x1E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool AimDownsights)> onAimDownSightsChanged;                            // 0x1E78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UNiagaraComponent*                      MuzzleNiagaraComponentInstance;                    // 0x1E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScopeEffectDelay1Handle;                           // 0x1E90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScopeEffectDelay2Handle;                           // 0x1E98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         UseUpdatedFeedback;                                // 0x1EA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnStartFiring;                                     // 0x1EC8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPersistentFireStopped;                           // 0x1ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UStaticMesh*                            ScopeMesh;                                         // 0x1EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScopeMesh1P_Spawned;                               // 0x1EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             ScopeMaterialOverrides;                            // 0x1EF8(0x0010)(Edit, BlueprintVisible)
	float                                         Reload_Smoke_Lifetime;                             // 0x1F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Reload_Smoke_Width_Scale;                          // 0x1F0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorAlpha;                                    // 0x1F10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Emissive_in_Reload;                            // 0x1F20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F21[0x3];                                     // 0x1F21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Reload_Emissive_Color;                             // 0x1F24(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Rocket_Launcher;                                // 0x1F34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F35[0x3];                                     // 0x1F35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Rocket_Launcher_Spark_Color;                       // 0x1F38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reload_Ejects_Shells;                              // 0x1F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F49[0x7];                                     // 0x1F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      OpticGlintComp;                                    // 0x1F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UFXSystemAsset*                         Muzzle_System;                                     // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Muzzle_Hue_Control;                                // 0x1F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Muzzle_Core_Cap_Scale;                             // 0x1F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Muzzle_Core_Scale;                                 // 0x1F68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spark_Amount_Scale;                                // 0x1F80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoke_Size_Scale;                                  // 0x1F84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MuzzleSmokeInitialColor;                           // 0x1F88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoke_Initial_Color_Scale_Variance;                // 0x1F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoke_Emissive_Scale;                              // 0x1F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Heated_Elements;                               // 0x1FA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FA1[0x3];                                     // 0x1FA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Decal_Size;                                        // 0x1FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Decal_Offset;                                      // 0x1FA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Decal_Alpha;                                       // 0x1FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC4[0x4];                                     // 0x1FC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     Spawned_Muzzle_System;                             // 0x1FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Burst_Loops;                                       // 0x1FD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Muzzle_BakedSupressor__Always_Suppressed_;         // 0x1FD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Baked_Optics__Always_has_Optics_element_;          // 0x1FD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD6[0x2];                                     // 0x1FD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinPlayFXTime;                                     // 0x1FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastPlayFXTime;                                    // 0x1FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FScalableFloat                         UseNativeFX;                                       // 0x1FE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsLocal;                                          // 0x2010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2011[0x7];                                     // 0x2011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Magazine_Eject_System;                             // 0x2018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Magazine_Eject_Socket_Name;                        // 0x2020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Magazine_Eject;                                // 0x2024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2025[0x3];                                     // 0x2025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Magazine_Eject_Material;                           // 0x2028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Magazine_Eject_Model;                              // 0x2030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeEffectDelay1Time;                             // 0x2038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeEffectDelay2Time;                             // 0x203C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbortScopeFX();
	void Activate_Magazine_Eject_FX();
	void ActivateOrDeactivateWindParticle(bool bNewActive);
	void ActivateReloadSmokeFX();
	void ActivateShellsFX(bool Bool);
	void AnimateScopePostProcess__FinishedFunc();
	void AnimateScopePostProcess__Toggle_Scope__EventFunc();
	void AnimateScopePostProcess__UpdateFunc();
	void Bind_on_Effects_Quality();
	void BindFireRateChange();
	void CancelScopeTargeting();
	void DeactivateMuzzleFX();
	void DeactivateShellsFX();
	void ExecuteUbergraph_B_Ranged_Generic(int32 EntryPoint);
	void ForceScopeBackImmediatly();
	void ForceScopeFX();
	void getScopeComp(class UStaticMeshComponent** ScopeComponent);
	void GetScopeParameters(class UStaticMeshComponent** ScopeComponent, struct FVector2D* DepthOfFieldVignetteRange, struct FVector* WeaponSightsOffset);
	void HideFirstPersonStuff();
	void HideReticle();
	void HideThirdPersonStuff();
	void HideWeapon();
	void HideWeaponMesh();
	void InitializeScopeVariables();
	void initScope();
	void IsNewFeedbackEnabled(bool* Enabled);
	void K2_OnUnEquip();
	void LocalReloadStarted(float ReloadTime, EFortWeaponReloadType ReloadType);
	void ModAddedtoWeapon(class UFortWeaponModItemDefinition* Mod, class AFortWeapon* Weapon);
	void Muzzle_Flash_FX(bool Persistent_Fire);
	void Muzzle_Play_Reload_FX(EFortReloadFXState Selection);
	void MuzzleADSCheck(bool* Return_ADS_Bool);
	void MuzzleModCheck(bool* isMuzzleBrake, bool* isMuzzleSupressor, bool* isMuzzleBreacher);
	void OnApplyFireModeData(class UFortWeaponFireModeData* FireModeData);
	void OnEquippedWeaponDestory();
	void OnInitAlteration(class UFortAlterationItemDefinition* NewAlteration);
	void OnInitCosmeticAlterations(const struct FFortCosmeticModification& CosmeticMod);
	void OnLoaded_3A9BBE884A5C5966375089938B7DC0CA(class UObject* Loaded);
	void OnLoaded_5B08633343C4DA6FF40449A8A36357E4(class UObject* Loaded);
	void OnLoaded_83457BA843174AC6288682A342EBEAD9(class UObject* Loaded);
	void OnLoaded_F0DCFB40496C39D956D872BA984FA1F2(class UObject* Loaded);
	void OnPlayImpactFX(const struct FHitResult& HitResult, EPhysicalSurface ImpactPhysicalSurface, class UFXSystemComponent* SpawnedPSC);
	void OnPlayReloadFX(EFortReloadFXState ReloadStage);
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void OnSetTargeting(bool bNewIsTargeting);
	void OnStartOverheated();
	void OnStopWeaponFireFX();
	void OnWeaponAttached();
	void OnWeaponDetached();
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);
	void PitchUpOnRateOfFireChange(float NewRateOfFire);
	void PlayLocalForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName tag, bool bLooping);
	void PlayScopeOutAudio();
	void PlayScopePP();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveParticleData(const TArray<struct FBasicParticleData>& Data, class UNiagaraSystem* NiagaraSystem, const struct FVector& SimulationPositionOffset);
	void ResetDoonceScopeSound();
	void ReverseScopePP();
	void ScopeEffectDelay1();
	void ScopeEffectDelay2();
	void SetActiveAlterationIdleParticles(bool Active);
	void SetPostProcessParams(double InputPin);
	void SetupShellFX();
	void SetWeaponPierceThrough(bool Enable, int32 TargetLimit);
	void SetWeaponPierceThrough_ClientRep(bool Enable, int32 TargetLimit);
	void SetWpnRarity();
	void ShellEjectionFixOn();
	void ShellEjectionOff();
	void ShellsON__onPump_();
	void ShowOpticGlint(bool AimDownsights);
	void ShowReticle();
	void ShowWeapon();
	void ShowWeaponMesh();
	void StartScopedAudio();
	void StopLocalForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName tag);
	void StopScopedAudio();
	void Try_Show_Reticle();
	void UnhideFirstPersonStuffPart1();
	void UnhideFirstPersonStuffPart2(int32 Which_Call);
	void UnhideThirdPersonStuff();
	void Update_Enemy_Custom_Depths(bool Enable_Or_Disable, int32 StencilBufferValue_0);
	void UpdateModMagazine();
	void UpdateShellEmittersFX();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Ranged_Generic_C">();
	}
	static class AB_Ranged_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Ranged_Generic_C>();
	}
};
static_assert(alignof(AB_Ranged_Generic_C) == 0x000008, "Wrong alignment on AB_Ranged_Generic_C");
static_assert(sizeof(AB_Ranged_Generic_C) == 0x002040, "Wrong size on AB_Ranged_Generic_C");
static_assert(offsetof(AB_Ranged_Generic_C, UberGraphFrame) == 0x001C80, "Member 'AB_Ranged_Generic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, AnimateScopePostProcess_DownSightPostProcessAmount_393D8BA5486879173797EF8C9B8D4642) == 0x001C88, "Member 'AB_Ranged_Generic_C::AnimateScopePostProcess_DownSightPostProcessAmount_393D8BA5486879173797EF8C9B8D4642' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, AnimateScopePostProcess__Direction_393D8BA5486879173797EF8C9B8D4642) == 0x001C8C, "Member 'AB_Ranged_Generic_C::AnimateScopePostProcess__Direction_393D8BA5486879173797EF8C9B8D4642' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, AnimateScopePostProcess) == 0x001C90, "Member 'AB_Ranged_Generic_C::AnimateScopePostProcess' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, OpticGlint) == 0x001C98, "Member 'AB_Ranged_Generic_C::OpticGlint' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseDestroyEffect) == 0x001CA0, "Member 'AB_Ranged_Generic_C::UseDestroyEffect' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, WeaponDurabilityDestroyEffect) == 0x001CA8, "Member 'AB_Ranged_Generic_C::WeaponDurabilityDestroyEffect' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, WeaponDurabilityDestroyEffectIcon) == 0x001CB0, "Member 'AB_Ranged_Generic_C::WeaponDurabilityDestroyEffectIcon' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Use_Reload_Particles) == 0x001CB8, "Member 'AB_Ranged_Generic_C::Use_Reload_Particles' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseShellsOnFire_) == 0x001CB9, "Member 'AB_Ranged_Generic_C::UseShellsOnFire_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseShellsOnReload_) == 0x001CBA, "Member 'AB_Ranged_Generic_C::UseShellsOnReload_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseShellsOnPump_) == 0x001CBB, "Member 'AB_Ranged_Generic_C::UseShellsOnPump_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shell_Burst_FX) == 0x001CC0, "Member 'AB_Ranged_Generic_C::Shell_Burst_FX' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shell_Looping_FX) == 0x001CC8, "Member 'AB_Ranged_Generic_C::Shell_Looping_FX' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_System) == 0x001CD0, "Member 'AB_Ranged_Generic_C::Reload_System' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_Smoke_Material) == 0x001CD8, "Member 'AB_Ranged_Generic_C::Reload_Smoke_Material' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ReloadSocketName) == 0x001CE0, "Member 'AB_Ranged_Generic_C::ReloadSocketName' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, TagToApplyOpticGlint) == 0x001CE4, "Member 'AB_Ranged_Generic_C::TagToApplyOpticGlint' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Array_Of_Active_Enemy_AI) == 0x001CE8, "Member 'AB_Ranged_Generic_C::Array_Of_Active_Enemy_AI' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Scope___Render_Enemies_To_Custom_Depth_Buffer) == 0x001CF8, "Member 'AB_Ranged_Generic_C::Scope___Render_Enemies_To_Custom_Depth_Buffer' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_Socket_Name) == 0x001CFC, "Member 'AB_Ranged_Generic_C::Shells_Socket_Name' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ShellTypeSelect) == 0x001D00, "Member 'AB_Ranged_Generic_C::ShellTypeSelect' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_Spawn_Rate_Scale) == 0x001D08, "Member 'AB_Ranged_Generic_C::Shells_Spawn_Rate_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ShellsRotationRate) == 0x001D10, "Member 'AB_Ranged_Generic_C::ShellsRotationRate' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_Velocity) == 0x001D28, "Member 'AB_Ranged_Generic_C::Shells_Velocity' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_Gravity) == 0x001D40, "Member 'AB_Ranged_Generic_C::Shells_Gravity' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_Size) == 0x001D58, "Member 'AB_Ranged_Generic_C::Shells_Size' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Target_Scope_Vignette_Blur_Screen_Percentage) == 0x001D70, "Member 'AB_Ranged_Generic_C::Target_Scope_Vignette_Blur_Screen_Percentage' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeCameraOffsetX) == 0x001D78, "Member 'AB_Ranged_Generic_C::ScopeCameraOffsetX' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeCameraOffsetY) == 0x001D80, "Member 'AB_Ranged_Generic_C::ScopeCameraOffsetY' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Scope_Camera_Offset_Amount) == 0x001D88, "Member 'AB_Ranged_Generic_C::Scope_Camera_Offset_Amount' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Inherit_Parent_Velocity) == 0x001D90, "Member 'AB_Ranged_Generic_C::Inherit_Parent_Velocity' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Cylindrical_Radius) == 0x001D98, "Member 'AB_Ranged_Generic_C::Cylindrical_Radius' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Cylindrical_Height) == 0x001DA0, "Member 'AB_Ranged_Generic_C::Cylindrical_Height' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shell_Color) == 0x001DA8, "Member 'AB_Ranged_Generic_C::Shell_Color' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Spawned_Shells) == 0x001DB8, "Member 'AB_Ranged_Generic_C::Spawned_Shells' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, DebugShellsSocket_) == 0x001DC0, "Member 'AB_Ranged_Generic_C::DebugShellsSocket_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Sound_ScopeZoomIn) == 0x001DC8, "Member 'AB_Ranged_Generic_C::Sound_ScopeZoomIn' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Sound_ScopeZoomOut) == 0x001DD0, "Member 'AB_Ranged_Generic_C::Sound_ScopeZoomOut' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Alteration_Ambient_PS) == 0x001DD8, "Member 'AB_Ranged_Generic_C::Alteration_Ambient_PS' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ReticleHUDElementTags) == 0x001DE0, "Member 'AB_Ranged_Generic_C::ReticleHUDElementTags' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Is_Wind_Enabled) == 0x001E00, "Member 'AB_Ranged_Generic_C::Is_Wind_Enabled' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, MuzzleWindParticleSystem) == 0x001E08, "Member 'AB_Ranged_Generic_C::MuzzleWindParticleSystem' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ShouldHideReticleAfterDelay) == 0x001E10, "Member 'AB_Ranged_Generic_C::ShouldHideReticleAfterDelay' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, MuzzleWindParticleSpawned) == 0x001E18, "Member 'AB_Ranged_Generic_C::MuzzleWindParticleSpawned' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, StencilBufferValue) == 0x001E20, "Member 'AB_Ranged_Generic_C::StencilBufferValue' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Curve_PitchOffset) == 0x001E28, "Member 'AB_Ranged_Generic_C::Curve_PitchOffset' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Sound_ScopedInLoop) == 0x001E30, "Member 'AB_Ranged_Generic_C::Sound_ScopedInLoop' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeZoomInComp) == 0x001E38, "Member 'AB_Ranged_Generic_C::ScopeZoomInComp' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopedInLoopComp) == 0x001E40, "Member 'AB_Ranged_Generic_C::ScopedInLoopComp' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeZoomOutComp) == 0x001E48, "Member 'AB_Ranged_Generic_C::ScopeZoomOutComp' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Alteration_Ambient_PS_Max_Draw_Distance) == 0x001E50, "Member 'AB_Ranged_Generic_C::Alteration_Ambient_PS_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_PS_Max_Draw_Distance) == 0x001E58, "Member 'AB_Ranged_Generic_C::Muzzle_PS_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Beam_PS_Max_Draw_Distance) == 0x001E60, "Member 'AB_Ranged_Generic_C::Beam_PS_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_PS_Max_Draw_Distance) == 0x001E68, "Member 'AB_Ranged_Generic_C::Reload_PS_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Shells_PS_Max_Draw_Distance) == 0x001E70, "Member 'AB_Ranged_Generic_C::Shells_PS_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, onAimDownSightsChanged) == 0x001E78, "Member 'AB_Ranged_Generic_C::onAimDownSightsChanged' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, MuzzleNiagaraComponentInstance) == 0x001E88, "Member 'AB_Ranged_Generic_C::MuzzleNiagaraComponentInstance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeEffectDelay1Handle) == 0x001E90, "Member 'AB_Ranged_Generic_C::ScopeEffectDelay1Handle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeEffectDelay2Handle) == 0x001E98, "Member 'AB_Ranged_Generic_C::ScopeEffectDelay2Handle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseUpdatedFeedback) == 0x001EA0, "Member 'AB_Ranged_Generic_C::UseUpdatedFeedback' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, OnStartFiring) == 0x001EC8, "Member 'AB_Ranged_Generic_C::OnStartFiring' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, OnPersistentFireStopped) == 0x001ED8, "Member 'AB_Ranged_Generic_C::OnPersistentFireStopped' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeMesh) == 0x001EE8, "Member 'AB_Ranged_Generic_C::ScopeMesh' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeMesh1P_Spawned) == 0x001EF0, "Member 'AB_Ranged_Generic_C::ScopeMesh1P_Spawned' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeMaterialOverrides) == 0x001EF8, "Member 'AB_Ranged_Generic_C::ScopeMaterialOverrides' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_Smoke_Lifetime) == 0x001F08, "Member 'AB_Ranged_Generic_C::Reload_Smoke_Lifetime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_Smoke_Width_Scale) == 0x001F0C, "Member 'AB_Ranged_Generic_C::Reload_Smoke_Width_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, BaseColorAlpha) == 0x001F10, "Member 'AB_Ranged_Generic_C::BaseColorAlpha' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Use_Emissive_in_Reload) == 0x001F20, "Member 'AB_Ranged_Generic_C::Use_Emissive_in_Reload' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_Emissive_Color) == 0x001F24, "Member 'AB_Ranged_Generic_C::Reload_Emissive_Color' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Is_Rocket_Launcher) == 0x001F34, "Member 'AB_Ranged_Generic_C::Is_Rocket_Launcher' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Rocket_Launcher_Spark_Color) == 0x001F38, "Member 'AB_Ranged_Generic_C::Rocket_Launcher_Spark_Color' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Reload_Ejects_Shells) == 0x001F48, "Member 'AB_Ranged_Generic_C::Reload_Ejects_Shells' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, OpticGlintComp) == 0x001F50, "Member 'AB_Ranged_Generic_C::OpticGlintComp' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_System) == 0x001F58, "Member 'AB_Ranged_Generic_C::Muzzle_System' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_Hue_Control) == 0x001F60, "Member 'AB_Ranged_Generic_C::Muzzle_Hue_Control' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_Core_Cap_Scale) == 0x001F64, "Member 'AB_Ranged_Generic_C::Muzzle_Core_Cap_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_Core_Scale) == 0x001F68, "Member 'AB_Ranged_Generic_C::Muzzle_Core_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Spark_Amount_Scale) == 0x001F80, "Member 'AB_Ranged_Generic_C::Spark_Amount_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Smoke_Size_Scale) == 0x001F84, "Member 'AB_Ranged_Generic_C::Smoke_Size_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, MuzzleSmokeInitialColor) == 0x001F88, "Member 'AB_Ranged_Generic_C::MuzzleSmokeInitialColor' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Smoke_Initial_Color_Scale_Variance) == 0x001F98, "Member 'AB_Ranged_Generic_C::Smoke_Initial_Color_Scale_Variance' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Smoke_Emissive_Scale) == 0x001F9C, "Member 'AB_Ranged_Generic_C::Smoke_Emissive_Scale' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Use_Heated_Elements) == 0x001FA0, "Member 'AB_Ranged_Generic_C::Use_Heated_Elements' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Decal_Size) == 0x001FA4, "Member 'AB_Ranged_Generic_C::Decal_Size' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Decal_Offset) == 0x001FA8, "Member 'AB_Ranged_Generic_C::Decal_Offset' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Decal_Alpha) == 0x001FC0, "Member 'AB_Ranged_Generic_C::Decal_Alpha' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Spawned_Muzzle_System) == 0x001FC8, "Member 'AB_Ranged_Generic_C::Spawned_Muzzle_System' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Burst_Loops) == 0x001FD0, "Member 'AB_Ranged_Generic_C::Burst_Loops' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Muzzle_BakedSupressor__Always_Suppressed_) == 0x001FD4, "Member 'AB_Ranged_Generic_C::Muzzle_BakedSupressor__Always_Suppressed_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Baked_Optics__Always_has_Optics_element_) == 0x001FD5, "Member 'AB_Ranged_Generic_C::Baked_Optics__Always_has_Optics_element_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, MinPlayFXTime) == 0x001FD8, "Member 'AB_Ranged_Generic_C::MinPlayFXTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, LastPlayFXTime) == 0x001FE0, "Member 'AB_Ranged_Generic_C::LastPlayFXTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, UseNativeFX) == 0x001FE8, "Member 'AB_Ranged_Generic_C::UseNativeFX' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, bIsLocal) == 0x002010, "Member 'AB_Ranged_Generic_C::bIsLocal' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Magazine_Eject_System) == 0x002018, "Member 'AB_Ranged_Generic_C::Magazine_Eject_System' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Magazine_Eject_Socket_Name) == 0x002020, "Member 'AB_Ranged_Generic_C::Magazine_Eject_Socket_Name' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Use_Magazine_Eject) == 0x002024, "Member 'AB_Ranged_Generic_C::Use_Magazine_Eject' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Magazine_Eject_Material) == 0x002028, "Member 'AB_Ranged_Generic_C::Magazine_Eject_Material' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, Magazine_Eject_Model) == 0x002030, "Member 'AB_Ranged_Generic_C::Magazine_Eject_Model' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeEffectDelay1Time) == 0x002038, "Member 'AB_Ranged_Generic_C::ScopeEffectDelay1Time' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Generic_C, ScopeEffectDelay2Time) == 0x00203C, "Member 'AB_Ranged_Generic_C::ScopeEffectDelay2Time' has a wrong offset!");

}

