#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamLoadReporter

#include "Basic.hpp"


namespace SDK::Params
{

// Function FMJamLoadReporter.JamLoadReporter.Get
// 0x0010 (0x0010 - 0x0000)
struct JamLoadReporter_Get final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJamLoadReporter*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamLoadReporter_Get) == 0x000008, "Wrong alignment on JamLoadReporter_Get");
static_assert(sizeof(JamLoadReporter_Get) == 0x000010, "Wrong size on JamLoadReporter_Get");
static_assert(offsetof(JamLoadReporter_Get, WorldContext) == 0x000000, "Member 'JamLoadReporter_Get::WorldContext' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_Get, ReturnValue) == 0x000008, "Member 'JamLoadReporter_Get::ReturnValue' has a wrong offset!");

// Function FMJamLoadReporter.JamLoadReporter.TryGet
// 0x0010 (0x0010 - 0x0000)
struct JamLoadReporter_TryGet final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJamLoadReporter*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamLoadReporter_TryGet) == 0x000008, "Wrong alignment on JamLoadReporter_TryGet");
static_assert(sizeof(JamLoadReporter_TryGet) == 0x000010, "Wrong size on JamLoadReporter_TryGet");
static_assert(offsetof(JamLoadReporter_TryGet, WorldContext) == 0x000000, "Member 'JamLoadReporter_TryGet::WorldContext' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_TryGet, ReturnValue) == 0x000008, "Member 'JamLoadReporter_TryGet::ReturnValue' has a wrong offset!");

// Function FMJamLoadReporter.JamLoadReporter.OnResolveAndLoadComplete
// 0x0020 (0x0020 - 0x0000)
struct JamLoadReporter_OnResolveAndLoadComplete final
{
public:
	class UJamContentResolver*                    Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkCode;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAlreadyLoaded;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamLoadReporter_OnResolveAndLoadComplete) == 0x000008, "Wrong alignment on JamLoadReporter_OnResolveAndLoadComplete");
static_assert(sizeof(JamLoadReporter_OnResolveAndLoadComplete) == 0x000020, "Wrong size on JamLoadReporter_OnResolveAndLoadComplete");
static_assert(offsetof(JamLoadReporter_OnResolveAndLoadComplete, Sender) == 0x000000, "Member 'JamLoadReporter_OnResolveAndLoadComplete::Sender' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_OnResolveAndLoadComplete, LinkCode) == 0x000008, "Member 'JamLoadReporter_OnResolveAndLoadComplete::LinkCode' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_OnResolveAndLoadComplete, bSuccess) == 0x000018, "Member 'JamLoadReporter_OnResolveAndLoadComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_OnResolveAndLoadComplete, bWasAlreadyLoaded) == 0x000019, "Member 'JamLoadReporter_OnResolveAndLoadComplete::bWasAlreadyLoaded' has a wrong offset!");

// Function FMJamLoadReporter.JamLoadReporter.OnResolveComplete
// 0x0020 (0x0020 - 0x0000)
struct JamLoadReporter_OnResolveComplete final
{
public:
	class UJamContentResolver*                    Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkCode;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamLoadReporter_OnResolveComplete) == 0x000008, "Wrong alignment on JamLoadReporter_OnResolveComplete");
static_assert(sizeof(JamLoadReporter_OnResolveComplete) == 0x000020, "Wrong size on JamLoadReporter_OnResolveComplete");
static_assert(offsetof(JamLoadReporter_OnResolveComplete, Sender) == 0x000000, "Member 'JamLoadReporter_OnResolveComplete::Sender' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_OnResolveComplete, LinkCode) == 0x000008, "Member 'JamLoadReporter_OnResolveComplete::LinkCode' has a wrong offset!");
static_assert(offsetof(JamLoadReporter_OnResolveComplete, bSuccess) == 0x000018, "Member 'JamLoadReporter_OnResolveComplete::bSuccess' has a wrong offset!");

// Function FMJamLoadReporter.JamLoadReporter.GenerateFullReport
// 0x0010 (0x0010 - 0x0000)
struct JamLoadReporter_GenerateFullReport final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamLoadReporter_GenerateFullReport) == 0x000008, "Wrong alignment on JamLoadReporter_GenerateFullReport");
static_assert(sizeof(JamLoadReporter_GenerateFullReport) == 0x000010, "Wrong size on JamLoadReporter_GenerateFullReport");
static_assert(offsetof(JamLoadReporter_GenerateFullReport, ReturnValue) == 0x000000, "Member 'JamLoadReporter_GenerateFullReport::ReturnValue' has a wrong offset!");

}

