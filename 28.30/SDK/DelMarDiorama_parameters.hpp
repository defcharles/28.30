#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarDiorama

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DelMarCore_structs.hpp"


namespace SDK::Params
{

// Function DelMarDiorama.DelMarCockpitActor.BP_OnBoundVehicleChanged
// 0x0008 (0x0008 - 0x0000)
struct DelMarCockpitActor_BP_OnBoundVehicleChanged final
{
public:
	const class ADelMarVehicle*                   NewVehicle;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCockpitActor_BP_OnBoundVehicleChanged) == 0x000008, "Wrong alignment on DelMarCockpitActor_BP_OnBoundVehicleChanged");
static_assert(sizeof(DelMarCockpitActor_BP_OnBoundVehicleChanged) == 0x000008, "Wrong size on DelMarCockpitActor_BP_OnBoundVehicleChanged");
static_assert(offsetof(DelMarCockpitActor_BP_OnBoundVehicleChanged, NewVehicle) == 0x000000, "Member 'DelMarCockpitActor_BP_OnBoundVehicleChanged::NewVehicle' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaOpenChannel
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaOpenChannel final
{
public:
	bool                                          bOpened;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaOpenChannel) == 0x000001, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaOpenChannel");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaOpenChannel) == 0x000001, "Wrong size on DelMarDriverCheatManager_DelMarDioramaOpenChannel");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaOpenChannel, bOpened) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaOpenChannel::bOpened' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetDriverReaction
// 0x0010 (0x0010 - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaSetDriverReaction final
{
public:
	class FString                                 ReactionTag;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaSetDriverReaction) == 0x000008, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaSetDriverReaction");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaSetDriverReaction) == 0x000010, "Wrong size on DelMarDriverCheatManager_DelMarDioramaSetDriverReaction");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetDriverReaction, ReactionTag) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaSetDriverReaction::ReactionTag' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaSetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaSetEnabled) == 0x000001, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaSetEnabled");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaSetEnabled) == 0x000001, "Wrong size on DelMarDriverCheatManager_DelMarDioramaSetEnabled");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetEnabled, bEnabled) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaSetEnabled::bEnabled' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetLightingChannel
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaSetLightingChannel final
{
public:
	bool                                          bMainChannel;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaSetLightingChannel) == 0x000001, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaSetLightingChannel");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaSetLightingChannel) == 0x000001, "Wrong size on DelMarDriverCheatManager_DelMarDioramaSetLightingChannel");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetLightingChannel, bMainChannel) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaSetLightingChannel::bMainChannel' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetLocation
// 0x000C (0x000C - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaSetLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaSetLocation) == 0x000004, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaSetLocation");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaSetLocation) == 0x00000C, "Wrong size on DelMarDriverCheatManager_DelMarDioramaSetLocation");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetLocation, X) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaSetLocation::X' has a wrong offset!");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetLocation, Y) == 0x000004, "Member 'DelMarDriverCheatManager_DelMarDioramaSetLocation::Y' has a wrong offset!");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetLocation, Z) == 0x000008, "Member 'DelMarDriverCheatManager_DelMarDioramaSetLocation::Z' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetVisibleInSceneCaptureOnly
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly final
{
public:
	bool                                          bOnly;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly) == 0x000001, "Wrong alignment on DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly");
static_assert(sizeof(DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly) == 0x000001, "Wrong size on DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly");
static_assert(offsetof(DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly, bOnly) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly::bOnly' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarIntercomBroadcastEmote
// 0x0010 (0x0010 - 0x0000)
struct DelMarDriverCheatManager_DelMarIntercomBroadcastEmote final
{
public:
	class FString                                 EmoteTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarIntercomBroadcastEmote) == 0x000008, "Wrong alignment on DelMarDriverCheatManager_DelMarIntercomBroadcastEmote");
static_assert(sizeof(DelMarDriverCheatManager_DelMarIntercomBroadcastEmote) == 0x000010, "Wrong size on DelMarDriverCheatManager_DelMarIntercomBroadcastEmote");
static_assert(offsetof(DelMarDriverCheatManager_DelMarIntercomBroadcastEmote, EmoteTag) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarIntercomBroadcastEmote::EmoteTag' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverCheatManager.DelMarIntercomPlayInteraction
// 0x0010 (0x0010 - 0x0000)
struct DelMarDriverCheatManager_DelMarIntercomPlayInteraction final
{
public:
	class FString                                 InteractionTag;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCheatManager_DelMarIntercomPlayInteraction) == 0x000008, "Wrong alignment on DelMarDriverCheatManager_DelMarIntercomPlayInteraction");
static_assert(sizeof(DelMarDriverCheatManager_DelMarIntercomPlayInteraction) == 0x000010, "Wrong size on DelMarDriverCheatManager_DelMarIntercomPlayInteraction");
static_assert(offsetof(DelMarDriverCheatManager_DelMarIntercomPlayInteraction, InteractionTag) == 0x000000, "Member 'DelMarDriverCheatManager_DelMarIntercomPlayInteraction::InteractionTag' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverAnimInstance.IsDrivingSpeed
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverAnimInstance_IsDrivingSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverAnimInstance_IsDrivingSpeed) == 0x000001, "Wrong alignment on DelMarDriverAnimInstance_IsDrivingSpeed");
static_assert(sizeof(DelMarDriverAnimInstance_IsDrivingSpeed) == 0x000001, "Wrong size on DelMarDriverAnimInstance_IsDrivingSpeed");
static_assert(offsetof(DelMarDriverAnimInstance_IsDrivingSpeed, ReturnValue) == 0x000000, "Member 'DelMarDriverAnimInstance_IsDrivingSpeed::ReturnValue' has a wrong offset!");

// Function DelMarDiorama.DelMarDioramaControllerComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarDioramaControllerComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Old;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDioramaControllerComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarDioramaControllerComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarDioramaControllerComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarDioramaControllerComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarDioramaControllerComponent_HandleViewTargetChanged, PC) == 0x000000, "Member 'DelMarDioramaControllerComponent_HandleViewTargetChanged::PC' has a wrong offset!");
static_assert(offsetof(DelMarDioramaControllerComponent_HandleViewTargetChanged, Old) == 0x000008, "Member 'DelMarDioramaControllerComponent_HandleViewTargetChanged::Old' has a wrong offset!");
static_assert(offsetof(DelMarDioramaControllerComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarDioramaControllerComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleDraftStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarDriverChannel_HandleDraftStateChanged final
{
public:
	EDelmarDraftingState                          DraftState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleDraftStateChanged) == 0x000001, "Wrong alignment on DelMarDriverChannel_HandleDraftStateChanged");
static_assert(sizeof(DelMarDriverChannel_HandleDraftStateChanged) == 0x000001, "Wrong size on DelMarDriverChannel_HandleDraftStateChanged");
static_assert(offsetof(DelMarDriverChannel_HandleDraftStateChanged, DraftState) == 0x000000, "Member 'DelMarDriverChannel_HandleDraftStateChanged::DraftState' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleDriftBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarDriverChannel_HandleDriftBoostActivated final
{
public:
	float                                         PercentageMaxBoostGained;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleDriftBoostActivated) == 0x000004, "Wrong alignment on DelMarDriverChannel_HandleDriftBoostActivated");
static_assert(sizeof(DelMarDriverChannel_HandleDriftBoostActivated) == 0x000004, "Wrong size on DelMarDriverChannel_HandleDriftBoostActivated");
static_assert(offsetof(DelMarDriverChannel_HandleDriftBoostActivated, PercentageMaxBoostGained) == 0x000000, "Member 'DelMarDriverChannel_HandleDriftBoostActivated::PercentageMaxBoostGained' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarDriverChannel_HandleSpeedChanged final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleSpeedChanged) == 0x000004, "Wrong alignment on DelMarDriverChannel_HandleSpeedChanged");
static_assert(sizeof(DelMarDriverChannel_HandleSpeedChanged) == 0x000004, "Wrong size on DelMarDriverChannel_HandleSpeedChanged");
static_assert(offsetof(DelMarDriverChannel_HandleSpeedChanged, NewSpeed) == 0x000000, "Member 'DelMarDriverChannel_HandleSpeedChanged::NewSpeed' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarDriverChannel_HandleStartlineBoostActivated final
{
public:
	float                                         PercentageSpeedEarned;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarDriverChannel_HandleStartlineBoostActivated");
static_assert(sizeof(DelMarDriverChannel_HandleStartlineBoostActivated) == 0x000004, "Wrong size on DelMarDriverChannel_HandleStartlineBoostActivated");
static_assert(offsetof(DelMarDriverChannel_HandleStartlineBoostActivated, PercentageSpeedEarned) == 0x000000, "Member 'DelMarDriverChannel_HandleStartlineBoostActivated::PercentageSpeedEarned' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarDriverChannel_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarDriverChannel_HandleVehicleDemolished");
static_assert(sizeof(DelMarDriverChannel_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarDriverChannel_HandleVehicleDemolished");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarDriverChannel_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleHitWall
// 0x0028 (0x0028 - 0x0000)
struct DelMarDriverChannel_HandleVehicleHitWall final
{
public:
	float                                         ImpactMagnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardRotationDegrees;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarDriverChannel_HandleVehicleHitWall) == 0x000008, "Wrong alignment on DelMarDriverChannel_HandleVehicleHitWall");
static_assert(sizeof(DelMarDriverChannel_HandleVehicleHitWall) == 0x000028, "Wrong size on DelMarDriverChannel_HandleVehicleHitWall");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleHitWall, ImpactMagnitude) == 0x000000, "Member 'DelMarDriverChannel_HandleVehicleHitWall::ImpactMagnitude' has a wrong offset!");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleHitWall, WorldLocation) == 0x000008, "Member 'DelMarDriverChannel_HandleVehicleHitWall::WorldLocation' has a wrong offset!");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleHitWall, ForwardRotationDegrees) == 0x000020, "Member 'DelMarDriverChannel_HandleVehicleHitWall::ForwardRotationDegrees' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarDriverChannel_HandleVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarDriverChannel_HandleVehicleLanded) == 0x000004, "Wrong alignment on DelMarDriverChannel_HandleVehicleLanded");
static_assert(sizeof(DelMarDriverChannel_HandleVehicleLanded) == 0x000008, "Wrong size on DelMarDriverChannel_HandleVehicleLanded");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarDriverChannel_HandleVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarDriverChannel_HandleVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleSpawned
// 0x0002 (0x0002 - 0x0000)
struct DelMarDriverChannel_HandleVehicleSpawned final
{
public:
	bool                                          bFirstCar;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrevCarDemolished;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverChannel_HandleVehicleSpawned) == 0x000001, "Wrong alignment on DelMarDriverChannel_HandleVehicleSpawned");
static_assert(sizeof(DelMarDriverChannel_HandleVehicleSpawned) == 0x000002, "Wrong size on DelMarDriverChannel_HandleVehicleSpawned");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleSpawned, bFirstCar) == 0x000000, "Member 'DelMarDriverChannel_HandleVehicleSpawned::bFirstCar' has a wrong offset!");
static_assert(offsetof(DelMarDriverChannel_HandleVehicleSpawned, bPrevCarDemolished) == 0x000001, "Member 'DelMarDriverChannel_HandleVehicleSpawned::bPrevCarDemolished' has a wrong offset!");

// Function DelMarDiorama.DelMarIntercomComponent.ClientReceiveEmote
// 0x0010 (0x0010 - 0x0000)
struct DelMarIntercomComponent_ClientReceiveEmote final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarIntercomComponent_ClientReceiveEmote) == 0x000008, "Wrong alignment on DelMarIntercomComponent_ClientReceiveEmote");
static_assert(sizeof(DelMarIntercomComponent_ClientReceiveEmote) == 0x000010, "Wrong size on DelMarIntercomComponent_ClientReceiveEmote");
static_assert(offsetof(DelMarIntercomComponent_ClientReceiveEmote, EmoteTag) == 0x000000, "Member 'DelMarIntercomComponent_ClientReceiveEmote::EmoteTag' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_ClientReceiveEmote, Instigator) == 0x000008, "Member 'DelMarIntercomComponent_ClientReceiveEmote::Instigator' has a wrong offset!");

// Function DelMarDiorama.DelMarIntercomComponent.ClientReceiveInteraction
// 0x0018 (0x0018 - 0x0000)
struct DelMarIntercomComponent_ClientReceiveInteraction final
{
public:
	struct FGameplayTag                           InteractionTag;                                    // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class APlayerState*                     Instigator;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APlayerState*                     Receiver;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarIntercomComponent_ClientReceiveInteraction) == 0x000008, "Wrong alignment on DelMarIntercomComponent_ClientReceiveInteraction");
static_assert(sizeof(DelMarIntercomComponent_ClientReceiveInteraction) == 0x000018, "Wrong size on DelMarIntercomComponent_ClientReceiveInteraction");
static_assert(offsetof(DelMarIntercomComponent_ClientReceiveInteraction, InteractionTag) == 0x000000, "Member 'DelMarIntercomComponent_ClientReceiveInteraction::InteractionTag' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_ClientReceiveInteraction, Instigator) == 0x000008, "Member 'DelMarIntercomComponent_ClientReceiveInteraction::Instigator' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_ClientReceiveInteraction, Receiver) == 0x000010, "Member 'DelMarIntercomComponent_ClientReceiveInteraction::Receiver' has a wrong offset!");

// Function DelMarDiorama.DelMarIntercomComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarIntercomComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarIntercomComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarIntercomComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarIntercomComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarIntercomComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarIntercomComponent_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarIntercomComponent_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarIntercomComponent_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarIntercomComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarDiorama.DelMarIntercomComponent.ServerReceiveEmote
// 0x0004 (0x0004 - 0x0000)
struct DelMarIntercomComponent_ServerReceiveEmote final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarIntercomComponent_ServerReceiveEmote) == 0x000004, "Wrong alignment on DelMarIntercomComponent_ServerReceiveEmote");
static_assert(sizeof(DelMarIntercomComponent_ServerReceiveEmote) == 0x000004, "Wrong size on DelMarIntercomComponent_ServerReceiveEmote");
static_assert(offsetof(DelMarIntercomComponent_ServerReceiveEmote, EmoteTag) == 0x000000, "Member 'DelMarIntercomComponent_ServerReceiveEmote::EmoteTag' has a wrong offset!");

// Function DelMarDiorama.DelMarIntercomComponent.ServerReceiveInteraction
// 0x0010 (0x0010 - 0x0000)
struct DelMarIntercomComponent_ServerReceiveInteraction final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class APlayerState*                     Receiver;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarIntercomComponent_ServerReceiveInteraction) == 0x000008, "Wrong alignment on DelMarIntercomComponent_ServerReceiveInteraction");
static_assert(sizeof(DelMarIntercomComponent_ServerReceiveInteraction) == 0x000010, "Wrong size on DelMarIntercomComponent_ServerReceiveInteraction");
static_assert(offsetof(DelMarIntercomComponent_ServerReceiveInteraction, EmoteTag) == 0x000000, "Member 'DelMarIntercomComponent_ServerReceiveInteraction::EmoteTag' has a wrong offset!");
static_assert(offsetof(DelMarIntercomComponent_ServerReceiveInteraction, Receiver) == 0x000008, "Member 'DelMarIntercomComponent_ServerReceiveInteraction::Receiver' has a wrong offset!");

}

