#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WheelGrenadeRuntime

#include "Basic.hpp"

#include "AttachableWheelsRuntime_classes.hpp"


namespace SDK
{

// Class WheelGrenadeRuntime.WheelGrenadeWheel
// 0x0018 (0x0340 - 0x0328)
class AWheelGrenadeWheel final : public AAttachableWheel
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleDamaged(float Damage, const struct FGameplayTagContainer& InTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void HandleOutOfHealth(const float InDamage, const struct FGameplayTagContainer& InTags, const struct FGameplayEffectContextHandle& InEffectContext, class AController* InEventInstigator, class AActor* InDamageCauser);

	float GetHealth() const;
	float GetMaxHealth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheelGrenadeWheel">();
	}
	static class AWheelGrenadeWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWheelGrenadeWheel>();
	}
};
static_assert(alignof(AWheelGrenadeWheel) == 0x000008, "Wrong alignment on AWheelGrenadeWheel");
static_assert(sizeof(AWheelGrenadeWheel) == 0x000340, "Wrong size on AWheelGrenadeWheel");
static_assert(offsetof(AWheelGrenadeWheel, MaxHealth) == 0x000330, "Member 'AWheelGrenadeWheel::MaxHealth' has a wrong offset!");
static_assert(offsetof(AWheelGrenadeWheel, AbilitySystemComponent) == 0x000338, "Member 'AWheelGrenadeWheel::AbilitySystemComponent' has a wrong offset!");

}

