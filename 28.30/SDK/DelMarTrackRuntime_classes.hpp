#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarTrackRuntime

#include "Basic.hpp"

#include "DelMarTrackRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class DelMarTrackRuntime.DelMarTrackBase
// 0x0080 (0x0310 - 0x0290)
class ADelMarTrackBase : public AActor
{
public:
	uint8                                         Pad_290[0x20];                                     // 0x0290(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackPalette*                    TrackPalette;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackPaletteTheme*               TrackPalette_V2;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackPointData*                  TrackSplinePointData;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarTrackPropSection>        TrackPropData;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarSegmentActorCollection>  SegmentCollections;                                // 0x02E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, ContainsInstancedReference, Protected, TextExportTransient, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	bool                                          bForceValidOOBTube;                                // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceValidTrack;                                  // 0x02F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMaxTrackWidth;                              // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGlobalMaterialCollectionIndex;              // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        GlobalMaterialCollectionIndex;                     // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalSegmentActors;                                // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TrackLength;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertTrackTagsToV2();
	TArray<class ADelMarTrackSegmentBase*> GetAllTrackSegmentActors();
	void InitializeSpline();
	void OnMetadataChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplineClosedLoopChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointAdded(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointChanged(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void OnSplinePointRemoved(class UDelMarTrackSplineComponent* InSpline, int32 SplineIndex);
	void PostRebuildTrack_BP();
	void PostSplineSegmentGenerated(class UDelMarTrackSplineComponent* SplineComp, int32 PointIndex);
	void PreRebuildTrack_BP();
	void PreSplineSegmentGenerated(class UDelMarTrackSplineComponent* SplineComp, int32 PointIndex);
	void RebuildTrack();
	void SetTrackTypeTagAtIndex(int32 SplineIndex, const struct FGameplayTag& tag);

	bool ForceValidOOBTube() const;
	bool ForceValidTrack() const;
	struct FDelMarTrackPointDistanceRange GetDistanceRangeFromPointRange(const struct FDelMarTrackPointIndexRange& InRange) const;
	class UClass* GetEndCapClass(int32 SplineIndex) const;
	float GetForwardDistance(float Start, float End) const;
	float GetLoopDistance(float InTotalDistance) const;
	const struct FDelMarSplinePointMetaData GetMetaDataAtSplinePoint(int32 SplineIndex) const;
	int32 GetNextSplinePoint(int32 InSplinePoint) const;
	int32 GetNextSplineSegment(int32 InSplineSegmentIndex) const;
	int32 GetPreviousSplinePoint(int32 InSplinePoint) const;
	int32 GetPreviousSplineSegment(int32 InSplineSegmentIndex) const;
	class UClass* GetSegmentClassAtSplinePoint(int32 SplineIndex) const;
	const struct FGameplayTag GetSegmentTrackTypeTag(int32 SplineIndex) const;
	class UClass* GetStartCapClass(int32 SplineIndex) const;
	class UClass* GetTransitionSegmentClass(int32 FromSplineIndex, int32 ToSplineIndex) const;
	bool IsCosmetic() const;
	bool IsDistanceWithinRange(float InDistance, float StartDistance, float EndDistance) const;
	bool IsPointInOOBTube(const struct FVector& Point) const;
	bool IsPrimary() const;
	bool IsSecondary() const;
	bool IsTrackable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackBase">();
	}
	static class ADelMarTrackBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackBase>();
	}
};
static_assert(alignof(ADelMarTrackBase) == 0x000008, "Wrong alignment on ADelMarTrackBase");
static_assert(sizeof(ADelMarTrackBase) == 0x000310, "Wrong size on ADelMarTrackBase");
static_assert(offsetof(ADelMarTrackBase, Spline) == 0x0002B0, "Member 'ADelMarTrackBase::Spline' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TrackPalette) == 0x0002B8, "Member 'ADelMarTrackBase::TrackPalette' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TrackPalette_V2) == 0x0002C0, "Member 'ADelMarTrackBase::TrackPalette_V2' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TrackSplinePointData) == 0x0002C8, "Member 'ADelMarTrackBase::TrackSplinePointData' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TrackPropData) == 0x0002D0, "Member 'ADelMarTrackBase::TrackPropData' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, SegmentCollections) == 0x0002E0, "Member 'ADelMarTrackBase::SegmentCollections' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, bForceValidOOBTube) == 0x0002F0, "Member 'ADelMarTrackBase::bForceValidOOBTube' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, bForceValidTrack) == 0x0002F1, "Member 'ADelMarTrackBase::bForceValidTrack' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, DefaultMaxTrackWidth) == 0x0002F4, "Member 'ADelMarTrackBase::DefaultMaxTrackWidth' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, bEnableGlobalMaterialCollectionIndex) == 0x0002F8, "Member 'ADelMarTrackBase::bEnableGlobalMaterialCollectionIndex' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, GlobalMaterialCollectionIndex) == 0x0002FC, "Member 'ADelMarTrackBase::GlobalMaterialCollectionIndex' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TotalSegmentActors) == 0x000300, "Member 'ADelMarTrackBase::TotalSegmentActors' has a wrong offset!");
static_assert(offsetof(ADelMarTrackBase, TrackLength) == 0x000304, "Member 'ADelMarTrackBase::TrackLength' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrack
// 0x0058 (0x0368 - 0x0310)
class ADelMarTrack final : public ADelMarTrackBase
{
public:
	EDelMarTrackType                              TrackType;                                         // 0x0310(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUserSelectedStartTrack;                           // 0x0311(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarTrack*                           StartTrackConnection;                              // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUserSelectedEndTrack;                             // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarTrack*                           EndTrackConnection;                                // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParentStartDistance;                               // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParentEndDistance;                                 // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimaryStartDistance;                              // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimaryEndDistance;                                // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrimarySegmentLength;                              // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADelMarTrackOobTube>        OobTubeClass;                                      // 0x0348(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarTrackOobTube>     AttachedOobTube;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool MergeTrack(class ADelMarTrack* OtherTrack, bool MergeToEndPoint, bool CopyFromStartPoint);
	bool SplitTrackAtPoint(int32 SplitAtPoint);

	float GetParentEndDistance() const;
	float GetParentStartDistance() const;
	float GetPrimaryDistance(float DistanceOnThisTrack) const;
	float GetPrimaryEndDistance() const;
	float GetPrimaryStartDistance() const;
	class ADelMarTrack* GetSecondaryEndTrack() const;
	class ADelMarTrack* GetSecondaryStartTrack() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrack">();
	}
	static class ADelMarTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrack>();
	}
};
static_assert(alignof(ADelMarTrack) == 0x000008, "Wrong alignment on ADelMarTrack");
static_assert(sizeof(ADelMarTrack) == 0x000368, "Wrong size on ADelMarTrack");
static_assert(offsetof(ADelMarTrack, TrackType) == 0x000310, "Member 'ADelMarTrack::TrackType' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, bUserSelectedStartTrack) == 0x000311, "Member 'ADelMarTrack::bUserSelectedStartTrack' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, StartTrackConnection) == 0x000318, "Member 'ADelMarTrack::StartTrackConnection' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, bUserSelectedEndTrack) == 0x000320, "Member 'ADelMarTrack::bUserSelectedEndTrack' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, EndTrackConnection) == 0x000328, "Member 'ADelMarTrack::EndTrackConnection' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, ParentStartDistance) == 0x000330, "Member 'ADelMarTrack::ParentStartDistance' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, ParentEndDistance) == 0x000334, "Member 'ADelMarTrack::ParentEndDistance' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, PrimaryStartDistance) == 0x000338, "Member 'ADelMarTrack::PrimaryStartDistance' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, PrimaryEndDistance) == 0x00033C, "Member 'ADelMarTrack::PrimaryEndDistance' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, PrimarySegmentLength) == 0x000340, "Member 'ADelMarTrack::PrimarySegmentLength' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, OobTubeClass) == 0x000348, "Member 'ADelMarTrack::OobTubeClass' has a wrong offset!");
static_assert(offsetof(ADelMarTrack, AttachedOobTube) == 0x000350, "Member 'ADelMarTrack::AttachedOobTube' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDelMarTrackBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsTrackRadiusCheckDisabled();
	static bool TrackPositionDebugDrawEnabled();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackBlueprintFunctionLibrary">();
	}
	static class UDelMarTrackBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UDelMarTrackBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UDelMarTrackBlueprintFunctionLibrary");
static_assert(sizeof(UDelMarTrackBlueprintFunctionLibrary) == 0x000028, "Wrong size on UDelMarTrackBlueprintFunctionLibrary");

// Class DelMarTrackRuntime.DelMarTrackCustomizationInterface
// 0x0000 (0x0028 - 0x0028)
class IDelMarTrackCustomizationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackCustomizationInterface">();
	}
	static class IDelMarTrackCustomizationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackCustomizationInterface>();
	}
};
static_assert(alignof(IDelMarTrackCustomizationInterface) == 0x000008, "Wrong alignment on IDelMarTrackCustomizationInterface");
static_assert(sizeof(IDelMarTrackCustomizationInterface) == 0x000028, "Wrong size on IDelMarTrackCustomizationInterface");

// Class DelMarTrackRuntime.DelMarTrackSegmentBase
// 0x0030 (0x02C0 - 0x0290)
class ADelMarTrackSegmentBase : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreSplineLength;                               // 0x0298(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x029C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackMatLayerComponent*          MaterialLayerComponent;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BeginDistanceAlongSpline;                          // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndDistanceAlongSpline;                            // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrackSegmentIndex;                                 // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsDistanceAlongSpline(const float DistanceAlongSpline) const;
	struct FDelMarTrackPointDistanceRange GetSplineDistanceRange() const;
	class USplineMeshComponent* GetSplineMeshComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentBase">();
	}
	static class ADelMarTrackSegmentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackSegmentBase>();
	}
};
static_assert(alignof(ADelMarTrackSegmentBase) == 0x000008, "Wrong alignment on ADelMarTrackSegmentBase");
static_assert(sizeof(ADelMarTrackSegmentBase) == 0x0002C0, "Wrong size on ADelMarTrackSegmentBase");
static_assert(offsetof(ADelMarTrackSegmentBase, bIgnoreSplineLength) == 0x000298, "Member 'ADelMarTrackSegmentBase::bIgnoreSplineLength' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSegmentBase, Track) == 0x00029C, "Member 'ADelMarTrackSegmentBase::Track' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSegmentBase, MaterialLayerComponent) == 0x0002A8, "Member 'ADelMarTrackSegmentBase::MaterialLayerComponent' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSegmentBase, BeginDistanceAlongSpline) == 0x0002B0, "Member 'ADelMarTrackSegmentBase::BeginDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSegmentBase, EndDistanceAlongSpline) == 0x0002B4, "Member 'ADelMarTrackSegmentBase::EndDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSegmentBase, TrackSegmentIndex) == 0x0002B8, "Member 'ADelMarTrackSegmentBase::TrackSegmentIndex' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackCustomSegment
// 0x0008 (0x02C8 - 0x02C0)
class ADelMarTrackCustomSegment final : public ADelMarTrackSegmentBase
{
public:
	float                                         SegmentLength;                                     // 0x02C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackCustomSegment">();
	}
	static class ADelMarTrackCustomSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackCustomSegment>();
	}
};
static_assert(alignof(ADelMarTrackCustomSegment) == 0x000008, "Wrong alignment on ADelMarTrackCustomSegment");
static_assert(sizeof(ADelMarTrackCustomSegment) == 0x0002C8, "Wrong size on ADelMarTrackCustomSegment");
static_assert(offsetof(ADelMarTrackCustomSegment, SegmentLength) == 0x0002C0, "Member 'ADelMarTrackCustomSegment::SegmentLength' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackMaterialCollection
// 0x0030 (0x0060 - 0x0030)
class UDelMarTrackMaterialCollection final : public UDataAsset
{
public:
	uint32                                        SelectedIndex;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarTrackMaterialCollectionEntry> Materials;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMaterialCollection">();
	}
	static class UDelMarTrackMaterialCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMaterialCollection>();
	}
};
static_assert(alignof(UDelMarTrackMaterialCollection) == 0x000008, "Wrong alignment on UDelMarTrackMaterialCollection");
static_assert(sizeof(UDelMarTrackMaterialCollection) == 0x000060, "Wrong size on UDelMarTrackMaterialCollection");
static_assert(offsetof(UDelMarTrackMaterialCollection, SelectedIndex) == 0x000030, "Member 'UDelMarTrackMaterialCollection::SelectedIndex' has a wrong offset!");
static_assert(offsetof(UDelMarTrackMaterialCollection, Materials) == 0x000038, "Member 'UDelMarTrackMaterialCollection::Materials' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackMatLayerComponent
// 0x0018 (0x00B8 - 0x00A0)
class UDelMarTrackMatLayerComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>    RoadMesh;                                          // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackMaterialCollection*         MaterialCollection;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMatLayerComponent">();
	}
	static class UDelMarTrackMatLayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMatLayerComponent>();
	}
};
static_assert(alignof(UDelMarTrackMatLayerComponent) == 0x000008, "Wrong alignment on UDelMarTrackMatLayerComponent");
static_assert(sizeof(UDelMarTrackMatLayerComponent) == 0x0000B8, "Wrong size on UDelMarTrackMatLayerComponent");
static_assert(offsetof(UDelMarTrackMatLayerComponent, RoadMesh) == 0x0000A0, "Member 'UDelMarTrackMatLayerComponent::RoadMesh' has a wrong offset!");
static_assert(offsetof(UDelMarTrackMatLayerComponent, Track) == 0x0000A8, "Member 'UDelMarTrackMatLayerComponent::Track' has a wrong offset!");
static_assert(offsetof(UDelMarTrackMatLayerComponent, MaterialCollection) == 0x0000B0, "Member 'UDelMarTrackMatLayerComponent::MaterialCollection' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackMeshCustomization
// 0x0010 (0x0710 - 0x0700)
class UDelMarTrackMeshCustomization final : public USplineMeshComponent
{
public:
	uint8                                         Pad_700[0x9];                                      // 0x0700(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsADefaultCustomization;                          // 0x0709(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70A[0x6];                                      // 0x070A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackMeshCustomization">();
	}
	static class UDelMarTrackMeshCustomization* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackMeshCustomization>();
	}
};
static_assert(alignof(UDelMarTrackMeshCustomization) == 0x000010, "Wrong alignment on UDelMarTrackMeshCustomization");
static_assert(sizeof(UDelMarTrackMeshCustomization) == 0x000710, "Wrong size on UDelMarTrackMeshCustomization");
static_assert(offsetof(UDelMarTrackMeshCustomization, bIsADefaultCustomization) == 0x000709, "Member 'UDelMarTrackMeshCustomization::bIsADefaultCustomization' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackOobTube
// 0x00E0 (0x0370 - 0x0290)
class ADelMarTrackOobTube final : public AActor
{
public:
	class ADelMarTrack*                           AttachedTrack;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarTrackOobTubePointData*           SplinePointData;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TubeMeshComponentClass;                            // 0x02A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoClear, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarTrackOobTubeMeshSection> OobTubeMeshSections;                               // 0x02C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStaticMesh>             TubeMesh;                                          // 0x02D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EDelMarTrackOobTubeTransitionType, TSoftObjectPtr<class UStaticMesh>> TransitionMeshes;                                  // 0x02F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         DefaultTransitionMeshLength;                       // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultNumSubsections;                             // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SmallestSubsectionLength;                          // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumMeshScale;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttachedTrackPointAdded(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnAttachedTrackPointChanged(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnAttachedTrackPointRemoved(class UDelMarTrackSplineComponent* InSpline, int32 PointIndex);
	void OnConstructTubeMesh(class USplineMeshComponent* TubeMeshComponent, bool bIsTransitionMesh, bool bIsTransitionIn);
	void OnPostContructedOOBTube();

	EDelMarTrackOobTubeTransitionType DetermineTubeMeshTransitionType(int32 CurrentPointIndex, int32 NextPointIndex) const;
	const struct FGameplayTag GetSplinePointTagAtIndex(int32 PointIndex) const;
	bool HasTubeMeshAtDistance(float InDistance) const;
	bool IsAttachedToPrimaryTrack() const;
	bool IsAttachedToSecondaryTrack() const;
	bool IsSplinePointOffset(int32 PointIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTube">();
	}
	static class ADelMarTrackOobTube* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackOobTube>();
	}
};
static_assert(alignof(ADelMarTrackOobTube) == 0x000008, "Wrong alignment on ADelMarTrackOobTube");
static_assert(sizeof(ADelMarTrackOobTube) == 0x000370, "Wrong size on ADelMarTrackOobTube");
static_assert(offsetof(ADelMarTrackOobTube, AttachedTrack) == 0x000290, "Member 'ADelMarTrackOobTube::AttachedTrack' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, Spline) == 0x000298, "Member 'ADelMarTrackOobTube::Spline' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, SplinePointData) == 0x0002A0, "Member 'ADelMarTrackOobTube::SplinePointData' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, TubeMeshComponentClass) == 0x0002A8, "Member 'ADelMarTrackOobTube::TubeMeshComponentClass' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, OobTubeMeshSections) == 0x0002C8, "Member 'ADelMarTrackOobTube::OobTubeMeshSections' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, TubeMesh) == 0x0002D8, "Member 'ADelMarTrackOobTube::TubeMesh' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, TransitionMeshes) == 0x0002F8, "Member 'ADelMarTrackOobTube::TransitionMeshes' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, DefaultTransitionMeshLength) == 0x000348, "Member 'ADelMarTrackOobTube::DefaultTransitionMeshLength' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, DefaultNumSubsections) == 0x00034C, "Member 'ADelMarTrackOobTube::DefaultNumSubsections' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, SmallestSubsectionLength) == 0x000350, "Member 'ADelMarTrackOobTube::SmallestSubsectionLength' has a wrong offset!");
static_assert(offsetof(ADelMarTrackOobTube, MinimumMeshScale) == 0x000354, "Member 'ADelMarTrackOobTube::MinimumMeshScale' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackOobTubePointData
// 0x0010 (0x0038 - 0x0028)
class UDelMarTrackOobTubePointData final : public USplineMetadata
{
public:
	TArray<struct FDelMarTrackOobTubePointMetaData> MetaData;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubePointData">();
	}
	static class UDelMarTrackOobTubePointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubePointData>();
	}
};
static_assert(alignof(UDelMarTrackOobTubePointData) == 0x000008, "Wrong alignment on UDelMarTrackOobTubePointData");
static_assert(sizeof(UDelMarTrackOobTubePointData) == 0x000038, "Wrong size on UDelMarTrackOobTubePointData");
static_assert(offsetof(UDelMarTrackOobTubePointData, MetaData) == 0x000028, "Member 'UDelMarTrackOobTubePointData::MetaData' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackOobTubePositionalRenderingComponent
// 0x0070 (0x0110 - 0x00A0)
class UDelMarTrackOobTubePositionalRenderingComponent : public UControllerComponent
{
public:
	TWeakObjectPtr<class UDelMarTrackPositionComponent> PlayerPositionComponent;                           // 0x00A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class USplineMeshComponent*>             ActiveOOBTubeMeshes;                               // 0x00A8(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class ADelMarTrackOobTube*                    ActiveOOBTube;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RenderDistanceInFrontOfPlayer;                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RenderDistanceBehindPlayer;                        // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateIntervalInSeconds;                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubePositionalRenderingComponent">();
	}
	static class UDelMarTrackOobTubePositionalRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubePositionalRenderingComponent>();
	}
};
static_assert(alignof(UDelMarTrackOobTubePositionalRenderingComponent) == 0x000008, "Wrong alignment on UDelMarTrackOobTubePositionalRenderingComponent");
static_assert(sizeof(UDelMarTrackOobTubePositionalRenderingComponent) == 0x000110, "Wrong size on UDelMarTrackOobTubePositionalRenderingComponent");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, PlayerPositionComponent) == 0x0000A0, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::PlayerPositionComponent' has a wrong offset!");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, ActiveOOBTubeMeshes) == 0x0000A8, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::ActiveOOBTubeMeshes' has a wrong offset!");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, ActiveOOBTube) == 0x0000F8, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::ActiveOOBTube' has a wrong offset!");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, RenderDistanceInFrontOfPlayer) == 0x000100, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::RenderDistanceInFrontOfPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, RenderDistanceBehindPlayer) == 0x000104, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::RenderDistanceBehindPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarTrackOobTubePositionalRenderingComponent, UpdateIntervalInSeconds) == 0x000108, "Member 'UDelMarTrackOobTubePositionalRenderingComponent::UpdateIntervalInSeconds' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackOobTubeProxy
// 0x0000 (0x0028 - 0x0028)
class UDelMarTrackOobTubeProxy final : public UObject
{
public:
	class ADelMarTrack* GetAttachedTrack() const;
	int32 GetDefaultSubsectionCount() const;
	double GetDefaultTransitionMeshLength() const;
	double GetMinimumMeshScale() const;
	class AActor* GetOobTubeActor() const;
	double GetSmallestSubsectionLength() const;
	class USplineComponent* GetSplineComponent() const;
	struct FDelMarTrackOobTubePointMetaData GetSplineMetadata(int32 PointIndex) const;
	double GetSplineVisualizationOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubeProxy">();
	}
	static class UDelMarTrackOobTubeProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubeProxy>();
	}
};
static_assert(alignof(UDelMarTrackOobTubeProxy) == 0x000008, "Wrong alignment on UDelMarTrackOobTubeProxy");
static_assert(sizeof(UDelMarTrackOobTubeProxy) == 0x000028, "Wrong size on UDelMarTrackOobTubeProxy");

// Class DelMarTrackRuntime.DelMarTrackOobTubeCollectionProxy
// 0x0008 (0x0030 - 0x0028)
class UDelMarTrackOobTubeCollectionProxy final : public UObject
{
public:
	TSubclassOf<class AActor>                     OobTubeClass;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UDelMarTrackOobTubeProxy* GetOobTubeProxy(int32 OobTubeIndex);
	void RegisterOobTube(class AActor* OobTubeActor);

	int32 GetNumOobTubeProxies() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackOobTubeCollectionProxy">();
	}
	static class UDelMarTrackOobTubeCollectionProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackOobTubeCollectionProxy>();
	}
};
static_assert(alignof(UDelMarTrackOobTubeCollectionProxy) == 0x000008, "Wrong alignment on UDelMarTrackOobTubeCollectionProxy");
static_assert(sizeof(UDelMarTrackOobTubeCollectionProxy) == 0x000030, "Wrong size on UDelMarTrackOobTubeCollectionProxy");
static_assert(offsetof(UDelMarTrackOobTubeCollectionProxy, OobTubeClass) == 0x000028, "Member 'UDelMarTrackOobTubeCollectionProxy::OobTubeClass' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPaletteTrackType
// 0x0020 (0x0050 - 0x0030)
class UDelMarTrackPaletteTrackType final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteTrackTypeEntry> StyleArray;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldOOBTubeFunnel;                              // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            OOBTubeMeshOverride;                               // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddSegmentClassActorToStyle(const struct FGameplayTag& StyleTag, class UClass* SegmentClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTrackType">();
	}
	static class UDelMarTrackPaletteTrackType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTrackType>();
	}
};
static_assert(alignof(UDelMarTrackPaletteTrackType) == 0x000008, "Wrong alignment on UDelMarTrackPaletteTrackType");
static_assert(sizeof(UDelMarTrackPaletteTrackType) == 0x000050, "Wrong size on UDelMarTrackPaletteTrackType");
static_assert(offsetof(UDelMarTrackPaletteTrackType, StyleArray) == 0x000030, "Member 'UDelMarTrackPaletteTrackType::StyleArray' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTrackType, bShouldOOBTubeFunnel) == 0x000040, "Member 'UDelMarTrackPaletteTrackType::bShouldOOBTubeFunnel' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTrackType, OOBTubeMeshOverride) == 0x000048, "Member 'UDelMarTrackPaletteTrackType::OOBTubeMeshOverride' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPaletteTransitions
// 0x0010 (0x0040 - 0x0030)
class UDelMarTrackPaletteTransitions final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteTransitionEntry_v2> TransitionArray;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTransitions">();
	}
	static class UDelMarTrackPaletteTransitions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTransitions>();
	}
};
static_assert(alignof(UDelMarTrackPaletteTransitions) == 0x000008, "Wrong alignment on UDelMarTrackPaletteTransitions");
static_assert(sizeof(UDelMarTrackPaletteTransitions) == 0x000040, "Wrong size on UDelMarTrackPaletteTransitions");
static_assert(offsetof(UDelMarTrackPaletteTransitions, TransitionArray) == 0x000030, "Member 'UDelMarTrackPaletteTransitions::TransitionArray' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPaletteTheme
// 0x0040 (0x0070 - 0x0030)
class UDelMarTrackPaletteTheme final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ThemeName;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThemeDescription;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDelMarTrackPaletteTrackType*>   Tracks;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDelMarTrackPaletteTransitions*         Transitions;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            OOBTubeMesh;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPaletteTheme">();
	}
	static class UDelMarTrackPaletteTheme* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPaletteTheme>();
	}
};
static_assert(alignof(UDelMarTrackPaletteTheme) == 0x000008, "Wrong alignment on UDelMarTrackPaletteTheme");
static_assert(sizeof(UDelMarTrackPaletteTheme) == 0x000070, "Wrong size on UDelMarTrackPaletteTheme");
static_assert(offsetof(UDelMarTrackPaletteTheme, ThemeName) == 0x000038, "Member 'UDelMarTrackPaletteTheme::ThemeName' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTheme, ThemeDescription) == 0x000040, "Member 'UDelMarTrackPaletteTheme::ThemeDescription' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTheme, Tracks) == 0x000050, "Member 'UDelMarTrackPaletteTheme::Tracks' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTheme, Transitions) == 0x000060, "Member 'UDelMarTrackPaletteTheme::Transitions' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPaletteTheme, OOBTubeMesh) == 0x000068, "Member 'UDelMarTrackPaletteTheme::OOBTubeMesh' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPerformanceScrubber
// 0x00B8 (0x0348 - 0x0290)
class ADelMarTrackPerformanceScrubber final : public AActor
{
public:
	class UCameraComponent*                       Camera;                                            // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UDelMarTrackSplineComponent> Spline;                                            // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SplineSelection;                                   // 0x02A0(0x0010)(Edit, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrubUnits;                                        // 0x02B0(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraHeightOffset;                                // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurve;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RuntimeSpeed;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRunCsvProfilerDuringScrub : 1;                    // 0x02C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C5[0x1B];                                     // 0x02C5(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrubUnitMax;                                      // 0x02E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRuntimeEnabled : 1;                               // 0x02E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UDelMarTrackSplineComponent*> StringToSplineMap;                                 // 0x02E8(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     Timeline;                                          // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientStartScrub();
	void ClientStopScrub();
	void ReceiveRuntimeTrackScrubbingSpeed();
	void ReceiveRuntimeTrackScrubbingStart();
	void TimelineFinishedCallback();
	void TimelineTickCallback();
	void TimelineTickFloatCallback(float Progress);
	TArray<class FString> UpdateSplines();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPerformanceScrubber">();
	}
	static class ADelMarTrackPerformanceScrubber* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackPerformanceScrubber>();
	}
};
static_assert(alignof(ADelMarTrackPerformanceScrubber) == 0x000008, "Wrong alignment on ADelMarTrackPerformanceScrubber");
static_assert(sizeof(ADelMarTrackPerformanceScrubber) == 0x000348, "Wrong size on ADelMarTrackPerformanceScrubber");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, Camera) == 0x000290, "Member 'ADelMarTrackPerformanceScrubber::Camera' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, Spline) == 0x000298, "Member 'ADelMarTrackPerformanceScrubber::Spline' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, SplineSelection) == 0x0002A0, "Member 'ADelMarTrackPerformanceScrubber::SplineSelection' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, ScrubUnits) == 0x0002B0, "Member 'ADelMarTrackPerformanceScrubber::ScrubUnits' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, CameraHeightOffset) == 0x0002B4, "Member 'ADelMarTrackPerformanceScrubber::CameraHeightOffset' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, FloatCurve) == 0x0002B8, "Member 'ADelMarTrackPerformanceScrubber::FloatCurve' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, RuntimeSpeed) == 0x0002C0, "Member 'ADelMarTrackPerformanceScrubber::RuntimeSpeed' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, ScrubUnitMax) == 0x0002E0, "Member 'ADelMarTrackPerformanceScrubber::ScrubUnitMax' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, StringToSplineMap) == 0x0002E8, "Member 'ADelMarTrackPerformanceScrubber::StringToSplineMap' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPerformanceScrubber, Timeline) == 0x000338, "Member 'ADelMarTrackPerformanceScrubber::Timeline' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackRoadProp
// 0x0010 (0x0BD8 - 0x0BC8)
class ADelMarTrackRoadProp final : public ABuildingProp
{
public:
	EDelMarTrackRoadPropType                      RoadPropType;                                      // 0x0BC8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackSnapToComponent*            SnapToComponent;                                   // 0x0BD0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackRoadProp">();
	}
	static class ADelMarTrackRoadProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackRoadProp>();
	}
};
static_assert(alignof(ADelMarTrackRoadProp) == 0x000008, "Wrong alignment on ADelMarTrackRoadProp");
static_assert(sizeof(ADelMarTrackRoadProp) == 0x000BD8, "Wrong size on ADelMarTrackRoadProp");
static_assert(offsetof(ADelMarTrackRoadProp, RoadPropType) == 0x000BC8, "Member 'ADelMarTrackRoadProp::RoadPropType' has a wrong offset!");
static_assert(offsetof(ADelMarTrackRoadProp, SnapToComponent) == 0x000BD0, "Member 'ADelMarTrackRoadProp::SnapToComponent' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSegmentCollectionSpawnDataProvider
// 0x0000 (0x0028 - 0x0028)
class IDelMarTrackSegmentCollectionSpawnDataProvider final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentCollectionSpawnDataProvider">();
	}
	static class IDelMarTrackSegmentCollectionSpawnDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackSegmentCollectionSpawnDataProvider>();
	}
};
static_assert(alignof(IDelMarTrackSegmentCollectionSpawnDataProvider) == 0x000008, "Wrong alignment on IDelMarTrackSegmentCollectionSpawnDataProvider");
static_assert(sizeof(IDelMarTrackSegmentCollectionSpawnDataProvider) == 0x000028, "Wrong size on IDelMarTrackSegmentCollectionSpawnDataProvider");

// Class DelMarTrackRuntime.DelMarTrackSettings
// 0x0020 (0x0050 - 0x0030)
class UDelMarTrackSettings final : public UDeveloperSettings
{
public:
	struct FGameplayTag                           RootTrackTag;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarTrackTagConverterData>   TagConverterData;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           DefaultConverterTag;                               // 0x0048(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           HiddenTrackTag;                                    // 0x004C(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSettings">();
	}
	static class UDelMarTrackSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSettings>();
	}
};
static_assert(alignof(UDelMarTrackSettings) == 0x000008, "Wrong alignment on UDelMarTrackSettings");
static_assert(sizeof(UDelMarTrackSettings) == 0x000050, "Wrong size on UDelMarTrackSettings");
static_assert(offsetof(UDelMarTrackSettings, RootTrackTag) == 0x000030, "Member 'UDelMarTrackSettings::RootTrackTag' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSettings, TagConverterData) == 0x000038, "Member 'UDelMarTrackSettings::TagConverterData' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSettings, DefaultConverterTag) == 0x000048, "Member 'UDelMarTrackSettings::DefaultConverterTag' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSettings, HiddenTrackTag) == 0x00004C, "Member 'UDelMarTrackSettings::HiddenTrackTag' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSnapToComponent
// 0x0030 (0x0250 - 0x0220)
class UDelMarTrackSnapToComponent : public USceneComponent
{
public:
	struct FVector                                OffsetToOwnerActor;                                // 0x0220(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSnapToComponent">();
	}
	static class UDelMarTrackSnapToComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSnapToComponent>();
	}
};
static_assert(alignof(UDelMarTrackSnapToComponent) == 0x000010, "Wrong alignment on UDelMarTrackSnapToComponent");
static_assert(sizeof(UDelMarTrackSnapToComponent) == 0x000250, "Wrong size on UDelMarTrackSnapToComponent");
static_assert(offsetof(UDelMarTrackSnapToComponent, OffsetToOwnerActor) == 0x000220, "Member 'UDelMarTrackSnapToComponent::OffsetToOwnerActor' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSnapToSplinePointComponent
// 0x0020 (0x0270 - 0x0250)
class UDelMarTrackSnapToSplinePointComponent final : public UDelMarTrackSnapToComponent
{
public:
	class USplineComponent*                       SplineToSnapTo;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarTrackSplinePointSnapMode               SplinePointSnapMode;                               // 0x0258(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SplinePointIndexToSnapTo;                          // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x10];                                     // 0x0260(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSnapToSplinePointComponent">();
	}
	static class UDelMarTrackSnapToSplinePointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSnapToSplinePointComponent>();
	}
};
static_assert(alignof(UDelMarTrackSnapToSplinePointComponent) == 0x000010, "Wrong alignment on UDelMarTrackSnapToSplinePointComponent");
static_assert(sizeof(UDelMarTrackSnapToSplinePointComponent) == 0x000270, "Wrong size on UDelMarTrackSnapToSplinePointComponent");
static_assert(offsetof(UDelMarTrackSnapToSplinePointComponent, SplineToSnapTo) == 0x000250, "Member 'UDelMarTrackSnapToSplinePointComponent::SplineToSnapTo' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSnapToSplinePointComponent, SplinePointSnapMode) == 0x000258, "Member 'UDelMarTrackSnapToSplinePointComponent::SplinePointSnapMode' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSnapToSplinePointComponent, SplinePointIndexToSnapTo) == 0x00025C, "Member 'UDelMarTrackSnapToSplinePointComponent::SplinePointIndexToSnapTo' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackStaticMeshSegment
// 0x0008 (0x02C8 - 0x02C0)
class ADelMarTrackStaticMeshSegment final : public ADelMarTrackSegmentBase
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackStaticMeshSegment">();
	}
	static class ADelMarTrackStaticMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackStaticMeshSegment>();
	}
};
static_assert(alignof(ADelMarTrackStaticMeshSegment) == 0x000008, "Wrong alignment on ADelMarTrackStaticMeshSegment");
static_assert(sizeof(ADelMarTrackStaticMeshSegment) == 0x0002C8, "Wrong size on ADelMarTrackStaticMeshSegment");
static_assert(offsetof(ADelMarTrackStaticMeshSegment, StaticMeshComponent) == 0x0002C0, "Member 'ADelMarTrackStaticMeshSegment::StaticMeshComponent' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPositionComponent
// 0x0080 (0x02A0 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) UDelMarTrackPositionComponent : public USceneComponent
{
public:
	uint8                                         Pad_220[0x30];                                     // 0x0220(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTrackPosition                         ActiveTrackPosition;                               // 0x0250(0x0020)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         TrackRadius;                                       // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0x24];                                     // 0x0274(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveTrack(class ADelMarTrackBase* Track, int32 TrackSegmentIndex, bool bForce);

	int32 GetActiveSegmentIndex() const;
	class ADelMarTrackBase* GetActiveTrack() const;
	float GetActiveTrackDistance() const;
	struct FTrackPosition GetActiveTrackPosition() const;
	float GetActiveTrackRadius() const;
	float GetDistanceAlongSpline() const;
	struct FVector GetLastKnowGoodSplineLocation() const;
	float GetPrimaryDistance() const;
	class ADelMarTrackBase* GetPrimaryTrack() const;
	struct FVector GetPrimaryWorldLocationAlongSpline() const;
	struct FVector GetRawClosestSplineLocation() const;
	float GetRawDistanceAlongSpline() const;
	float GetTrackRadius(const class ADelMarTrackBase* InTrack, float InDistanceAlongTrack) const;
	struct FVector GetWorldDirectionAlongSpline() const;
	struct FVector GetWorldLocationAlongSpline() const;
	struct FVector GetWorldRightVectorAlongSpline() const;
	struct FTransform GetWorldTransformAlongSpline() const;
	struct FVector GetWorldUpVectorAlongSpline() const;
	bool HasValidPosition() const;
	bool IsOnPrimaryTrack() const;
	bool IsTouchingTrack() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPositionComponent">();
	}
	static class UDelMarTrackPositionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPositionComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UDelMarTrackPositionComponent) == 0x000010, "Wrong alignment on UDelMarTrackPositionComponent");
static_assert(sizeof(UDelMarTrackPositionComponent) == 0x0002A0, "Wrong size on UDelMarTrackPositionComponent");
static_assert(offsetof(UDelMarTrackPositionComponent, ActiveTrackPosition) == 0x000250, "Member 'UDelMarTrackPositionComponent::ActiveTrackPosition' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPositionComponent, TrackRadius) == 0x000270, "Member 'UDelMarTrackPositionComponent::TrackRadius' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackVehiclePositionComponent
// 0x0000 (0x02A0 - 0x02A0)
class UDelMarTrackVehiclePositionComponent final : public UDelMarTrackPositionComponent
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackVehiclePositionComponent">();
	}
	static class UDelMarTrackVehiclePositionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackVehiclePositionComponent>();
	}
};
static_assert(alignof(UDelMarTrackVehiclePositionComponent) == 0x000010, "Wrong alignment on UDelMarTrackVehiclePositionComponent");
static_assert(sizeof(UDelMarTrackVehiclePositionComponent) == 0x0002A0, "Wrong size on UDelMarTrackVehiclePositionComponent");
static_assert(offsetof(UDelMarTrackVehiclePositionComponent, Vehicle) == 0x000298, "Member 'UDelMarTrackVehiclePositionComponent::Vehicle' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackManager
// 0x0050 (0x0080 - 0x0030)
class UDelMarTrackManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADelMarTrackBase*>               DelMarTracks;                                      // 0x0060(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class ADelMarTrackBase*                       PrimaryTrack;                                      // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADelMarTrackBase*                       LowestTrack;                                       // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackManager">();
	}
	static class UDelMarTrackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackManager>();
	}
};
static_assert(alignof(UDelMarTrackManager) == 0x000008, "Wrong alignment on UDelMarTrackManager");
static_assert(sizeof(UDelMarTrackManager) == 0x000080, "Wrong size on UDelMarTrackManager");
static_assert(offsetof(UDelMarTrackManager, DelMarTracks) == 0x000060, "Member 'UDelMarTrackManager::DelMarTracks' has a wrong offset!");
static_assert(offsetof(UDelMarTrackManager, PrimaryTrack) == 0x000070, "Member 'UDelMarTrackManager::PrimaryTrack' has a wrong offset!");
static_assert(offsetof(UDelMarTrackManager, LowestTrack) == 0x000078, "Member 'UDelMarTrackManager::LowestTrack' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPalette
// 0x0030 (0x0060 - 0x0030)
class UDelMarTrackPalette final : public UDataAsset
{
public:
	TArray<struct FDelMarTrackPaletteEntry>       Palette;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FDelMarTrackPaletteTransitionEntry> Transitions;                                       // 0x0040(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FDelMarTrackCapEntry>           Caps;                                              // 0x0050(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NoClear, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPalette">();
	}
	static class UDelMarTrackPalette* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPalette>();
	}
};
static_assert(alignof(UDelMarTrackPalette) == 0x000008, "Wrong alignment on UDelMarTrackPalette");
static_assert(sizeof(UDelMarTrackPalette) == 0x000060, "Wrong size on UDelMarTrackPalette");
static_assert(offsetof(UDelMarTrackPalette, Palette) == 0x000030, "Member 'UDelMarTrackPalette::Palette' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPalette, Transitions) == 0x000040, "Member 'UDelMarTrackPalette::Transitions' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPalette, Caps) == 0x000050, "Member 'UDelMarTrackPalette::Caps' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackPrefabSegment
// 0x0018 (0x02D8 - 0x02C0)
class ADelMarTrackPrefabSegment final : public ADelMarTrackSegmentBase
{
public:
	float                                         TangentLength;                                     // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   PrefabStaticMesh;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StartSocketName;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EndSocketName;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class FString> GetSockets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPrefabSegment">();
	}
	static class ADelMarTrackPrefabSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackPrefabSegment>();
	}
};
static_assert(alignof(ADelMarTrackPrefabSegment) == 0x000008, "Wrong alignment on ADelMarTrackPrefabSegment");
static_assert(sizeof(ADelMarTrackPrefabSegment) == 0x0002D8, "Wrong size on ADelMarTrackPrefabSegment");
static_assert(offsetof(ADelMarTrackPrefabSegment, TangentLength) == 0x0002C0, "Member 'ADelMarTrackPrefabSegment::TangentLength' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPrefabSegment, PrefabStaticMesh) == 0x0002C8, "Member 'ADelMarTrackPrefabSegment::PrefabStaticMesh' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPrefabSegment, StartSocketName) == 0x0002D0, "Member 'ADelMarTrackPrefabSegment::StartSocketName' has a wrong offset!");
static_assert(offsetof(ADelMarTrackPrefabSegment, EndSocketName) == 0x0002D4, "Member 'ADelMarTrackPrefabSegment::EndSocketName' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSegmentInterface
// 0x0000 (0x0028 - 0x0028)
class IDelMarTrackSegmentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSegmentInterface">();
	}
	static class IDelMarTrackSegmentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarTrackSegmentInterface>();
	}
};
static_assert(alignof(IDelMarTrackSegmentInterface) == 0x000008, "Wrong alignment on IDelMarTrackSegmentInterface");
static_assert(sizeof(IDelMarTrackSegmentInterface) == 0x000028, "Wrong size on IDelMarTrackSegmentInterface");

// Class DelMarTrackRuntime.DelMarTrackPointData
// 0x0018 (0x0040 - 0x0028)
class UDelMarTrackPointData final : public USplineMetadata
{
public:
	TArray<struct FDelMarSplinePointMetaData>     MetaData;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDelMarTrackSplineComponent*            Spline;                                            // 0x0038(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackPointData">();
	}
	static class UDelMarTrackPointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackPointData>();
	}
};
static_assert(alignof(UDelMarTrackPointData) == 0x000008, "Wrong alignment on UDelMarTrackPointData");
static_assert(sizeof(UDelMarTrackPointData) == 0x000040, "Wrong size on UDelMarTrackPointData");
static_assert(offsetof(UDelMarTrackPointData, MetaData) == 0x000028, "Member 'UDelMarTrackPointData::MetaData' has a wrong offset!");
static_assert(offsetof(UDelMarTrackPointData, Spline) == 0x000038, "Member 'UDelMarTrackPointData::Spline' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSplineComponent
// 0x00B0 (0x06B0 - 0x0600)
class UDelMarTrackSplineComponent final : public USplineComponent
{
public:
	int32                                         WorldPlaneLookupSubsteps;                          // 0x0600(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_604[0x94];                                     // 0x0604(0x0094)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarRotationalMinimalFrame>  RotationalMinimalFrameNormals;                     // 0x0698(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FClosestLocationToWorldPlaneResult FindClosestLocationForSegmentToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, const int32 SegmentIndex, ESplineCoordinateSpace CoordinateSpace) const;
	struct FClosestLocationToWorldPlaneResult FindClosestLocationToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, ESplineCoordinateSpace CoordinateSpace) const;
	struct FClosestLocationToWorldPlaneResult FindInputKeyForNeighboringSegmentClosestToWorldPlane(const struct FVector& WorldPlaneOrigin, const struct FVector& WorldPlaneNormal, const int32 SegmentIndex, int32* OutClosestSegmentIndex) const;
	float GetForwardDistance(float Start, float End) const;
	float GetLoopDistance(float InTotalDistance) const;
	int32 GetNextSplinePoint(int32 InSplinePoint) const;
	int32 GetNextSplineSegment(int32 InSplineSegmentIndex) const;
	int32 GetPreviousSplinePoint(int32 InSplinePoint) const;
	int32 GetPreviousSplineSegment(int32 InSplineSegmentIndex) const;
	const TArray<struct FDelMarRotationalMinimalFrame> GetRotationalMinimalFrames() const;
	struct FVector GetRotationalMinimalUpVectorAtDistanceAlongSpline(float DistanceAlongSpline, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetRotationalMinimalUpVectorAtSplinePoint(int32 SplinePoint, ESplineCoordinateSpace CoordinateSpace) const;
	int32 GetSplinePointAtDistanceAlongSpline(float DistanceAlongSpline) const;
	int32 GetSplinePointClosestToDistanceAlongSpline(float DistanceAlongSpline) const;
	int32 GetSplinePointClosestToWorldLocation(const struct FVector& WorldLocation) const;
	bool IsDistanceAheadOfOtherDistance(float Distance, float OtherDistance, float BaseDistance) const;
	bool IsDistanceBehindOtherDistance(float Distance, float OtherDistance, float BaseDistance) const;
	bool IsDistanceWithinRange(float InDistance, float StartDistance, float EndDistance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSplineComponent">();
	}
	static class UDelMarTrackSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSplineComponent>();
	}
};
static_assert(alignof(UDelMarTrackSplineComponent) == 0x000010, "Wrong alignment on UDelMarTrackSplineComponent");
static_assert(sizeof(UDelMarTrackSplineComponent) == 0x0006B0, "Wrong size on UDelMarTrackSplineComponent");
static_assert(offsetof(UDelMarTrackSplineComponent, WorldPlaneLookupSubsteps) == 0x000600, "Member 'UDelMarTrackSplineComponent::WorldPlaneLookupSubsteps' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSplineComponent, RotationalMinimalFrameNormals) == 0x000698, "Member 'UDelMarTrackSplineComponent::RotationalMinimalFrameNormals' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackSplineMeshSegment
// 0x0010 (0x02D0 - 0x02C0)
class ADelMarTrackSplineMeshSegment : public ADelMarTrackSegmentBase
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SegmentLengthScaler;                               // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSplineMeshSegment">();
	}
	static class ADelMarTrackSplineMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackSplineMeshSegment>();
	}
};
static_assert(alignof(ADelMarTrackSplineMeshSegment) == 0x000008, "Wrong alignment on ADelMarTrackSplineMeshSegment");
static_assert(sizeof(ADelMarTrackSplineMeshSegment) == 0x0002D0, "Wrong size on ADelMarTrackSplineMeshSegment");
static_assert(offsetof(ADelMarTrackSplineMeshSegment, SplineMesh) == 0x0002C0, "Member 'ADelMarTrackSplineMeshSegment::SplineMesh' has a wrong offset!");
static_assert(offsetof(ADelMarTrackSplineMeshSegment, SegmentLengthScaler) == 0x0002C8, "Member 'ADelMarTrackSplineMeshSegment::SegmentLengthScaler' has a wrong offset!");

// Class DelMarTrackRuntime.DelMarTrackVariableSplineMeshSegment
// 0x0050 (0x0320 - 0x02D0)
class ADelMarTrackVariableSplineMeshSegment final : public ADelMarTrackSplineMeshSegment
{
public:
	TMap<int32, class UStaticMesh*>               VariableStaticMeshes;                              // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackVariableSplineMeshSegment">();
	}
	static class ADelMarTrackVariableSplineMeshSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarTrackVariableSplineMeshSegment>();
	}
};
static_assert(alignof(ADelMarTrackVariableSplineMeshSegment) == 0x000008, "Wrong alignment on ADelMarTrackVariableSplineMeshSegment");
static_assert(sizeof(ADelMarTrackVariableSplineMeshSegment) == 0x000320, "Wrong size on ADelMarTrackVariableSplineMeshSegment");
static_assert(offsetof(ADelMarTrackVariableSplineMeshSegment, VariableStaticMeshes) == 0x0002D0, "Member 'ADelMarTrackVariableSplineMeshSegment::VariableStaticMeshes' has a wrong offset!");

}

