#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerAugmentsUI

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListIconPicker
// 0x0010 (0x0058 - 0x0048)
class UFortMobileButtonBehaviorComponent_AugmentsListIconPicker final : public UFortMobileButtonBehaviorComponent_IconPicker
{
public:
	bool                                          bCachedIsInInventoryView;                          // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ListViewSprite;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAugmentToolViewSwap(const bool bIsInInventoryView);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileButtonBehaviorComponent_AugmentsListIconPicker">();
	}
	static class UFortMobileButtonBehaviorComponent_AugmentsListIconPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileButtonBehaviorComponent_AugmentsListIconPicker>();
	}
};
static_assert(alignof(UFortMobileButtonBehaviorComponent_AugmentsListIconPicker) == 0x000008, "Wrong alignment on UFortMobileButtonBehaviorComponent_AugmentsListIconPicker");
static_assert(sizeof(UFortMobileButtonBehaviorComponent_AugmentsListIconPicker) == 0x000058, "Wrong size on UFortMobileButtonBehaviorComponent_AugmentsListIconPicker");
static_assert(offsetof(UFortMobileButtonBehaviorComponent_AugmentsListIconPicker, bCachedIsInInventoryView) == 0x000048, "Member 'UFortMobileButtonBehaviorComponent_AugmentsListIconPicker::bCachedIsInInventoryView' has a wrong offset!");
static_assert(offsetof(UFortMobileButtonBehaviorComponent_AugmentsListIconPicker, ListViewSprite) == 0x000050, "Member 'UFortMobileButtonBehaviorComponent_AugmentsListIconPicker::ListViewSprite' has a wrong offset!");

// Class PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListVisibility
// 0x0008 (0x0050 - 0x0048)
class UFortMobileButtonBehaviorComponent_AugmentsListVisibility : public UFortMobileButtonBehaviorComponent_Visibility
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAugmentToolOpenedStatusChanged(const bool bIsOpened, const bool bInIsInventoryView);
	void HandleAugmentToolViewSwap(const bool bInIsInventoryView);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileButtonBehaviorComponent_AugmentsListVisibility">();
	}
	static class UFortMobileButtonBehaviorComponent_AugmentsListVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileButtonBehaviorComponent_AugmentsListVisibility>();
	}
};
static_assert(alignof(UFortMobileButtonBehaviorComponent_AugmentsListVisibility) == 0x000008, "Wrong alignment on UFortMobileButtonBehaviorComponent_AugmentsListVisibility");
static_assert(sizeof(UFortMobileButtonBehaviorComponent_AugmentsListVisibility) == 0x000050, "Wrong size on UFortMobileButtonBehaviorComponent_AugmentsListVisibility");

// Class PlayerAugmentsUI.FortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap
// 0x0008 (0x0058 - 0x0050)
class UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap final : public UFortMobileButtonBehaviorComponent_AugmentsListVisibility
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap">();
	}
	static class UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap>();
	}
};
static_assert(alignof(UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap) == 0x000008, "Wrong alignment on UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap");
static_assert(sizeof(UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap) == 0x000058, "Wrong size on UFortMobileButtonBehaviorComponent_AugmentsListVisibility_Swap");

// Class PlayerAugmentsUI.FortPlayerAugmentHUDTimerWidget
// 0x0000 (0x0328 - 0x0328)
class UFortPlayerAugmentHUDTimerWidget : public UFortHUDElementWidget
{
public:
	void HandleAugmentGrantingTimersFinishedForMatch();
	void HandleAugmentGrantingTimersResetForMatch();
	void HandleAugmentSelectorOpenedStatusChanged(const bool bIsOpened, const bool bViewingAugmentInventory);
	void HandleCanSelectAugmentChanged(bool bCanSelectAugment);
	void HandleHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenElementTagContainer);
	void HandleNumPendingAugmentsToGrantUpdated(int8 NumPendingAugmentsToGrant);
	void HandleTimerUpdated(float TimeRemaining, float TimePercentage);
	void OnAugmentGrantingTimersFinishedForMatch();
	void OnAugmentGrantingTimersResetForMatch();
	void OnAugmentSelectorOpenedStatusChanged(const bool bIsOpened);
	void OnCanSelectAugmentChanged(bool bCanSelectAugment);
	void OnHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenElementTagContainer);
	void OnMovementModeChanged();
	void OnNumPendingAugmentsToGrantUpdated(int32 NumPendingAugmentsToGrant);
	void OnTimerUpdated(float TimeRemaining, float TimePercentage);

	bool CanEquipSelectionTool() const;
	bool CanSelectAugment() const;
	class FText FormatTime(float TotalSeconds) const;
	int32 GetPendingAugmentsToGrant() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentHUDTimerWidget">();
	}
	static class UFortPlayerAugmentHUDTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentHUDTimerWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentHUDTimerWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentHUDTimerWidget");
static_assert(sizeof(UFortPlayerAugmentHUDTimerWidget) == 0x000328, "Wrong size on UFortPlayerAugmentHUDTimerWidget");

// Class PlayerAugmentsUI.FortPlayerAugmentHUDSelectionTimerWidget
// 0x0058 (0x0380 - 0x0328)
class UFortPlayerAugmentHUDSelectionTimerWidget : public UFortPlayerAugmentHUDTimerWidget
{
public:
	bool                                          bIsAugmentReadyVisible;                            // 0x0328(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCountdownActive;                                // 0x0329(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOffline;                                        // 0x032A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32B[0x5];                                      // 0x032B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HideTimerHandle;                                   // 0x0330(0x0008)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               TimerProgressDMI;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CountdownStartTimeHF;                              // 0x0340(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       NativeAugmentTimerText;                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NativeAnimTimerTextCountdownUpdated;               // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NativeAnimProgressBarCountdownUpdated;             // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCountdownActivated();
	void SetMobileProgressTimer(float TimePercentage);
	void UpdateCountdown(float TimeRemaining);

	bool IsCountdownVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentHUDSelectionTimerWidget">();
	}
	static class UFortPlayerAugmentHUDSelectionTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentHUDSelectionTimerWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentHUDSelectionTimerWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentHUDSelectionTimerWidget");
static_assert(sizeof(UFortPlayerAugmentHUDSelectionTimerWidget) == 0x000380, "Wrong size on UFortPlayerAugmentHUDSelectionTimerWidget");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, bIsAugmentReadyVisible) == 0x000328, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::bIsAugmentReadyVisible' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, bIsCountdownActive) == 0x000329, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::bIsCountdownActive' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, bIsOffline) == 0x00032A, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::bIsOffline' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, HideTimerHandle) == 0x000330, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::HideTimerHandle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, TimerProgressDMI) == 0x000338, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::TimerProgressDMI' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, CountdownStartTimeHF) == 0x000340, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::CountdownStartTimeHF' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, NativeAugmentTimerText) == 0x000368, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::NativeAugmentTimerText' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, NativeAnimTimerTextCountdownUpdated) == 0x000370, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::NativeAnimTimerTextCountdownUpdated' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDSelectionTimerWidget, NativeAnimProgressBarCountdownUpdated) == 0x000378, "Member 'UFortPlayerAugmentHUDSelectionTimerWidget::NativeAnimProgressBarCountdownUpdated' has a wrong offset!");

// Class PlayerAugmentsUI.FortMobileActionBBE_AugmentShoot
// 0x0010 (0x0090 - 0x0080)
class UFortMobileActionBBE_AugmentShoot : public UFortMobileActionButtonBehaviorExtension
{
public:
	class UPaperSprite*                           IconOverrideSprite;                                // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           IconOverrideTag;                                   // 0x0088(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileActionBBE_AugmentShoot">();
	}
	static class UFortMobileActionBBE_AugmentShoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileActionBBE_AugmentShoot>();
	}
};
static_assert(alignof(UFortMobileActionBBE_AugmentShoot) == 0x000008, "Wrong alignment on UFortMobileActionBBE_AugmentShoot");
static_assert(sizeof(UFortMobileActionBBE_AugmentShoot) == 0x000090, "Wrong size on UFortMobileActionBBE_AugmentShoot");
static_assert(offsetof(UFortMobileActionBBE_AugmentShoot, IconOverrideSprite) == 0x000080, "Member 'UFortMobileActionBBE_AugmentShoot::IconOverrideSprite' has a wrong offset!");
static_assert(offsetof(UFortMobileActionBBE_AugmentShoot, IconOverrideTag) == 0x000088, "Member 'UFortMobileActionBBE_AugmentShoot::IconOverrideTag' has a wrong offset!");

// Class PlayerAugmentsUI.FortMobileActionButtonBehavior_RerollAugments
// 0x0008 (0x0140 - 0x0138)
class UFortMobileActionButtonBehavior_RerollAugments : public UFortMobileActionButtonBehavior
{
public:
	class UFortItemDefinition*                    RerollCurrency;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileActionButtonBehavior_RerollAugments">();
	}
	static class UFortMobileActionButtonBehavior_RerollAugments* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileActionButtonBehavior_RerollAugments>();
	}
};
static_assert(alignof(UFortMobileActionButtonBehavior_RerollAugments) == 0x000008, "Wrong alignment on UFortMobileActionButtonBehavior_RerollAugments");
static_assert(sizeof(UFortMobileActionButtonBehavior_RerollAugments) == 0x000140, "Wrong size on UFortMobileActionButtonBehavior_RerollAugments");
static_assert(offsetof(UFortMobileActionButtonBehavior_RerollAugments, RerollCurrency) == 0x000138, "Member 'UFortMobileActionButtonBehavior_RerollAugments::RerollCurrency' has a wrong offset!");

// Class PlayerAugmentsUI.FortMobilePlayerAugmentTimer
// 0x0020 (0x0370 - 0x0350)
class UFortMobilePlayerAugmentTimer : public UFortMobileHUDElement
{
public:
	TWeakObjectPtr<class UFortControllerComponent_AugmentGrantingSystem> AugmentControllerComponent;                        // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>                PlayerAugmentGranterWidgetClass;                   // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            PlayerAugmentGranterWidget;                        // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButtonBase*                      Button_PlayerAugmentTimer;                         // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BP_OnHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenElementTagContainer, bool bIsSelectionItemEquipped, bool bForceCollapse);
	void HandleHUDElementVisibilityChanged(const struct FGameplayTagContainer& HiddenElementTagContainer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobilePlayerAugmentTimer">();
	}
	static class UFortMobilePlayerAugmentTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobilePlayerAugmentTimer>();
	}
};
static_assert(alignof(UFortMobilePlayerAugmentTimer) == 0x000008, "Wrong alignment on UFortMobilePlayerAugmentTimer");
static_assert(sizeof(UFortMobilePlayerAugmentTimer) == 0x000370, "Wrong size on UFortMobilePlayerAugmentTimer");
static_assert(offsetof(UFortMobilePlayerAugmentTimer, AugmentControllerComponent) == 0x000350, "Member 'UFortMobilePlayerAugmentTimer::AugmentControllerComponent' has a wrong offset!");
static_assert(offsetof(UFortMobilePlayerAugmentTimer, PlayerAugmentGranterWidgetClass) == 0x000358, "Member 'UFortMobilePlayerAugmentTimer::PlayerAugmentGranterWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortMobilePlayerAugmentTimer, PlayerAugmentGranterWidget) == 0x000360, "Member 'UFortMobilePlayerAugmentTimer::PlayerAugmentGranterWidget' has a wrong offset!");
static_assert(offsetof(UFortMobilePlayerAugmentTimer, Button_PlayerAugmentTimer) == 0x000368, "Member 'UFortMobilePlayerAugmentTimer::Button_PlayerAugmentTimer' has a wrong offset!");

// Class PlayerAugmentsUI.FortPickupInteractOverrideComponent_Augments
// 0x0020 (0x00E0 - 0x00C0)
class UFortPickupInteractOverrideComponent_Augments : public UFortPickupInteractOverrideComponent
{
public:
	struct FGameplayTagContainer                  AllowedAugmentGameplayTags;                        // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPickupInteractOverrideComponent_Augments">();
	}
	static class UFortPickupInteractOverrideComponent_Augments* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPickupInteractOverrideComponent_Augments>();
	}
};
static_assert(alignof(UFortPickupInteractOverrideComponent_Augments) == 0x000008, "Wrong alignment on UFortPickupInteractOverrideComponent_Augments");
static_assert(sizeof(UFortPickupInteractOverrideComponent_Augments) == 0x0000E0, "Wrong size on UFortPickupInteractOverrideComponent_Augments");
static_assert(offsetof(UFortPickupInteractOverrideComponent_Augments, AllowedAugmentGameplayTags) == 0x0000C0, "Member 'UFortPickupInteractOverrideComponent_Augments::AllowedAugmentGameplayTags' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentCollectionListEntry
// 0x0010 (0x1580 - 0x1570)
class UFortPlayerAugmentCollectionListEntry final : public UAthenaCollectionListEntry
{
public:
	class UImage*                                 Image_Background;                                  // 0x1570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParamName_ItemIcon;                                // 0x1578(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParamName_IsDiscovered;                            // 0x157C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentCollectionListEntry">();
	}
	static class UFortPlayerAugmentCollectionListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentCollectionListEntry>();
	}
};
static_assert(alignof(UFortPlayerAugmentCollectionListEntry) == 0x000010, "Wrong alignment on UFortPlayerAugmentCollectionListEntry");
static_assert(sizeof(UFortPlayerAugmentCollectionListEntry) == 0x001580, "Wrong size on UFortPlayerAugmentCollectionListEntry");
static_assert(offsetof(UFortPlayerAugmentCollectionListEntry, Image_Background) == 0x001570, "Member 'UFortPlayerAugmentCollectionListEntry::Image_Background' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionListEntry, ParamName_ItemIcon) == 0x001578, "Member 'UFortPlayerAugmentCollectionListEntry::ParamName_ItemIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionListEntry, ParamName_IsDiscovered) == 0x00157C, "Member 'UFortPlayerAugmentCollectionListEntry::ParamName_IsDiscovered' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentCollectionScreen
// 0x0080 (0x06E0 - 0x0660)
class UFortPlayerAugmentCollectionScreen final : public UAthenaCollectionScreenBase
{
public:
	struct FScalableFloat                         AugmentsEnabledViaHotfix;                          // 0x0660(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UObject>> TagToImageMap;                                     // 0x0688(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_CategoryTitle;                                // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentCollectionScreen">();
	}
	static class UFortPlayerAugmentCollectionScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentCollectionScreen>();
	}
};
static_assert(alignof(UFortPlayerAugmentCollectionScreen) == 0x000008, "Wrong alignment on UFortPlayerAugmentCollectionScreen");
static_assert(sizeof(UFortPlayerAugmentCollectionScreen) == 0x0006E0, "Wrong size on UFortPlayerAugmentCollectionScreen");
static_assert(offsetof(UFortPlayerAugmentCollectionScreen, AugmentsEnabledViaHotfix) == 0x000660, "Member 'UFortPlayerAugmentCollectionScreen::AugmentsEnabledViaHotfix' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionScreen, TagToImageMap) == 0x000688, "Member 'UFortPlayerAugmentCollectionScreen::TagToImageMap' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionScreen, Text_CategoryTitle) == 0x0006D8, "Member 'UFortPlayerAugmentCollectionScreen::Text_CategoryTitle' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentCollectionScreenContainer
// 0x0000 (0x0560 - 0x0560)
class UFortPlayerAugmentCollectionScreenContainer final : public UAthenaCollectionScreenContainer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentCollectionScreenContainer">();
	}
	static class UFortPlayerAugmentCollectionScreenContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentCollectionScreenContainer>();
	}
};
static_assert(alignof(UFortPlayerAugmentCollectionScreenContainer) == 0x000008, "Wrong alignment on UFortPlayerAugmentCollectionScreenContainer");
static_assert(sizeof(UFortPlayerAugmentCollectionScreenContainer) == 0x000560, "Wrong size on UFortPlayerAugmentCollectionScreenContainer");

// Class PlayerAugmentsUI.FortPlayerAugmentCollectionScreenInfoOverlay
// 0x0020 (0x04E8 - 0x04C8)
class UFortPlayerAugmentCollectionScreenInfoOverlay final : public UAthenaCollectionScreenInfoOverlay
{
public:
	class FName                                   ParamName_Progress;                                // 0x04C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_ItemCategory;                                 // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemCategoryIndicator*             ItemCategoryIndicator;                             // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_UndiscoveredText;                          // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentCollectionScreenInfoOverlay">();
	}
	static class UFortPlayerAugmentCollectionScreenInfoOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentCollectionScreenInfoOverlay>();
	}
};
static_assert(alignof(UFortPlayerAugmentCollectionScreenInfoOverlay) == 0x000008, "Wrong alignment on UFortPlayerAugmentCollectionScreenInfoOverlay");
static_assert(sizeof(UFortPlayerAugmentCollectionScreenInfoOverlay) == 0x0004E8, "Wrong size on UFortPlayerAugmentCollectionScreenInfoOverlay");
static_assert(offsetof(UFortPlayerAugmentCollectionScreenInfoOverlay, ParamName_Progress) == 0x0004C8, "Member 'UFortPlayerAugmentCollectionScreenInfoOverlay::ParamName_Progress' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionScreenInfoOverlay, Text_ItemCategory) == 0x0004D0, "Member 'UFortPlayerAugmentCollectionScreenInfoOverlay::Text_ItemCategory' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionScreenInfoOverlay, ItemCategoryIndicator) == 0x0004D8, "Member 'UFortPlayerAugmentCollectionScreenInfoOverlay::ItemCategoryIndicator' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentCollectionScreenInfoOverlay, Overlay_UndiscoveredText) == 0x0004E0, "Member 'UFortPlayerAugmentCollectionScreenInfoOverlay::Overlay_UndiscoveredText' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentGranterWidget
// 0x0028 (0x0350 - 0x0328)
class UFortPlayerAugmentGranterWidget : public UFortHUDElementWidget
{
public:
	TArray<class UFortPlayerAugmentItemDefinition*> AvailableAugmentItemDefinitions;                   // 0x0328(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UWidget*                                Overlay_Reroll;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAugmentHighlighted(int32 HighlightedAugmentIndex);
	void HandleAugmentSelectionStarted(const int32 SelectedAugmentIndex);
	void HandleAugmentSelectorOpenedStatusChanged(const bool bIsOpened, const bool bViewingAugmentInventory);
	void HandleAugmentSelectorToolViewSwapped(const bool bViewingAugmentsInventory);
	void HandleAvailableAugmentsForGrantingUpdated(class UFortControllerComponent_AugmentGrantingSystem* GrantingComponent);
	void HandleCanSelectAugmentChanged(bool bCanSelectAugment);
	void HandleNumPendingAugmentsToGrantUpdated(int8 NumPendingAugmentsToGrant);
	void HandleRerollAugments();
	void HandleSelectedAugmentForGrant(class UFortPlayerAugmentItemDefinition* SelectedAugment);
	void HandleTimerUpdated(float TimeRemaining, float TimePercentage);
	void OnAugmentHighlighted(int32 HighlightedAugmentIndex);
	void OnAugmentScrollDownEvent();
	void OnAugmentScrollUpEvent();
	void OnAugmentSelectionStarted(const int32 SelectedAugmentIndex);
	void OnAugmentSelectorOpenedStatusChanged(const bool bIsOpened, const bool bViewingAugmentInventory);
	void OnAugmentSelectorToolViewSwapped(const bool bViewingAugmentInventory);
	void OnCanSelectAugmentChanged(bool bCanSelectAugment);
	void OnInputTypeChanged(const ECommonInputType NewInputType);
	void OnNumPendingAugmentsToGrantUpdated(int32 NumPendingAugmentsToGrant);
	void OnPopulateAvailableAugmentsHUD(const TArray<class UFortPlayerAugmentItemDefinition*>& AugmentItemDefinition);
	void OnRerollAugments();
	void OnSelectedAugmentForGrant(class UFortPlayerAugmentItemDefinition* HighlightedAugment);
	void OnTimerUpdated(float TimeRemaining, float TimePercentage);

	int32 GetPendingAugmentsToGrant() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentGranterWidget">();
	}
	static class UFortPlayerAugmentGranterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentGranterWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentGranterWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentGranterWidget");
static_assert(sizeof(UFortPlayerAugmentGranterWidget) == 0x000350, "Wrong size on UFortPlayerAugmentGranterWidget");
static_assert(offsetof(UFortPlayerAugmentGranterWidget, AvailableAugmentItemDefinitions) == 0x000328, "Member 'UFortPlayerAugmentGranterWidget::AvailableAugmentItemDefinitions' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentGranterWidget, Overlay_Reroll) == 0x000338, "Member 'UFortPlayerAugmentGranterWidget::Overlay_Reroll' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentHUDQuickbarWidget
// 0x0048 (0x0330 - 0x02E8)
class UFortPlayerAugmentHUDQuickbarWidget : public UCommonUserWidget
{
public:
	struct FGameplayTagContainer                  HiddenAugmentGameplayTags;                         // 0x02E8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         NumAugmentGrantRoundsForPlaylist;                  // 0x0308(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnAugmentsUpdated(const TArray<class UFortPlayerAugmentItemDefinition*>& ActiveAugments);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentHUDQuickbarWidget">();
	}
	static class UFortPlayerAugmentHUDQuickbarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentHUDQuickbarWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentHUDQuickbarWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentHUDQuickbarWidget");
static_assert(sizeof(UFortPlayerAugmentHUDQuickbarWidget) == 0x000330, "Wrong size on UFortPlayerAugmentHUDQuickbarWidget");
static_assert(offsetof(UFortPlayerAugmentHUDQuickbarWidget, HiddenAugmentGameplayTags) == 0x0002E8, "Member 'UFortPlayerAugmentHUDQuickbarWidget::HiddenAugmentGameplayTags' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDQuickbarWidget, NumAugmentGrantRoundsForPlaylist) == 0x000308, "Member 'UFortPlayerAugmentHUDQuickbarWidget::NumAugmentGrantRoundsForPlaylist' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentHUDRerollWidget
// 0x0050 (0x0338 - 0x02E8)
class UFortPlayerAugmentHUDRerollWidget : public UCommonUserWidget
{
public:
	class UCommonLazyImage*                       Image_CurrencyIcon;                                // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortWorldItemDefinition*               RerollCurrency;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CachedNumFreeRerolls;                              // 0x02F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RerollHoldMaterialParamName;                       // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image_ProgressBar;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_OwnedCurrency;                                // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_RerollCost;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndRerollHoldProgress();
	void HandleAugmentSelectorOpenedStatusChanged(bool bIsOpened, bool bViewingInventory);
	void HandleFreeRerollsUpdated(const int32 NewNumFreeRerolls);
	void HandleRerollAugments();
	void OnFreeRerollsUpdated(const int32 NewNumFreeRerolls);
	void OnRerollAugments();
	void OnUpdateCurrency(const int32 OwnedCurrency, const int32 RerollCost);
	void StartRerollHoldProgress(const float duration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentHUDRerollWidget">();
	}
	static class UFortPlayerAugmentHUDRerollWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentHUDRerollWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentHUDRerollWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentHUDRerollWidget");
static_assert(sizeof(UFortPlayerAugmentHUDRerollWidget) == 0x000338, "Wrong size on UFortPlayerAugmentHUDRerollWidget");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, Image_CurrencyIcon) == 0x0002E8, "Member 'UFortPlayerAugmentHUDRerollWidget::Image_CurrencyIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, RerollCurrency) == 0x0002F0, "Member 'UFortPlayerAugmentHUDRerollWidget::RerollCurrency' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, CachedNumFreeRerolls) == 0x0002F8, "Member 'UFortPlayerAugmentHUDRerollWidget::CachedNumFreeRerolls' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, RerollHoldMaterialParamName) == 0x0002FC, "Member 'UFortPlayerAugmentHUDRerollWidget::RerollHoldMaterialParamName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, Image_ProgressBar) == 0x000308, "Member 'UFortPlayerAugmentHUDRerollWidget::Image_ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, Text_OwnedCurrency) == 0x000310, "Member 'UFortPlayerAugmentHUDRerollWidget::Text_OwnedCurrency' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentHUDRerollWidget, Text_RerollCost) == 0x000318, "Member 'UFortPlayerAugmentHUDRerollWidget::Text_RerollCost' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentInfoEntryWidget
// 0x0068 (0x0350 - 0x02E8)
class UFortPlayerAugmentInfoEntryWidget : public UCommonUserWidget
{
public:
	class FText                                   RarityTextFormat;                                  // 0x02E8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_AugmentName;                                  // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_AugmentRarity;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_AugmentCategory;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemCategoryIndicator*             ItemCategoryIndicator;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         Image_CategoryAsImage;                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_AugmentDescription;                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSocialAvatarIcon*                  Icon_LenderAvatarIcon;                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Overlay_LenderAvatarIcon;                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         Image_LenderSquadColor;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_BorrowingText;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnItemNewOrBorrowedSet(const bool bIsNew, const bool bIsBorrowed);
	void OnItemPinColorSet(const struct FLinearColor& PinColor);
	void OnItemRaritySet(const EFortRarity Rarity, const struct FFortRarityItemData& RarityItemData);
	void UpdateAugment(const class UFortPlayerAugmentItemDefinition* AugmentItemDefinition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInfoEntryWidget">();
	}
	static class UFortPlayerAugmentInfoEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInfoEntryWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentInfoEntryWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentInfoEntryWidget");
static_assert(sizeof(UFortPlayerAugmentInfoEntryWidget) == 0x000350, "Wrong size on UFortPlayerAugmentInfoEntryWidget");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, RarityTextFormat) == 0x0002E8, "Member 'UFortPlayerAugmentInfoEntryWidget::RarityTextFormat' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Text_AugmentName) == 0x000300, "Member 'UFortPlayerAugmentInfoEntryWidget::Text_AugmentName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Text_AugmentRarity) == 0x000308, "Member 'UFortPlayerAugmentInfoEntryWidget::Text_AugmentRarity' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Text_AugmentCategory) == 0x000310, "Member 'UFortPlayerAugmentInfoEntryWidget::Text_AugmentCategory' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, ItemCategoryIndicator) == 0x000318, "Member 'UFortPlayerAugmentInfoEntryWidget::ItemCategoryIndicator' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Image_CategoryAsImage) == 0x000320, "Member 'UFortPlayerAugmentInfoEntryWidget::Image_CategoryAsImage' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Text_AugmentDescription) == 0x000328, "Member 'UFortPlayerAugmentInfoEntryWidget::Text_AugmentDescription' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Icon_LenderAvatarIcon) == 0x000330, "Member 'UFortPlayerAugmentInfoEntryWidget::Icon_LenderAvatarIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Overlay_LenderAvatarIcon) == 0x000338, "Member 'UFortPlayerAugmentInfoEntryWidget::Overlay_LenderAvatarIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Image_LenderSquadColor) == 0x000340, "Member 'UFortPlayerAugmentInfoEntryWidget::Image_LenderSquadColor' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInfoEntryWidget, Text_BorrowingText) == 0x000348, "Member 'UFortPlayerAugmentInfoEntryWidget::Text_BorrowingText' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentInGameCarriedWidget
// 0x0000 (0x0328 - 0x0328)
class UFortPlayerAugmentInGameCarriedWidget final : public UFortHUDElementWidget
{
public:
	void HandleExitBus(class AFortPlayerControllerZone* FortPCZone);
	void OnShowInitialAugment(const class UFortPlayerAugmentItemDefinition* PlayerAugmentItemDefinition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInGameCarriedWidget">();
	}
	static class UFortPlayerAugmentInGameCarriedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInGameCarriedWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentInGameCarriedWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentInGameCarriedWidget");
static_assert(sizeof(UFortPlayerAugmentInGameCarriedWidget) == 0x000328, "Wrong size on UFortPlayerAugmentInGameCarriedWidget");

// Class PlayerAugmentsUI.FortPlayerAugmentInventoryExtensionRow
// 0x0050 (0x03A0 - 0x0350)
class UFortPlayerAugmentInventoryExtensionRow final : public UAthenaInventoryGroupBase
{
public:
	struct FScalableFloat                         AugmentsEnabledViaHotfix;                          // 0x0350(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockedGameplayTags;                               // 0x0378(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAugmentGrantingTimersFinishedForMatch();
	void HandleAugmentGrantingTimersResetForMatch();
	void HandleNumPendingAugmentsToGrantUpdated(int8 NumPendingAugmentsToGrant);
	void HandleTimerUpdated(float TimeRemaining, float TimePercentage);
	void OnAugmentGrantingTimersFinishedForMatch();
	void OnAugmentGrantingTimersResetForMatch();
	void OnNumPendingAugmentsToGrantUpdated(int32 NumPendingAugmentsToGrant);
	void OnTimerUpdated(float TimeRemaining, float TimePercentage);
	void RequestOpenSelector();

	int32 GetPendingAugmentsToGrant() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInventoryExtensionRow">();
	}
	static class UFortPlayerAugmentInventoryExtensionRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInventoryExtensionRow>();
	}
};
static_assert(alignof(UFortPlayerAugmentInventoryExtensionRow) == 0x000010, "Wrong alignment on UFortPlayerAugmentInventoryExtensionRow");
static_assert(sizeof(UFortPlayerAugmentInventoryExtensionRow) == 0x0003A0, "Wrong size on UFortPlayerAugmentInventoryExtensionRow");
static_assert(offsetof(UFortPlayerAugmentInventoryExtensionRow, AugmentsEnabledViaHotfix) == 0x000350, "Member 'UFortPlayerAugmentInventoryExtensionRow::AugmentsEnabledViaHotfix' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryExtensionRow, BlockedGameplayTags) == 0x000378, "Member 'UFortPlayerAugmentInventoryExtensionRow::BlockedGameplayTags' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentInventoryInfoWidget
// 0x0060 (0x0460 - 0x0400)
class UFortPlayerAugmentInventoryInfoWidget final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RarityTextFormat;                                  // 0x0408(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ItemName;                                     // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ItemRarity;                                   // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ItemCategory;                                 // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemCategoryIndicator*             ItemCategoryIndicator;                             // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ItemDescription;                              // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSocialAvatarIcon*                  Icon_LenderAvatarIcon;                             // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         Image_LenderSquadColor;                            // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_BorrowingText;                                // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnItemNewOrBorrowedSet(const bool bIsNew, const bool bIsBorrowed);
	void OnItemRaritySet(const EFortRarity Rarity, const struct FFortRarityItemData& RarityItemData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInventoryInfoWidget">();
	}
	static class UFortPlayerAugmentInventoryInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInventoryInfoWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentInventoryInfoWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentInventoryInfoWidget");
static_assert(sizeof(UFortPlayerAugmentInventoryInfoWidget) == 0x000460, "Wrong size on UFortPlayerAugmentInventoryInfoWidget");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, RarityTextFormat) == 0x000408, "Member 'UFortPlayerAugmentInventoryInfoWidget::RarityTextFormat' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Text_ItemName) == 0x000420, "Member 'UFortPlayerAugmentInventoryInfoWidget::Text_ItemName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Text_ItemRarity) == 0x000428, "Member 'UFortPlayerAugmentInventoryInfoWidget::Text_ItemRarity' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Text_ItemCategory) == 0x000430, "Member 'UFortPlayerAugmentInventoryInfoWidget::Text_ItemCategory' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, ItemCategoryIndicator) == 0x000438, "Member 'UFortPlayerAugmentInventoryInfoWidget::ItemCategoryIndicator' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Text_ItemDescription) == 0x000440, "Member 'UFortPlayerAugmentInventoryInfoWidget::Text_ItemDescription' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Icon_LenderAvatarIcon) == 0x000448, "Member 'UFortPlayerAugmentInventoryInfoWidget::Icon_LenderAvatarIcon' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Image_LenderSquadColor) == 0x000450, "Member 'UFortPlayerAugmentInventoryInfoWidget::Image_LenderSquadColor' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryInfoWidget, Text_BorrowingText) == 0x000458, "Member 'UFortPlayerAugmentInventoryInfoWidget::Text_BorrowingText' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentInventoryListEntry
// 0x0010 (0x14A0 - 0x1490)
class UFortPlayerAugmentInventoryListEntry final : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x10];                                    // 0x1490(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAugmentListItemSet(const class UFortItemDefinition* ItemDefinition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInventoryListEntry">();
	}
	static class UFortPlayerAugmentInventoryListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInventoryListEntry>();
	}
};
static_assert(alignof(UFortPlayerAugmentInventoryListEntry) == 0x000010, "Wrong alignment on UFortPlayerAugmentInventoryListEntry");
static_assert(sizeof(UFortPlayerAugmentInventoryListEntry) == 0x0014A0, "Wrong size on UFortPlayerAugmentInventoryListEntry");

// Class PlayerAugmentsUI.FortPlayerAugmentInventoryTab
// 0x0180 (0x0580 - 0x0400)
class UFortPlayerAugmentInventoryTab final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         AugmentsEnabledViaHotfix;                          // 0x0408(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  HiddenAugmentGameplayTags;                         // 0x0430(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   TabNameID;                                         // 0x0450(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_454[0xC];                                      // 0x0454(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0460(0x0110)(Edit, NativeAccessSpecifierPrivate)
	class UFortPlayerAugmentInventoryInfoWidget*  AugmentInfo;                                       // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_Augments;                                 // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleAugmentGrantingTimersFinishedForMatch();
	void HandleAugmentGrantingTimersResetForMatch();
	void HandleNumPendingAugmentsToGrantUpdated(int8 NumPendingAugmentsToGrant);
	void HandleTimerUpdated(float TimeRemaining, float TimePercentage);
	void OnAugmentGrantingTimersFinishedForMatch();
	void OnAugmentGrantingTimersResetForMatch();
	void OnAugmentListUpdated(const int32 NumAugments);
	void OnNumPendingAugmentsToGrantUpdated(int32 NumPendingAugmentsToGrant);
	void OnTimerUpdated(float TimeRemaining, float TimePercentage);
	void RequestOpenSelector();

	int32 GetPendingAugmentsToGrant() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInventoryTab">();
	}
	static class UFortPlayerAugmentInventoryTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInventoryTab>();
	}
};
static_assert(alignof(UFortPlayerAugmentInventoryTab) == 0x000010, "Wrong alignment on UFortPlayerAugmentInventoryTab");
static_assert(sizeof(UFortPlayerAugmentInventoryTab) == 0x000580, "Wrong size on UFortPlayerAugmentInventoryTab");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, AugmentsEnabledViaHotfix) == 0x000408, "Member 'UFortPlayerAugmentInventoryTab::AugmentsEnabledViaHotfix' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, HiddenAugmentGameplayTags) == 0x000430, "Member 'UFortPlayerAugmentInventoryTab::HiddenAugmentGameplayTags' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, TabNameID) == 0x000450, "Member 'UFortPlayerAugmentInventoryTab::TabNameID' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, TabButtonLabelInfo) == 0x000460, "Member 'UFortPlayerAugmentInventoryTab::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, AugmentInfo) == 0x000570, "Member 'UFortPlayerAugmentInventoryTab::AugmentInfo' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentInventoryTab, ListView_Augments) == 0x000578, "Member 'UFortPlayerAugmentInventoryTab::ListView_Augments' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentLobbyWidget
// 0x0000 (0x02E8 - 0x02E8)
class UFortPlayerAugmentLobbyWidget final : public UCommonUserWidget
{
public:
	void OnShowInitialAugment(const class UFortPlayerAugmentItemDefinition* CarriedAugment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentLobbyWidget">();
	}
	static class UFortPlayerAugmentLobbyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentLobbyWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentLobbyWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentLobbyWidget");
static_assert(sizeof(UFortPlayerAugmentLobbyWidget) == 0x0002E8, "Wrong size on UFortPlayerAugmentLobbyWidget");

// Class PlayerAugmentsUI.FortPlayerAugmentPostMatchUnlocksWidget
// 0x0028 (0x0350 - 0x0328)
class UFortPlayerAugmentPostMatchUnlocksWidget final : public UFortHUDElementWidget
{
public:
	struct FScalableFloat                         AugmentsEnabledViaHotfix;                          // 0x0328(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnShowUnlockedAugments(const TArray<class UFortPlayerAugmentItemDefinition*>& UnlockedAugments);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentPostMatchUnlocksWidget">();
	}
	static class UFortPlayerAugmentPostMatchUnlocksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentPostMatchUnlocksWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentPostMatchUnlocksWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentPostMatchUnlocksWidget");
static_assert(sizeof(UFortPlayerAugmentPostMatchUnlocksWidget) == 0x000350, "Wrong size on UFortPlayerAugmentPostMatchUnlocksWidget");
static_assert(offsetof(UFortPlayerAugmentPostMatchUnlocksWidget, AugmentsEnabledViaHotfix) == 0x000328, "Member 'UFortPlayerAugmentPostMatchUnlocksWidget::AugmentsEnabledViaHotfix' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentSpecialAcquiredNotificationWidget
// 0x0098 (0x03C0 - 0x0328)
class alignas(0x10) UFortPlayerAugmentSpecialAcquiredNotificationWidget final : public UFortHUDElementWidget
{
public:
	uint8                                         Pad_328[0x68];                                     // 0x0328(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPrioritizedWidgetData             PrioritizationData;                                // 0x0390(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TargetGameplayTags;                                // 0x0398(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseWidget();
	void OnEventAdded();
	void OnStompedByOtherWidget();
	void OpenWidget(const class UFortPlayerAugmentItemDefinition* ItemDef);

	class FText ConstructEventDescription(const class UFortPlayerAugmentItemDefinition* ItemDef) const;
	bool HasMoreAugmentEvents() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentSpecialAcquiredNotificationWidget">();
	}
	static class UFortPlayerAugmentSpecialAcquiredNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentSpecialAcquiredNotificationWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentSpecialAcquiredNotificationWidget) == 0x000010, "Wrong alignment on UFortPlayerAugmentSpecialAcquiredNotificationWidget");
static_assert(sizeof(UFortPlayerAugmentSpecialAcquiredNotificationWidget) == 0x0003C0, "Wrong size on UFortPlayerAugmentSpecialAcquiredNotificationWidget");
static_assert(offsetof(UFortPlayerAugmentSpecialAcquiredNotificationWidget, PrioritizationData) == 0x000390, "Member 'UFortPlayerAugmentSpecialAcquiredNotificationWidget::PrioritizationData' has a wrong offset!");
static_assert(offsetof(UFortPlayerAugmentSpecialAcquiredNotificationWidget, TargetGameplayTags) == 0x000398, "Member 'UFortPlayerAugmentSpecialAcquiredNotificationWidget::TargetGameplayTags' has a wrong offset!");

// Class PlayerAugmentsUI.FortPlayerAugmentInfoTouchWidget
// 0x0008 (0x0390 - 0x0388)
class UFortPlayerAugmentInfoTouchWidget final : public UFortTouchUserWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAugmentIndexInList(const int32 InAugmentIndexInList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAugmentInfoTouchWidget">();
	}
	static class UFortPlayerAugmentInfoTouchWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAugmentInfoTouchWidget>();
	}
};
static_assert(alignof(UFortPlayerAugmentInfoTouchWidget) == 0x000008, "Wrong alignment on UFortPlayerAugmentInfoTouchWidget");
static_assert(sizeof(UFortPlayerAugmentInfoTouchWidget) == 0x000390, "Wrong size on UFortPlayerAugmentInfoTouchWidget");

}

