#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaChallengeListEntry_LockedQuest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaChallengeListEntry_LockedQuest.AthenaChallengeListEntry_LockedQuest_C
// 0x0068 (0x0528 - 0x04C0)
class UAthenaChallengeListEntry_LockedQuest_C final : public UAthenaChallengeListEntry_LockedQuest
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Select;                                            // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hovered;                                           // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_ChallengesUntilUnlock;                       // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Disabled;                                    // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Fade;                                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_TimeUntilUnlock;                             // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageContainer;                                    // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsHovered;                                        // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      SpinningClock;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Lock;                                              // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSelected;                                       // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HoverSound;                                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnChallengeInfoSet(bool bDisabled);
	void BP_OnEntryReleased();
	void BP_OnItemSelectionChanged(bool bIsSelected_0);
	void ExecuteUbergraph_AthenaChallengeListEntry_LockedQuest(int32 EntryPoint);
	void GetFinalCategoryName(class FText* CategoryName);
	void GetFinalDisplayIcon(class UMaterialInstance** DisplayIcon);
	void GetFinalDisplayText(const class FText& DefaultText, class FText* DisplayText);
	void GetFormattedTime(struct FTimespan& TimeRemaining, class FText* OutputString);
	void OnInitDisplayText(const ELockedWidgetUnlockType& InUnlockType);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaChallengeListEntry_LockedQuest_C">();
	}
	static class UAthenaChallengeListEntry_LockedQuest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaChallengeListEntry_LockedQuest_C>();
	}
};
static_assert(alignof(UAthenaChallengeListEntry_LockedQuest_C) == 0x000008, "Wrong alignment on UAthenaChallengeListEntry_LockedQuest_C");
static_assert(sizeof(UAthenaChallengeListEntry_LockedQuest_C) == 0x000528, "Wrong size on UAthenaChallengeListEntry_LockedQuest_C");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, UberGraphFrame) == 0x0004C0, "Member 'UAthenaChallengeListEntry_LockedQuest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Select) == 0x0004C8, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Select' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Hovered) == 0x0004D0, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Hovered' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Image_ChallengesUntilUnlock) == 0x0004D8, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Image_ChallengesUntilUnlock' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Image_Disabled) == 0x0004E0, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Image_Disabled' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Image_Fade) == 0x0004E8, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Image_Fade' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Image_TimeUntilUnlock) == 0x0004F0, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Image_TimeUntilUnlock' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, ImageContainer) == 0x0004F8, "Member 'UAthenaChallengeListEntry_LockedQuest_C::ImageContainer' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, bIsHovered) == 0x000500, "Member 'UAthenaChallengeListEntry_LockedQuest_C::bIsHovered' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, SpinningClock) == 0x000508, "Member 'UAthenaChallengeListEntry_LockedQuest_C::SpinningClock' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, Lock) == 0x000510, "Member 'UAthenaChallengeListEntry_LockedQuest_C::Lock' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, bIsSelected) == 0x000518, "Member 'UAthenaChallengeListEntry_LockedQuest_C::bIsSelected' has a wrong offset!");
static_assert(offsetof(UAthenaChallengeListEntry_LockedQuest_C, HoverSound) == 0x000520, "Member 'UAthenaChallengeListEntry_LockedQuest_C::HoverSound' has a wrong offset!");

}

