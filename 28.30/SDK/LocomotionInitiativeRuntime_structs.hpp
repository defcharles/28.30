#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LocomotionInitiativeRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LocomotionInitiativeRuntime.EFortMotionMatchingLocomotionState
// NumValues: 0x0005
enum class EFortMotionMatchingLocomotionState : uint8
{
	Idle                                     = 0,
	Start                                    = 1,
	Loop                                     = 2,
	Pivot                                    = 3,
	Stop                                     = 4,
};

// ScriptStruct LocomotionInitiativeRuntime.FortLocomotionLayerMaskDataSet
// 0x0020 (0x0020 - 0x0000)
struct FFortLocomotionLayerMaskDataSet final
{
public:
	float                                         MaskingHeadTorsoAlpha;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingLeftArmAlpha;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingRightArmAlpha;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingWeaponAlpha;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingHeadTorsoAlpha;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingLeftArmAlpha;                                // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingRightArmAlpha;                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingWeaponAlpha;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLocomotionLayerMaskDataSet) == 0x000004, "Wrong alignment on FFortLocomotionLayerMaskDataSet");
static_assert(sizeof(FFortLocomotionLayerMaskDataSet) == 0x000020, "Wrong size on FFortLocomotionLayerMaskDataSet");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MaskingHeadTorsoAlpha) == 0x000000, "Member 'FFortLocomotionLayerMaskDataSet::MaskingHeadTorsoAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MaskingLeftArmAlpha) == 0x000004, "Member 'FFortLocomotionLayerMaskDataSet::MaskingLeftArmAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MaskingRightArmAlpha) == 0x000008, "Member 'FFortLocomotionLayerMaskDataSet::MaskingRightArmAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MaskingWeaponAlpha) == 0x00000C, "Member 'FFortLocomotionLayerMaskDataSet::MaskingWeaponAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MutingHeadTorsoAlpha) == 0x000010, "Member 'FFortLocomotionLayerMaskDataSet::MutingHeadTorsoAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MutingLeftArmAlpha) == 0x000014, "Member 'FFortLocomotionLayerMaskDataSet::MutingLeftArmAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MutingRightArmAlpha) == 0x000018, "Member 'FFortLocomotionLayerMaskDataSet::MutingRightArmAlpha' has a wrong offset!");
static_assert(offsetof(FFortLocomotionLayerMaskDataSet, MutingWeaponAlpha) == 0x00001C, "Member 'FFortLocomotionLayerMaskDataSet::MutingWeaponAlpha' has a wrong offset!");

// ScriptStruct LocomotionInitiativeRuntime.MotionMatchingLODConfig
// 0x0038 (0x0038 - 0x0000)
struct FMotionMatchingLODConfig final
{
public:
	class UProxyTable*                            MotionDatabaseProxyTable;                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandIdleLoop;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchIdleLoop;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  StandIdleBreak;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  CrouchIdleBreak;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionMatchingLODConfig) == 0x000008, "Wrong alignment on FMotionMatchingLODConfig");
static_assert(sizeof(FMotionMatchingLODConfig) == 0x000038, "Wrong size on FMotionMatchingLODConfig");
static_assert(offsetof(FMotionMatchingLODConfig, MotionDatabaseProxyTable) == 0x000000, "Member 'FMotionMatchingLODConfig::MotionDatabaseProxyTable' has a wrong offset!");
static_assert(offsetof(FMotionMatchingLODConfig, StandIdleLoop) == 0x000008, "Member 'FMotionMatchingLODConfig::StandIdleLoop' has a wrong offset!");
static_assert(offsetof(FMotionMatchingLODConfig, CrouchIdleLoop) == 0x000010, "Member 'FMotionMatchingLODConfig::CrouchIdleLoop' has a wrong offset!");
static_assert(offsetof(FMotionMatchingLODConfig, StandIdleBreak) == 0x000018, "Member 'FMotionMatchingLODConfig::StandIdleBreak' has a wrong offset!");
static_assert(offsetof(FMotionMatchingLODConfig, CrouchIdleBreak) == 0x000028, "Member 'FMotionMatchingLODConfig::CrouchIdleBreak' has a wrong offset!");

// ScriptStruct LocomotionInitiativeRuntime.MotionMatchingBlendInfo
// 0x0008 (0x0008 - 0x0000)
struct FMotionMatchingBlendInfo final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlendProfile;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionMatchingBlendInfo) == 0x000004, "Wrong alignment on FMotionMatchingBlendInfo");
static_assert(sizeof(FMotionMatchingBlendInfo) == 0x000008, "Wrong size on FMotionMatchingBlendInfo");
static_assert(offsetof(FMotionMatchingBlendInfo, BlendTime) == 0x000000, "Member 'FMotionMatchingBlendInfo::BlendTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingBlendInfo, BlendProfile) == 0x000004, "Member 'FMotionMatchingBlendInfo::BlendProfile' has a wrong offset!");

// ScriptStruct LocomotionInitiativeRuntime.FortMotionMatchingAngleSpamTracker
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FFortMotionMatchingAngleSpamTracker final
{
public:
	float                                         DirectionChangeAngleThresholdDegrees;              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SpamAngleChangeCounterThreshold;                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpamDetectionWindowLengthSeconds;                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpamDetectionMaxConeAngleDegrees;                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxSamplesPerSecond;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x34];                                      // 0x0014(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMotionMatchingAngleSpamTracker) == 0x000008, "Wrong alignment on FFortMotionMatchingAngleSpamTracker");
static_assert(sizeof(FFortMotionMatchingAngleSpamTracker) == 0x000048, "Wrong size on FFortMotionMatchingAngleSpamTracker");
static_assert(offsetof(FFortMotionMatchingAngleSpamTracker, DirectionChangeAngleThresholdDegrees) == 0x000000, "Member 'FFortMotionMatchingAngleSpamTracker::DirectionChangeAngleThresholdDegrees' has a wrong offset!");
static_assert(offsetof(FFortMotionMatchingAngleSpamTracker, SpamAngleChangeCounterThreshold) == 0x000004, "Member 'FFortMotionMatchingAngleSpamTracker::SpamAngleChangeCounterThreshold' has a wrong offset!");
static_assert(offsetof(FFortMotionMatchingAngleSpamTracker, SpamDetectionWindowLengthSeconds) == 0x000008, "Member 'FFortMotionMatchingAngleSpamTracker::SpamDetectionWindowLengthSeconds' has a wrong offset!");
static_assert(offsetof(FFortMotionMatchingAngleSpamTracker, SpamDetectionMaxConeAngleDegrees) == 0x00000C, "Member 'FFortMotionMatchingAngleSpamTracker::SpamDetectionMaxConeAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortMotionMatchingAngleSpamTracker, MaxSamplesPerSecond) == 0x000010, "Member 'FFortMotionMatchingAngleSpamTracker::MaxSamplesPerSecond' has a wrong offset!");

// ScriptStruct LocomotionInitiativeRuntime.LocomotionInitiativeScriptedPlayerInputEntry
// 0x000C (0x000C - 0x0000)
struct FLocomotionInitiativeScriptedPlayerInputEntry final
{
public:
	float                                         ForwardInput;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightInput;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationInSeconds;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocomotionInitiativeScriptedPlayerInputEntry) == 0x000004, "Wrong alignment on FLocomotionInitiativeScriptedPlayerInputEntry");
static_assert(sizeof(FLocomotionInitiativeScriptedPlayerInputEntry) == 0x00000C, "Wrong size on FLocomotionInitiativeScriptedPlayerInputEntry");
static_assert(offsetof(FLocomotionInitiativeScriptedPlayerInputEntry, ForwardInput) == 0x000000, "Member 'FLocomotionInitiativeScriptedPlayerInputEntry::ForwardInput' has a wrong offset!");
static_assert(offsetof(FLocomotionInitiativeScriptedPlayerInputEntry, RightInput) == 0x000004, "Member 'FLocomotionInitiativeScriptedPlayerInputEntry::RightInput' has a wrong offset!");
static_assert(offsetof(FLocomotionInitiativeScriptedPlayerInputEntry, DurationInSeconds) == 0x000008, "Member 'FLocomotionInitiativeScriptedPlayerInputEntry::DurationInSeconds' has a wrong offset!");

// ScriptStruct LocomotionInitiativeRuntime.LocomotionInitiativeRecordedInputEntry
// 0x0038 (0x0038 - 0x0000)
struct FLocomotionInitiativeRecordedInputEntry final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocomotionInitiativeRecordedInputEntry) == 0x000008, "Wrong alignment on FLocomotionInitiativeRecordedInputEntry");
static_assert(sizeof(FLocomotionInitiativeRecordedInputEntry) == 0x000038, "Wrong size on FLocomotionInitiativeRecordedInputEntry");
static_assert(offsetof(FLocomotionInitiativeRecordedInputEntry, InputVector) == 0x000000, "Member 'FLocomotionInitiativeRecordedInputEntry::InputVector' has a wrong offset!");
static_assert(offsetof(FLocomotionInitiativeRecordedInputEntry, ControlRotation) == 0x000018, "Member 'FLocomotionInitiativeRecordedInputEntry::ControlRotation' has a wrong offset!");
static_assert(offsetof(FLocomotionInitiativeRecordedInputEntry, Timestamp) == 0x000030, "Member 'FLocomotionInitiativeRecordedInputEntry::Timestamp' has a wrong offset!");

}

