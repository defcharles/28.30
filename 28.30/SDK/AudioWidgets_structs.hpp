#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWidgets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum AudioWidgets.EAudioPanelLayoutType
// NumValues: 0x0002
enum class EAudioPanelLayoutType : uint8
{
	Basic                                    = 0,
	Advanced                                 = 1,
};

// Enum AudioWidgets.EYAxisLabelsUnit
// NumValues: 0x0002
enum class EYAxisLabelsUnit : uint8
{
	Linear                                   = 0,
	Db                                       = 1,
};

// Enum AudioWidgets.EXAxisLabelsUnit
// NumValues: 0x0002
enum class EXAxisLabelsUnit : uint8
{
	Samples                                  = 0,
	Seconds                                  = 1,
};

// Enum AudioWidgets.EAudioOscilloscopeTriggerMode
// NumValues: 0x0003
enum class EAudioOscilloscopeTriggerMode : uint8
{
	None                                     = 0,
	Rising                                   = 1,
	Falling                                  = 2,
};

// Enum AudioWidgets.EAudioRadialSliderLayout
// NumValues: 0x0003
enum class EAudioRadialSliderLayout : uint8
{
	Layout_LabelTop                          = 0,
	Layout_LabelCenter                       = 1,
	Layout_LabelBottom                       = 2,
};

// ScriptStruct AudioWidgets.MeterChannelInfo
// 0x000C (0x000C - 0x0000)
struct FMeterChannelInfo final
{
public:
	float                                         MeterValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakValue;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClippingValue;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeterChannelInfo) == 0x000004, "Wrong alignment on FMeterChannelInfo");
static_assert(sizeof(FMeterChannelInfo) == 0x00000C, "Wrong size on FMeterChannelInfo");
static_assert(offsetof(FMeterChannelInfo, MeterValue) == 0x000000, "Member 'FMeterChannelInfo::MeterValue' has a wrong offset!");
static_assert(offsetof(FMeterChannelInfo, PeakValue) == 0x000004, "Member 'FMeterChannelInfo::PeakValue' has a wrong offset!");
static_assert(offsetof(FMeterChannelInfo, ClippingValue) == 0x000008, "Member 'FMeterChannelInfo::ClippingValue' has a wrong offset!");

// ScriptStruct AudioWidgets.TriggerThresholdLineStyle
// 0x0010 (0x0018 - 0x0008)
struct FTriggerThresholdLineStyle final : public FSlateWidgetStyle
{
public:
	struct FLinearColor                           LineColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerThresholdLineStyle) == 0x000008, "Wrong alignment on FTriggerThresholdLineStyle");
static_assert(sizeof(FTriggerThresholdLineStyle) == 0x000018, "Wrong size on FTriggerThresholdLineStyle");
static_assert(offsetof(FTriggerThresholdLineStyle, LineColor) == 0x000008, "Member 'FTriggerThresholdLineStyle::LineColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMeterStyle
// 0x0478 (0x0480 - 0x0008)
struct FAudioMeterStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MeterValueImage;                                   // 0x0010(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImage;                                   // 0x00D0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterBackgroundImage;                              // 0x0190(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterValueBackgroundImage;                         // 0x0250(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterPeakImage;                                    // 0x0310(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              MeterSize;                                         // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MeterPadding;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeterValuePadding;                                 // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakValueWidth;                                    // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ValueRangeDb;                                      // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowScale;                                        // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleSide;                                        // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40A[0x2];                                      // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleHashOffset;                                   // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashWidth;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashHeight;                                   // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecibelsPerHash;                                   // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0420(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioMeterStyle) == 0x000010, "Wrong alignment on FAudioMeterStyle");
static_assert(sizeof(FAudioMeterStyle) == 0x000480, "Wrong size on FAudioMeterStyle");
static_assert(offsetof(FAudioMeterStyle, MeterValueImage) == 0x000010, "Member 'FAudioMeterStyle::MeterValueImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, BackgroundImage) == 0x0000D0, "Member 'FAudioMeterStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterBackgroundImage) == 0x000190, "Member 'FAudioMeterStyle::MeterBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterValueBackgroundImage) == 0x000250, "Member 'FAudioMeterStyle::MeterValueBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterPeakImage) == 0x000310, "Member 'FAudioMeterStyle::MeterPeakImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterSize) == 0x0003D0, "Member 'FAudioMeterStyle::MeterSize' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterPadding) == 0x0003E0, "Member 'FAudioMeterStyle::MeterPadding' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterValuePadding) == 0x0003F0, "Member 'FAudioMeterStyle::MeterValuePadding' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, PeakValueWidth) == 0x0003F4, "Member 'FAudioMeterStyle::PeakValueWidth' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ValueRangeDb) == 0x0003F8, "Member 'FAudioMeterStyle::ValueRangeDb' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, bShowScale) == 0x000408, "Member 'FAudioMeterStyle::bShowScale' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, bScaleSide) == 0x000409, "Member 'FAudioMeterStyle::bScaleSide' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashOffset) == 0x00040C, "Member 'FAudioMeterStyle::ScaleHashOffset' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashWidth) == 0x000410, "Member 'FAudioMeterStyle::ScaleHashWidth' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashHeight) == 0x000414, "Member 'FAudioMeterStyle::ScaleHashHeight' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, DecibelsPerHash) == 0x000418, "Member 'FAudioMeterStyle::DecibelsPerHash' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, Font) == 0x000420, "Member 'FAudioMeterStyle::Font' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceValueGridOverlayStyle
// 0x0090 (0x0098 - 0x0008)
struct FSampledSequenceValueGridOverlayStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            GridColor;                                         // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         GridThickness;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            LabelTextColor;                                    // 0x0020(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         LabelTextFont;                                     // 0x0038(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSampledSequenceValueGridOverlayStyle) == 0x000008, "Wrong alignment on FSampledSequenceValueGridOverlayStyle");
static_assert(sizeof(FSampledSequenceValueGridOverlayStyle) == 0x000098, "Wrong size on FSampledSequenceValueGridOverlayStyle");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, GridColor) == 0x000008, "Member 'FSampledSequenceValueGridOverlayStyle::GridColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, GridThickness) == 0x00001C, "Member 'FSampledSequenceValueGridOverlayStyle::GridThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, LabelTextColor) == 0x000020, "Member 'FSampledSequenceValueGridOverlayStyle::LabelTextColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, LabelTextFont) == 0x000038, "Member 'FSampledSequenceValueGridOverlayStyle::LabelTextFont' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, DesiredWidth) == 0x000090, "Member 'FSampledSequenceValueGridOverlayStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, DesiredHeight) == 0x000094, "Member 'FSampledSequenceValueGridOverlayStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceVectorViewerStyle
// 0x00F8 (0x0100 - 0x0008)
struct FSampledSequenceVectorViewerStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            BackgroundColor;                                   // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0020(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSampledSequenceVectorViewerStyle) == 0x000010, "Wrong alignment on FSampledSequenceVectorViewerStyle");
static_assert(sizeof(FSampledSequenceVectorViewerStyle) == 0x000100, "Wrong size on FSampledSequenceVectorViewerStyle");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, BackgroundColor) == 0x000008, "Member 'FSampledSequenceVectorViewerStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, BackgroundBrush) == 0x000020, "Member 'FSampledSequenceVectorViewerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, LineColor) == 0x0000E0, "Member 'FSampledSequenceVectorViewerStyle::LineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, LineThickness) == 0x0000F0, "Member 'FSampledSequenceVectorViewerStyle::LineThickness' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioVectorscopePanelStyle
// 0x0198 (0x01A0 - 0x0008)
struct FAudioVectorscopePanelStyle final : public FSlateWidgetStyle
{
public:
	struct FSampledSequenceValueGridOverlayStyle  ValueGridStyle;                                    // 0x0008(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSampledSequenceVectorViewerStyle      VectorViewerStyle;                                 // 0x00A0(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioVectorscopePanelStyle) == 0x000010, "Wrong alignment on FAudioVectorscopePanelStyle");
static_assert(sizeof(FAudioVectorscopePanelStyle) == 0x0001A0, "Wrong size on FAudioVectorscopePanelStyle");
static_assert(offsetof(FAudioVectorscopePanelStyle, ValueGridStyle) == 0x000008, "Member 'FAudioVectorscopePanelStyle::ValueGridStyle' has a wrong offset!");
static_assert(offsetof(FAudioVectorscopePanelStyle, VectorViewerStyle) == 0x0000A0, "Member 'FAudioVectorscopePanelStyle::VectorViewerStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.FixedSampleSequenceRulerStyle
// 0x0248 (0x0250 - 0x0008)
struct FFixedSampleSequenceRulerStyle final : public FSlateWidgetStyle
{
public:
	float                                         HandleWidth;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            HandleColor;                                       // 0x000C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HandleBrush;                                       // 0x0020(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TicksColor;                                        // 0x00E0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TicksTextColor;                                    // 0x00F4(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         TicksTextFont;                                     // 0x0108(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TicksTextOffset;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x0164(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0180(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFixedSampleSequenceRulerStyle) == 0x000010, "Wrong alignment on FFixedSampleSequenceRulerStyle");
static_assert(sizeof(FFixedSampleSequenceRulerStyle) == 0x000250, "Wrong size on FFixedSampleSequenceRulerStyle");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleWidth) == 0x000008, "Member 'FFixedSampleSequenceRulerStyle::HandleWidth' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleColor) == 0x00000C, "Member 'FFixedSampleSequenceRulerStyle::HandleColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleBrush) == 0x000020, "Member 'FFixedSampleSequenceRulerStyle::HandleBrush' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksColor) == 0x0000E0, "Member 'FFixedSampleSequenceRulerStyle::TicksColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextColor) == 0x0000F4, "Member 'FFixedSampleSequenceRulerStyle::TicksTextColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextFont) == 0x000108, "Member 'FFixedSampleSequenceRulerStyle::TicksTextFont' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextOffset) == 0x000160, "Member 'FFixedSampleSequenceRulerStyle::TicksTextOffset' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, BackgroundColor) == 0x000164, "Member 'FFixedSampleSequenceRulerStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, BackgroundBrush) == 0x000180, "Member 'FFixedSampleSequenceRulerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, DesiredWidth) == 0x000240, "Member 'FFixedSampleSequenceRulerStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, DesiredHeight) == 0x000244, "Member 'FFixedSampleSequenceRulerStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceViewerStyle
// 0x0148 (0x0150 - 0x0008)
struct FSampledSequenceViewerStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            SequenceColor;                                     // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SequenceLineThickness;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            MajorGridLineColor;                                // 0x0020(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            MinorGridLineColor;                                // 0x0034(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ZeroCrossingLineColor;                             // 0x0048(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ZeroCrossingLineThickness;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleMarkersSize;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SequenceBackgroundColor;                           // 0x0064(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0080(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSampledSequenceViewerStyle) == 0x000010, "Wrong alignment on FSampledSequenceViewerStyle");
static_assert(sizeof(FSampledSequenceViewerStyle) == 0x000150, "Wrong size on FSampledSequenceViewerStyle");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceColor) == 0x000008, "Member 'FSampledSequenceViewerStyle::SequenceColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceLineThickness) == 0x00001C, "Member 'FSampledSequenceViewerStyle::SequenceLineThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, MajorGridLineColor) == 0x000020, "Member 'FSampledSequenceViewerStyle::MajorGridLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, MinorGridLineColor) == 0x000034, "Member 'FSampledSequenceViewerStyle::MinorGridLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, ZeroCrossingLineColor) == 0x000048, "Member 'FSampledSequenceViewerStyle::ZeroCrossingLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, ZeroCrossingLineThickness) == 0x00005C, "Member 'FSampledSequenceViewerStyle::ZeroCrossingLineThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SampleMarkersSize) == 0x000060, "Member 'FSampledSequenceViewerStyle::SampleMarkersSize' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceBackgroundColor) == 0x000064, "Member 'FSampledSequenceViewerStyle::SequenceBackgroundColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, BackgroundBrush) == 0x000080, "Member 'FSampledSequenceViewerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, DesiredWidth) == 0x000140, "Member 'FSampledSequenceViewerStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, DesiredHeight) == 0x000144, "Member 'FSampledSequenceViewerStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioOscilloscopePanelStyle
// 0x0468 (0x0470 - 0x0008)
struct FAudioOscilloscopePanelStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFixedSampleSequenceRulerStyle         TimeRulerStyle;                                    // 0x0010(0x0250)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSampledSequenceValueGridOverlayStyle  ValueGridStyle;                                    // 0x0260(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSampledSequenceViewerStyle            WaveViewerStyle;                                   // 0x0300(0x0150)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTriggerThresholdLineStyle             TriggerThresholdLineStyle;                         // 0x0450(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioOscilloscopePanelStyle) == 0x000010, "Wrong alignment on FAudioOscilloscopePanelStyle");
static_assert(sizeof(FAudioOscilloscopePanelStyle) == 0x000470, "Wrong size on FAudioOscilloscopePanelStyle");
static_assert(offsetof(FAudioOscilloscopePanelStyle, TimeRulerStyle) == 0x000010, "Member 'FAudioOscilloscopePanelStyle::TimeRulerStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, ValueGridStyle) == 0x000260, "Member 'FAudioOscilloscopePanelStyle::ValueGridStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, WaveViewerStyle) == 0x000300, "Member 'FAudioOscilloscopePanelStyle::WaveViewerStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, TriggerThresholdLineStyle) == 0x000450, "Member 'FAudioOscilloscopePanelStyle::TriggerThresholdLineStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioTextBoxStyle
// 0x00E8 (0x00F0 - 0x0008)
struct FAudioTextBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImage;                                   // 0x0010(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x00D0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioTextBoxStyle) == 0x000010, "Wrong alignment on FAudioTextBoxStyle");
static_assert(sizeof(FAudioTextBoxStyle) == 0x0000F0, "Wrong size on FAudioTextBoxStyle");
static_assert(offsetof(FAudioTextBoxStyle, BackgroundImage) == 0x000010, "Member 'FAudioTextBoxStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioTextBoxStyle, BackgroundColor) == 0x0000D0, "Member 'FAudioTextBoxStyle::BackgroundColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioSliderStyle
// 0x06C8 (0x06D0 - 0x0008)
struct FAudioSliderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSliderStyle                           SliderStyle;                                       // 0x0010(0x04A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x04B0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            WidgetBackgroundImage;                             // 0x05A0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBackgroundColor;                             // 0x0660(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SliderBackgroundSize;                              // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LabelPadding;                                      // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBarColor;                                    // 0x068C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderThumbColor;                                  // 0x06A0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            WidgetBackgroundColor;                             // 0x06B4(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C8[0x8];                                      // 0x06C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioSliderStyle) == 0x000010, "Wrong alignment on FAudioSliderStyle");
static_assert(sizeof(FAudioSliderStyle) == 0x0006D0, "Wrong size on FAudioSliderStyle");
static_assert(offsetof(FAudioSliderStyle, SliderStyle) == 0x000010, "Member 'FAudioSliderStyle::SliderStyle' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, TextBoxStyle) == 0x0004B0, "Member 'FAudioSliderStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, WidgetBackgroundImage) == 0x0005A0, "Member 'FAudioSliderStyle::WidgetBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBackgroundColor) == 0x000660, "Member 'FAudioSliderStyle::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBackgroundSize) == 0x000678, "Member 'FAudioSliderStyle::SliderBackgroundSize' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, LabelPadding) == 0x000688, "Member 'FAudioSliderStyle::LabelPadding' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBarColor) == 0x00068C, "Member 'FAudioSliderStyle::SliderBarColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderThumbColor) == 0x0006A0, "Member 'FAudioSliderStyle::SliderThumbColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, WidgetBackgroundColor) == 0x0006B4, "Member 'FAudioSliderStyle::WidgetBackgroundColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioRadialSliderStyle
// 0x0148 (0x0150 - 0x0008)
struct FAudioRadialSliderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x0010(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            CenterBackgroundColor;                             // 0x0100(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBarColor;                                    // 0x0114(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderProgressColor;                               // 0x0128(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LabelPadding;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSliderRadius;                               // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioRadialSliderStyle) == 0x000010, "Wrong alignment on FAudioRadialSliderStyle");
static_assert(sizeof(FAudioRadialSliderStyle) == 0x000150, "Wrong size on FAudioRadialSliderStyle");
static_assert(offsetof(FAudioRadialSliderStyle, TextBoxStyle) == 0x000010, "Member 'FAudioRadialSliderStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, CenterBackgroundColor) == 0x000100, "Member 'FAudioRadialSliderStyle::CenterBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, SliderBarColor) == 0x000114, "Member 'FAudioRadialSliderStyle::SliderBarColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, SliderProgressColor) == 0x000128, "Member 'FAudioRadialSliderStyle::SliderProgressColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, LabelPadding) == 0x00013C, "Member 'FAudioRadialSliderStyle::LabelPadding' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, DefaultSliderRadius) == 0x000140, "Member 'FAudioRadialSliderStyle::DefaultSliderRadius' has a wrong offset!");

// ScriptStruct AudioWidgets.PlayheadOverlayStyle
// 0x0020 (0x0028 - 0x0008)
struct FPlayheadOverlayStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            PlayheadColor;                                     // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         PlayheadWidth;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayheadOverlayStyle) == 0x000008, "Wrong alignment on FPlayheadOverlayStyle");
static_assert(sizeof(FPlayheadOverlayStyle) == 0x000028, "Wrong size on FPlayheadOverlayStyle");
static_assert(offsetof(FPlayheadOverlayStyle, PlayheadColor) == 0x000008, "Member 'FPlayheadOverlayStyle::PlayheadColor' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, PlayheadWidth) == 0x00001C, "Member 'FPlayheadOverlayStyle::PlayheadWidth' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, DesiredWidth) == 0x000020, "Member 'FPlayheadOverlayStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, DesiredHeight) == 0x000024, "Member 'FPlayheadOverlayStyle::DesiredHeight' has a wrong offset!");

}

