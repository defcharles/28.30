#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrewUI

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "CrewUI_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ModelViewViewModel_classes.hpp"
#include "CommonUI_classes.hpp"
#include "GameSubCatalog_structs.hpp"


namespace SDK
{

// Class CrewUI.BattlePassCrewContentInterface
// 0x0000 (0x0028 - 0x0028)
class IBattlePassCrewContentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassCrewContentInterface">();
	}
	static class IBattlePassCrewContentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBattlePassCrewContentInterface>();
	}
};
static_assert(alignof(IBattlePassCrewContentInterface) == 0x000008, "Wrong alignment on IBattlePassCrewContentInterface");
static_assert(sizeof(IBattlePassCrewContentInterface) == 0x000028, "Wrong size on IBattlePassCrewContentInterface");

// Class CrewUI.CrewScreenContentBlockingInterface
// 0x0000 (0x0028 - 0x0028)
class ICrewScreenContentBlockingInterface final : public IInterface
{
public:
	void BlockScreenContent(const bool bBlockScreen, const class FText& ContentBlockedText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewScreenContentBlockingInterface">();
	}
	static class ICrewScreenContentBlockingInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICrewScreenContentBlockingInterface>();
	}
};
static_assert(alignof(ICrewScreenContentBlockingInterface) == 0x000008, "Wrong alignment on ICrewScreenContentBlockingInterface");
static_assert(sizeof(ICrewScreenContentBlockingInterface) == 0x000028, "Wrong size on ICrewScreenContentBlockingInterface");

// Class CrewUI.FortProgressiveContentInterface
// 0x0000 (0x0028 - 0x0028)
class IFortProgressiveContentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveContentInterface">();
	}
	static class IFortProgressiveContentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortProgressiveContentInterface>();
	}
};
static_assert(alignof(IFortProgressiveContentInterface) == 0x000008, "Wrong alignment on IFortProgressiveContentInterface");
static_assert(sizeof(IFortProgressiveContentInterface) == 0x000028, "Wrong size on IFortProgressiveContentInterface");

// Class CrewUI.FortTemporaryItemsComponent
// 0x0010 (0x00B0 - 0x00A0)
class UFortTemporaryItemsComponent final : public UControllerComponent
{
public:
	class UFortTemporaryItemsManager*             TemporaryItemsManager;                             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortMcpProfileAthena>   AthenaProfile;                                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAthenaProfileInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsComponent">();
	}
	static class UFortTemporaryItemsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsComponent>();
	}
};
static_assert(alignof(UFortTemporaryItemsComponent) == 0x000008, "Wrong alignment on UFortTemporaryItemsComponent");
static_assert(sizeof(UFortTemporaryItemsComponent) == 0x0000B0, "Wrong size on UFortTemporaryItemsComponent");
static_assert(offsetof(UFortTemporaryItemsComponent, TemporaryItemsManager) == 0x0000A0, "Member 'UFortTemporaryItemsComponent::TemporaryItemsManager' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsComponent, AthenaProfile) == 0x0000A8, "Member 'UFortTemporaryItemsComponent::AthenaProfile' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsManager
// 0x0030 (0x0060 - 0x0030)
class UFortTemporaryItemsManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTemporaryItemsStateChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsManager">();
	}
	static class UFortTemporaryItemsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsManager>();
	}
};
static_assert(alignof(UFortTemporaryItemsManager) == 0x000008, "Wrong alignment on UFortTemporaryItemsManager");
static_assert(sizeof(UFortTemporaryItemsManager) == 0x000060, "Wrong size on UFortTemporaryItemsManager");

// Class CrewUI.FortTemporaryItemsRewardGroupVM
// 0x0020 (0x0088 - 0x0068)
class UFortTemporaryItemsRewardGroupVM final : public UMVVMViewModelBase
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EAthenaCustomizationCategory                  Category;                                          // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortTemporaryItemsRewardVM*>    Rewards;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsRewardGroupVM">();
	}
	static class UFortTemporaryItemsRewardGroupVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsRewardGroupVM>();
	}
};
static_assert(alignof(UFortTemporaryItemsRewardGroupVM) == 0x000008, "Wrong alignment on UFortTemporaryItemsRewardGroupVM");
static_assert(sizeof(UFortTemporaryItemsRewardGroupVM) == 0x000088, "Wrong size on UFortTemporaryItemsRewardGroupVM");
static_assert(offsetof(UFortTemporaryItemsRewardGroupVM, Category) == 0x000070, "Member 'UFortTemporaryItemsRewardGroupVM::Category' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsRewardGroupVM, Rewards) == 0x000078, "Member 'UFortTemporaryItemsRewardGroupVM::Rewards' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsRewardVM
// 0x0018 (0x0080 - 0x0068)
class UFortTemporaryItemsRewardVM final : public UMVVMViewModelBase
{
public:
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAccountItemDefinition*             ItemDefinition;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsOwned;                                          // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsRewardVM">();
	}
	static class UFortTemporaryItemsRewardVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsRewardVM>();
	}
};
static_assert(alignof(UFortTemporaryItemsRewardVM) == 0x000008, "Wrong alignment on UFortTemporaryItemsRewardVM");
static_assert(sizeof(UFortTemporaryItemsRewardVM) == 0x000080, "Wrong size on UFortTemporaryItemsRewardVM");
static_assert(offsetof(UFortTemporaryItemsRewardVM, ItemDefinition) == 0x000070, "Member 'UFortTemporaryItemsRewardVM::ItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsRewardVM, bIsOwned) == 0x000078, "Member 'UFortTemporaryItemsRewardVM::bIsOwned' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsRow
// 0x0020 (0x02E0 - 0x02C0)
class UFortTemporaryItemsRow : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x20];                                     // 0x02C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTileView(class UTileView* InTileView);

	class FText GetCategoryText(const EAthenaCustomizationCategory InCategory) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsRow">();
	}
	static class UFortTemporaryItemsRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsRow>();
	}
};
static_assert(alignof(UFortTemporaryItemsRow) == 0x000008, "Wrong alignment on UFortTemporaryItemsRow");
static_assert(sizeof(UFortTemporaryItemsRow) == 0x0002E0, "Wrong size on UFortTemporaryItemsRow");

// Class CrewUI.FortTemporaryItemsScreenItemInfo
// 0x0018 (0x0300 - 0x02E8)
class UFortTemporaryItemsScreenItemInfo : public UCommonUserWidget
{
public:
	class UAthenaRewardItemTypeRarityTag*         Widget_ItemTypeRarityTag;                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ItemName;                                     // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_Description;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDataSet(bool bValidItem, bool bIsSubscribed, bool IsOwned);
	void SetData(const class UFortSubscriptionVM* SubscriptionVM, const class UFortTemporaryItemsRewardVM* RewardVM);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsScreenItemInfo">();
	}
	static class UFortTemporaryItemsScreenItemInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsScreenItemInfo>();
	}
};
static_assert(alignof(UFortTemporaryItemsScreenItemInfo) == 0x000008, "Wrong alignment on UFortTemporaryItemsScreenItemInfo");
static_assert(sizeof(UFortTemporaryItemsScreenItemInfo) == 0x000300, "Wrong size on UFortTemporaryItemsScreenItemInfo");
static_assert(offsetof(UFortTemporaryItemsScreenItemInfo, Widget_ItemTypeRarityTag) == 0x0002E8, "Member 'UFortTemporaryItemsScreenItemInfo::Widget_ItemTypeRarityTag' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreenItemInfo, Text_ItemName) == 0x0002F0, "Member 'UFortTemporaryItemsScreenItemInfo::Text_ItemName' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreenItemInfo, RichText_Description) == 0x0002F8, "Member 'UFortTemporaryItemsScreenItemInfo::RichText_Description' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsTileButton
// 0x0010 (0x14A0 - 0x1490)
class UFortTemporaryItemsTileButton : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x8];                                     // 0x1490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortCosmeticItemCard*                  ItemCard;                                          // 0x1498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetupRewardItem(const class UFortAccountItemDefinition* ItemDef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsTileButton">();
	}
	static class UFortTemporaryItemsTileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsTileButton>();
	}
};
static_assert(alignof(UFortTemporaryItemsTileButton) == 0x000010, "Wrong alignment on UFortTemporaryItemsTileButton");
static_assert(sizeof(UFortTemporaryItemsTileButton) == 0x0014A0, "Wrong size on UFortTemporaryItemsTileButton");
static_assert(offsetof(UFortTemporaryItemsTileButton, ItemCard) == 0x001498, "Member 'UFortTemporaryItemsTileButton::ItemCard' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsVM
// 0x0020 (0x0090 - 0x0070)
class UFortTemporaryItemsVM final : public UFortPerUserViewModel
{
public:
	TArray<class UFortTemporaryItemsRewardGroupVM*> RewardGroups;                                      // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FDateTime                              ExpirationDate;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortTemporaryItemsManager*             TemporaryItemsManager;                             // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsVM">();
	}
	static class UFortTemporaryItemsVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsVM>();
	}
};
static_assert(alignof(UFortTemporaryItemsVM) == 0x000008, "Wrong alignment on UFortTemporaryItemsVM");
static_assert(sizeof(UFortTemporaryItemsVM) == 0x000090, "Wrong size on UFortTemporaryItemsVM");
static_assert(offsetof(UFortTemporaryItemsVM, RewardGroups) == 0x000070, "Member 'UFortTemporaryItemsVM::RewardGroups' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsVM, ExpirationDate) == 0x000080, "Member 'UFortTemporaryItemsVM::ExpirationDate' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsVM, TemporaryItemsManager) == 0x000088, "Member 'UFortTemporaryItemsVM::TemporaryItemsManager' has a wrong offset!");

// Class CrewUI.BattlePassCrewPurchaseButton
// 0x0020 (0x1550 - 0x1530)
class UBattlePassCrewPurchaseButton : public UFortHoldableButton
{
public:
	EBattlePassPurchaseButtonCurrencyType         CurrencyType;                                      // 0x1528(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1529[0x7];                                     // 0x1529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Label;                                        // 0x1530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_SecondaryLabel;                               // 0x1538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_FinalCost;                                    // 0x1540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Container_SecondaryLabel;                          // 0x1548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCurrencyUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassCrewPurchaseButton">();
	}
	static class UBattlePassCrewPurchaseButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassCrewPurchaseButton>();
	}
};
static_assert(alignof(UBattlePassCrewPurchaseButton) == 0x000010, "Wrong alignment on UBattlePassCrewPurchaseButton");
static_assert(sizeof(UBattlePassCrewPurchaseButton) == 0x001550, "Wrong size on UBattlePassCrewPurchaseButton");
static_assert(offsetof(UBattlePassCrewPurchaseButton, CurrencyType) == 0x001528, "Member 'UBattlePassCrewPurchaseButton::CurrencyType' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseButton, Text_Label) == 0x001530, "Member 'UBattlePassCrewPurchaseButton::Text_Label' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseButton, Text_SecondaryLabel) == 0x001538, "Member 'UBattlePassCrewPurchaseButton::Text_SecondaryLabel' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseButton, Text_FinalCost) == 0x001540, "Member 'UBattlePassCrewPurchaseButton::Text_FinalCost' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseButton, Container_SecondaryLabel) == 0x001548, "Member 'UBattlePassCrewPurchaseButton::Container_SecondaryLabel' has a wrong offset!");

// Class CrewUI.BattlePassCrewPurchaseContainer
// 0x0080 (0x0480 - 0x0400)
class UBattlePassCrewPurchaseContainer : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrewUpsellTransitionDelayTime;                     // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_424[0xC];                                      // 0x0424(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatableWidgetSwitcher*       Switcher_ContentContainer;                         // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassPurchaseScreen*              BattlePassPurchaseScreen;                          // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Intro;                                             // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       QuickIntro;                                        // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       CrewBenefitsIntro;                                 // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCrewSubscriptionErrorModal> CrewSubscriptionErrorModalClass;                   // 0x0458(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_460[0x20];                                     // 0x0460(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContentStateUpdated(EBattlePassCrewContentState InState, bool bInScreenOpened);
	void OnTriggerIntroAnimation(bool bCanClaimRewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassCrewPurchaseContainer">();
	}
	static class UBattlePassCrewPurchaseContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassCrewPurchaseContainer>();
	}
};
static_assert(alignof(UBattlePassCrewPurchaseContainer) == 0x000008, "Wrong alignment on UBattlePassCrewPurchaseContainer");
static_assert(sizeof(UBattlePassCrewPurchaseContainer) == 0x000480, "Wrong size on UBattlePassCrewPurchaseContainer");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, CrewUpsellTransitionDelayTime) == 0x000420, "Member 'UBattlePassCrewPurchaseContainer::CrewUpsellTransitionDelayTime' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, Switcher_ContentContainer) == 0x000430, "Member 'UBattlePassCrewPurchaseContainer::Switcher_ContentContainer' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, BattlePassPurchaseScreen) == 0x000438, "Member 'UBattlePassCrewPurchaseContainer::BattlePassPurchaseScreen' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, Intro) == 0x000440, "Member 'UBattlePassCrewPurchaseContainer::Intro' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, QuickIntro) == 0x000448, "Member 'UBattlePassCrewPurchaseContainer::QuickIntro' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, CrewBenefitsIntro) == 0x000450, "Member 'UBattlePassCrewPurchaseContainer::CrewBenefitsIntro' has a wrong offset!");
static_assert(offsetof(UBattlePassCrewPurchaseContainer, CrewSubscriptionErrorModalClass) == 0x000458, "Member 'UBattlePassCrewPurchaseContainer::CrewSubscriptionErrorModalClass' has a wrong offset!");

// Class CrewUI.BattlePassSeasonHeading
// 0x0008 (0x02F0 - 0x02E8)
class UBattlePassSeasonHeading : public UCommonUserWidget
{
public:
	class UCommonRichTextBlock*                   Text_Season;                                       // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassSeasonHeading">();
	}
	static class UBattlePassSeasonHeading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassSeasonHeading>();
	}
};
static_assert(alignof(UBattlePassSeasonHeading) == 0x000008, "Wrong alignment on UBattlePassSeasonHeading");
static_assert(sizeof(UBattlePassSeasonHeading) == 0x0002F0, "Wrong size on UBattlePassSeasonHeading");
static_assert(offsetof(UBattlePassSeasonHeading, Text_Season) == 0x0002E8, "Member 'UBattlePassSeasonHeading::Text_Season' has a wrong offset!");

// Class CrewUI.BattlePassPurchaseScreen
// 0x0128 (0x0568 - 0x0440)
class UBattlePassPurchaseScreen : public UCMSBackgroundWidget
{
public:
	uint8                                         Pad_440[0x3C];                                     // 0x0440(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrewTransitionDelayTime;                           // 0x047C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_480[0x70];                                     // 0x0480(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonActivatableWidget>   PurchaseCompleteModal;                             // 0x04F0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ToCrew;                                     // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Purchase;                                   // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x0508(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_GiftBattlePass;                             // 0x0510(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_ConfirmBase;                                // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_ConfirmBundle;                              // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassSeasonHeading*               Heading_Primary;                                   // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassSeasonHeading*               Heading_Secondary;                                 // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_Disclaimer;                               // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Description;                                  // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonAnimatedSwitcher*                Switcher_PurchaseState;                            // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_550[0x18];                                     // 0x0550(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPurchaseConfirmed();
	void OnPurchaseStateChanged(EBattlePassPurchaseState InCurrentState);
	void OnSetNavButtonNotificationText(const class FText& NotificationText);
	void OnSetScreenInteractable(bool bInteractable);
	void OnShowNavButtonNotification(const bool bShowNotification);
	void RefreshFocus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassPurchaseScreen">();
	}
	static class UBattlePassPurchaseScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassPurchaseScreen>();
	}
};
static_assert(alignof(UBattlePassPurchaseScreen) == 0x000008, "Wrong alignment on UBattlePassPurchaseScreen");
static_assert(sizeof(UBattlePassPurchaseScreen) == 0x000568, "Wrong size on UBattlePassPurchaseScreen");
static_assert(offsetof(UBattlePassPurchaseScreen, CrewTransitionDelayTime) == 0x00047C, "Member 'UBattlePassPurchaseScreen::CrewTransitionDelayTime' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, PurchaseCompleteModal) == 0x0004F0, "Member 'UBattlePassPurchaseScreen::PurchaseCompleteModal' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_ToCrew) == 0x0004F8, "Member 'UBattlePassPurchaseScreen::Button_ToCrew' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_Purchase) == 0x000500, "Member 'UBattlePassPurchaseScreen::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_MoreInfo) == 0x000508, "Member 'UBattlePassPurchaseScreen::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_GiftBattlePass) == 0x000510, "Member 'UBattlePassPurchaseScreen::Button_GiftBattlePass' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_ConfirmBase) == 0x000518, "Member 'UBattlePassPurchaseScreen::Button_ConfirmBase' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Button_ConfirmBundle) == 0x000520, "Member 'UBattlePassPurchaseScreen::Button_ConfirmBundle' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Heading_Primary) == 0x000528, "Member 'UBattlePassPurchaseScreen::Heading_Primary' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Heading_Secondary) == 0x000530, "Member 'UBattlePassPurchaseScreen::Heading_Secondary' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, RichText_Disclaimer) == 0x000538, "Member 'UBattlePassPurchaseScreen::RichText_Disclaimer' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Text_Description) == 0x000540, "Member 'UBattlePassPurchaseScreen::Text_Description' has a wrong offset!");
static_assert(offsetof(UBattlePassPurchaseScreen, Switcher_PurchaseState) == 0x000548, "Member 'UBattlePassPurchaseScreen::Switcher_PurchaseState' has a wrong offset!");

// Class CrewUI.CrewMultiSubscriptionAlertModal
// 0x00E0 (0x04E0 - 0x0400)
class UCrewMultiSubscriptionAlertModal : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicEntryBox*                       EntryBox_BulletPoints;                             // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_OpenHowToURL;                               // 0x0410(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TextURL;                                    // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_DoNotRemind;                                // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Close;                                      // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TouchClose;                                 // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FText>                           BulletPoints;                                      // 0x0438(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<EAppStore, class FText>                  AppStorePlatformMapping;                           // 0x0448(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FString                                 HowToCancelURL;                                    // 0x0498(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x20];                                     // 0x04A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlatformTextStyle;                                 // 0x04C8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void OnSetHowToCancelURL(const class FString& MoreInfoUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewMultiSubscriptionAlertModal">();
	}
	static class UCrewMultiSubscriptionAlertModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewMultiSubscriptionAlertModal>();
	}
};
static_assert(alignof(UCrewMultiSubscriptionAlertModal) == 0x000008, "Wrong alignment on UCrewMultiSubscriptionAlertModal");
static_assert(sizeof(UCrewMultiSubscriptionAlertModal) == 0x0004E0, "Wrong size on UCrewMultiSubscriptionAlertModal");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, EntryBox_BulletPoints) == 0x000408, "Member 'UCrewMultiSubscriptionAlertModal::EntryBox_BulletPoints' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, Button_OpenHowToURL) == 0x000410, "Member 'UCrewMultiSubscriptionAlertModal::Button_OpenHowToURL' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, Button_TextURL) == 0x000418, "Member 'UCrewMultiSubscriptionAlertModal::Button_TextURL' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, Button_DoNotRemind) == 0x000420, "Member 'UCrewMultiSubscriptionAlertModal::Button_DoNotRemind' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, Button_Close) == 0x000428, "Member 'UCrewMultiSubscriptionAlertModal::Button_Close' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, Button_TouchClose) == 0x000430, "Member 'UCrewMultiSubscriptionAlertModal::Button_TouchClose' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, BulletPoints) == 0x000438, "Member 'UCrewMultiSubscriptionAlertModal::BulletPoints' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, AppStorePlatformMapping) == 0x000448, "Member 'UCrewMultiSubscriptionAlertModal::AppStorePlatformMapping' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, HowToCancelURL) == 0x000498, "Member 'UCrewMultiSubscriptionAlertModal::HowToCancelURL' has a wrong offset!");
static_assert(offsetof(UCrewMultiSubscriptionAlertModal, PlatformTextStyle) == 0x0004C8, "Member 'UCrewMultiSubscriptionAlertModal::PlatformTextStyle' has a wrong offset!");

// Class CrewUI.CrewPriceChangeAcknowledgeModal
// 0x0198 (0x0598 - 0x0400)
class UCrewPriceChangeAcknowledgeModal : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Accept;                                     // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CancelSubscription;                         // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_TextURL;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CancellationInfoModalClass;                        // 0x0428(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x150];                                    // 0x0448(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExitModal();
	void OnModalBackout();
	void OnSetPriceChangeAcknowledgeBodyTable(const TArray<struct FCrewTableRow>& PriceChangeByRegionRows);
	void OnSetPriceChangeAcknowledgeBodyText(const class FText& BodyText);
	void OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText(const class FText& CancelSubscriptionButtonText);
	void OnSetPriceChangeAcknowledgeCheckboxText(const class FText& CheckboxText);
	void OnSetPriceChangeAcknowledgeConfirmButtonText(const class FText& ConfirmButtonText);
	void OnSetPriceChangeAcknowledgeMoreInfoText(const class FText& ConfirmButtonText);
	void OnSetPriceChangeAcknowledgeMoreInfoUrl(const class FText& MoreInfoUrl);
	void OnSetPriceChangeAcknowledgeTitle(const class FText& Title);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewPriceChangeAcknowledgeModal">();
	}
	static class UCrewPriceChangeAcknowledgeModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewPriceChangeAcknowledgeModal>();
	}
};
static_assert(alignof(UCrewPriceChangeAcknowledgeModal) == 0x000008, "Wrong alignment on UCrewPriceChangeAcknowledgeModal");
static_assert(sizeof(UCrewPriceChangeAcknowledgeModal) == 0x000598, "Wrong size on UCrewPriceChangeAcknowledgeModal");
static_assert(offsetof(UCrewPriceChangeAcknowledgeModal, Button_Accept) == 0x000408, "Member 'UCrewPriceChangeAcknowledgeModal::Button_Accept' has a wrong offset!");
static_assert(offsetof(UCrewPriceChangeAcknowledgeModal, Button_CancelSubscription) == 0x000410, "Member 'UCrewPriceChangeAcknowledgeModal::Button_CancelSubscription' has a wrong offset!");
static_assert(offsetof(UCrewPriceChangeAcknowledgeModal, Button_MoreInfo) == 0x000418, "Member 'UCrewPriceChangeAcknowledgeModal::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UCrewPriceChangeAcknowledgeModal, Button_TextURL) == 0x000420, "Member 'UCrewPriceChangeAcknowledgeModal::Button_TextURL' has a wrong offset!");
static_assert(offsetof(UCrewPriceChangeAcknowledgeModal, CancellationInfoModalClass) == 0x000428, "Member 'UCrewPriceChangeAcknowledgeModal::CancellationInfoModalClass' has a wrong offset!");

// Class CrewUI.CrewPurchaseScreen
// 0x01B8 (0x05F8 - 0x0440)
class UCrewPurchaseScreen : public UCMSBackgroundWidget
{
public:
	uint8                                         Pad_440[0x78];                                     // 0x0440(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bManagementModeEnabled;                            // 0x04B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ContentPurchasedFocusWidget;                       // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                FocusWidget;                                       // 0x04C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroupBase*                 ButtonGroup_BenefitsTiles;                         // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   CancellationInfoModalClass;                        // 0x04D8(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   LegalInfoModalClass;                               // 0x04F8(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   ResolveIssueModalClass;                            // 0x0518(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   RejoinModalClass;                                  // 0x0538(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   ContinueModalClass;                                // 0x0558(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ToBattlePass;                               // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Purchase;                                   // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Rejoin;                                     // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Continue;                                   // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ResolvePayment;                             // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_WatchTrailer;                               // 0x05A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Terms;                                      // 0x05A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_CancellationInfo;                           // 0x05B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_RecurringRewards;                         // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_LimitedTimeRewards;                       // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCrewTileDetails*                       Details_CurrentCrewTile;                           // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_LimitedTime;                                  // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_UserInformation;                           // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_UserInformation;                              // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CrewDisclaimer;                               // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonBorder*                          Border_Disclaimer;                                 // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeginProgress(const class FText& ProgressLabel);
	void EndProgress();
	void OnContainerTabVisibilityUpdated(const bool bTabsVisible, const float SpacingAdjustmentForTabs);
	void OnSetNavButtonNotificationText(const class FText& NotificationText);
	void OnSetPaymentLegalText(const class FText& LegalText);
	void OnShowNavButtonNotification(const bool bShowNotification);
	void OnUpdatePurchaseButtonState(ECrewPurchaseButtonState ButtonState);
	void OnUpdateVBuckRefundVisibility(bool bVisible);
	void OnUserInformationTextsUpdated(const class FText& UserInformationText1, const class FText& UserInformationText2, EMcpSubscriptionState SubscriptionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewPurchaseScreen">();
	}
	static class UCrewPurchaseScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewPurchaseScreen>();
	}
};
static_assert(alignof(UCrewPurchaseScreen) == 0x000008, "Wrong alignment on UCrewPurchaseScreen");
static_assert(sizeof(UCrewPurchaseScreen) == 0x0005F8, "Wrong size on UCrewPurchaseScreen");
static_assert(offsetof(UCrewPurchaseScreen, bManagementModeEnabled) == 0x0004B8, "Member 'UCrewPurchaseScreen::bManagementModeEnabled' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, ContentPurchasedFocusWidget) == 0x0004C0, "Member 'UCrewPurchaseScreen::ContentPurchasedFocusWidget' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, FocusWidget) == 0x0004C8, "Member 'UCrewPurchaseScreen::FocusWidget' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, ButtonGroup_BenefitsTiles) == 0x0004D0, "Member 'UCrewPurchaseScreen::ButtonGroup_BenefitsTiles' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, CancellationInfoModalClass) == 0x0004D8, "Member 'UCrewPurchaseScreen::CancellationInfoModalClass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, LegalInfoModalClass) == 0x0004F8, "Member 'UCrewPurchaseScreen::LegalInfoModalClass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, ResolveIssueModalClass) == 0x000518, "Member 'UCrewPurchaseScreen::ResolveIssueModalClass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, RejoinModalClass) == 0x000538, "Member 'UCrewPurchaseScreen::RejoinModalClass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, ContinueModalClass) == 0x000558, "Member 'UCrewPurchaseScreen::ContinueModalClass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_ToBattlePass) == 0x000578, "Member 'UCrewPurchaseScreen::Button_ToBattlePass' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_Purchase) == 0x000580, "Member 'UCrewPurchaseScreen::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_Rejoin) == 0x000588, "Member 'UCrewPurchaseScreen::Button_Rejoin' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_Continue) == 0x000590, "Member 'UCrewPurchaseScreen::Button_Continue' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_ResolvePayment) == 0x000598, "Member 'UCrewPurchaseScreen::Button_ResolvePayment' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_WatchTrailer) == 0x0005A0, "Member 'UCrewPurchaseScreen::Button_WatchTrailer' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_Terms) == 0x0005A8, "Member 'UCrewPurchaseScreen::Button_Terms' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Button_CancellationInfo) == 0x0005B0, "Member 'UCrewPurchaseScreen::Button_CancellationInfo' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, EntryBox_RecurringRewards) == 0x0005B8, "Member 'UCrewPurchaseScreen::EntryBox_RecurringRewards' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, EntryBox_LimitedTimeRewards) == 0x0005C0, "Member 'UCrewPurchaseScreen::EntryBox_LimitedTimeRewards' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Details_CurrentCrewTile) == 0x0005C8, "Member 'UCrewPurchaseScreen::Details_CurrentCrewTile' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Text_LimitedTime) == 0x0005D0, "Member 'UCrewPurchaseScreen::Text_LimitedTime' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Overlay_UserInformation) == 0x0005D8, "Member 'UCrewPurchaseScreen::Overlay_UserInformation' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Text_UserInformation) == 0x0005E0, "Member 'UCrewPurchaseScreen::Text_UserInformation' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Text_CrewDisclaimer) == 0x0005E8, "Member 'UCrewPurchaseScreen::Text_CrewDisclaimer' has a wrong offset!");
static_assert(offsetof(UCrewPurchaseScreen, Border_Disclaimer) == 0x0005F0, "Member 'UCrewPurchaseScreen::Border_Disclaimer' has a wrong offset!");

// Class CrewUI.CrewRewardTile
// 0x0060 (0x14F0 - 0x1490)
class UCrewRewardTile : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x40];                                    // 0x1490(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TileImageStreamoutSeconds;                         // 0x14D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D4[0x4];                                     // 0x14D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image_TileImage;                                   // 0x14D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_TileLabel;                                    // 0x14E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14E8[0x8];                                     // 0x14E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDownloadTileImageComplete(class UTexture2D* Texture);
	void OnStartingDownloadTileImage();
	void OnUpdateOwnedState(bool bOwned);

	bool IsMonthlyBenefit() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewRewardTile">();
	}
	static class UCrewRewardTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewRewardTile>();
	}
};
static_assert(alignof(UCrewRewardTile) == 0x000010, "Wrong alignment on UCrewRewardTile");
static_assert(sizeof(UCrewRewardTile) == 0x0014F0, "Wrong size on UCrewRewardTile");
static_assert(offsetof(UCrewRewardTile, TileImageStreamoutSeconds) == 0x0014D0, "Member 'UCrewRewardTile::TileImageStreamoutSeconds' has a wrong offset!");
static_assert(offsetof(UCrewRewardTile, Image_TileImage) == 0x0014D8, "Member 'UCrewRewardTile::Image_TileImage' has a wrong offset!");
static_assert(offsetof(UCrewRewardTile, Text_TileLabel) == 0x0014E0, "Member 'UCrewRewardTile::Text_TileLabel' has a wrong offset!");

// Class CrewUI.CrewSeasonLaunchScreen
// 0x00E8 (0x0528 - 0x0440)
class UCrewSeasonLaunchScreen : public UCMSBackgroundWidget
{
public:
	uint8                                         Pad_440[0x38];                                     // 0x0440(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ResolveIssueModalClass;                            // 0x0478(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassSeasonHeading*               Heading_SeasonInfo;                                // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_Description;                                  // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Claim;                                      // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_ResolveIssue;                               // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_GiftBattlePass;                             // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_Disclaimer;                               // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x60];                                     // 0x04C8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewSeasonLaunchScreen">();
	}
	static class UCrewSeasonLaunchScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewSeasonLaunchScreen>();
	}
};
static_assert(alignof(UCrewSeasonLaunchScreen) == 0x000008, "Wrong alignment on UCrewSeasonLaunchScreen");
static_assert(sizeof(UCrewSeasonLaunchScreen) == 0x000528, "Wrong size on UCrewSeasonLaunchScreen");
static_assert(offsetof(UCrewSeasonLaunchScreen, ResolveIssueModalClass) == 0x000478, "Member 'UCrewSeasonLaunchScreen::ResolveIssueModalClass' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, Heading_SeasonInfo) == 0x000498, "Member 'UCrewSeasonLaunchScreen::Heading_SeasonInfo' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, Text_Description) == 0x0004A0, "Member 'UCrewSeasonLaunchScreen::Text_Description' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, Button_Claim) == 0x0004A8, "Member 'UCrewSeasonLaunchScreen::Button_Claim' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, Button_ResolveIssue) == 0x0004B0, "Member 'UCrewSeasonLaunchScreen::Button_ResolveIssue' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, Button_GiftBattlePass) == 0x0004B8, "Member 'UCrewSeasonLaunchScreen::Button_GiftBattlePass' has a wrong offset!");
static_assert(offsetof(UCrewSeasonLaunchScreen, RichText_Disclaimer) == 0x0004C0, "Member 'UCrewSeasonLaunchScreen::RichText_Disclaimer' has a wrong offset!");

// Class CrewUI.CrewStandaloneSubscriptionContentContainer
// 0x0008 (0x04D8 - 0x04D0)
class UCrewStandaloneSubscriptionContentContainer : public UFortStandaloneFrontend
{
public:
	class UCrewSubscriptionContentContainer*      Widget_CrewContentContainer;                       // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewStandaloneSubscriptionContentContainer">();
	}
	static class UCrewStandaloneSubscriptionContentContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewStandaloneSubscriptionContentContainer>();
	}
};
static_assert(alignof(UCrewStandaloneSubscriptionContentContainer) == 0x000008, "Wrong alignment on UCrewStandaloneSubscriptionContentContainer");
static_assert(sizeof(UCrewStandaloneSubscriptionContentContainer) == 0x0004D8, "Wrong size on UCrewStandaloneSubscriptionContentContainer");
static_assert(offsetof(UCrewStandaloneSubscriptionContentContainer, Widget_CrewContentContainer) == 0x0004D0, "Member 'UCrewStandaloneSubscriptionContentContainer::Widget_CrewContentContainer' has a wrong offset!");

// Class CrewUI.CrewSubscriptionContentContainer
// 0x00A0 (0x04A0 - 0x0400)
class UCrewSubscriptionContentContainer : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x30];                                     // 0x0400(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCrewSubscriptionContentTabData> TabsData;                                          // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    NextTabInputAction;                                // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    PreviousTabInputAction;                            // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_Tabs;                                     // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroupBase*                 ButtonGroup_Tabs;                                  // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonActivatableWidgetSwitcher*       Switcher_Tabs;                                     // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Widget_TabsContainer;                              // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SpacingAdjustmentForTabs;                          // 0x0480(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPrimaryContentSetup                   ContentSetup;                                      // 0x0484(0x0003)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_487[0x19];                                     // 0x0487(0x0019)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTabSelected(int32 TabIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewSubscriptionContentContainer">();
	}
	static class UCrewSubscriptionContentContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewSubscriptionContentContainer>();
	}
};
static_assert(alignof(UCrewSubscriptionContentContainer) == 0x000008, "Wrong alignment on UCrewSubscriptionContentContainer");
static_assert(sizeof(UCrewSubscriptionContentContainer) == 0x0004A0, "Wrong size on UCrewSubscriptionContentContainer");
static_assert(offsetof(UCrewSubscriptionContentContainer, TabsData) == 0x000430, "Member 'UCrewSubscriptionContentContainer::TabsData' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, NextTabInputAction) == 0x000440, "Member 'UCrewSubscriptionContentContainer::NextTabInputAction' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, PreviousTabInputAction) == 0x000450, "Member 'UCrewSubscriptionContentContainer::PreviousTabInputAction' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, EntryBox_Tabs) == 0x000460, "Member 'UCrewSubscriptionContentContainer::EntryBox_Tabs' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, ButtonGroup_Tabs) == 0x000468, "Member 'UCrewSubscriptionContentContainer::ButtonGroup_Tabs' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, Switcher_Tabs) == 0x000470, "Member 'UCrewSubscriptionContentContainer::Switcher_Tabs' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, Widget_TabsContainer) == 0x000478, "Member 'UCrewSubscriptionContentContainer::Widget_TabsContainer' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, SpacingAdjustmentForTabs) == 0x000480, "Member 'UCrewSubscriptionContentContainer::SpacingAdjustmentForTabs' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionContentContainer, ContentSetup) == 0x000484, "Member 'UCrewSubscriptionContentContainer::ContentSetup' has a wrong offset!");

// Class CrewUI.CrewSubscriptionErrorModal
// 0x0010 (0x0410 - 0x0400)
class UCrewSubscriptionErrorModal : public UCommonActivatableWidget
{
public:
	class UCommonButtonBase*                      Button_Close;                                      // 0x0400(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TouchClose;                                 // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewSubscriptionErrorModal">();
	}
	static class UCrewSubscriptionErrorModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewSubscriptionErrorModal>();
	}
};
static_assert(alignof(UCrewSubscriptionErrorModal) == 0x000008, "Wrong alignment on UCrewSubscriptionErrorModal");
static_assert(sizeof(UCrewSubscriptionErrorModal) == 0x000410, "Wrong size on UCrewSubscriptionErrorModal");
static_assert(offsetof(UCrewSubscriptionErrorModal, Button_Close) == 0x000400, "Member 'UCrewSubscriptionErrorModal::Button_Close' has a wrong offset!");
static_assert(offsetof(UCrewSubscriptionErrorModal, Button_TouchClose) == 0x000408, "Member 'UCrewSubscriptionErrorModal::Button_TouchClose' has a wrong offset!");

// Class CrewUI.CrewTileDetails
// 0x0048 (0x0330 - 0x02E8)
class UCrewTileDetails : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0x28];                                     // 0x02E8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Text_Title;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   RichText_Description;                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_Tags;                                     // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MobileMoreInfo;                             // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewTileDetails">();
	}
	static class UCrewTileDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewTileDetails>();
	}
};
static_assert(alignof(UCrewTileDetails) == 0x000008, "Wrong alignment on UCrewTileDetails");
static_assert(sizeof(UCrewTileDetails) == 0x000330, "Wrong size on UCrewTileDetails");
static_assert(offsetof(UCrewTileDetails, Text_Title) == 0x000310, "Member 'UCrewTileDetails::Text_Title' has a wrong offset!");
static_assert(offsetof(UCrewTileDetails, RichText_Description) == 0x000318, "Member 'UCrewTileDetails::RichText_Description' has a wrong offset!");
static_assert(offsetof(UCrewTileDetails, EntryBox_Tags) == 0x000320, "Member 'UCrewTileDetails::EntryBox_Tags' has a wrong offset!");
static_assert(offsetof(UCrewTileDetails, Button_MobileMoreInfo) == 0x000328, "Member 'UCrewTileDetails::Button_MobileMoreInfo' has a wrong offset!");

// Class CrewUI.CrewTileDetailsTag
// 0x0008 (0x02F0 - 0x02E8)
class UCrewTileDetailsTag : public UCommonUserWidget
{
public:
	class UCommonRichTextBlock*                   Text_Label;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnTagSetup(ECrewDetailsTag RewardTag, bool bIsOwnedTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewTileDetailsTag">();
	}
	static class UCrewTileDetailsTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewTileDetailsTag>();
	}
};
static_assert(alignof(UCrewTileDetailsTag) == 0x000008, "Wrong alignment on UCrewTileDetailsTag");
static_assert(sizeof(UCrewTileDetailsTag) == 0x0002F0, "Wrong size on UCrewTileDetailsTag");
static_assert(offsetof(UCrewTileDetailsTag, Text_Label) == 0x0002E8, "Member 'UCrewTileDetailsTag::Text_Label' has a wrong offset!");

// Class CrewUI.CrewUIGameFeatureAction
// 0x0120 (0x0148 - 0x0028)
class UCrewUIGameFeatureAction final : public UFortUIGameFeatureAction
{
public:
	TSoftClassPtr<class UClass>                   BattlePassCrewContainerClass;                      // 0x0028(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   CrewContentContainerClass;                         // 0x0048(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   CrewStandaloneContentContainerClass;               // 0x0068(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   CrewPurchaseScreenClass;                           // 0x0088(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   ProgressionScreenClass;                            // 0x00A8(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   TemporaryItemsScreenClass;                         // 0x00C8(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   CrewPriceChangeAcknowledgeModalClass;              // 0x00E8(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   MultiSubAlertModalClass;                           // 0x0108(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortProgressiveSet>            ProgressiveCosmeticSets;                           // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CrewUIGameFeatureAction">();
	}
	static class UCrewUIGameFeatureAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrewUIGameFeatureAction>();
	}
};
static_assert(alignof(UCrewUIGameFeatureAction) == 0x000008, "Wrong alignment on UCrewUIGameFeatureAction");
static_assert(sizeof(UCrewUIGameFeatureAction) == 0x000148, "Wrong size on UCrewUIGameFeatureAction");
static_assert(offsetof(UCrewUIGameFeatureAction, BattlePassCrewContainerClass) == 0x000028, "Member 'UCrewUIGameFeatureAction::BattlePassCrewContainerClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, CrewContentContainerClass) == 0x000048, "Member 'UCrewUIGameFeatureAction::CrewContentContainerClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, CrewStandaloneContentContainerClass) == 0x000068, "Member 'UCrewUIGameFeatureAction::CrewStandaloneContentContainerClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, CrewPurchaseScreenClass) == 0x000088, "Member 'UCrewUIGameFeatureAction::CrewPurchaseScreenClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, ProgressionScreenClass) == 0x0000A8, "Member 'UCrewUIGameFeatureAction::ProgressionScreenClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, TemporaryItemsScreenClass) == 0x0000C8, "Member 'UCrewUIGameFeatureAction::TemporaryItemsScreenClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, CrewPriceChangeAcknowledgeModalClass) == 0x0000E8, "Member 'UCrewUIGameFeatureAction::CrewPriceChangeAcknowledgeModalClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, MultiSubAlertModalClass) == 0x000108, "Member 'UCrewUIGameFeatureAction::MultiSubAlertModalClass' has a wrong offset!");
static_assert(offsetof(UCrewUIGameFeatureAction, ProgressiveCosmeticSets) == 0x000128, "Member 'UCrewUIGameFeatureAction::ProgressiveCosmeticSets' has a wrong offset!");

// Class CrewUI.FortProgressiveContentContainer
// 0x0050 (0x0450 - 0x0400)
class UFortProgressiveContentContainer : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x38];                                     // 0x0400(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatableWidgetSwitcher*       Switcher_PrimaryContent;                           // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveTableOfContentsScreen*  Widget_ProgressiveTableOfContentsScreen;           // 0x0440(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveItemScreen*             Widget_ProgressiveItemScreen;                      // 0x0448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveContentContainer">();
	}
	static class UFortProgressiveContentContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveContentContainer>();
	}
};
static_assert(alignof(UFortProgressiveContentContainer) == 0x000008, "Wrong alignment on UFortProgressiveContentContainer");
static_assert(sizeof(UFortProgressiveContentContainer) == 0x000450, "Wrong size on UFortProgressiveContentContainer");
static_assert(offsetof(UFortProgressiveContentContainer, Switcher_PrimaryContent) == 0x000438, "Member 'UFortProgressiveContentContainer::Switcher_PrimaryContent' has a wrong offset!");
static_assert(offsetof(UFortProgressiveContentContainer, Widget_ProgressiveTableOfContentsScreen) == 0x000440, "Member 'UFortProgressiveContentContainer::Widget_ProgressiveTableOfContentsScreen' has a wrong offset!");
static_assert(offsetof(UFortProgressiveContentContainer, Widget_ProgressiveItemScreen) == 0x000448, "Member 'UFortProgressiveContentContainer::Widget_ProgressiveItemScreen' has a wrong offset!");

// Class CrewUI.FortProgressiveItemDetailsWidget
// 0x0028 (0x02E8 - 0x02C0)
class UFortProgressiveItemDetailsWidget : public UUserWidget
{
public:
	class UCommonTextBlock*                       Text_CosmeticStage;                                // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRichTextBlock*                   Text_UnlockCriteria;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Widget_UnlockCriteriaContainer;                    // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaRewardItemTypeRarityTag*         Widget_ItemTypeRarityTag;                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Tag_Owned;                                         // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveItemDetailsWidget">();
	}
	static class UFortProgressiveItemDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveItemDetailsWidget>();
	}
};
static_assert(alignof(UFortProgressiveItemDetailsWidget) == 0x000008, "Wrong alignment on UFortProgressiveItemDetailsWidget");
static_assert(sizeof(UFortProgressiveItemDetailsWidget) == 0x0002E8, "Wrong size on UFortProgressiveItemDetailsWidget");
static_assert(offsetof(UFortProgressiveItemDetailsWidget, Text_CosmeticStage) == 0x0002C0, "Member 'UFortProgressiveItemDetailsWidget::Text_CosmeticStage' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemDetailsWidget, Text_UnlockCriteria) == 0x0002C8, "Member 'UFortProgressiveItemDetailsWidget::Text_UnlockCriteria' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemDetailsWidget, Widget_UnlockCriteriaContainer) == 0x0002D0, "Member 'UFortProgressiveItemDetailsWidget::Widget_UnlockCriteriaContainer' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemDetailsWidget, Widget_ItemTypeRarityTag) == 0x0002D8, "Member 'UFortProgressiveItemDetailsWidget::Widget_ItemTypeRarityTag' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemDetailsWidget, Tag_Owned) == 0x0002E0, "Member 'UFortProgressiveItemDetailsWidget::Tag_Owned' has a wrong offset!");

// Class CrewUI.FortProgressiveScreenBase
// 0x0078 (0x07A8 - 0x0730)
class UFortProgressiveScreenBase : public UFortItemPreviewScreen
{
public:
	uint8                                         Pad_730[0x64];                                     // 0x0730(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RewardPreviewTime;                                 // 0x0794(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_798[0x10];                                     // 0x0798(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnContainerTabVisibilityUpdated(const bool bTabsVisible, const float SpacingAdjustmentForTabs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveScreenBase">();
	}
	static class UFortProgressiveScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveScreenBase>();
	}
};
static_assert(alignof(UFortProgressiveScreenBase) == 0x000008, "Wrong alignment on UFortProgressiveScreenBase");
static_assert(sizeof(UFortProgressiveScreenBase) == 0x0007A8, "Wrong size on UFortProgressiveScreenBase");
static_assert(offsetof(UFortProgressiveScreenBase, RewardPreviewTime) == 0x000794, "Member 'UFortProgressiveScreenBase::RewardPreviewTime' has a wrong offset!");

// Class CrewUI.FortProgressiveItemScreen
// 0x0110 (0x08B8 - 0x07A8)
class UFortProgressiveItemScreen : public UFortProgressiveScreenBase
{
public:
	class UWidget*                                ContentPurchasedFocusWidget;                       // 0x07A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x07B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TouchBack;                                  // 0x07B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x07C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Subscribe;                                  // 0x07C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_PreviewStyles;                              // 0x07D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ExpirationFinePrint;                          // 0x07D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_NewStagesUnlockFinePrint;                     // 0x07E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_StagesPips;                               // 0x07E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroupBase*                 ButtonGroup_StagesPips;                            // 0x07F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveItemDetailsWidget*      Widget_ProgressiveItemDetails;                     // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveStageList*              Widget_ProgressiveStageList;                       // 0x0800(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveItemStateTitleWidget*   ProgressiveItemStateTitle;                         // 0x0808(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   MoreInfoModalClass;                                // 0x0810(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubscribedMaterialParameterName;                   // 0x0830(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_834[0x84];                                     // 0x0834(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnErrorStateTextUpdated(const class FText& ErrorStateText);
	void OnItemSelected();
	void OnUpdateSubscriptionState(const bool bSubscribed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveItemScreen">();
	}
	static class UFortProgressiveItemScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveItemScreen>();
	}
};
static_assert(alignof(UFortProgressiveItemScreen) == 0x000008, "Wrong alignment on UFortProgressiveItemScreen");
static_assert(sizeof(UFortProgressiveItemScreen) == 0x0008B8, "Wrong size on UFortProgressiveItemScreen");
static_assert(offsetof(UFortProgressiveItemScreen, ContentPurchasedFocusWidget) == 0x0007A8, "Member 'UFortProgressiveItemScreen::ContentPurchasedFocusWidget' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Button_Back) == 0x0007B0, "Member 'UFortProgressiveItemScreen::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Button_TouchBack) == 0x0007B8, "Member 'UFortProgressiveItemScreen::Button_TouchBack' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Button_MoreInfo) == 0x0007C0, "Member 'UFortProgressiveItemScreen::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Button_Subscribe) == 0x0007C8, "Member 'UFortProgressiveItemScreen::Button_Subscribe' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Button_PreviewStyles) == 0x0007D0, "Member 'UFortProgressiveItemScreen::Button_PreviewStyles' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Text_ExpirationFinePrint) == 0x0007D8, "Member 'UFortProgressiveItemScreen::Text_ExpirationFinePrint' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Text_NewStagesUnlockFinePrint) == 0x0007E0, "Member 'UFortProgressiveItemScreen::Text_NewStagesUnlockFinePrint' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, EntryBox_StagesPips) == 0x0007E8, "Member 'UFortProgressiveItemScreen::EntryBox_StagesPips' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, ButtonGroup_StagesPips) == 0x0007F0, "Member 'UFortProgressiveItemScreen::ButtonGroup_StagesPips' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Widget_ProgressiveItemDetails) == 0x0007F8, "Member 'UFortProgressiveItemScreen::Widget_ProgressiveItemDetails' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, Widget_ProgressiveStageList) == 0x000800, "Member 'UFortProgressiveItemScreen::Widget_ProgressiveStageList' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, ProgressiveItemStateTitle) == 0x000808, "Member 'UFortProgressiveItemScreen::ProgressiveItemStateTitle' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, MoreInfoModalClass) == 0x000810, "Member 'UFortProgressiveItemScreen::MoreInfoModalClass' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemScreen, SubscribedMaterialParameterName) == 0x000830, "Member 'UFortProgressiveItemScreen::SubscribedMaterialParameterName' has a wrong offset!");

// Class CrewUI.FortProgressiveItemStateTitleWidget
// 0x0000 (0x02C0 - 0x02C0)
class UFortProgressiveItemStateTitleWidget : public UUserWidget
{
public:
	void BP_OnSetHeaderInfo(const class FText& Subheading, const bool bSubscribed, const int32 UnlockedStages, const int32 MaxStages);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveItemStateTitleWidget">();
	}
	static class UFortProgressiveItemStateTitleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveItemStateTitleWidget>();
	}
};
static_assert(alignof(UFortProgressiveItemStateTitleWidget) == 0x000008, "Wrong alignment on UFortProgressiveItemStateTitleWidget");
static_assert(sizeof(UFortProgressiveItemStateTitleWidget) == 0x0002C0, "Wrong size on UFortProgressiveItemStateTitleWidget");

// Class CrewUI.FortProgressiveItemWidget
// 0x0090 (0x1520 - 0x1490)
class UFortProgressiveItemWidget : public UCommonButtonBase
{
public:
	class UAthenaItemShopReactiveTileText*        TileText_ItemName;                                 // 0x1490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FProgressiveStageItemInfo              StageItemInfo;                                     // 0x1498(0x0068)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1500[0x20];                                    // 0x1500(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHighlighted();
	void OnPeekStateChanged(bool bIsInPeekState);
	void OnStageItemChanged(const struct FProgressiveStageItemInfo& InStageItemInfo);
	void OnTileMaterialLoaded(const bool bSubscribed);
	void OnUnhighlighted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveItemWidget">();
	}
	static class UFortProgressiveItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveItemWidget>();
	}
};
static_assert(alignof(UFortProgressiveItemWidget) == 0x000010, "Wrong alignment on UFortProgressiveItemWidget");
static_assert(sizeof(UFortProgressiveItemWidget) == 0x001520, "Wrong size on UFortProgressiveItemWidget");
static_assert(offsetof(UFortProgressiveItemWidget, TileText_ItemName) == 0x001490, "Member 'UFortProgressiveItemWidget::TileText_ItemName' has a wrong offset!");
static_assert(offsetof(UFortProgressiveItemWidget, StageItemInfo) == 0x001498, "Member 'UFortProgressiveItemWidget::StageItemInfo' has a wrong offset!");

// Class CrewUI.FortProgressiveSetDetailsWidget
// 0x0030 (0x02F0 - 0x02C0)
class UFortProgressiveSetDetailsWidget : public UUserWidget
{
public:
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x28];                                     // 0x02C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnUpdateSetDetails(const class FText& SetName, const class FText& ExpiringText, const bool bCompleted);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveSetDetailsWidget">();
	}
	static class UFortProgressiveSetDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveSetDetailsWidget>();
	}
};
static_assert(alignof(UFortProgressiveSetDetailsWidget) == 0x000008, "Wrong alignment on UFortProgressiveSetDetailsWidget");
static_assert(sizeof(UFortProgressiveSetDetailsWidget) == 0x0002F0, "Wrong size on UFortProgressiveSetDetailsWidget");
static_assert(offsetof(UFortProgressiveSetDetailsWidget, Button_MoreInfo) == 0x0002C0, "Member 'UFortProgressiveSetDetailsWidget::Button_MoreInfo' has a wrong offset!");

// Class CrewUI.FortProgressiveSetList
// 0x0080 (0x0480 - 0x0400)
class UFortProgressiveSetList : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaScrollBox*                       ScrollBox_SetList;                                 // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSwipePanel*                        SwipePanel_Navigation;                             // 0x0410(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroupBase*                 ButtonGroup_SetTiles;                              // 0x0418(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumTilesPerPage;                                   // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortProgressiveSetTile*>        SetTiles;                                          // 0x0428(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_438[0x48];                                     // 0x0438(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortProgressiveSetTile* AddSetTile();
	void ClearSetTiles();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveSetList">();
	}
	static class UFortProgressiveSetList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveSetList>();
	}
};
static_assert(alignof(UFortProgressiveSetList) == 0x000008, "Wrong alignment on UFortProgressiveSetList");
static_assert(sizeof(UFortProgressiveSetList) == 0x000480, "Wrong size on UFortProgressiveSetList");
static_assert(offsetof(UFortProgressiveSetList, ScrollBox_SetList) == 0x000408, "Member 'UFortProgressiveSetList::ScrollBox_SetList' has a wrong offset!");
static_assert(offsetof(UFortProgressiveSetList, SwipePanel_Navigation) == 0x000410, "Member 'UFortProgressiveSetList::SwipePanel_Navigation' has a wrong offset!");
static_assert(offsetof(UFortProgressiveSetList, ButtonGroup_SetTiles) == 0x000418, "Member 'UFortProgressiveSetList::ButtonGroup_SetTiles' has a wrong offset!");
static_assert(offsetof(UFortProgressiveSetList, NumTilesPerPage) == 0x000420, "Member 'UFortProgressiveSetList::NumTilesPerPage' has a wrong offset!");
static_assert(offsetof(UFortProgressiveSetList, SetTiles) == 0x000428, "Member 'UFortProgressiveSetList::SetTiles' has a wrong offset!");

// Class CrewUI.FortProgressiveSetTile
// 0x00A0 (0x1530 - 0x1490)
class UFortProgressiveSetTile : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0xA0];                                    // 0x1490(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnInitializeSetInfo(const struct FProgressiveSetInfo& InSetInfo, const class FText& BottomText, const class FText& BottomSubtext, const bool bSubscribed);
	void BP_OnTileMaterialLoaded(const bool bSubscribed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveSetTile">();
	}
	static class UFortProgressiveSetTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveSetTile>();
	}
};
static_assert(alignof(UFortProgressiveSetTile) == 0x000010, "Wrong alignment on UFortProgressiveSetTile");
static_assert(sizeof(UFortProgressiveSetTile) == 0x001530, "Wrong size on UFortProgressiveSetTile");

// Class CrewUI.FortProgressiveStageList
// 0x0050 (0x0450 - 0x0400)
class UFortProgressiveStageList : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x18];                                     // 0x0400(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonGroupBase*                 ButtonGroup_StageItems;                            // 0x0418(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaScrollBox*                       ScrollBox_StageList;                               // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortSwipePanel*                        SwipePanel_Navigation;                             // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortProgressiveStageWidget*>    Stages;                                            // 0x0438(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortProgressiveStageWidget* AddStageWidget();
	void ClearStageWidgets();
	void SelectStageInDirection(const int32 Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveStageList">();
	}
	static class UFortProgressiveStageList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveStageList>();
	}
};
static_assert(alignof(UFortProgressiveStageList) == 0x000008, "Wrong alignment on UFortProgressiveStageList");
static_assert(sizeof(UFortProgressiveStageList) == 0x000450, "Wrong size on UFortProgressiveStageList");
static_assert(offsetof(UFortProgressiveStageList, ButtonGroup_StageItems) == 0x000418, "Member 'UFortProgressiveStageList::ButtonGroup_StageItems' has a wrong offset!");
static_assert(offsetof(UFortProgressiveStageList, ScrollBox_StageList) == 0x000420, "Member 'UFortProgressiveStageList::ScrollBox_StageList' has a wrong offset!");
static_assert(offsetof(UFortProgressiveStageList, SwipePanel_Navigation) == 0x000428, "Member 'UFortProgressiveStageList::SwipePanel_Navigation' has a wrong offset!");
static_assert(offsetof(UFortProgressiveStageList, Stages) == 0x000438, "Member 'UFortProgressiveStageList::Stages' has a wrong offset!");

// Class CrewUI.FortProgressiveStageWidget
// 0x0020 (0x0308 - 0x02E8)
class UFortProgressiveStageWidget : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       Text_Month;                                        // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x18];                                     // 0x02F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortProgressiveItemWidget* AddStageItemWidget();
	void ClearStageItemWidgets();
	void OnPeekStateChanged(bool bIsInPeekState);
	void OnSetTooltipText(const class FText& InToolTipText);
	void OnSetTooltipVisible(const bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveStageWidget">();
	}
	static class UFortProgressiveStageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveStageWidget>();
	}
};
static_assert(alignof(UFortProgressiveStageWidget) == 0x000008, "Wrong alignment on UFortProgressiveStageWidget");
static_assert(sizeof(UFortProgressiveStageWidget) == 0x000308, "Wrong size on UFortProgressiveStageWidget");
static_assert(offsetof(UFortProgressiveStageWidget, Text_Month) == 0x0002E8, "Member 'UFortProgressiveStageWidget::Text_Month' has a wrong offset!");

// Class CrewUI.FortProgressiveTableOfContentsScreen
// 0x0088 (0x0830 - 0x07A8)
class UFortProgressiveTableOfContentsScreen : public UFortProgressiveScreenBase
{
public:
	class UWidget*                                ContentPurchasedFocusWidget;                       // 0x07A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x07B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TouchBack;                                  // 0x07B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x07C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBattlePassCrewPurchaseButton*          Button_Subscribe;                                  // 0x07C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveSetList*                Widget_SetList;                                    // 0x07D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveSetDetailsWidget*       Widget_SetDetails;                                 // 0x07D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortProgressiveItemStateTitleWidget*   Widget_ItemStateTitle;                             // 0x07E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       EntryBox_SetPagesPips;                             // 0x07E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonGroupBase*                 ButtonGroup_SetPagesPips;                          // 0x07F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   MoreInfoModalClass;                                // 0x07F8(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SubscribedMaterialParameterName;                   // 0x0818(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81C[0x14];                                     // 0x081C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnSetDescriptionText(const class FText& ProductDescription);
	void BP_OnUpdateBanner(const class FText& BannerText, const bool bAllSetsCompleted, const bool bSubscribed);
	void BP_OnUpdateErrorStateText(const class FText& ErrorStateText);
	void BP_OnUpdateNumTilesAvailable(const int32 NumTiles);
	void BP_OnUpdateSubscriptionState(const bool bSubscribed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortProgressiveTableOfContentsScreen">();
	}
	static class UFortProgressiveTableOfContentsScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortProgressiveTableOfContentsScreen>();
	}
};
static_assert(alignof(UFortProgressiveTableOfContentsScreen) == 0x000008, "Wrong alignment on UFortProgressiveTableOfContentsScreen");
static_assert(sizeof(UFortProgressiveTableOfContentsScreen) == 0x000830, "Wrong size on UFortProgressiveTableOfContentsScreen");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, ContentPurchasedFocusWidget) == 0x0007A8, "Member 'UFortProgressiveTableOfContentsScreen::ContentPurchasedFocusWidget' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Button_Back) == 0x0007B0, "Member 'UFortProgressiveTableOfContentsScreen::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Button_TouchBack) == 0x0007B8, "Member 'UFortProgressiveTableOfContentsScreen::Button_TouchBack' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Button_MoreInfo) == 0x0007C0, "Member 'UFortProgressiveTableOfContentsScreen::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Button_Subscribe) == 0x0007C8, "Member 'UFortProgressiveTableOfContentsScreen::Button_Subscribe' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Widget_SetList) == 0x0007D0, "Member 'UFortProgressiveTableOfContentsScreen::Widget_SetList' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Widget_SetDetails) == 0x0007D8, "Member 'UFortProgressiveTableOfContentsScreen::Widget_SetDetails' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, Widget_ItemStateTitle) == 0x0007E0, "Member 'UFortProgressiveTableOfContentsScreen::Widget_ItemStateTitle' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, EntryBox_SetPagesPips) == 0x0007E8, "Member 'UFortProgressiveTableOfContentsScreen::EntryBox_SetPagesPips' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, ButtonGroup_SetPagesPips) == 0x0007F0, "Member 'UFortProgressiveTableOfContentsScreen::ButtonGroup_SetPagesPips' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, MoreInfoModalClass) == 0x0007F8, "Member 'UFortProgressiveTableOfContentsScreen::MoreInfoModalClass' has a wrong offset!");
static_assert(offsetof(UFortProgressiveTableOfContentsScreen, SubscribedMaterialParameterName) == 0x000818, "Member 'UFortProgressiveTableOfContentsScreen::SubscribedMaterialParameterName' has a wrong offset!");

// Class CrewUI.FortTemporaryItemsScreen
// 0x00C8 (0x07F8 - 0x0730)
class UFortTemporaryItemsScreen : public UFortItemPreviewScreen
{
public:
	uint8                                         Pad_730[0x60];                                     // 0x0730(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           VerticalBox_CategoryList;                          // 0x0790(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_798[0x18];                                     // 0x0798(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Back;                                       // 0x07B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_TouchBack;                                  // 0x07B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x07C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortTemporaryItemsScreenItemInfo*      Widget_Description;                                // 0x07C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   MoreInfoModalClass;                                // 0x07D0(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F0[0x8];                                      // 0x07F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnContainerTabVisibilityUpdated(const bool bTabsVisible, const float SpacingAdjustmentForTabs);
	class UFortSubscriptionVM* GetSubscriptionVM();
	void SetupRowEntry(class UFortTemporaryItemsRow* RewardRow);

	class FText GetRemainingDaysLabel(const class UFortTemporaryItemsVM* TemporaryItemsVM) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTemporaryItemsScreen">();
	}
	static class UFortTemporaryItemsScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTemporaryItemsScreen>();
	}
};
static_assert(alignof(UFortTemporaryItemsScreen) == 0x000008, "Wrong alignment on UFortTemporaryItemsScreen");
static_assert(sizeof(UFortTemporaryItemsScreen) == 0x0007F8, "Wrong size on UFortTemporaryItemsScreen");
static_assert(offsetof(UFortTemporaryItemsScreen, VerticalBox_CategoryList) == 0x000790, "Member 'UFortTemporaryItemsScreen::VerticalBox_CategoryList' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreen, Button_Back) == 0x0007B0, "Member 'UFortTemporaryItemsScreen::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreen, Button_TouchBack) == 0x0007B8, "Member 'UFortTemporaryItemsScreen::Button_TouchBack' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreen, Button_MoreInfo) == 0x0007C0, "Member 'UFortTemporaryItemsScreen::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreen, Widget_Description) == 0x0007C8, "Member 'UFortTemporaryItemsScreen::Widget_Description' has a wrong offset!");
static_assert(offsetof(UFortTemporaryItemsScreen, MoreInfoModalClass) == 0x0007D0, "Member 'UFortTemporaryItemsScreen::MoreInfoModalClass' has a wrong offset!");

}

