#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamPlayspaceRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "FMJamCoreRuntime_structs.hpp"
#include "FMJamPlayspaceRuntime_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "PlayspaceSystem_structs.hpp"
#include "SparksMusicPlayspaceRuntime_structs.hpp"


namespace SDK::Params
{

// Function FMJamPlayspaceRuntime.JamPlayspace.ConvertPlayerToAutoJammer
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspace_ConvertPlayerToAutoJammer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_ConvertPlayerToAutoJammer) == 0x000008, "Wrong alignment on JamPlayspace_ConvertPlayerToAutoJammer");
static_assert(sizeof(JamPlayspace_ConvertPlayerToAutoJammer) == 0x000008, "Wrong size on JamPlayspace_ConvertPlayerToAutoJammer");
static_assert(offsetof(JamPlayspace_ConvertPlayerToAutoJammer, PlayerState) == 0x000000, "Member 'JamPlayspace_ConvertPlayerToAutoJammer::PlayerState' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetJamAudioSource
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspace_GetJamAudioSource final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetJamAudioSource) == 0x000008, "Wrong alignment on JamPlayspace_GetJamAudioSource");
static_assert(sizeof(JamPlayspace_GetJamAudioSource) == 0x000008, "Wrong size on JamPlayspace_GetJamAudioSource");
static_assert(offsetof(JamPlayspace_GetJamAudioSource, ReturnValue) == 0x000000, "Member 'JamPlayspace_GetJamAudioSource::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.PlayLoop
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_PlayLoop final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamLoopType                                LoopType;                                          // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAudioState;                                  // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoJammer;                                     // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspace_PlayLoop) == 0x000008, "Wrong alignment on JamPlayspace_PlayLoop");
static_assert(sizeof(JamPlayspace_PlayLoop) == 0x000010, "Wrong size on JamPlayspace_PlayLoop");
static_assert(offsetof(JamPlayspace_PlayLoop, PlayerState) == 0x000000, "Member 'JamPlayspace_PlayLoop::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspace_PlayLoop, SongShortName) == 0x000008, "Member 'JamPlayspace_PlayLoop::SongShortName' has a wrong offset!");
static_assert(offsetof(JamPlayspace_PlayLoop, LoopType) == 0x00000C, "Member 'JamPlayspace_PlayLoop::LoopType' has a wrong offset!");
static_assert(offsetof(JamPlayspace_PlayLoop, bForceAudioState) == 0x00000D, "Member 'JamPlayspace_PlayLoop::bForceAudioState' has a wrong offset!");
static_assert(offsetof(JamPlayspace_PlayLoop, bIsAutoJammer) == 0x00000E, "Member 'JamPlayspace_PlayLoop::bIsAutoJammer' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.StopAllLoopsForLoopType
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspace_StopAllLoopsForLoopType final
{
public:
	EFMJamLoopType                                LoopType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_StopAllLoopsForLoopType) == 0x000001, "Wrong alignment on JamPlayspace_StopAllLoopsForLoopType");
static_assert(sizeof(JamPlayspace_StopAllLoopsForLoopType) == 0x000001, "Wrong size on JamPlayspace_StopAllLoopsForLoopType");
static_assert(offsetof(JamPlayspace_StopAllLoopsForLoopType, LoopType) == 0x000000, "Member 'JamPlayspace_StopAllLoopsForLoopType::LoopType' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.StopAutoJammersForPlayer
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspace_StopAutoJammersForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_StopAutoJammersForPlayer) == 0x000008, "Wrong alignment on JamPlayspace_StopAutoJammersForPlayer");
static_assert(sizeof(JamPlayspace_StopAutoJammersForPlayer) == 0x000008, "Wrong size on JamPlayspace_StopAutoJammersForPlayer");
static_assert(offsetof(JamPlayspace_StopAutoJammersForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspace_StopAutoJammersForPlayer::PlayerState' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.StopLoopByInstanceId
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspace_StopLoopByInstanceId final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_StopLoopByInstanceId) == 0x000004, "Wrong alignment on JamPlayspace_StopLoopByInstanceId");
static_assert(sizeof(JamPlayspace_StopLoopByInstanceId) == 0x000004, "Wrong size on JamPlayspace_StopLoopByInstanceId");
static_assert(offsetof(JamPlayspace_StopLoopByInstanceId, LoopInstanceId) == 0x000000, "Member 'JamPlayspace_StopLoopByInstanceId::LoopInstanceId' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.StopLoopForPlayer
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_StopLoopForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAutoJammers;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspace_StopLoopForPlayer) == 0x000008, "Wrong alignment on JamPlayspace_StopLoopForPlayer");
static_assert(sizeof(JamPlayspace_StopLoopForPlayer) == 0x000010, "Wrong size on JamPlayspace_StopLoopForPlayer");
static_assert(offsetof(JamPlayspace_StopLoopForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspace_StopLoopForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspace_StopLoopForPlayer, bStopAutoJammers) == 0x000008, "Member 'JamPlayspace_StopLoopForPlayer::bStopAutoJammers' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.CountActiveLoops
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspace_CountActiveLoops final
{
public:
	bool                                          bCountAutoJammers;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_CountActiveLoops) == 0x000004, "Wrong alignment on JamPlayspace_CountActiveLoops");
static_assert(sizeof(JamPlayspace_CountActiveLoops) == 0x000008, "Wrong size on JamPlayspace_CountActiveLoops");
static_assert(offsetof(JamPlayspace_CountActiveLoops, bCountAutoJammers) == 0x000000, "Member 'JamPlayspace_CountActiveLoops::bCountAutoJammers' has a wrong offset!");
static_assert(offsetof(JamPlayspace_CountActiveLoops, ReturnValue) == 0x000004, "Member 'JamPlayspace_CountActiveLoops::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.DoAnyOtherJammersHaveGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_DoAnyOtherJammersHaveGameplayTag final
{
public:
	const class APlayerState*                     LocalPlayerState;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GlobalControlsTag;                                 // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspace_DoAnyOtherJammersHaveGameplayTag) == 0x000008, "Wrong alignment on JamPlayspace_DoAnyOtherJammersHaveGameplayTag");
static_assert(sizeof(JamPlayspace_DoAnyOtherJammersHaveGameplayTag) == 0x000010, "Wrong size on JamPlayspace_DoAnyOtherJammersHaveGameplayTag");
static_assert(offsetof(JamPlayspace_DoAnyOtherJammersHaveGameplayTag, LocalPlayerState) == 0x000000, "Member 'JamPlayspace_DoAnyOtherJammersHaveGameplayTag::LocalPlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspace_DoAnyOtherJammersHaveGameplayTag, GlobalControlsTag) == 0x000008, "Member 'JamPlayspace_DoAnyOtherJammersHaveGameplayTag::GlobalControlsTag' has a wrong offset!");
static_assert(offsetof(JamPlayspace_DoAnyOtherJammersHaveGameplayTag, ReturnValue) == 0x00000C, "Member 'JamPlayspace_DoAnyOtherJammersHaveGameplayTag::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetAllowGlobalControlAccess
// 0x0028 (0x0028 - 0x0000)
struct JamPlayspace_GetAllowGlobalControlAccess final
{
public:
	bool                                          OutAllowGlobalControlAccess;                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OutRestrictionReason;                              // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetAllowGlobalControlAccess) == 0x000008, "Wrong alignment on JamPlayspace_GetAllowGlobalControlAccess");
static_assert(sizeof(JamPlayspace_GetAllowGlobalControlAccess) == 0x000028, "Wrong size on JamPlayspace_GetAllowGlobalControlAccess");
static_assert(offsetof(JamPlayspace_GetAllowGlobalControlAccess, OutAllowGlobalControlAccess) == 0x000000, "Member 'JamPlayspace_GetAllowGlobalControlAccess::OutAllowGlobalControlAccess' has a wrong offset!");
static_assert(offsetof(JamPlayspace_GetAllowGlobalControlAccess, OutRestrictionReason) == 0x000008, "Member 'JamPlayspace_GetAllowGlobalControlAccess::OutRestrictionReason' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetJammers
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_GetJammers final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetJammers) == 0x000008, "Wrong alignment on JamPlayspace_GetJammers");
static_assert(sizeof(JamPlayspace_GetJammers) == 0x000010, "Wrong size on JamPlayspace_GetJammers");
static_assert(offsetof(JamPlayspace_GetJammers, ReturnValue) == 0x000000, "Member 'JamPlayspace_GetJammers::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotForPlayer
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_GetMusicSlotForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJamMusicSlot*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetMusicSlotForPlayer) == 0x000008, "Wrong alignment on JamPlayspace_GetMusicSlotForPlayer");
static_assert(sizeof(JamPlayspace_GetMusicSlotForPlayer) == 0x000010, "Wrong size on JamPlayspace_GetMusicSlotForPlayer");
static_assert(offsetof(JamPlayspace_GetMusicSlotForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspace_GetMusicSlotForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspace_GetMusicSlotForPlayer, ReturnValue) == 0x000008, "Member 'JamPlayspace_GetMusicSlotForPlayer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlots
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_GetMusicSlots final
{
public:
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetMusicSlots) == 0x000008, "Wrong alignment on JamPlayspace_GetMusicSlots");
static_assert(sizeof(JamPlayspace_GetMusicSlots) == 0x000010, "Wrong size on JamPlayspace_GetMusicSlots");
static_assert(offsetof(JamPlayspace_GetMusicSlots, ReturnValue) == 0x000000, "Member 'JamPlayspace_GetMusicSlots::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsForLoopType
// 0x0018 (0x0018 - 0x0000)
struct JamPlayspace_GetMusicSlotsForLoopType final
{
public:
	EFMJamLoopType                                LoopType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetMusicSlotsForLoopType) == 0x000008, "Wrong alignment on JamPlayspace_GetMusicSlotsForLoopType");
static_assert(sizeof(JamPlayspace_GetMusicSlotsForLoopType) == 0x000018, "Wrong size on JamPlayspace_GetMusicSlotsForLoopType");
static_assert(offsetof(JamPlayspace_GetMusicSlotsForLoopType, LoopType) == 0x000000, "Member 'JamPlayspace_GetMusicSlotsForLoopType::LoopType' has a wrong offset!");
static_assert(offsetof(JamPlayspace_GetMusicSlotsForLoopType, ReturnValue) == 0x000008, "Member 'JamPlayspace_GetMusicSlotsForLoopType::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsInUse
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_GetMusicSlotsInUse final
{
public:
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetMusicSlotsInUse) == 0x000008, "Wrong alignment on JamPlayspace_GetMusicSlotsInUse");
static_assert(sizeof(JamPlayspace_GetMusicSlotsInUse) == 0x000010, "Wrong size on JamPlayspace_GetMusicSlotsInUse");
static_assert(offsetof(JamPlayspace_GetMusicSlotsInUse, ReturnValue) == 0x000000, "Member 'JamPlayspace_GetMusicSlotsInUse::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsSortedByLoopType
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspace_GetMusicSlotsSortedByLoopType final
{
public:
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_GetMusicSlotsSortedByLoopType) == 0x000008, "Wrong alignment on JamPlayspace_GetMusicSlotsSortedByLoopType");
static_assert(sizeof(JamPlayspace_GetMusicSlotsSortedByLoopType) == 0x000010, "Wrong size on JamPlayspace_GetMusicSlotsSortedByLoopType");
static_assert(offsetof(JamPlayspace_GetMusicSlotsSortedByLoopType, ReturnValue) == 0x000000, "Member 'JamPlayspace_GetMusicSlotsSortedByLoopType::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspace.IsJamFull
// 0x0002 (0x0002 - 0x0000)
struct JamPlayspace_IsJamFull final
{
public:
	bool                                          bCountAutoJammers;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspace_IsJamFull) == 0x000001, "Wrong alignment on JamPlayspace_IsJamFull");
static_assert(sizeof(JamPlayspace_IsJamFull) == 0x000002, "Wrong size on JamPlayspace_IsJamFull");
static_assert(offsetof(JamPlayspace_IsJamFull, bCountAutoJammers) == 0x000000, "Member 'JamPlayspace_IsJamFull::bCountAutoJammers' has a wrong offset!");
static_assert(offsetof(JamPlayspace_IsJamFull, ReturnValue) == 0x000001, "Member 'JamPlayspace_IsJamFull::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnCMSCatalogRequestFinished
// 0x0010 (0x0010 - 0x0000)
struct JamMusicSlot_OnCMSCatalogRequestFinished final
{
public:
	class UFMJamSongCatalog*                      Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamMusicSlot_OnCMSCatalogRequestFinished) == 0x000008, "Wrong alignment on JamMusicSlot_OnCMSCatalogRequestFinished");
static_assert(sizeof(JamMusicSlot_OnCMSCatalogRequestFinished) == 0x000010, "Wrong size on JamMusicSlot_OnCMSCatalogRequestFinished");
static_assert(offsetof(JamMusicSlot_OnCMSCatalogRequestFinished, Sender) == 0x000000, "Member 'JamMusicSlot_OnCMSCatalogRequestFinished::Sender' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnCMSCatalogRequestFinished, bSuccess) == 0x000008, "Member 'JamMusicSlot_OnCMSCatalogRequestFinished::bSuccess' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnJamLoadRequestComplete
// 0x0020 (0x0020 - 0x0000)
struct JamMusicSlot_OnJamLoadRequestComplete final
{
public:
	struct FJamLoadResult                         LoadResult;                                        // 0x0000(0x0020)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_OnJamLoadRequestComplete) == 0x000008, "Wrong alignment on JamMusicSlot_OnJamLoadRequestComplete");
static_assert(sizeof(JamMusicSlot_OnJamLoadRequestComplete) == 0x000020, "Wrong size on JamMusicSlot_OnJamLoadRequestComplete");
static_assert(offsetof(JamMusicSlot_OnJamLoadRequestComplete, LoadResult) == 0x000000, "Member 'JamMusicSlot_OnJamLoadRequestComplete::LoadResult' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnJamResolverComplete
// 0x0020 (0x0020 - 0x0000)
struct JamMusicSlot_OnJamResolverComplete final
{
public:
	class UJamContentResolver*                    Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkCode;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAlreadyLoaded;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamMusicSlot_OnJamResolverComplete) == 0x000008, "Wrong alignment on JamMusicSlot_OnJamResolverComplete");
static_assert(sizeof(JamMusicSlot_OnJamResolverComplete) == 0x000020, "Wrong size on JamMusicSlot_OnJamResolverComplete");
static_assert(offsetof(JamMusicSlot_OnJamResolverComplete, Sender) == 0x000000, "Member 'JamMusicSlot_OnJamResolverComplete::Sender' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnJamResolverComplete, LinkCode) == 0x000008, "Member 'JamMusicSlot_OnJamResolverComplete::LinkCode' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnJamResolverComplete, bSuccess) == 0x000018, "Member 'JamMusicSlot_OnJamResolverComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnJamResolverComplete, bWasAlreadyLoaded) == 0x000019, "Member 'JamMusicSlot_OnJamResolverComplete::bWasAlreadyLoaded' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnRep_CurrentPlayParams
// 0x0038 (0x0038 - 0x0000)
struct JamMusicSlot_OnRep_CurrentPlayParams final
{
public:
	struct FJamPlayParams                         OldPlayParams;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_OnRep_CurrentPlayParams) == 0x000008, "Wrong alignment on JamMusicSlot_OnRep_CurrentPlayParams");
static_assert(sizeof(JamMusicSlot_OnRep_CurrentPlayParams) == 0x000038, "Wrong size on JamMusicSlot_OnRep_CurrentPlayParams");
static_assert(offsetof(JamMusicSlot_OnRep_CurrentPlayParams, OldPlayParams) == 0x000000, "Member 'JamMusicSlot_OnRep_CurrentPlayParams::OldPlayParams' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnScanForSongsCompleted
// 0x0018 (0x0018 - 0x0000)
struct JamMusicSlot_OnScanForSongsCompleted final
{
public:
	class UFMJamSongCatalog*                      Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFMJamSong*>                     AddedSongs;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_OnScanForSongsCompleted) == 0x000008, "Wrong alignment on JamMusicSlot_OnScanForSongsCompleted");
static_assert(sizeof(JamMusicSlot_OnScanForSongsCompleted) == 0x000018, "Wrong size on JamMusicSlot_OnScanForSongsCompleted");
static_assert(offsetof(JamMusicSlot_OnScanForSongsCompleted, Sender) == 0x000000, "Member 'JamMusicSlot_OnScanForSongsCompleted::Sender' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnScanForSongsCompleted, AddedSongs) == 0x000008, "Member 'JamMusicSlot_OnScanForSongsCompleted::AddedSongs' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.OnTerminatingLinkCode
// 0x0018 (0x0018 - 0x0000)
struct JamMusicSlot_OnTerminatingLinkCode final
{
public:
	class UJamContentResolver*                    Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkCode;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_OnTerminatingLinkCode) == 0x000008, "Wrong alignment on JamMusicSlot_OnTerminatingLinkCode");
static_assert(sizeof(JamMusicSlot_OnTerminatingLinkCode) == 0x000018, "Wrong size on JamMusicSlot_OnTerminatingLinkCode");
static_assert(offsetof(JamMusicSlot_OnTerminatingLinkCode, Sender) == 0x000000, "Member 'JamMusicSlot_OnTerminatingLinkCode::Sender' has a wrong offset!");
static_assert(offsetof(JamMusicSlot_OnTerminatingLinkCode, LinkCode) == 0x000008, "Member 'JamMusicSlot_OnTerminatingLinkCode::LinkCode' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentCatalogEntry
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetCurrentCatalogEntry final
{
public:
	const class UCatalogData*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentCatalogEntry) == 0x000008, "Wrong alignment on JamMusicSlot_GetCurrentCatalogEntry");
static_assert(sizeof(JamMusicSlot_GetCurrentCatalogEntry) == 0x000008, "Wrong size on JamMusicSlot_GetCurrentCatalogEntry");
static_assert(offsetof(JamMusicSlot_GetCurrentCatalogEntry, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentCatalogEntry::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentKey
// 0x0001 (0x0001 - 0x0000)
struct JamMusicSlot_GetCurrentKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentKey) == 0x000001, "Wrong alignment on JamMusicSlot_GetCurrentKey");
static_assert(sizeof(JamMusicSlot_GetCurrentKey) == 0x000001, "Wrong size on JamMusicSlot_GetCurrentKey");
static_assert(offsetof(JamMusicSlot_GetCurrentKey, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentKey::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoop
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetCurrentLoop final
{
public:
	const class UFMJamLoop*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentLoop) == 0x000008, "Wrong alignment on JamMusicSlot_GetCurrentLoop");
static_assert(sizeof(JamMusicSlot_GetCurrentLoop) == 0x000008, "Wrong size on JamMusicSlot_GetCurrentLoop");
static_assert(offsetof(JamMusicSlot_GetCurrentLoop, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentLoop::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoopInstanceId
// 0x0004 (0x0004 - 0x0000)
struct JamMusicSlot_GetCurrentLoopInstanceId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentLoopInstanceId) == 0x000004, "Wrong alignment on JamMusicSlot_GetCurrentLoopInstanceId");
static_assert(sizeof(JamMusicSlot_GetCurrentLoopInstanceId) == 0x000004, "Wrong size on JamMusicSlot_GetCurrentLoopInstanceId");
static_assert(offsetof(JamMusicSlot_GetCurrentLoopInstanceId, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentLoopInstanceId::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoopType
// 0x0001 (0x0001 - 0x0000)
struct JamMusicSlot_GetCurrentLoopType final
{
public:
	EFMJamLoopType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentLoopType) == 0x000001, "Wrong alignment on JamMusicSlot_GetCurrentLoopType");
static_assert(sizeof(JamMusicSlot_GetCurrentLoopType) == 0x000001, "Wrong size on JamMusicSlot_GetCurrentLoopType");
static_assert(offsetof(JamMusicSlot_GetCurrentLoopType, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentLoopType::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentMode
// 0x0001 (0x0001 - 0x0000)
struct JamMusicSlot_GetCurrentMode final
{
public:
	EMusicKeyMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentMode) == 0x000001, "Wrong alignment on JamMusicSlot_GetCurrentMode");
static_assert(sizeof(JamMusicSlot_GetCurrentMode) == 0x000001, "Wrong size on JamMusicSlot_GetCurrentMode");
static_assert(offsetof(JamMusicSlot_GetCurrentMode, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentMode::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentPlayerState
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetCurrentPlayerState final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentPlayerState) == 0x000008, "Wrong alignment on JamMusicSlot_GetCurrentPlayerState");
static_assert(sizeof(JamMusicSlot_GetCurrentPlayerState) == 0x000008, "Wrong size on JamMusicSlot_GetCurrentPlayerState");
static_assert(offsetof(JamMusicSlot_GetCurrentPlayerState, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentPlayerState::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSong
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetCurrentSong final
{
public:
	const class UFMJamSong*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentSong) == 0x000008, "Wrong alignment on JamMusicSlot_GetCurrentSong");
static_assert(sizeof(JamMusicSlot_GetCurrentSong) == 0x000008, "Wrong size on JamMusicSlot_GetCurrentSong");
static_assert(offsetof(JamMusicSlot_GetCurrentSong, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentSong::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSongLinkCode
// 0x0010 (0x0010 - 0x0000)
struct JamMusicSlot_GetCurrentSongLinkCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentSongLinkCode) == 0x000008, "Wrong alignment on JamMusicSlot_GetCurrentSongLinkCode");
static_assert(sizeof(JamMusicSlot_GetCurrentSongLinkCode) == 0x000010, "Wrong size on JamMusicSlot_GetCurrentSongLinkCode");
static_assert(offsetof(JamMusicSlot_GetCurrentSongLinkCode, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentSongLinkCode::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSongShortName
// 0x0004 (0x0004 - 0x0000)
struct JamMusicSlot_GetCurrentSongShortName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentSongShortName) == 0x000004, "Wrong alignment on JamMusicSlot_GetCurrentSongShortName");
static_assert(sizeof(JamMusicSlot_GetCurrentSongShortName) == 0x000004, "Wrong size on JamMusicSlot_GetCurrentSongShortName");
static_assert(offsetof(JamMusicSlot_GetCurrentSongShortName, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentSongShortName::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentTempo
// 0x0004 (0x0004 - 0x0000)
struct JamMusicSlot_GetCurrentTempo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetCurrentTempo) == 0x000004, "Wrong alignment on JamMusicSlot_GetCurrentTempo");
static_assert(sizeof(JamMusicSlot_GetCurrentTempo) == 0x000004, "Wrong size on JamMusicSlot_GetCurrentTempo");
static_assert(offsetof(JamMusicSlot_GetCurrentTempo, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetCurrentTempo::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetIsAutoJammer
// 0x0001 (0x0001 - 0x0000)
struct JamMusicSlot_GetIsAutoJammer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetIsAutoJammer) == 0x000001, "Wrong alignment on JamMusicSlot_GetIsAutoJammer");
static_assert(sizeof(JamMusicSlot_GetIsAutoJammer) == 0x000001, "Wrong size on JamMusicSlot_GetIsAutoJammer");
static_assert(offsetof(JamMusicSlot_GetIsAutoJammer, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetIsAutoJammer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetItemDef
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetItemDef final
{
public:
	const class USparksJamEmoteItemDefinition*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetItemDef) == 0x000008, "Wrong alignment on JamMusicSlot_GetItemDef");
static_assert(sizeof(JamMusicSlot_GetItemDef) == 0x000008, "Wrong size on JamMusicSlot_GetItemDef");
static_assert(offsetof(JamMusicSlot_GetItemDef, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetItemDef::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetMusicManager
// 0x0008 (0x0008 - 0x0000)
struct JamMusicSlot_GetMusicManager final
{
public:
	class UJamPlayspaceComponent_MusicManager*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetMusicManager) == 0x000008, "Wrong alignment on JamMusicSlot_GetMusicManager");
static_assert(sizeof(JamMusicSlot_GetMusicManager) == 0x000008, "Wrong size on JamMusicSlot_GetMusicManager");
static_assert(offsetof(JamMusicSlot_GetMusicManager, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetMusicManager::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.GetPlayParams
// 0x0038 (0x0038 - 0x0000)
struct JamMusicSlot_GetPlayParams final
{
public:
	struct FJamPlayParams                         ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_GetPlayParams) == 0x000008, "Wrong alignment on JamMusicSlot_GetPlayParams");
static_assert(sizeof(JamMusicSlot_GetPlayParams) == 0x000038, "Wrong size on JamMusicSlot_GetPlayParams");
static_assert(offsetof(JamMusicSlot_GetPlayParams, ReturnValue) == 0x000000, "Member 'JamMusicSlot_GetPlayParams::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamMusicSlot.IsInUse
// 0x0001 (0x0001 - 0x0000)
struct JamMusicSlot_IsInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamMusicSlot_IsInUse) == 0x000001, "Wrong alignment on JamMusicSlot_IsInUse");
static_assert(sizeof(JamMusicSlot_IsInUse) == 0x000001, "Wrong size on JamMusicSlot_IsInUse");
static_assert(offsetof(JamMusicSlot_IsInUse, ReturnValue) == 0x000000, "Member 'JamMusicSlot_IsInUse::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.IsAllowedToJamInSplitscreen
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen final
{
public:
	class APlayerState*                           PlayerStateToCheck;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen, PlayerStateToCheck) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen::PlayerStateToCheck' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.FireGlobalControlsAnalytics
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics, PlayerState) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics::PlayerState' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleKeyChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent final
{
public:
	struct FSparksPlayspaceEvent_KeyChanged       Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent) == 0x000001, "Wrong alignment on JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent) == 0x000001, "Wrong size on JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent, Payload) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent::Payload' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleModeChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspaceComponent_MusicManager_HandleModeChangedEvent final
{
public:
	struct FSparksPlayspaceEvent_KeyModeChanged   Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_HandleModeChangedEvent) == 0x000001, "Wrong alignment on JamPlayspaceComponent_MusicManager_HandleModeChangedEvent");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_HandleModeChangedEvent) == 0x000001, "Wrong size on JamPlayspaceComponent_MusicManager_HandleModeChangedEvent");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleModeChangedEvent, Payload) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_HandleModeChangedEvent::Payload' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleOnLoopStarted
// 0x0040 (0x0040 - 0x0000)
struct JamPlayspaceComponent_MusicManager_HandleOnLoopStarted final
{
public:
	struct FJamPlayParams                         PlayParams;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bChangedLoop;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_HandleOnLoopStarted) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_HandleOnLoopStarted");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_HandleOnLoopStarted) == 0x000040, "Wrong size on JamPlayspaceComponent_MusicManager_HandleOnLoopStarted");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleOnLoopStarted, PlayParams) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_HandleOnLoopStarted::PlayParams' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleOnLoopStarted, bChangedLoop) == 0x000038, "Member 'JamPlayspaceComponent_MusicManager_HandleOnLoopStarted::bChangedLoop' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleOnLoopStopped
// 0x0040 (0x0040 - 0x0000)
struct JamPlayspaceComponent_MusicManager_HandleOnLoopStopped final
{
public:
	struct FJamPlayParams                         PlayParams;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bChangedLoop;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_HandleOnLoopStopped) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_HandleOnLoopStopped");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_HandleOnLoopStopped) == 0x000040, "Wrong size on JamPlayspaceComponent_MusicManager_HandleOnLoopStopped");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleOnLoopStopped, PlayParams) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_HandleOnLoopStopped::PlayParams' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleOnLoopStopped, bChangedLoop) == 0x000038, "Member 'JamPlayspaceComponent_MusicManager_HandleOnLoopStopped::bChangedLoop' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleTempoChangedEvent
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent final
{
public:
	struct FSparksPlayspaceEvent_TempoChanged     Payload;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent, Payload) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent::Payload' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnPlayspaceUserAdded
// 0x0058 (0x0058 - 0x0000)
struct JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded final
{
public:
	struct FPlayspaceUser                         AddedUser;                                         // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded) == 0x000058, "Wrong size on JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded, AddedUser) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded::AddedUser' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnPlayspaceUserRemoved
// 0x0058 (0x0058 - 0x0000)
struct JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved final
{
public:
	struct FPlayspaceUser                         RemovedUser;                                       // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved) == 0x000058, "Wrong size on JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved, RemovedUser) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved::RemovedUser' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnRep_MusicSlots
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_OnRep_MusicSlots final
{
public:
	TArray<class UJamMusicSlot*>                  PreviousMusicSlots;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_OnRep_MusicSlots) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_OnRep_MusicSlots");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_OnRep_MusicSlots) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_OnRep_MusicSlots");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_OnRep_MusicSlots, PreviousMusicSlots) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_OnRep_MusicSlots::PreviousMusicSlots' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.UpdateAllMetasounds
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_UpdateAllMetasounds final
{
public:
	const class APlayerState*                     PlayerToIgnore;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_UpdateAllMetasounds) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_UpdateAllMetasounds");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_UpdateAllMetasounds) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_UpdateAllMetasounds");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_UpdateAllMetasounds, PlayerToIgnore) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_UpdateAllMetasounds::PlayerToIgnore' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.CountActiveSlots
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_CountActiveSlots final
{
public:
	bool                                          bCountAutoJammers;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_CountActiveSlots) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_CountActiveSlots");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_CountActiveSlots) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_CountActiveSlots");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_CountActiveSlots, bCountAutoJammers) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_CountActiveSlots::bCountAutoJammers' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_CountActiveSlots, ReturnValue) == 0x000004, "Member 'JamPlayspaceComponent_MusicManager_CountActiveSlots::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAllJammers
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetAllJammers final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetAllJammers) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetAllJammers");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetAllJammers) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetAllJammers");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetAllJammers, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetAllJammers::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAllMusicSlots
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetAllMusicSlots final
{
public:
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetAllMusicSlots) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetAllMusicSlots");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetAllMusicSlots) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetAllMusicSlots");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetAllMusicSlots, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetAllMusicSlots::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAutoJammersForPlayer
// 0x0018 (0x0018 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer) == 0x000018, "Wrong size on JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentKey
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetCurrentKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetCurrentKey) == 0x000001, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetCurrentKey");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetCurrentKey) == 0x000001, "Wrong size on JamPlayspaceComponent_MusicManager_GetCurrentKey");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetCurrentKey, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetCurrentKey::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMidiSeconds
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMidiTick
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetCurrentMidiTick final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetCurrentMidiTick) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetCurrentMidiTick");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetCurrentMidiTick) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_GetCurrentMidiTick");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetCurrentMidiTick, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetCurrentMidiTick::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMode
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetCurrentMode final
{
public:
	EMusicKeyMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetCurrentMode) == 0x000001, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetCurrentMode");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetCurrentMode) == 0x000001, "Wrong size on JamPlayspaceComponent_MusicManager_GetCurrentMode");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetCurrentMode, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetCurrentMode::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentTempo
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetCurrentTempo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetCurrentTempo) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetCurrentTempo");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetCurrentTempo) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_GetCurrentTempo");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetCurrentTempo, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetCurrentTempo::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetDesiredGain
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetDesiredGain final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetDesiredGain) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetDesiredGain");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetDesiredGain) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetDesiredGain");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetDesiredGain, PlayerState) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetDesiredGain::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetDesiredGain, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetDesiredGain::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetJamInfoFromSlot
// 0x0048 (0x0048 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJamEvent_JamLoopStarted               ReturnValue;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot) == 0x000048, "Wrong size on JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot, SlotIndex) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetJamInfoFromSlot::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetJamPlayspace
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetJamPlayspace final
{
public:
	class AJamPlayspace*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetJamPlayspace) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetJamPlayspace");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetJamPlayspace) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_GetJamPlayspace");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetJamPlayspace, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetJamPlayspace::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetLoadedAnimations
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetLoadedAnimations final
{
public:
	class USparksInstrumentAnimations*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetLoadedAnimations) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetLoadedAnimations");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetLoadedAnimations) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_GetLoadedAnimations");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetLoadedAnimations, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetLoadedAnimations::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetLocalPlayerGainValue
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMetasoundPlayer
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMetasoundPlayer final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMetasoundPlayer) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMetasoundPlayer");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMetasoundPlayer) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_GetMetasoundPlayer");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMetasoundPlayer, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMetasoundPlayer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotByLoopInstanceId
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJamMusicSlot*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotForPlayer
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJamMusicSlot*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotIndexForLoopInstanceId
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId, ReturnValue) == 0x000004, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotIndexForPlayer
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer, PlayerState) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotsForLoopType
// 0x0018 (0x0018 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType final
{
public:
	EFMJamLoopType                                LoopType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType) == 0x000018, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType, LoopType) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType::LoopType' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotsInUse
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse final
{
public:
	TArray<class UJamMusicSlot*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetStandardGainValue
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceComponent_MusicManager_GetStandardGainValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_GetStandardGainValue) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_GetStandardGainValue");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_GetStandardGainValue) == 0x000004, "Wrong size on JamPlayspaceComponent_MusicManager_GetStandardGainValue");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_GetStandardGainValue, ReturnValue) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_GetStandardGainValue::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.SecondsToTick
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_SecondsToTick final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_SecondsToTick) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_SecondsToTick");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_SecondsToTick) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_SecondsToTick");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_SecondsToTick, Seconds) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_SecondsToTick::Seconds' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_SecondsToTick, ReturnValue) == 0x000004, "Member 'JamPlayspaceComponent_MusicManager_SecondsToTick::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.ShouldPlayLocalSound
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound final
{
public:
	const class APlayerState*                     PlayerToIgnore;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound) == 0x000008, "Wrong alignment on JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound) == 0x000010, "Wrong size on JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound, PlayerToIgnore) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound::PlayerToIgnore' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.TickToSeconds
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_MusicManager_TickToSeconds final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_MusicManager_TickToSeconds) == 0x000004, "Wrong alignment on JamPlayspaceComponent_MusicManager_TickToSeconds");
static_assert(sizeof(JamPlayspaceComponent_MusicManager_TickToSeconds) == 0x000008, "Wrong size on JamPlayspaceComponent_MusicManager_TickToSeconds");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_TickToSeconds, Tick) == 0x000000, "Member 'JamPlayspaceComponent_MusicManager_TickToSeconds::Tick' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_MusicManager_TickToSeconds, ReturnValue) == 0x000004, "Member 'JamPlayspaceComponent_MusicManager_TickToSeconds::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.AddReactiveNiagaraEffect
// 0x0010 (0x0010 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect) == 0x000008, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect) == 0x000010, "Wrong size on JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect, NiagaraComponent) == 0x000008, "Member 'JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect::NiagaraComponent' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.ClearReactiveEffects
// 0x0001 (0x0001 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects final
{
public:
	bool                                          bStopEffectsImmediately;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects) == 0x000001, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects) == 0x000001, "Wrong size on JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects, bStopEffectsImmediately) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects::bStopEffectsImmediately' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.ClearReactiveEffectsForLoop
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopEffectsImmediately;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop) == 0x000004, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop) == 0x000008, "Wrong size on JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop, bStopEffectsImmediately) == 0x000004, "Member 'JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop::bStopEffectsImmediately' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.HasReactiveEffectsForLoop
// 0x0008 (0x0008 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop) == 0x000004, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop) == 0x000008, "Wrong size on JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop, ReturnValue) == 0x000004, "Member 'JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.RemoveReactiveNiagaraEffect
// 0x0018 (0x0018 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect) == 0x000008, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect) == 0x000018, "Wrong size on JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect, NiagaraComponent) == 0x000008, "Member 'JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect, ReturnValue) == 0x000010, "Member 'JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.GetReactiveNiagaraEffects
// 0x0018 (0x0018 - 0x0000)
struct JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects final
{
public:
	int32                                         LoopInstanceId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects) == 0x000008, "Wrong alignment on JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects");
static_assert(sizeof(JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects) == 0x000018, "Wrong size on JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects, LoopInstanceId) == 0x000000, "Member 'JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects, ReturnValue) == 0x000008, "Member 'JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects::ReturnValue' has a wrong offset!");

// Function FMJamPlayspaceRuntime.JamPlayspaceVolume.BP_UpdateReactiveFX
// 0x0004 (0x0004 - 0x0000)
struct JamPlayspaceVolume_BP_UpdateReactiveFX final
{
public:
	float                                         JamAmplitude;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayspaceVolume_BP_UpdateReactiveFX) == 0x000004, "Wrong alignment on JamPlayspaceVolume_BP_UpdateReactiveFX");
static_assert(sizeof(JamPlayspaceVolume_BP_UpdateReactiveFX) == 0x000004, "Wrong size on JamPlayspaceVolume_BP_UpdateReactiveFX");
static_assert(offsetof(JamPlayspaceVolume_BP_UpdateReactiveFX, JamAmplitude) == 0x000000, "Member 'JamPlayspaceVolume_BP_UpdateReactiveFX::JamAmplitude' has a wrong offset!");

}

