#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ContextualAnimation

#include "Basic.hpp"

#include "ContextualAnimation_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function ContextualAnimation.ContextualAnimActorInterface.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct ContextualAnimActorInterface_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimActorInterface_GetMesh) == 0x000008, "Wrong alignment on ContextualAnimActorInterface_GetMesh");
static_assert(sizeof(ContextualAnimActorInterface_GetMesh) == 0x000008, "Wrong size on ContextualAnimActorInterface_GetMesh");
static_assert(offsetof(ContextualAnimActorInterface_GetMesh, ReturnValue) == 0x000000, "Member 'ContextualAnimActorInterface_GetMesh::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.LateJoinContextualAnimScene
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimSceneActorComponent_LateJoinContextualAnimScene final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_LateJoinContextualAnimScene) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_LateJoinContextualAnimScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_LateJoinContextualAnimScene) == 0x000010, "Wrong size on ContextualAnimSceneActorComponent_LateJoinContextualAnimScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_LateJoinContextualAnimScene, Actor) == 0x000000, "Member 'ContextualAnimSceneActorComponent_LateJoinContextualAnimScene::Actor' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_LateJoinContextualAnimScene, Role) == 0x000008, "Member 'ContextualAnimSceneActorComponent_LateJoinContextualAnimScene::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_LateJoinContextualAnimScene, ReturnValue) == 0x00000C, "Member 'ContextualAnimSceneActorComponent_LateJoinContextualAnimScene::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.OnJoinedScene
// 0x0028 (0x0028 - 0x0000)
struct ContextualAnimSceneActorComponent_OnJoinedScene final
{
public:
	struct FContextualAnimSceneBindings           InBindings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_OnJoinedScene) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_OnJoinedScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_OnJoinedScene) == 0x000028, "Wrong size on ContextualAnimSceneActorComponent_OnJoinedScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnJoinedScene, InBindings) == 0x000000, "Member 'ContextualAnimSceneActorComponent_OnJoinedScene::InBindings' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimSceneActorComponent_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_OnMontageBlendingOut) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_OnMontageBlendingOut");
static_assert(sizeof(ContextualAnimSceneActorComponent_OnMontageBlendingOut) == 0x000010, "Wrong size on ContextualAnimSceneActorComponent_OnMontageBlendingOut");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnMontageBlendingOut, Montage) == 0x000000, "Member 'ContextualAnimSceneActorComponent_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'ContextualAnimSceneActorComponent_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.OnPlayMontageNotifyBegin
// 0x0028 (0x0028 - 0x0000)
struct ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin");
static_assert(sizeof(ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin) == 0x000028, "Wrong size on ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin, NotifyName) == 0x000000, "Member 'ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin::NotifyName' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin, BranchingPointNotifyPayload) == 0x000008, "Member 'ContextualAnimSceneActorComponent_OnPlayMontageNotifyBegin::BranchingPointNotifyPayload' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.OnTickPose
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimSceneActorComponent_OnTickPose final
{
public:
	class USkinnedMeshComponent*                  SkinnedMeshComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsValidRootMotion;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_OnTickPose) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_OnTickPose");
static_assert(sizeof(ContextualAnimSceneActorComponent_OnTickPose) == 0x000010, "Wrong size on ContextualAnimSceneActorComponent_OnTickPose");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnTickPose, SkinnedMeshComponent) == 0x000000, "Member 'ContextualAnimSceneActorComponent_OnTickPose::SkinnedMeshComponent' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnTickPose, DeltaTime) == 0x000008, "Member 'ContextualAnimSceneActorComponent_OnTickPose::DeltaTime' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_OnTickPose, bNeedsValidRootMotion) == 0x00000C, "Member 'ContextualAnimSceneActorComponent_OnTickPose::bNeedsValidRootMotion' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.ServerStartContextualAnimScene
// 0x0028 (0x0028 - 0x0000)
struct ContextualAnimSceneActorComponent_ServerStartContextualAnimScene final
{
public:
	struct FContextualAnimSceneBindings           InBindings;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_ServerStartContextualAnimScene) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_ServerStartContextualAnimScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_ServerStartContextualAnimScene) == 0x000028, "Wrong size on ContextualAnimSceneActorComponent_ServerStartContextualAnimScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_ServerStartContextualAnimScene, InBindings) == 0x000000, "Member 'ContextualAnimSceneActorComponent_ServerStartContextualAnimScene::InBindings' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.StartContextualAnimScene
// 0x0030 (0x0030 - 0x0000)
struct ContextualAnimSceneActorComponent_StartContextualAnimScene final
{
public:
	struct FContextualAnimSceneBindings           InBindings;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_StartContextualAnimScene) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_StartContextualAnimScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_StartContextualAnimScene) == 0x000030, "Wrong size on ContextualAnimSceneActorComponent_StartContextualAnimScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_StartContextualAnimScene, InBindings) == 0x000000, "Member 'ContextualAnimSceneActorComponent_StartContextualAnimScene::InBindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_StartContextualAnimScene, ReturnValue) == 0x000028, "Member 'ContextualAnimSceneActorComponent_StartContextualAnimScene::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.TransitionContextualAnimScene
// 0x0008 (0x0008 - 0x0000)
struct ContextualAnimSceneActorComponent_TransitionContextualAnimScene final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_TransitionContextualAnimScene) == 0x000004, "Wrong alignment on ContextualAnimSceneActorComponent_TransitionContextualAnimScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_TransitionContextualAnimScene) == 0x000008, "Wrong size on ContextualAnimSceneActorComponent_TransitionContextualAnimScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_TransitionContextualAnimScene, SectionName) == 0x000000, "Member 'ContextualAnimSceneActorComponent_TransitionContextualAnimScene::SectionName' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_TransitionContextualAnimScene, ReturnValue) == 0x000004, "Member 'ContextualAnimSceneActorComponent_TransitionContextualAnimScene::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.TransitionSingleActor
// 0x000C (0x000C - 0x0000)
struct ContextualAnimSceneActorComponent_TransitionSingleActor final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneActorComponent_TransitionSingleActor) == 0x000004, "Wrong alignment on ContextualAnimSceneActorComponent_TransitionSingleActor");
static_assert(sizeof(ContextualAnimSceneActorComponent_TransitionSingleActor) == 0x00000C, "Wrong size on ContextualAnimSceneActorComponent_TransitionSingleActor");
static_assert(offsetof(ContextualAnimSceneActorComponent_TransitionSingleActor, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneActorComponent_TransitionSingleActor::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_TransitionSingleActor, AnimSetIdx) == 0x000004, "Member 'ContextualAnimSceneActorComponent_TransitionSingleActor::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_TransitionSingleActor, ReturnValue) == 0x000008, "Member 'ContextualAnimSceneActorComponent_TransitionSingleActor::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.GetIKTargetByGoalName
// 0x0080 (0x0080 - 0x0000)
struct ContextualAnimSceneActorComponent_GetIKTargetByGoalName final
{
public:
	class FName                                   GoalName;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimIKTarget                ReturnValue;                                       // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_GetIKTargetByGoalName) == 0x000010, "Wrong alignment on ContextualAnimSceneActorComponent_GetIKTargetByGoalName");
static_assert(sizeof(ContextualAnimSceneActorComponent_GetIKTargetByGoalName) == 0x000080, "Wrong size on ContextualAnimSceneActorComponent_GetIKTargetByGoalName");
static_assert(offsetof(ContextualAnimSceneActorComponent_GetIKTargetByGoalName, GoalName) == 0x000000, "Member 'ContextualAnimSceneActorComponent_GetIKTargetByGoalName::GoalName' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneActorComponent_GetIKTargetByGoalName, ReturnValue) == 0x000010, "Member 'ContextualAnimSceneActorComponent_GetIKTargetByGoalName::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.GetIKTargets
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimSceneActorComponent_GetIKTargets final
{
public:
	TArray<struct FContextualAnimIKTarget>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_GetIKTargets) == 0x000008, "Wrong alignment on ContextualAnimSceneActorComponent_GetIKTargets");
static_assert(sizeof(ContextualAnimSceneActorComponent_GetIKTargets) == 0x000010, "Wrong size on ContextualAnimSceneActorComponent_GetIKTargets");
static_assert(offsetof(ContextualAnimSceneActorComponent_GetIKTargets, ReturnValue) == 0x000000, "Member 'ContextualAnimSceneActorComponent_GetIKTargets::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneActorComponent.IsInActiveScene
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimSceneActorComponent_IsInActiveScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneActorComponent_IsInActiveScene) == 0x000001, "Wrong alignment on ContextualAnimSceneActorComponent_IsInActiveScene");
static_assert(sizeof(ContextualAnimSceneActorComponent_IsInActiveScene) == 0x000001, "Wrong size on ContextualAnimSceneActorComponent_IsInActiveScene");
static_assert(offsetof(ContextualAnimSceneActorComponent_IsInActiveScene, ReturnValue) == 0x000000, "Member 'ContextualAnimSceneActorComponent_IsInActiveScene::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.BP_FindAnimationForRole
// 0x0018 (0x0018 - 0x0000)
struct ContextualAnimSceneAsset_BP_FindAnimationForRole final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_BP_FindAnimationForRole) == 0x000008, "Wrong alignment on ContextualAnimSceneAsset_BP_FindAnimationForRole");
static_assert(sizeof(ContextualAnimSceneAsset_BP_FindAnimationForRole) == 0x000018, "Wrong size on ContextualAnimSceneAsset_BP_FindAnimationForRole");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimationForRole, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneAsset_BP_FindAnimationForRole::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimationForRole, AnimSetIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_BP_FindAnimationForRole::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimationForRole, Role) == 0x000008, "Member 'ContextualAnimSceneAsset_BP_FindAnimationForRole::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimationForRole, ReturnValue) == 0x000010, "Member 'ContextualAnimSceneAsset_BP_FindAnimationForRole::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.BP_FindAnimSetIndexByAnimation
// 0x0018 (0x0018 - 0x0000)
struct ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                Animation;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation) == 0x000008, "Wrong alignment on ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation");
static_assert(sizeof(ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation) == 0x000018, "Wrong size on ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation, Animation) == 0x000008, "Member 'ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation::Animation' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation, ReturnValue) == 0x000010, "Member 'ContextualAnimSceneAsset_BP_FindAnimSetIndexByAnimation::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.BP_GetAlignmentTransformForRoleRelativeToWarpPoint
// 0x0070 (0x0070 - 0x0000)
struct ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint) == 0x000010, "Wrong alignment on ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint");
static_assert(sizeof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint) == 0x000070, "Wrong size on ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint, AnimSetIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint, Role) == 0x000008, "Member 'ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint, Time) == 0x00000C, "Member 'ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint::Time' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint, ReturnValue) == 0x000010, "Member 'ContextualAnimSceneAsset_BP_GetAlignmentTransformForRoleRelativeToWarpPoint::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.BP_GetIKTargetTransformForRoleAtTime
// 0x0080 (0x0080 - 0x0000)
struct ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime) == 0x000010, "Wrong alignment on ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime");
static_assert(sizeof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime) == 0x000080, "Wrong size on ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, AnimSetIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, Role) == 0x000008, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, TrackName) == 0x00000C, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::TrackName' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, Time) == 0x000010, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::Time' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime, ReturnValue) == 0x000020, "Member 'ContextualAnimSceneAsset_BP_GetIKTargetTransformForRoleAtTime::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.BP_GetStartAndEndTimeForWarpSection
// 0x0018 (0x0018 - 0x0000)
struct ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection final
{
public:
	int32                                         SectionIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WarpSectionName;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutStartTime;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutEndTime;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection) == 0x000004, "Wrong alignment on ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection");
static_assert(sizeof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection) == 0x000018, "Wrong size on ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, SectionIdx) == 0x000000, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, AnimSetIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::AnimSetIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, Role) == 0x000008, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, WarpSectionName) == 0x00000C, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::WarpSectionName' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, OutStartTime) == 0x000010, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::OutStartTime' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection, OutEndTime) == 0x000014, "Member 'ContextualAnimSceneAsset_BP_GetStartAndEndTimeForWarpSection::OutEndTime' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.GetAlignmentPointsForSecondaryRole
// 0x0100 (0x0100 - 0x0000)
struct ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole final
{
public:
	EContextualAnimPointType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBindingContext     Primary;                                           // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FContextualAnimPoint>           OutResult;                                         // 0x00F0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole) == 0x000010, "Wrong alignment on ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole");
static_assert(sizeof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole) == 0x000100, "Wrong size on ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole, Type) == 0x000000, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole::Type' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole, SectionIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole, Primary) == 0x000010, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole::Primary' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole, OutResult) == 0x0000F0, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRole::OutResult' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria
// 0x01F0 (0x01F0 - 0x0000)
struct ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria final
{
public:
	EContextualAnimPointType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBindingContext     Primary;                                           // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindingContext     Querier;                                           // 0x00F0(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EContextualAnimCriterionToConsider            CriterionToConsider;                               // 0x01D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContextualAnimPoint>           OutResult;                                         // 0x01D8(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria) == 0x000010, "Wrong alignment on ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria");
static_assert(sizeof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria) == 0x0001F0, "Wrong size on ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, Type) == 0x000000, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::Type' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, SectionIdx) == 0x000004, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, Primary) == 0x000010, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::Primary' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, Querier) == 0x0000F0, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::Querier' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, CriterionToConsider) == 0x0001D0, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::CriterionToConsider' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria, OutResult) == 0x0001D8, "Member 'ContextualAnimSceneAsset_GetAlignmentPointsForSecondaryRoleConsideringSelectionCriteria::OutResult' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.GetRoles
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimSceneAsset_GetRoles final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSceneAsset_GetRoles) == 0x000008, "Wrong alignment on ContextualAnimSceneAsset_GetRoles");
static_assert(sizeof(ContextualAnimSceneAsset_GetRoles) == 0x000010, "Wrong size on ContextualAnimSceneAsset_GetRoles");
static_assert(offsetof(ContextualAnimSceneAsset_GetRoles, ReturnValue) == 0x000000, "Member 'ContextualAnimSceneAsset_GetRoles::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSceneAsset.Query
// 0x01E0 (0x01E0 - 0x0000)
struct ContextualAnimSceneAsset_Query final
{
public:
	class FName                                   Role;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimQueryResult             OutResult;                                         // 0x0010(0x00E0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FContextualAnimQueryParams             QueryParams;                                       // 0x00F0(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ToWorldTransform;                                  // 0x0170(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0xF];                                      // 0x01D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSceneAsset_Query) == 0x000010, "Wrong alignment on ContextualAnimSceneAsset_Query");
static_assert(sizeof(ContextualAnimSceneAsset_Query) == 0x0001E0, "Wrong size on ContextualAnimSceneAsset_Query");
static_assert(offsetof(ContextualAnimSceneAsset_Query, Role) == 0x000000, "Member 'ContextualAnimSceneAsset_Query::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_Query, OutResult) == 0x000010, "Member 'ContextualAnimSceneAsset_Query::OutResult' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_Query, QueryParams) == 0x0000F0, "Member 'ContextualAnimSceneAsset_Query::QueryParams' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_Query, ToWorldTransform) == 0x000170, "Member 'ContextualAnimSceneAsset_Query::ToWorldTransform' has a wrong offset!");
static_assert(offsetof(ContextualAnimSceneAsset_Query, ReturnValue) == 0x0001D0, "Member 'ContextualAnimSceneAsset_Query::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSelectionCriterion_Blueprint.BP_DoesQuerierPassCondition
// 0x01D0 (0x01D0 - 0x0000)
struct ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition final
{
public:
	struct FContextualAnimSceneBindingContext     Primary;                                           // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindingContext     Querier;                                           // 0x00E0(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0xF];                                      // 0x01C1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition) == 0x000010, "Wrong alignment on ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition");
static_assert(sizeof(ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition) == 0x0001D0, "Wrong size on ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition");
static_assert(offsetof(ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition, Primary) == 0x000000, "Member 'ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition::Primary' has a wrong offset!");
static_assert(offsetof(ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition, Querier) == 0x0000E0, "Member 'ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition::Querier' has a wrong offset!");
static_assert(offsetof(ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition, ReturnValue) == 0x0001C0, "Member 'ContextualAnimSelectionCriterion_Blueprint_BP_DoesQuerierPassCondition::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimSelectionCriterion_Blueprint.GetSceneAsset
// 0x0008 (0x0008 - 0x0000)
struct ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset final
{
public:
	const class UContextualAnimSceneAsset*        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset) == 0x000008, "Wrong alignment on ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset");
static_assert(sizeof(ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset) == 0x000008, "Wrong size on ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset");
static_assert(offsetof(ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset, ReturnValue) == 0x000000, "Member 'ContextualAnimSelectionCriterion_Blueprint_GetSceneAsset::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_CreateContextualAnimSceneBindings
// 0x0088 (0x0088 - 0x0000)
struct ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings final
{
public:
	const class UContextualAnimSceneAsset*        SceneAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FContextualAnimSceneBindingContext> Params_0;                                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindings           OutBindings;                                       // 0x0058(0x0028)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings");
static_assert(sizeof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings) == 0x000088, "Wrong size on ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings, SceneAsset) == 0x000000, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings::SceneAsset' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings, Params_0) == 0x000008, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings::Params_0' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings, OutBindings) == 0x000058, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings::OutBindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings, ReturnValue) == 0x000080, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindings::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_CreateContextualAnimSceneBindingsForTwoActors
// 0x0200 (0x0200 - 0x0000)
struct ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors final
{
public:
	const class UContextualAnimSceneAsset*        SceneAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBindingContext     Primary;                                           // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindingContext     Secondary;                                         // 0x00F0(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindings           OutBindings;                                       // 0x01D0(0x0028)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors");
static_assert(sizeof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors) == 0x000200, "Wrong size on ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors, SceneAsset) == 0x000000, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors::SceneAsset' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors, Primary) == 0x000010, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors::Primary' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors, Secondary) == 0x0000F0, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors::Secondary' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors, OutBindings) == 0x0001D0, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors::OutBindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors, ReturnValue) == 0x0001F8, "Member 'ContextualAnimUtilities_BP_CreateContextualAnimSceneBindingsForTwoActors::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_DrawDebugPose
// 0x00A0 (0x00A0 - 0x0000)
struct ContextualAnimUtilities_BP_DrawDebugPose final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                Animation;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToWorldTransform;                             // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0080(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_DrawDebugPose) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_DrawDebugPose");
static_assert(sizeof(ContextualAnimUtilities_BP_DrawDebugPose) == 0x0000A0, "Wrong size on ContextualAnimUtilities_BP_DrawDebugPose");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, WorldContextObject) == 0x000000, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, Animation) == 0x000008, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::Animation' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, Time) == 0x000010, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::Time' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, LocalToWorldTransform) == 0x000020, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::LocalToWorldTransform' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, Color) == 0x000080, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::Color' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, Lifetime) == 0x000090, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::Lifetime' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_DrawDebugPose, Thickness) == 0x000094, "Member 'ContextualAnimUtilities_BP_DrawDebugPose::Thickness' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_Montage_GetSectionLength
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimUtilities_BP_Montage_GetSectionLength final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_Montage_GetSectionLength) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_Montage_GetSectionLength");
static_assert(sizeof(ContextualAnimUtilities_BP_Montage_GetSectionLength) == 0x000010, "Wrong size on ContextualAnimUtilities_BP_Montage_GetSectionLength");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionLength, Montage) == 0x000000, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionLength::Montage' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionLength, SectionIndex) == 0x000008, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionLength::SectionIndex' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionLength, ReturnValue) == 0x00000C, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionLength::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_Montage_GetSectionStartAndEndTime
// 0x0018 (0x0018 - 0x0000)
struct ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutStartTime;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutEndTime;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime");
static_assert(sizeof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime) == 0x000018, "Wrong size on ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime, Montage) == 0x000000, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime::Montage' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime, SectionIndex) == 0x000008, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime::SectionIndex' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime, OutStartTime) == 0x00000C, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime::OutStartTime' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime, OutEndTime) == 0x000010, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionStartAndEndTime::OutEndTime' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_Montage_GetSectionTimeLeftFromPos
// 0x0010 (0x0010 - 0x0000)
struct ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos");
static_assert(sizeof(ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos) == 0x000010, "Wrong size on ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos, Montage) == 0x000000, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos::Montage' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos, Position) == 0x000008, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos::Position' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos, ReturnValue) == 0x00000C, "Member 'ContextualAnimUtilities_BP_Montage_GetSectionTimeLeftFromPos::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBinding_GetActor
// 0x0100 (0x0100 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBinding_GetActor final
{
public:
	struct FContextualAnimSceneBinding            Binding;                                           // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBinding_GetActor) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBinding_GetActor");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBinding_GetActor) == 0x000100, "Wrong size on ContextualAnimUtilities_BP_SceneBinding_GetActor");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetActor, Binding) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetActor::Binding' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetActor, ReturnValue) == 0x0000F0, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetActor::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBinding_GetAnimationFromBinding
// 0x0130 (0x0130 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBinding            Binding;                                           // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                ReturnValue;                                       // 0x0120(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding) == 0x000130, "Wrong size on ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding, Binding) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding::Binding' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding, ReturnValue) == 0x000120, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetAnimationFromBinding::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBinding_GetRoleFromBinding
// 0x0130 (0x0130 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBinding            Binding;                                           // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding) == 0x000130, "Wrong size on ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding, Binding) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding::Binding' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding, ReturnValue) == 0x000120, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetRoleFromBinding::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBinding_GetSkeletalMesh
// 0x0100 (0x0100 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh final
{
public:
	struct FContextualAnimSceneBinding            Binding;                                           // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x00F0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh) == 0x000100, "Wrong size on ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh, Binding) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh::Binding' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh, ReturnValue) == 0x0000F0, "Member 'ContextualAnimUtilities_BP_SceneBinding_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_GetActor
// 0x00F0 (0x00F0 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_GetActor final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_GetActor) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_GetActor");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_GetActor) == 0x0000F0, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_GetActor");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetActor, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetActor::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetActor, ReturnValue) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetActor::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_GetGameplayTags
// 0x0100 (0x0100 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags) == 0x000100, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags, ReturnValue) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetGameplayTags::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_GetTransform
// 0x0140 (0x0140 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_GetTransform final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00E0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_GetTransform) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_GetTransform");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_GetTransform) == 0x000140, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_GetTransform");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetTransform, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetTransform::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetTransform, ReturnValue) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetTransform::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_GetVelocity
// 0x0100 (0x0100 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00E0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity) == 0x000100, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity, ReturnValue) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_GetVelocity::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_HasAllMatchingGameplayTags
// 0x0110 (0x0110 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags) == 0x000110, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags, TagContainer) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags, ReturnValue) == 0x000100, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_HasAnyMatchingGameplayTags
// 0x0110 (0x0110 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags) == 0x000110, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags, TagContainer) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags, ReturnValue) == 0x000100, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasAnyMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_HasMatchingGameplayTag
// 0x00F0 (0x00F0 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag final
{
public:
	struct FContextualAnimSceneBindingContext     BindingContext;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToCheck;                                        // 0x00E0(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0xB];                                       // 0x00E5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag) == 0x0000F0, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag, BindingContext) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag::BindingContext' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag, TagToCheck) == 0x0000E0, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag, ReturnValue) == 0x0000E4, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_HasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_MakeFromActor
// 0x00F0 (0x00F0 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBindingContext     ReturnValue;                                       // 0x0010(0x00E0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor) == 0x0000F0, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor, Actor) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor::Actor' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor, ReturnValue) == 0x000010, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActor::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindingContext_MakeFromActorWithExternalTransform
// 0x0150 (0x0150 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ExternalTransform;                                 // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBindingContext     ReturnValue;                                       // 0x0070(0x00E0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform) == 0x000150, "Wrong size on ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform, Actor) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform::Actor' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform, ExternalTransform) == 0x000010, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform::ExternalTransform' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform, ReturnValue) == 0x000070, "Member 'ContextualAnimUtilities_BP_SceneBindingContext_MakeFromActorWithExternalTransform::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_AddOrUpdateWarpTargetsForBindings
// 0x0028 (0x0028 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings) == 0x000028, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_AddOrUpdateWarpTargetsForBindings::Bindings' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_CalculateWarpPoints
// 0x0038 (0x0038 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FContextualAnimWarpPoint>       OutWarpPoints;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints) == 0x000038, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints, OutWarpPoints) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_CalculateWarpPoints::OutWarpPoints' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole
// 0x00A0 (0x00A0 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelativeToRole;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole) == 0x0000A0, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole, Role) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole, RelativeToRole) == 0x00002C, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole::RelativeToRole' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole, Time) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole::Time' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole, ReturnValue) == 0x000040, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint
// 0x0110 (0x0110 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimWarpPoint               WarpPoint;                                         // 0x0030(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00B0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint) == 0x000110, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint, Role) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint, WarpPoint) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint::WarpPoint' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint, Time) == 0x0000A0, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint::Time' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint, ReturnValue) == 0x0000B0, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetAlignmentTransformFromBinding
// 0x01F0 (0x01F0 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBinding            Binding;                                           // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FContextualAnimWarpPoint               WarpPoint;                                         // 0x0120(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0190(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding) == 0x0001F0, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding, Binding) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding::Binding' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding, WarpPoint) == 0x000120, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding::WarpPoint' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding, ReturnValue) == 0x000190, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetAlignmentTransformFromBinding::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetBindingByActor
// 0x0120 (0x0120 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FContextualAnimSceneBinding            ReturnValue;                                       // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor) == 0x000120, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor, Actor) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor::Actor' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor, ReturnValue) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByActor::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetBindingByRole
// 0x0120 (0x0120 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualAnimSceneBinding            ReturnValue;                                       // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole) == 0x000010, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole) == 0x000120, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole, Role) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole::Role' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole, ReturnValue) == 0x000030, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindingByRole::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetBindings
// 0x0038 (0x0038 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetBindings final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FContextualAnimSceneBinding>    ReturnValue;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetBindings) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetBindings");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetBindings) == 0x000038, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetBindings");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindings, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindings::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetBindings, ReturnValue) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetBindings::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetSceneAsset
// 0x0030 (0x0030 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UContextualAnimSceneAsset*        ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset) == 0x000030, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset, ReturnValue) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetSceneAsset::ReturnValue' has a wrong offset!");

// Function ContextualAnimation.ContextualAnimUtilities.BP_SceneBindings_GetSectionAndAnimSetIndices
// 0x0030 (0x0030 - 0x0000)
struct ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices final
{
public:
	struct FContextualAnimSceneBindings           Bindings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         SectionIdx;                                        // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSetIdx;                                        // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices) == 0x000008, "Wrong alignment on ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices");
static_assert(sizeof(ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices) == 0x000030, "Wrong size on ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices, Bindings) == 0x000000, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices::Bindings' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices, SectionIdx) == 0x000028, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices::SectionIdx' has a wrong offset!");
static_assert(offsetof(ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices, AnimSetIdx) == 0x00002C, "Member 'ContextualAnimUtilities_BP_SceneBindings_GetSectionAndAnimSetIndices::AnimSetIdx' has a wrong offset!");

}

