#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortCreativeStreamingComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum FortCreativeStreamingComponent.EFortStreamingVideoDeviceState
// NumValues: 0x0003
enum class EFortStreamingVideoDeviceState : uint8
{
	No_Stream                                = 0,
	Controller                               = 1,
	Listener                                 = 2,
};

// Enum FortCreativeStreamingComponent.EFortStreamingVideoSelectionMode
// NumValues: 0x0003
enum class EFortStreamingVideoSelectionMode : uint8
{
	Priority                                 = 0,
	Device_Override                          = 1,
	Mirror                                   = 2,
};

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDeviceComponents
// 0x0030 (0x0030 - 0x0000)
struct FVideoPlayerDeviceComponents final
{
public:
	class UStaticMeshComponent*                   ScreenMesh;                                        // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ScreenMaterialDynamic;                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          VideoTexture;                                      // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSourceBus*                        SourceBus;                                         // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoPlayerDeviceComponents) == 0x000008, "Wrong alignment on FVideoPlayerDeviceComponents");
static_assert(sizeof(FVideoPlayerDeviceComponents) == 0x000030, "Wrong size on FVideoPlayerDeviceComponents");
static_assert(offsetof(FVideoPlayerDeviceComponents, ScreenMesh) == 0x000000, "Member 'FVideoPlayerDeviceComponents::ScreenMesh' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceComponents, ScreenMaterialDynamic) == 0x000008, "Member 'FVideoPlayerDeviceComponents::ScreenMaterialDynamic' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceComponents, SoundComponent) == 0x000010, "Member 'FVideoPlayerDeviceComponents::SoundComponent' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceComponents, VideoTexture) == 0x000018, "Member 'FVideoPlayerDeviceComponents::VideoTexture' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceComponents, SourceBus) == 0x000020, "Member 'FVideoPlayerDeviceComponents::SourceBus' has a wrong offset!");

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDeviceFullscreenData
// 0x0008 (0x0008 - 0x0000)
struct FVideoPlayerDeviceFullscreenData final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceID;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVideoPlayerDeviceFullscreenData) == 0x000004, "Wrong alignment on FVideoPlayerDeviceFullscreenData");
static_assert(sizeof(FVideoPlayerDeviceFullscreenData) == 0x000008, "Wrong size on FVideoPlayerDeviceFullscreenData");
static_assert(offsetof(FVideoPlayerDeviceFullscreenData, bEnable) == 0x000000, "Member 'FVideoPlayerDeviceFullscreenData::bEnable' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceFullscreenData, InstanceID) == 0x000004, "Member 'FVideoPlayerDeviceFullscreenData::InstanceID' has a wrong offset!");

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDevicePIPSettings
// 0x000C (0x000C - 0x0000)
struct FVideoPlayerDevicePIPSettings final
{
public:
	float                                         TriggerRange;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAllow;                                      // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceID;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVideoPlayerDevicePIPSettings) == 0x000004, "Wrong alignment on FVideoPlayerDevicePIPSettings");
static_assert(sizeof(FVideoPlayerDevicePIPSettings) == 0x00000C, "Wrong size on FVideoPlayerDevicePIPSettings");
static_assert(offsetof(FVideoPlayerDevicePIPSettings, TriggerRange) == 0x000000, "Member 'FVideoPlayerDevicePIPSettings::TriggerRange' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDevicePIPSettings, bEnabled) == 0x000004, "Member 'FVideoPlayerDevicePIPSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDevicePIPSettings, bAlwaysAllow) == 0x000005, "Member 'FVideoPlayerDevicePIPSettings::bAlwaysAllow' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDevicePIPSettings, InstanceID) == 0x000008, "Member 'FVideoPlayerDevicePIPSettings::InstanceID' has a wrong offset!");

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDevicePIPFullscreenSettings
// 0x0010 (0x0010 - 0x0000)
struct FVideoPlayerDevicePIPFullscreenSettings final
{
public:
	class AController*                            Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFullscreen;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceID;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVideoPlayerDevicePIPFullscreenSettings) == 0x000008, "Wrong alignment on FVideoPlayerDevicePIPFullscreenSettings");
static_assert(sizeof(FVideoPlayerDevicePIPFullscreenSettings) == 0x000010, "Wrong size on FVideoPlayerDevicePIPFullscreenSettings");
static_assert(offsetof(FVideoPlayerDevicePIPFullscreenSettings, Instigator) == 0x000000, "Member 'FVideoPlayerDevicePIPFullscreenSettings::Instigator' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDevicePIPFullscreenSettings, bEnableFullscreen) == 0x000008, "Member 'FVideoPlayerDevicePIPFullscreenSettings::bEnableFullscreen' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDevicePIPFullscreenSettings, InstanceID) == 0x00000C, "Member 'FVideoPlayerDevicePIPFullscreenSettings::InstanceID' has a wrong offset!");

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDeviceCMSEventData
// 0x0038 (0x0038 - 0x0000)
struct FVideoPlayerDeviceCMSEventData final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventPage;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VUID;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoPlayerDeviceCMSEventData) == 0x000008, "Wrong alignment on FVideoPlayerDeviceCMSEventData");
static_assert(sizeof(FVideoPlayerDeviceCMSEventData) == 0x000038, "Wrong size on FVideoPlayerDeviceCMSEventData");
static_assert(offsetof(FVideoPlayerDeviceCMSEventData, EventName) == 0x000000, "Member 'FVideoPlayerDeviceCMSEventData::EventName' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceCMSEventData, EventPage) == 0x000010, "Member 'FVideoPlayerDeviceCMSEventData::EventPage' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceCMSEventData, VUID) == 0x000020, "Member 'FVideoPlayerDeviceCMSEventData::VUID' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceCMSEventData, bEnabled) == 0x000030, "Member 'FVideoPlayerDeviceCMSEventData::bEnabled' has a wrong offset!");

// ScriptStruct FortCreativeStreamingComponent.VideoPlayerDeviceAudioAnalysisSettings
// 0x0040 (0x0040 - 0x0000)
struct FVideoPlayerDeviceAudioAnalysisSettings final
{
public:
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> AudioAnalysisBandSettings;                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           AudioAnalysisBandNames;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   PercussionParameterName;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AverageAmplitudeParameterName;                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateRate;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecibelNoiseFloor;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNormalize;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoAutoRange;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoRangeAttackTime;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoRangeReleaseTime;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoPlayerDeviceAudioAnalysisSettings) == 0x000008, "Wrong alignment on FVideoPlayerDeviceAudioAnalysisSettings");
static_assert(sizeof(FVideoPlayerDeviceAudioAnalysisSettings) == 0x000040, "Wrong size on FVideoPlayerDeviceAudioAnalysisSettings");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, AudioAnalysisBandSettings) == 0x000000, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::AudioAnalysisBandSettings' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, AudioAnalysisBandNames) == 0x000010, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::AudioAnalysisBandNames' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, PercussionParameterName) == 0x000020, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::PercussionParameterName' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, AverageAmplitudeParameterName) == 0x000024, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::AverageAmplitudeParameterName' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, UpdateRate) == 0x000028, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::UpdateRate' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, DecibelNoiseFloor) == 0x00002C, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::DecibelNoiseFloor' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, bDoNormalize) == 0x000030, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::bDoNormalize' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, bDoAutoRange) == 0x000031, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::bDoAutoRange' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, AutoRangeAttackTime) == 0x000034, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::AutoRangeAttackTime' has a wrong offset!");
static_assert(offsetof(FVideoPlayerDeviceAudioAnalysisSettings, AutoRangeReleaseTime) == 0x000038, "Member 'FVideoPlayerDeviceAudioAnalysisSettings::AutoRangeReleaseTime' has a wrong offset!");

}

