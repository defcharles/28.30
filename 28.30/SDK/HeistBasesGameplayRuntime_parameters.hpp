#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeistBasesGameplayRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function HeistBasesGameplayRuntime.FortGameStateComponent_HeistDisplayCaseItemManager.GetDisplayCaseItem
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem final
{
public:
	struct FGameplayTag                           DisplayCaseGroupTag;                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem) == 0x000008, "Wrong alignment on FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem");
static_assert(sizeof(FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem) == 0x000010, "Wrong size on FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem, DisplayCaseGroupTag) == 0x000000, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem::DisplayCaseGroupTag' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem, ReturnValue) == 0x000008, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_GetDisplayCaseItem::ReturnValue' has a wrong offset!");

// Function HeistBasesGameplayRuntime.FortGameStateComponent_HeistDisplayCaseItemManager.HandlePlaylistDataReady
// 0x0030 (0x0030 - 0x0000)
struct FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady) == 0x000008, "Wrong alignment on FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady");
static_assert(sizeof(FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady) == 0x000030, "Wrong size on FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady, GameState) == 0x000000, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady::GameState' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady, Playlist) == 0x000008, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady::Playlist' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady, PlaylistContextTags) == 0x000010, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_HandlePlaylistDataReady::PlaylistContextTags' has a wrong offset!");

// Function HeistBasesGameplayRuntime.FortGameStateComponent_HeistDisplayCaseItemManager.IsDataReady
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady) == 0x000001, "Wrong alignment on FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady");
static_assert(sizeof(FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady) == 0x000001, "Wrong size on FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady");
static_assert(offsetof(FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady, ReturnValue) == 0x000000, "Member 'FortGameStateComponent_HeistDisplayCaseItemManager_IsDataReady::ReturnValue' has a wrong offset!");

// Function HeistBasesGameplayRuntime.FortHeistDisplayCase.OnServerNotifyEndDisplayCaseLongUse
// 0x0010 (0x0010 - 0x0000)
struct FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse final
{
public:
	class AFortPlayerPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompleted;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse) == 0x000008, "Wrong alignment on FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse");
static_assert(sizeof(FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse) == 0x000010, "Wrong size on FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse");
static_assert(offsetof(FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse, InteractingPawn) == 0x000000, "Member 'FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse, bUseCompleted) == 0x000008, "Member 'FortHeistDisplayCase_OnServerNotifyEndDisplayCaseLongUse::bUseCompleted' has a wrong offset!");

// Function HeistBasesGameplayRuntime.FortHeistDisplayCase.OnServerNotifyStartDisplayCaseLongUse
// 0x0008 (0x0008 - 0x0000)
struct FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse final
{
public:
	class AFortPlayerPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse) == 0x000008, "Wrong alignment on FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse");
static_assert(sizeof(FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse) == 0x000008, "Wrong size on FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse");
static_assert(offsetof(FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse, InteractingPawn) == 0x000000, "Member 'FortHeistDisplayCase_OnServerNotifyStartDisplayCaseLongUse::InteractingPawn' has a wrong offset!");

}

