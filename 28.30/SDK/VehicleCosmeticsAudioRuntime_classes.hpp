#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsAudioRuntime

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "VehicleCosmeticsAudioRuntime_structs.hpp"
#include "GameFeatures_classes.hpp"
#include "VehicleAudioRuntime_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VehicleCosmeticsAudioRuntime.GameFeatureAction_OverrideMaxLoadedVehicleAudio
// 0x0028 (0x0050 - 0x0028)
class UGameFeatureAction_OverrideMaxLoadedVehicleAudio final : public UGameFeatureAction
{
public:
	int32                                         DefaultSetting;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XB1Setting;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XSXSetting;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS4Setting;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS5Setting;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MobileSetting;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SwitchSetting;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameFeatureAction_OverrideMaxLoadedVehicleAudio">();
	}
	static class UGameFeatureAction_OverrideMaxLoadedVehicleAudio* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameFeatureAction_OverrideMaxLoadedVehicleAudio>();
	}
};
static_assert(alignof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio) == 0x000008, "Wrong alignment on UGameFeatureAction_OverrideMaxLoadedVehicleAudio");
static_assert(sizeof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio) == 0x000050, "Wrong size on UGameFeatureAction_OverrideMaxLoadedVehicleAudio");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, DefaultSetting) == 0x000028, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::DefaultSetting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, XB1Setting) == 0x00002C, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::XB1Setting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, XSXSetting) == 0x000030, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::XSXSetting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, PS4Setting) == 0x000034, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::PS4Setting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, PS5Setting) == 0x000038, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::PS5Setting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, MobileSetting) == 0x00003C, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::MobileSetting' has a wrong offset!");
static_assert(offsetof(UGameFeatureAction_OverrideMaxLoadedVehicleAudio, SwitchSetting) == 0x000040, "Member 'UGameFeatureAction_OverrideMaxLoadedVehicleAudio::SwitchSetting' has a wrong offset!");

// Class VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController
// 0x0038 (0x0338 - 0x0300)
class AVehicleCosmeticsAudioController : public AFortVehicleAudioController
{
public:
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVehicleAudioCosmeticData> CachedEngineAudioItem;                             // 0x0308(0x0020)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnAudioDataEjected();
	void BP_OnAudioDataLoaded(const class USoundBase* sound);
	void BP_OnUpdateAudioData(const class UVehicleAudioCosmeticData* CosmeticData);
	void HandleEngineAudioItemUpdated(TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_EngineAudio> EngineAudioItem);
	void UpdateAudioData(const class UVehicleAudioCosmeticData* CosmeticData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAudioController">();
	}
	static class AVehicleCosmeticsAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleCosmeticsAudioController>();
	}
};
static_assert(alignof(AVehicleCosmeticsAudioController) == 0x000008, "Wrong alignment on AVehicleCosmeticsAudioController");
static_assert(sizeof(AVehicleCosmeticsAudioController) == 0x000338, "Wrong size on AVehicleCosmeticsAudioController");
static_assert(offsetof(AVehicleCosmeticsAudioController, CachedEngineAudioItem) == 0x000308, "Member 'AVehicleCosmeticsAudioController::CachedEngineAudioItem' has a wrong offset!");

// Class VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioManager
// 0x0078 (0x00B8 - 0x0040)
class UVehicleCosmeticsAudioManager final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundBase*>                     LoadedAssets;                                      // 0x0060(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultMaxLoadedCosmetics;                         // 0x0080(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDistancePriority>              DistancePriorities;                                // 0x0088(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	float                                         LocalPlayerCosmeticPriority;                       // 0x0098(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PartyPlayerCosmeticPriority;                       // 0x009C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LicensedCosmeticPriority;                          // 0x00A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TickInterval;                                      // 0x00A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterVehicleWithAsset(const struct FVehicleCosmeticLoadRequestInfo& RequestInfo);
	void RemoveVehicleBudgetOverride();
	void SetVehicleBudgetOverride(int32 NewBudget);
	void UnregisterVehcle(TScriptInterface<class IVehicleCosmeticsAudioUser> Vehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAudioManager">();
	}
	static class UVehicleCosmeticsAudioManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsAudioManager>();
	}
};
static_assert(alignof(UVehicleCosmeticsAudioManager) == 0x000008, "Wrong alignment on UVehicleCosmeticsAudioManager");
static_assert(sizeof(UVehicleCosmeticsAudioManager) == 0x0000B8, "Wrong size on UVehicleCosmeticsAudioManager");
static_assert(offsetof(UVehicleCosmeticsAudioManager, LoadedAssets) == 0x000060, "Member 'UVehicleCosmeticsAudioManager::LoadedAssets' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, DefaultMaxLoadedCosmetics) == 0x000080, "Member 'UVehicleCosmeticsAudioManager::DefaultMaxLoadedCosmetics' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, DistancePriorities) == 0x000088, "Member 'UVehicleCosmeticsAudioManager::DistancePriorities' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, LocalPlayerCosmeticPriority) == 0x000098, "Member 'UVehicleCosmeticsAudioManager::LocalPlayerCosmeticPriority' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, PartyPlayerCosmeticPriority) == 0x00009C, "Member 'UVehicleCosmeticsAudioManager::PartyPlayerCosmeticPriority' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, LicensedCosmeticPriority) == 0x0000A0, "Member 'UVehicleCosmeticsAudioManager::LicensedCosmeticPriority' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAudioManager, TickInterval) == 0x0000A4, "Member 'UVehicleCosmeticsAudioManager::TickInterval' has a wrong offset!");

// Class VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioUser
// 0x0000 (0x0028 - 0x0028)
class IVehicleCosmeticsAudioUser final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAudioUser">();
	}
	static class IVehicleCosmeticsAudioUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVehicleCosmeticsAudioUser>();
	}
};
static_assert(alignof(IVehicleCosmeticsAudioUser) == 0x000008, "Wrong alignment on IVehicleCosmeticsAudioUser");
static_assert(sizeof(IVehicleCosmeticsAudioUser) == 0x000028, "Wrong size on IVehicleCosmeticsAudioUser");

}

