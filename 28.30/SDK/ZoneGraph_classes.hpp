#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZoneGraph

#include "Basic.hpp"

#include "ZoneGraph_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class ZoneGraph.ZoneGraphData
// 0x0130 (0x03C0 - 0x0290)
class AZoneGraphData final : public AActor
{
public:
	uint8                                         Pad_290[0x1];                                      // 0x0290(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableDrawing;                                    // 0x0291(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneGraphRenderingComponent*           RenderingComp;                                     // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphStorage                      ZoneStorage;                                       // 0x02A0(0x00F0)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x28];                                     // 0x0390(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CombinedShapeHash;                                 // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphData">();
	}
	static class AZoneGraphData* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZoneGraphData>();
	}
};
static_assert(alignof(AZoneGraphData) == 0x000008, "Wrong alignment on AZoneGraphData");
static_assert(sizeof(AZoneGraphData) == 0x0003C0, "Wrong size on AZoneGraphData");
static_assert(offsetof(AZoneGraphData, bEnableDrawing) == 0x000291, "Member 'AZoneGraphData::bEnableDrawing' has a wrong offset!");
static_assert(offsetof(AZoneGraphData, RenderingComp) == 0x000298, "Member 'AZoneGraphData::RenderingComp' has a wrong offset!");
static_assert(offsetof(AZoneGraphData, ZoneStorage) == 0x0002A0, "Member 'AZoneGraphData::ZoneStorage' has a wrong offset!");
static_assert(offsetof(AZoneGraphData, CombinedShapeHash) == 0x0003B8, "Member 'AZoneGraphData::CombinedShapeHash' has a wrong offset!");

// Class ZoneGraph.ZoneGraphRenderingComponent
// 0x0010 (0x0510 - 0x0500)
class UZoneGraphRenderingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphRenderingComponent">();
	}
	static class UZoneGraphRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphRenderingComponent>();
	}
};
static_assert(alignof(UZoneGraphRenderingComponent) == 0x000010, "Wrong alignment on UZoneGraphRenderingComponent");
static_assert(sizeof(UZoneGraphRenderingComponent) == 0x000510, "Wrong size on UZoneGraphRenderingComponent");

// Class ZoneGraph.ZoneGraphSettings
// 0x01E0 (0x0210 - 0x0030)
class UZoneGraphSettings final : public UDeveloperSettings
{
public:
	TArray<struct FZoneLaneProfile>               LaneProfiles;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	struct FZoneGraphTagInfo                      Tags[0x20];                                        // 0x0040(0x000C)(Edit, Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FZoneGraphTagMask                      VisualizedTags;                                    // 0x01C0(0x0004)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShapeMaxDrawDistance;                              // 0x01C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphBuildSettings                BuildSettings;                                     // 0x01C8(0x0040)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	bool                                          bBuildZoneGraphWhileEditing;                       // 0x0208(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphSettings">();
	}
	static class UZoneGraphSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphSettings>();
	}
};
static_assert(alignof(UZoneGraphSettings) == 0x000008, "Wrong alignment on UZoneGraphSettings");
static_assert(sizeof(UZoneGraphSettings) == 0x000210, "Wrong size on UZoneGraphSettings");
static_assert(offsetof(UZoneGraphSettings, LaneProfiles) == 0x000030, "Member 'UZoneGraphSettings::LaneProfiles' has a wrong offset!");
static_assert(offsetof(UZoneGraphSettings, Tags) == 0x000040, "Member 'UZoneGraphSettings::Tags' has a wrong offset!");
static_assert(offsetof(UZoneGraphSettings, VisualizedTags) == 0x0001C0, "Member 'UZoneGraphSettings::VisualizedTags' has a wrong offset!");
static_assert(offsetof(UZoneGraphSettings, ShapeMaxDrawDistance) == 0x0001C4, "Member 'UZoneGraphSettings::ShapeMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(UZoneGraphSettings, BuildSettings) == 0x0001C8, "Member 'UZoneGraphSettings::BuildSettings' has a wrong offset!");
static_assert(offsetof(UZoneGraphSettings, bBuildZoneGraphWhileEditing) == 0x000208, "Member 'UZoneGraphSettings::bBuildZoneGraphWhileEditing' has a wrong offset!");

// Class ZoneGraph.ZoneGraphSubsystem
// 0x0050 (0x0090 - 0x0040)
class UZoneGraphSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRegisteredZoneGraphData>       RegisteredZoneGraphData;                           // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphSubsystem">();
	}
	static class UZoneGraphSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphSubsystem>();
	}
};
static_assert(alignof(UZoneGraphSubsystem) == 0x000008, "Wrong alignment on UZoneGraphSubsystem");
static_assert(sizeof(UZoneGraphSubsystem) == 0x000090, "Wrong size on UZoneGraphSubsystem");
static_assert(offsetof(UZoneGraphSubsystem, RegisteredZoneGraphData) == 0x000068, "Member 'UZoneGraphSubsystem::RegisteredZoneGraphData' has a wrong offset!");

// Class ZoneGraph.ZoneShape
// 0x0008 (0x0298 - 0x0290)
class AZoneShape final : public AActor
{
public:
	class UZoneShapeComponent*                    ShapeComponent;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneShape">();
	}
	static class AZoneShape* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZoneShape>();
	}
};
static_assert(alignof(AZoneShape) == 0x000008, "Wrong alignment on AZoneShape");
static_assert(sizeof(AZoneShape) == 0x000298, "Wrong size on AZoneShape");
static_assert(offsetof(AZoneShape, ShapeComponent) == 0x000290, "Member 'AZoneShape::ShapeComponent' has a wrong offset!");

// Class ZoneGraph.ZoneShapeComponent
// 0x0060 (0x0560 - 0x0500)
class UZoneShapeComponent final : public UPrimitiveComponent
{
public:
	struct FZoneLaneProfileRef                    LaneProfile;                                       // 0x0500(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bReverseLaneProfile;                               // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FZoneLaneProfileRef>            PerPointLaneProfiles;                              // 0x0518(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FZoneShapePoint>                Points;                                            // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	EFZoneShapeType                               ShapeType;                                         // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EZoneShapePolygonRoutingType                  PolygonRoutingType;                                // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_53A[0x2];                                      // 0x053A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneGraphTagMask                      Tags;                                              // 0x053C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FZoneShapeConnector>            ShapeConnectors;                                   // 0x0540(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FZoneShapeConnection>           ConnectedShapes;                                   // 0x0550(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetPolygonRoutingType(const EZoneShapePolygonRoutingType NewType);
	bool SetReverseLaneProfile(bool bReverse);
	void SetShapeType(EFZoneShapeType Type);
	void SetTags(const struct FZoneGraphTagMask& NewTags);

	EFZoneShapeType GetShapeType() const;
	struct FZoneGraphTagMask GetTags() const;
	bool IsLaneProfileReversed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneShapeComponent">();
	}
	static class UZoneShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneShapeComponent>();
	}
};
static_assert(alignof(UZoneShapeComponent) == 0x000010, "Wrong alignment on UZoneShapeComponent");
static_assert(sizeof(UZoneShapeComponent) == 0x000560, "Wrong size on UZoneShapeComponent");
static_assert(offsetof(UZoneShapeComponent, LaneProfile) == 0x000500, "Member 'UZoneShapeComponent::LaneProfile' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, bReverseLaneProfile) == 0x000514, "Member 'UZoneShapeComponent::bReverseLaneProfile' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, PerPointLaneProfiles) == 0x000518, "Member 'UZoneShapeComponent::PerPointLaneProfiles' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, Points) == 0x000528, "Member 'UZoneShapeComponent::Points' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, ShapeType) == 0x000538, "Member 'UZoneShapeComponent::ShapeType' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, PolygonRoutingType) == 0x000539, "Member 'UZoneShapeComponent::PolygonRoutingType' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, Tags) == 0x00053C, "Member 'UZoneShapeComponent::Tags' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, ShapeConnectors) == 0x000540, "Member 'UZoneShapeComponent::ShapeConnectors' has a wrong offset!");
static_assert(offsetof(UZoneShapeComponent, ConnectedShapes) == 0x000550, "Member 'UZoneShapeComponent::ConnectedShapes' has a wrong offset!");

}

