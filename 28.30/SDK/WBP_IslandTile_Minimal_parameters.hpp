#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_IslandTile_Minimal

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.BP_OnHoldTriggered
// 0x0188 (0x0188 - 0x0000)
struct WBP_IslandTile_Minimal_C_BP_OnHoldTriggered final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            ReturnValue;                                       // 0x0008(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00D0(0x00B8)()
};
static_assert(alignof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_BP_OnHoldTriggered");
static_assert(sizeof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered) == 0x000188, "Wrong size on WBP_IslandTile_Minimal_C_BP_OnHoldTriggered");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered, CurrentInputType) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_BP_OnHoldTriggered::CurrentInputType' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered, ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_BP_OnHoldTriggered::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered, K2Node_SwitchEnum_CmpSuccess) == 0x0000C0, "Member 'WBP_IslandTile_Minimal_C_BP_OnHoldTriggered::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered, CallFunc_GetRuntimeOptions_ReturnValue) == 0x0000C8, "Member 'WBP_IslandTile_Minimal_C_BP_OnHoldTriggered::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnHoldTriggered, CallFunc_Handled_ReturnValue) == 0x0000D0, "Member 'WBP_IslandTile_Minimal_C_BP_OnHoldTriggered::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged");
static_assert(sizeof(WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged");
static_assert(sizeof(WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged");
static_assert(offsetof(WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.ExecuteUbergraph_WBP_IslandTile_Minimal
// 0x0290 (0x0290 - 0x0000)
struct WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_UIKit_Dialog_C*                    CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_UIKit_Dialog_C*                    K2Node_DynamicCast_AsWBP_UIKit_Dialog;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 ButtonIndex)>            K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FUIKitContextMenuActionInfo            K2Node_MakeStruct_UIKitContextMenuActionInfo;      // 0x0028(0x0050)(ContainsInstancedReference)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0078(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0084(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FUIKitContextMenuActionInfo            K2Node_MakeStruct_UIKitContextMenuActionInfo_1;    // 0x0090(0x0050)(ContainsInstancedReference)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00E0(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x00EC(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDialogVM_DiscoTileDisclaimer_RecentlyPlayed_C* CallFunc_SpawnObject_ReturnValue;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsVisible;                           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivitySelector*                  CallFunc_GetActivitySelector_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ButtonIndex;                    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDialogVM_DiscoTileDisclaimer_Recommended_C* CallFunc_SpawnObject_ReturnValue_1;                // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0128(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivitySelector*                  CallFunc_GetActivitySelector_ReturnValue_1;        // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortActivitySelector*                  CallFunc_GetActivitySelector_ReturnValue_2;        // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortActivityViewModel*                 K2Node_DynamicCast_AsDiscover_Activity_View_Model; // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortActivitySelector*                  CallFunc_GetActivitySelector_ReturnValue_3;        // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FUIKitContextMenuActionInfo            K2Node_MakeStruct_UIKitContextMenuActionInfo_2;    // 0x0168(0x0050)(ContainsInstancedReference)
	bool                                          K2Node_CustomEvent_IsFavorited;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_SelectText_ReturnValue;                   // 0x01C0(0x0018)()
	struct FUIKitContextMenuActionInfo            K2Node_MakeStruct_UIKitContextMenuActionInfo_3;    // 0x01D8(0x0050)(ContainsInstancedReference)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIKitDialogViewModel*                  K2Node_Select_Default;                             // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FUIKitContextMenuActionInfo            K2Node_MakeStruct_UIKitContextMenuActionInfo_4;    // 0x0238(0x0050)(ContainsInstancedReference)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsTileActive;                        // 0x0289(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x028B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal");
static_assert(sizeof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal) == 0x000290, "Wrong size on WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, EntryPoint) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_Create_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_DynamicCast_AsWBP_UIKit_Dialog) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_DynamicCast_AsWBP_UIKit_Dialog' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_MakeStruct_UIKitContextMenuActionInfo) == 0x000028, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_MakeStruct_UIKitContextMenuActionInfo' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate_1) == 0x000078, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate_2) == 0x000084, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_MakeStruct_UIKitContextMenuActionInfo_1) == 0x000090, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_MakeStruct_UIKitContextMenuActionInfo_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000E0, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000EC, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, Temp_bool_Variable) == 0x0000F8, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_SpawnObject_ReturnValue) == 0x000100, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_bIsVisible) == 0x000108, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_bIsVisible' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, Temp_byte_Variable) == 0x000109, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_GetActivitySelector_ReturnValue) == 0x000110, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_GetActivitySelector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, Temp_bool_Variable_1) == 0x000118, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CustomEvent_ButtonIndex) == 0x00011C, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CustomEvent_ButtonIndex' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_SpawnObject_ReturnValue_1) == 0x000120, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CreateDelegate_OutputDelegate_5) == 0x000128, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_GetActivitySelector_ReturnValue_1) == 0x000138, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_GetActivitySelector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_GetActivitySelector_ReturnValue_2) == 0x000140, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_GetActivitySelector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_ListItemObject) == 0x000148, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_DynamicCast_AsDiscover_Activity_View_Model) == 0x000150, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_DynamicCast_AsDiscover_Activity_View_Model' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_GetActivitySelector_ReturnValue_3) == 0x000160, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_GetActivitySelector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_MakeStruct_UIKitContextMenuActionInfo_2) == 0x000168, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_MakeStruct_UIKitContextMenuActionInfo_2' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_CustomEvent_IsFavorited) == 0x0001B8, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_CustomEvent_IsFavorited' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_IsDesignTime) == 0x0001B9, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_SelectText_ReturnValue) == 0x0001C0, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_SelectText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_MakeStruct_UIKitContextMenuActionInfo_3) == 0x0001D8, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_MakeStruct_UIKitContextMenuActionInfo_3' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_bIsSelected) == 0x000228, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Select_Default) == 0x000230, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_MakeStruct_UIKitContextMenuActionInfo_4) == 0x000238, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_MakeStruct_UIKitContextMenuActionInfo_4' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_bIsExpanded) == 0x000288, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Event_bIsTileActive) == 0x000289, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Event_bIsTileActive' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, Temp_byte_Variable_1) == 0x00028A, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, K2Node_Select_Default_1) == 0x00028B, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal, CallFunc_Not_PreBool_ReturnValue) == 0x00028C, "Member 'WBP_IslandTile_Minimal_C_ExecuteUbergraph_WBP_IslandTile_Minimal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnByEpicUpdated
// 0x0005 (0x0005 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnByEpicUpdated final
{
public:
	bool                                          IsByEpic;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnByEpicUpdated) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_OnByEpicUpdated");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnByEpicUpdated) == 0x000005, "Wrong size on WBP_IslandTile_Minimal_C_OnByEpicUpdated");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnByEpicUpdated, IsByEpic) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnByEpicUpdated::IsByEpic' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnByEpicUpdated, Temp_bool_Variable) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_OnByEpicUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnByEpicUpdated, Temp_byte_Variable) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_OnByEpicUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnByEpicUpdated, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_IslandTile_Minimal_C_OnByEpicUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnByEpicUpdated, K2Node_Select_Default) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_OnByEpicUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnIsContentGatedUpdated
// 0x0010 (0x0010 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated final
{
public:
	bool                                          IsContentGated;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated) == 0x000010, "Wrong size on WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated, IsContentGated) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated::IsContentGated' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated, Temp_bool_Variable) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated, K2Node_Select_Default) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_OnIsContentGatedUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_OnListItemObjectSet");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnListItemObjectSet) == 0x000008, "Wrong size on WBP_IslandTile_Minimal_C_OnListItemObjectSet");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnModalDismissed
// 0x0004 (0x0004 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnModalDismissed final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnModalDismissed) == 0x000004, "Wrong alignment on WBP_IslandTile_Minimal_C_OnModalDismissed");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnModalDismissed) == 0x000004, "Wrong size on WBP_IslandTile_Minimal_C_OnModalDismissed");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnModalDismissed, ButtonIndex) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnModalDismissed::ButtonIndex' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnMouseButtonDown
// 0x0220 (0x0220 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_OnRightClickMouse_WasHandled;             // 0x0168(0x00B8)()
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_OnMouseButtonDown");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnMouseButtonDown) == 0x000220, "Wrong size on WBP_IslandTile_Minimal_C_OnMouseButtonDown");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'WBP_IslandTile_Minimal_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'WBP_IslandTile_Minimal_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnMouseButtonDown, CallFunc_OnRightClickMouse_WasHandled) == 0x000168, "Member 'WBP_IslandTile_Minimal_C_OnMouseButtonDown::CallFunc_OnRightClickMouse_WasHandled' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnRespondToTileViewVisibilityChange
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange, bIsVisible) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnRespondToTileViewVisibilityChange::bIsVisible' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnSetInvalidActivityReason
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason final
{
public:
	EFortInvalidActivityReason                    InvalidActivityReason;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason, InvalidActivityReason) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnSetInvalidActivityReason::InvalidActivityReason' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnTileActiveSet
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnTileActiveSet final
{
public:
	bool                                          bIsTileActive;                                     // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnTileActiveSet) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_OnTileActiveSet");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnTileActiveSet) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_OnTileActiveSet");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnTileActiveSet, bIsTileActive) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnTileActiveSet::bIsTileActive' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.OnTileSelectionActive
// 0x0010 (0x0010 - 0x0000)
struct WBP_IslandTile_Minimal_C_OnTileSelectionActive final
{
public:
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_OnTileSelectionActive) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_OnTileSelectionActive");
static_assert(sizeof(WBP_IslandTile_Minimal_C_OnTileSelectionActive) == 0x000010, "Wrong size on WBP_IslandTile_Minimal_C_OnTileSelectionActive");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnTileSelectionActive, CallFunc_GetEndTime_ReturnValue) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_OnTileSelectionActive::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_OnTileSelectionActive, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_OnTileSelectionActive::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_PreConstruct");
static_assert(sizeof(WBP_IslandTile_Minimal_C_PreConstruct) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_PreConstruct");
static_assert(offsetof(WBP_IslandTile_Minimal_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.Set Image Spinner State
// 0x0010 (0x0010 - 0x0000)
struct WBP_IslandTile_Minimal_C_Set_Image_Spinner_State final
{
public:
	EActivityImageLoadingState                    InImageState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_Set_Image_Spinner_State) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_Set_Image_Spinner_State");
static_assert(sizeof(WBP_IslandTile_Minimal_C_Set_Image_Spinner_State) == 0x000010, "Wrong size on WBP_IslandTile_Minimal_C_Set_Image_Spinner_State");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_Spinner_State, InImageState) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_Set_Image_Spinner_State::InImageState' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_Spinner_State, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_Set_Image_Spinner_State::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.Set Image State
// 0x0002 (0x0002 - 0x0000)
struct WBP_IslandTile_Minimal_C_Set_Image_State final
{
public:
	EActivityImageLoadingState                    LoadingEnum;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_Set_Image_State) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_Set_Image_State");
static_assert(sizeof(WBP_IslandTile_Minimal_C_Set_Image_State) == 0x000002, "Wrong size on WBP_IslandTile_Minimal_C_Set_Image_State");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_State, LoadingEnum) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_Set_Image_State::LoadingEnum' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_State, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_Set_Image_State::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.Set Image Success State
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_Set_Image_Success_State final
{
public:
	class UTexture*                               CallFunc_GetImageTexture_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_Set_Image_Success_State) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_Set_Image_Success_State");
static_assert(sizeof(WBP_IslandTile_Minimal_C_Set_Image_Success_State) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_Set_Image_Success_State");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_Success_State, CallFunc_GetImageTexture_ReturnValue) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_Set_Image_Success_State::CallFunc_GetImageTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_Success_State, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_Set_Image_Success_State::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Image_Success_State, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_Set_Image_Success_State::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.Set Up Favorite Interaction
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction final
{
public:
	bool                                          IsFavorited;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction");
static_assert(sizeof(WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction, IsFavorited) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_Set_Up_Favorite_Interaction::IsFavorited' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetCCUCount
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetCCUCount final
{
public:
	int32                                         CCUCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetCCUCount) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetCCUCount");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetCCUCount) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_SetCCUCount");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCCUCount, CCUCount) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetCCUCount::CCUCount' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCCUCount, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetCCUCount::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCCUCount, CallFunc_AddChildToOverlay_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetCCUCount::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCCUCount, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetCCUCount::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetColumnSize
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetColumnSize final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ColumnSizeToTileSize_NewTileSize;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetColumnSize) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetColumnSize");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetColumnSize) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_SetColumnSize");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetColumnSize, NewSize) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetColumnSize::NewSize' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetColumnSize, CallFunc_ColumnSizeToTileSize_NewTileSize) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetColumnSize::CallFunc_ColumnSizeToTileSize_NewTileSize' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetCornerRadius
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetCornerRadius final
{
public:
	struct FLinearColor                           CornerRadius;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetCornerRadius) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetCornerRadius");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetCornerRadius) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_SetCornerRadius");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCornerRadius, CornerRadius) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetCornerRadius::CornerRadius' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCornerRadius, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetCornerRadius::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetDisabledThumbnailOverlay
// 0x0028 (0x0028 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay final
{
public:
	EFortInvalidActivityReason                    CallFunc_GetInvalidActivityReason_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesActivityRequirePurchase_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue_1;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivityLocked_ReturnValue;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay) == 0x000028, "Wrong size on WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_GetInvalidActivityReason_ReturnValue) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_GetInvalidActivityReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_DoesActivityRequirePurchase_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_DoesActivityRequirePurchase_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_EqualEqual_BoolBool_ReturnValue_1) == 0x000011, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_EqualEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_IsActivityLocked_ReturnValue) == 0x000012, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_IsActivityLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_BooleanAND_ReturnValue_1) == 0x000013, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_BooleanOR_ReturnValue_1) == 0x000016, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000020, "Member 'WBP_IslandTile_Minimal_C_SetDisabledThumbnailOverlay::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetFortActivityViewModel
// 0x0028 (0x0028 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetFortActivityViewModel final
{
public:
	class UFortActivityViewModel*                 ViewModel;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMVVMView*                              CallFunc_GetExtension_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class INotifyFieldValueChanged> CallFunc_SetViewModel_ViewModel_CastInput;         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_SetViewModel_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetFortActivityViewModel");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel) == 0x000028, "Wrong size on WBP_IslandTile_Minimal_C_SetFortActivityViewModel");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel, ViewModel) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetFortActivityViewModel::ViewModel' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel, CallFunc_GetExtension_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetFortActivityViewModel::CallFunc_GetExtension_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel, CallFunc_SetViewModel_ViewModel_CastInput) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetFortActivityViewModel::CallFunc_SetViewModel_ViewModel_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFortActivityViewModel, CallFunc_SetViewModel_ReturnValue) == 0x000020, "Member 'WBP_IslandTile_Minimal_C_SetFortActivityViewModel::CallFunc_SetViewModel_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetFriendsPlayingCount
// 0x0028 (0x0028 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetFriendsPlayingCount final
{
public:
	int32                                         FriendsPlayingCount;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetFriendsPlayingCount");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount) == 0x000028, "Wrong size on WBP_IslandTile_Minimal_C_SetFriendsPlayingCount");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, FriendsPlayingCount) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::FriendsPlayingCount' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, Temp_bool_Variable) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000005, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, Temp_byte_Variable) == 0x000020, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, Temp_byte_Variable_1) == 0x000021, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetFriendsPlayingCount, K2Node_Select_Default) == 0x000023, "Member 'WBP_IslandTile_Minimal_C_SetFriendsPlayingCount::K2Node_Select_Default' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetHighlightText
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetHighlightText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetHighlightText) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetHighlightText");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetHighlightText) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_SetHighlightText");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetHighlightText, Text) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetHighlightText::Text' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetIconPaddingForLockOrFavorite
// 0x0030 (0x0030 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivityLocked_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite) == 0x000030, "Wrong size on WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, Temp_bool_Variable) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, Temp_real_Variable) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, Temp_real_Variable_1) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, CallFunc_IsActivityLocked_ReturnValue) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::CallFunc_IsActivityLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, K2Node_Select_Default) == 0x00001C, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite, K2Node_MakeStruct_Margin) == 0x000020, "Member 'WBP_IslandTile_Minimal_C_SetIconPaddingForLockOrFavorite::K2Node_MakeStruct_Margin' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetImageErrorState
// 0x0020 (0x0020 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetImageErrorState final
{
public:
	EActivityImageLoadingState                    ImageLoadState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetImageErrorState) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetImageErrorState");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetImageErrorState) == 0x000020, "Wrong size on WBP_IslandTile_Minimal_C_SetImageErrorState");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, ImageLoadState) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::ImageLoadState' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_bool_Variable) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_real_Variable) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_real_Variable_1) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_bool_Variable_1) == 0x00000C, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, K2Node_Select_Default) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_byte_Variable) == 0x000014, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, Temp_byte_Variable_1) == 0x000015, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, K2Node_Select_Default_1) == 0x000016, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetImageErrorState, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_SetImageErrorState::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetIsCurrentActivity
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetIsCurrentActivity final
{
public:
	bool                                          IsCurrentActivity;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetIsCurrentActivity) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_SetIsCurrentActivity");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetIsCurrentActivity) == 0x000001, "Wrong size on WBP_IslandTile_Minimal_C_SetIsCurrentActivity");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsCurrentActivity, IsCurrentActivity) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetIsCurrentActivity::IsCurrentActivity' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetIsFavorite
// 0x0006 (0x0006 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetIsFavorite final
{
public:
	bool                                          IsFavorited;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPreviewTile_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetIsFavorite) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_SetIsFavorite");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetIsFavorite) == 0x000006, "Wrong size on WBP_IslandTile_Minimal_C_SetIsFavorite");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, IsFavorited) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::IsFavorited' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, Temp_byte_Variable) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, Temp_bool_Variable) == 0x000003, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, K2Node_Select_Default) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsFavorite, CallFunc_IsPreviewTile_ReturnValue) == 0x000005, "Member 'WBP_IslandTile_Minimal_C_SetIsFavorite::CallFunc_IsPreviewTile_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetIslandName
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetIslandName final
{
public:
	class FText                                   IslandName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetIslandName) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetIslandName");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetIslandName) == 0x000018, "Wrong size on WBP_IslandTile_Minimal_C_SetIslandName");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIslandName, IslandName) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetIslandName::IslandName' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetIsPreviewTile
// 0x0002 (0x0002 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetIsPreviewTile final
{
public:
	bool                                          IsPreviewTile;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInteractionItems_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetIsPreviewTile) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_SetIsPreviewTile");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetIsPreviewTile) == 0x000002, "Wrong size on WBP_IslandTile_Minimal_C_SetIsPreviewTile");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsPreviewTile, IsPreviewTile) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetIsPreviewTile::IsPreviewTile' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetIsPreviewTile, CallFunc_HasInteractionItems_ReturnValue) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetIsPreviewTile::CallFunc_HasInteractionItems_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetPanelType
// 0x0004 (0x0004 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetPanelType final
{
public:
	EFortCreativeDiscoveryPanelType               PanelTypeEnum;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetPanelType) == 0x000001, "Wrong alignment on WBP_IslandTile_Minimal_C_SetPanelType");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetPanelType) == 0x000004, "Wrong size on WBP_IslandTile_Minimal_C_SetPanelType");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPanelType, PanelTypeEnum) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetPanelType::PanelTypeEnum' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPanelType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetPanelType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPanelType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_SetPanelType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPanelType, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'WBP_IslandTile_Minimal_C_SetPanelType::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetPurchaseRequired
// 0x0010 (0x0010 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetPurchaseRequired final
{
public:
	bool                                          IsPurchaseRequired;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivityLocked_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          K2Node_Select_Default;                             // 0x0008(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetPurchaseRequired) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetPurchaseRequired");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetPurchaseRequired) == 0x000010, "Wrong size on WBP_IslandTile_Minimal_C_SetPurchaseRequired");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, IsPurchaseRequired) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::IsPurchaseRequired' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, Temp_bool_Variable) == 0x000001, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, CallFunc_IsActivityLocked_ReturnValue) == 0x000002, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::CallFunc_IsActivityLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetPurchaseRequired, K2Node_Select_Default) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetPurchaseRequired::K2Node_Select_Default' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetupSqueegeeWidgets
// 0x0008 (0x0008 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets final
{
public:
	class UFortActivityViewModel*                 ActivityVM;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets) == 0x000008, "Wrong size on WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets, ActivityVM) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetupSqueegeeWidgets::ActivityVM' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.Update Texture Margin To Resolution
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution final
{
public:
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue_1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEpicCreated_ReturnValue;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetTextureSize_ReturnValue;               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMod_Remainder;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMod_Remainder_1;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue_1;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_Select_Default;                             // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMod_Divisor_ImplicitCast;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMod_Divisor_ImplicitCast_1;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution");
static_assert(sizeof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution) == 0x0000B8, "Wrong size on WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, MaterialInstance) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::MaterialInstance' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_K2_GetScalarParameterValue_ReturnValue_1) == 0x00000C, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_K2_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000011, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_IsEpicCreated_ReturnValue) == 0x000013, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_IsEpicCreated_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, Temp_bool_Variable) == 0x000015, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Not_PreBool_ReturnValue) == 0x000016, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, K2Node_MakeStruct_Margin) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, K2Node_MakeStruct_Margin_1) == 0x000028, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000038, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_GetTextureSize_ReturnValue) == 0x000040, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_GetTextureSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BreakVector2D_X) == 0x000050, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BreakVector2D_Y) == 0x000058, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_Remainder) == 0x000060, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_Remainder' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_ReturnValue) == 0x000068, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_Remainder_1) == 0x000070, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_Remainder_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_ReturnValue_1) == 0x000078, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00007C, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x00007D, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BooleanAND_ReturnValue_2) == 0x00007E, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Not_PreBool_ReturnValue_1) == 0x00007F, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_BooleanAND_ReturnValue_3) == 0x000080, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, K2Node_Select_Default) == 0x000084, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_Divisor_ImplicitCast) == 0x000098, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_Divisor_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000A0, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_FMod_Divisor_ImplicitCast_1) == 0x0000A8, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_FMod_Divisor_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x0000B0, "Member 'WBP_IslandTile_Minimal_C_Update_Texture_Margin_To_Resolution::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.__17bf98a4-4533-78f4-90a0-50ba916912d2_SourceToDest
// 0x0020 (0x0020 - 0x0000)
struct WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest final
{
public:
	class UWidget*                                VisibleWidget;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetCreatorLogoImage_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EActivityImageLoadingState                    CallFunc_GetCreatorLogoImageLoadingState_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_SetCreatorLogoOverrideVisible_VisibleWidget; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest");
static_assert(sizeof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest) == 0x000020, "Wrong size on WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest");
static_assert(offsetof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest, VisibleWidget) == 0x000000, "Member 'WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest::VisibleWidget' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest, CallFunc_GetCreatorLogoImage_ReturnValue) == 0x000008, "Member 'WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest::CallFunc_GetCreatorLogoImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest, CallFunc_GetCreatorLogoImageLoadingState_ReturnValue) == 0x000010, "Member 'WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest::CallFunc_GetCreatorLogoImageLoadingState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest, CallFunc_SetCreatorLogoOverrideVisible_VisibleWidget) == 0x000018, "Member 'WBP_IslandTile_Minimal_C___17bf98a4_4533_78f4_90a0_50ba916912d2_SourceToDest::CallFunc_SetCreatorLogoOverrideVisible_VisibleWidget' has a wrong offset!");

// Function WBP_IslandTile_Minimal.WBP_IslandTile_Minimal_C.SetCreatorLogoOverrideVisible
// 0x0038 (0x0038 - 0x0000)
struct WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible final
{
public:
	EActivityImageLoadingState                    CreatorLogoLoadingState;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CreatorLogoTexture;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                VisibleWidget;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2DDynamic*                      K2Node_DynamicCast_AsTexture_2DDynamic;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible) == 0x000008, "Wrong alignment on WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible");
static_assert(sizeof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible) == 0x000038, "Wrong size on WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, CreatorLogoLoadingState) == 0x000000, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::CreatorLogoLoadingState' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, CreatorLogoTexture) == 0x000008, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::CreatorLogoTexture' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, VisibleWidget) == 0x000010, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::VisibleWidget' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, Temp_bool_Variable) == 0x000018, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, K2Node_DynamicCast_AsTexture_2DDynamic) == 0x000020, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::K2Node_DynamicCast_AsTexture_2DDynamic' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible, K2Node_Select_Default) == 0x000030, "Member 'WBP_IslandTile_Minimal_C_SetCreatorLogoOverrideVisible::K2Node_Select_Default' has a wrong offset!");

}

