#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RocketRamGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct RocketRamGameplayRuntime.RootMotionSource_RocketRam
// 0x0050 (0x0130 - 0x00E0)
struct FRootMotionSource_RocketRam final : public FRootMotionSource
{
public:
	struct FVector                                InitialDirection;                                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedCurve;                                        // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorTraceHeight;                                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0108(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousEndLocationWithoutOffset;                  // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_RocketRam) == 0x000010, "Wrong alignment on FRootMotionSource_RocketRam");
static_assert(sizeof(FRootMotionSource_RocketRam) == 0x000130, "Wrong size on FRootMotionSource_RocketRam");
static_assert(offsetof(FRootMotionSource_RocketRam, InitialDirection) == 0x0000D8, "Member 'FRootMotionSource_RocketRam::InitialDirection' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, MinSpeed) == 0x0000F0, "Member 'FRootMotionSource_RocketRam::MinSpeed' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, MaxSpeed) == 0x0000F4, "Member 'FRootMotionSource_RocketRam::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, SpeedCurve) == 0x0000F8, "Member 'FRootMotionSource_RocketRam::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, FloorTraceHeight) == 0x000100, "Member 'FRootMotionSource_RocketRam::FloorTraceHeight' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, PathOffsetCurve) == 0x000108, "Member 'FRootMotionSource_RocketRam::PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_RocketRam, PreviousEndLocationWithoutOffset) == 0x000110, "Member 'FRootMotionSource_RocketRam::PreviousEndLocationWithoutOffset' has a wrong offset!");

}

