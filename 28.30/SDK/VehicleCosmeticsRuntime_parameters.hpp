#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsRuntime

#include "Basic.hpp"

#include "VehicleCosmeticsRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_BoostFX
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX) == 0x000004, "Wrong alignment on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX");
static_assert(sizeof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX) == 0x000004, "Wrong size on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX");
static_assert(offsetof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_BoostFX::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_FrontWheelDriftFX
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX) == 0x000004, "Wrong alignment on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX");
static_assert(sizeof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX) == 0x000004, "Wrong size on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX");
static_assert(offsetof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_FrontWheelDriftFX::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_Generic
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic) == 0x000004, "Wrong alignment on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic");
static_assert(sizeof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic) == 0x000004, "Wrong size on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic");
static_assert(offsetof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_Generic::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary.GetMaxSignificanceLOD_RearWheelDriftFX
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX) == 0x000004, "Wrong alignment on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX");
static_assert(sizeof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX) == 0x000004, "Wrong size on VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX");
static_assert(offsetof(VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsBlueprintLibrary_GetMaxSignificanceLOD_RearWheelDriftFX::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.PlayerCustomizableObjectCacheComponent.OnPlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisconnected;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected) == 0x000008, "Wrong alignment on PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected");
static_assert(sizeof(PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected) == 0x000010, "Wrong size on PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected");
static_assert(offsetof(PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected, PlayerState) == 0x000000, "Member 'PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected::PlayerState' has a wrong offset!");
static_assert(offsetof(PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected, bIsDisconnected) == 0x000008, "Member 'PlayerCustomizableObjectCacheComponent_OnPlayerDisconnected::bIsDisconnected' has a wrong offset!");

// Function VehicleCosmeticsRuntime.PlayerCustomizableObjectCacheComponent.OnSeamlessTravelStart
// 0x0018 (0x0018 - 0x0000)
struct PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart final
{
public:
	class UWorld*                                 CurrentWorld;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart) == 0x000008, "Wrong alignment on PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart");
static_assert(sizeof(PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart) == 0x000018, "Wrong size on PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart");
static_assert(offsetof(PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart, CurrentWorld) == 0x000000, "Member 'PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart::CurrentWorld' has a wrong offset!");
static_assert(offsetof(PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart, LevelName) == 0x000008, "Member 'PlayerCustomizableObjectCacheComponent_OnSeamlessTravelStart::LevelName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnColorReady
// 0x0038 (0x0038 - 0x0000)
struct VehicleCosmeticsActor_BP_OnColorReady final
{
public:
	class FName                                   Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleCosmeticsAdditionalParameterInfos AdditionalInfo;                                    // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsActor_BP_OnColorReady) == 0x000008, "Wrong alignment on VehicleCosmeticsActor_BP_OnColorReady");
static_assert(sizeof(VehicleCosmeticsActor_BP_OnColorReady) == 0x000038, "Wrong size on VehicleCosmeticsActor_BP_OnColorReady");
static_assert(offsetof(VehicleCosmeticsActor_BP_OnColorReady, Color) == 0x000000, "Member 'VehicleCosmeticsActor_BP_OnColorReady::Color' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsActor_BP_OnColorReady, AdditionalInfo) == 0x000008, "Member 'VehicleCosmeticsActor_BP_OnColorReady::AdditionalInfo' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.BP_OnVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct VehicleCosmeticsActor_BP_OnVehicleLanded final
{
public:
	float                                         LandingForced;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleCosmeticsActor_BP_OnVehicleLanded) == 0x000004, "Wrong alignment on VehicleCosmeticsActor_BP_OnVehicleLanded");
static_assert(sizeof(VehicleCosmeticsActor_BP_OnVehicleLanded) == 0x000008, "Wrong size on VehicleCosmeticsActor_BP_OnVehicleLanded");
static_assert(offsetof(VehicleCosmeticsActor_BP_OnVehicleLanded, LandingForced) == 0x000000, "Member 'VehicleCosmeticsActor_BP_OnVehicleLanded::LandingForced' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsActor_BP_OnVehicleLanded, bLandedKickflip) == 0x000004, "Member 'VehicleCosmeticsActor_BP_OnVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.ColorReady
// 0x0038 (0x0038 - 0x0000)
struct VehicleCosmeticsActor_ColorReady final
{
public:
	class FName                                   InColor;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleCosmeticsAdditionalParameterInfos InInfo;                                            // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsActor_ColorReady) == 0x000008, "Wrong alignment on VehicleCosmeticsActor_ColorReady");
static_assert(sizeof(VehicleCosmeticsActor_ColorReady) == 0x000038, "Wrong size on VehicleCosmeticsActor_ColorReady");
static_assert(offsetof(VehicleCosmeticsActor_ColorReady, InColor) == 0x000000, "Member 'VehicleCosmeticsActor_ColorReady::InColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsActor_ColorReady, InInfo) == 0x000008, "Member 'VehicleCosmeticsActor_ColorReady::InInfo' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsActor.GetBodyMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct VehicleCosmeticsActor_GetBodyMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsActor_GetBodyMeshComponent) == 0x000008, "Wrong alignment on VehicleCosmeticsActor_GetBodyMeshComponent");
static_assert(sizeof(VehicleCosmeticsActor_GetBodyMeshComponent) == 0x000008, "Wrong size on VehicleCosmeticsActor_GetBodyMeshComponent");
static_assert(offsetof(VehicleCosmeticsActor_GetBodyMeshComponent, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsActor_GetBodyMeshComponent::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleForceApplyVehicleCosmetics
// 0x0048 (0x0048 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics final
{
public:
	struct FSpawnerInfoForcedCosmetics            ForcedCosmetics;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics) == 0x000004, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics) == 0x000048, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics, ForcedCosmetics) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleForceApplyVehicleCosmetics::ForcedCosmetics' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleModApplied
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied final
{
public:
	const class AFortAthenaVehicle*               Vehicle;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModTag;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied) == 0x000008, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied) == 0x000010, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied, Vehicle) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied::Vehicle' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied, ModTag) == 0x000008, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleModApplied::ModTag' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleOnExplode
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode final
{
public:
	const class AController*                      LastDamageInstigator;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode) == 0x000008, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode) == 0x000010, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode, LastDamageInstigator) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode, Vehicle) == 0x000008, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleOnExplode::Vehicle' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleTirePopped
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped) == 0x000004, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped) == 0x000004, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped, TireIndex) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleTirePopped::TireIndex' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.HandleTireRepaired
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired) == 0x000004, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired) == 0x000004, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired, TireIndex) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_HandleTireRepaired::TireIndex' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent.SetVehicleCosmeticsEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled) == 0x000001, "Wrong alignment on VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled");
static_assert(sizeof(VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled) == 0x000001, "Wrong size on VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled");
static_assert(offsetof(VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled, bEnabled) == 0x000000, "Member 'VehicleCosmeticsAssembledMeshUserComponent_SetVehicleCosmeticsEnabled::bEnabled' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.CustomizeAllVehicles
// 0x00C0 (0x00C0 - 0x0000)
struct VehicleCosmeticsCheatManager_CustomizeAllVehicles final
{
public:
	class FString                                 BodyName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelName;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinName;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterName;                                       // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailName;                                    // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyPainted;                                       // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelPainted;                                      // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyColor;                                         // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinColor;                                         // 0x0080(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinPainted;                                       // 0x0090(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterPainted;                                    // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailPainted;                                 // 0x00B0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_CustomizeAllVehicles) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_CustomizeAllVehicles");
static_assert(sizeof(VehicleCosmeticsCheatManager_CustomizeAllVehicles) == 0x0000C0, "Wrong size on VehicleCosmeticsCheatManager_CustomizeAllVehicles");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, BodyName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::BodyName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, WheelName) == 0x000010, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::WheelName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, SkinName) == 0x000020, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::SkinName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, BoosterName) == 0x000030, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::BoosterName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, DriftTrailName) == 0x000040, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::DriftTrailName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, BodyPainted) == 0x000050, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::BodyPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, WheelPainted) == 0x000060, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::WheelPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, BodyColor) == 0x000070, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::BodyColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, SkinColor) == 0x000080, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::SkinColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, SkinPainted) == 0x000090, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::SkinPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, BoosterPainted) == 0x0000A0, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::BoosterPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeAllVehicles, DriftTrailPainted) == 0x0000B0, "Member 'VehicleCosmeticsCheatManager_CustomizeAllVehicles::DriftTrailPainted' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.CustomizeVehicle
// 0x00C0 (0x00C0 - 0x0000)
struct VehicleCosmeticsCheatManager_CustomizeVehicle final
{
public:
	class FString                                 BodyName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelName;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinName;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterName;                                       // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailName;                                    // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyPainted;                                       // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelPainted;                                      // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyColor;                                         // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinColor;                                         // 0x0080(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinPainted;                                       // 0x0090(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterPainted;                                    // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailPainted;                                 // 0x00B0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_CustomizeVehicle) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_CustomizeVehicle");
static_assert(sizeof(VehicleCosmeticsCheatManager_CustomizeVehicle) == 0x0000C0, "Wrong size on VehicleCosmeticsCheatManager_CustomizeVehicle");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, BodyName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::BodyName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, WheelName) == 0x000010, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::WheelName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, SkinName) == 0x000020, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::SkinName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, BoosterName) == 0x000030, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::BoosterName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, DriftTrailName) == 0x000040, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::DriftTrailName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, BodyPainted) == 0x000050, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::BodyPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, WheelPainted) == 0x000060, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::WheelPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, BodyColor) == 0x000070, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::BodyColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, SkinColor) == 0x000080, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::SkinColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, SkinPainted) == 0x000090, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::SkinPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, BoosterPainted) == 0x0000A0, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::BoosterPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_CustomizeVehicle, DriftTrailPainted) == 0x0000B0, "Member 'VehicleCosmeticsCheatManager_CustomizeVehicle::DriftTrailPainted' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmetics_BoosterPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmetics_BoosterPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmetics_DriftTrailPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmetics_DriftTrailPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout final
{
public:
	class FString                                 BodyName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelName;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinName;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterName;                                       // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailName;                                    // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyPainted;                                       // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WheelPainted;                                      // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyColor;                                         // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinColor;                                         // 0x0080(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinPainted;                                       // 0x0090(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterPainted;                                    // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DriftTrailPainted;                                 // 0x00B0(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout) == 0x0000C0, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, BodyName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::BodyName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, WheelName) == 0x000010, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::WheelName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, SkinName) == 0x000020, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::SkinName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, BoosterName) == 0x000030, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::BoosterName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, DriftTrailName) == 0x000040, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::DriftTrailName' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, BodyPainted) == 0x000050, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::BodyPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, WheelPainted) == 0x000060, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::WheelPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, BodyColor) == 0x000070, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::BodyColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, SkinColor) == 0x000080, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::SkinColor' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, SkinPainted) == 0x000090, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::SkinPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, BoosterPainted) == 0x0000A0, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::BoosterPainted' has a wrong offset!");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout, DriftTrailPainted) == 0x0000B0, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout::DriftTrailPainted' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Body
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body final
{
public:
	class FString                                 BodyName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body, BodyName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Body::BodyName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BodyColor
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor final
{
public:
	class FString                                 BodyColor;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor, BodyColor) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyColor::BodyColor' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BodyPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BodyPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Booster
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster final
{
public:
	class FString                                 BoosterName;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster, BoosterName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Booster::BoosterName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_BoosterPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_BoosterPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_DriftTrail
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail final
{
public:
	class FString                                 DriftSmokeName;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail, DriftSmokeName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrail::DriftSmokeName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_DriftTrailPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_DriftTrailPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Skin
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin, SkinName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Skin::SkinName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_SkinColor
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor final
{
public:
	class FString                                 SkinColor;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor, SkinColor) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinColor::SkinColor' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_SkinPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_SkinPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_Wheel
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel final
{
public:
	class FString                                 WheelName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel, WheelName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_Wheel::WheelName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.SetVehicleCosmeticsLoadout_WheelPainted
// 0x0010 (0x0010 - 0x0000)
struct VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted final
{
public:
	class FString                                 PaintName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted) == 0x000008, "Wrong alignment on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted");
static_assert(sizeof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted) == 0x000010, "Wrong size on VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted");
static_assert(offsetof(VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted, PaintName) == 0x000000, "Member 'VehicleCosmeticsCheatManager_SetVehicleCosmeticsLoadout_WheelPainted::PaintName' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager.VehicleCosmeticsDriftEnabled
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled) == 0x000001, "Wrong alignment on VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled");
static_assert(sizeof(VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled) == 0x000001, "Wrong size on VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled");
static_assert(offsetof(VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled, bNewValue) == 0x000000, "Member 'VehicleCosmeticsCheatManager_VehicleCosmeticsDriftEnabled::bNewValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetBodyItemName
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsInterface_GetBodyItemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_GetBodyItemName) == 0x000004, "Wrong alignment on VehicleCosmeticsInterface_GetBodyItemName");
static_assert(sizeof(VehicleCosmeticsInterface_GetBodyItemName) == 0x000004, "Wrong size on VehicleCosmeticsInterface_GetBodyItemName");
static_assert(offsetof(VehicleCosmeticsInterface_GetBodyItemName, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_GetBodyItemName::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetDraftingAppliedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed) == 0x000004, "Wrong alignment on VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed");
static_assert(sizeof(VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed) == 0x000004, "Wrong size on VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed");
static_assert(offsetof(VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_GetDraftingAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetDriftTrailItemName
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsInterface_GetDriftTrailItemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_GetDriftTrailItemName) == 0x000004, "Wrong alignment on VehicleCosmeticsInterface_GetDriftTrailItemName");
static_assert(sizeof(VehicleCosmeticsInterface_GetDriftTrailItemName) == 0x000004, "Wrong size on VehicleCosmeticsInterface_GetDriftTrailItemName");
static_assert(offsetof(VehicleCosmeticsInterface_GetDriftTrailItemName, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_GetDriftTrailItemName::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetTurboItemName
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsInterface_GetTurboItemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_GetTurboItemName) == 0x000004, "Wrong alignment on VehicleCosmeticsInterface_GetTurboItemName");
static_assert(sizeof(VehicleCosmeticsInterface_GetTurboItemName) == 0x000004, "Wrong size on VehicleCosmeticsInterface_GetTurboItemName");
static_assert(offsetof(VehicleCosmeticsInterface_GetTurboItemName, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_GetTurboItemName::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.GetWheelItemName
// 0x0004 (0x0004 - 0x0000)
struct VehicleCosmeticsInterface_GetWheelItemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_GetWheelItemName) == 0x000004, "Wrong alignment on VehicleCosmeticsInterface_GetWheelItemName");
static_assert(sizeof(VehicleCosmeticsInterface_GetWheelItemName) == 0x000004, "Wrong size on VehicleCosmeticsInterface_GetWheelItemName");
static_assert(offsetof(VehicleCosmeticsInterface_GetWheelItemName, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_GetWheelItemName::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsDriftBoostActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsDriftBoostActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsDriftBoostActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsDriftBoostActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsDriftBoostActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsDriftBoostActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsDriftBoostActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsDriftBoostActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsDrifting
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsDrifting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsDrifting) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsDrifting");
static_assert(sizeof(VehicleCosmeticsInterface_IsDrifting) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsDrifting");
static_assert(offsetof(VehicleCosmeticsInterface_IsDrifting, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsDrifting::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsJumpAbilityActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsJumpAbilityActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsJumpAbilityActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsJumpAbilityActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsJumpAbilityActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsJumpAbilityActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsJumpAbilityActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsJumpAbilityActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsKickflipActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsKickflipActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsKickflipActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsKickflipActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsKickflipActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsKickflipActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsKickflipActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsKickflipActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsStartlineBoostActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsStartlineBoostActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsStartlineBoostActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsStartlineBoostActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsStartlineBoostActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsStartlineBoostActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsStartlineBoostActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsStartlineBoostActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsTurboActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsTurboActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsTurboActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsTurboActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsTurboActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsTurboActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsTurboActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsTurboActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.IsUnderthrustActive
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_IsUnderthrustActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_IsUnderthrustActive) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_IsUnderthrustActive");
static_assert(sizeof(VehicleCosmeticsInterface_IsUnderthrustActive) == 0x000001, "Wrong size on VehicleCosmeticsInterface_IsUnderthrustActive");
static_assert(offsetof(VehicleCosmeticsInterface_IsUnderthrustActive, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_IsUnderthrustActive::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleCosmeticsInterface.ShouldWheelSpinForPreview
// 0x0001 (0x0001 - 0x0000)
struct VehicleCosmeticsInterface_ShouldWheelSpinForPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleCosmeticsInterface_ShouldWheelSpinForPreview) == 0x000001, "Wrong alignment on VehicleCosmeticsInterface_ShouldWheelSpinForPreview");
static_assert(sizeof(VehicleCosmeticsInterface_ShouldWheelSpinForPreview) == 0x000001, "Wrong size on VehicleCosmeticsInterface_ShouldWheelSpinForPreview");
static_assert(offsetof(VehicleCosmeticsInterface_ShouldWheelSpinForPreview, ReturnValue) == 0x000000, "Member 'VehicleCosmeticsInterface_ShouldWheelSpinForPreview::ReturnValue' has a wrong offset!");

// Function VehicleCosmeticsRuntime.VehicleAudioCosmeticData.GetEngineSound
// 0x0028 (0x0028 - 0x0000)
struct VehicleAudioCosmeticData_GetEngineSound final
{
public:
	bool                                          bHighSpec;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAudioCosmeticData_GetEngineSound) == 0x000008, "Wrong alignment on VehicleAudioCosmeticData_GetEngineSound");
static_assert(sizeof(VehicleAudioCosmeticData_GetEngineSound) == 0x000028, "Wrong size on VehicleAudioCosmeticData_GetEngineSound");
static_assert(offsetof(VehicleAudioCosmeticData_GetEngineSound, bHighSpec) == 0x000000, "Member 'VehicleAudioCosmeticData_GetEngineSound::bHighSpec' has a wrong offset!");
static_assert(offsetof(VehicleAudioCosmeticData_GetEngineSound, ReturnValue) == 0x000008, "Member 'VehicleAudioCosmeticData_GetEngineSound::ReturnValue' has a wrong offset!");

}

