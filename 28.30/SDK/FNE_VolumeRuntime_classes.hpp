#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNE_VolumeRuntime

#include "Basic.hpp"

#include "FNE_VolumeRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Class FNE_VolumeRuntime.FNE_Volume
// 0x0000 (0x0330 - 0x0330)
class AFNE_Volume final : public AGameplayVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FNE_Volume">();
	}
	static class AFNE_Volume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFNE_Volume>();
	}
};
static_assert(alignof(AFNE_Volume) == 0x000008, "Wrong alignment on AFNE_Volume");
static_assert(sizeof(AFNE_Volume) == 0x000330, "Wrong size on AFNE_Volume");

// Class FNE_VolumeRuntime.FNE_VolumeComponent
// 0x00A0 (0x0310 - 0x0270)
class UFNE_VolumeComponent final : public UChildActorComponent
{
public:
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> OnPlayerStateBeginOverlap;                         // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> OnPlayerStateEndOverlap;                           // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* OtherActor)> OnOtherActorBeginOverlap;                          // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* OtherActor)> OnOtherActorEndOverlap;                            // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableOverlap;                                    // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFNEVolumeShapeTypeEnum, class UStaticMesh*> FNEVolumeShapeMap;                                 // 0x02B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class USpatialGameplayActorTrackerComponent*  SpatialGameplayActorTracker;                       // 0x0308(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool BindToOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	bool BindToOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	class UOverlapComponent* GetSpawnedVolumeBoundsComponent();
	void HandleNotifyActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void HandleNotifyActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void HandleNotifyPlayerStateBeginOverlap(class APlayerState* TouchingPlayerState, class AGameplayVolume* Volume);
	void HandleNotifyPlayerStateEndOverlap(class APlayerState* TouchingPlayerState, class AGameplayVolume* Volume);
	void SetEnableOverlap(const bool bEnable);
	void SetRelativeScale3DForBoundsComponent(const struct FVector& Scale3D);
	bool SetStaticMeshForBoundsComponent(class UStaticMesh* NewMesh);
	void UnBindFromOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	void UnBindFromOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	void UpdateOverLapShape(EFNEVolumeShapeTypeEnum EShape, const bool bUseCustomShape, class UStaticMesh* CustomShape);

	TArray<class APawn*> GetAllPlayerPawns() const;
	TArray<class APlayerState*> GetAllPlayerStates() const;
	TArray<class AActor*> GetAllTrackedActors() const;
	bool GetEnableOverlap() const;
	class AFNE_Volume* GetSpawnedVolume() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FNE_VolumeComponent">();
	}
	static class UFNE_VolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFNE_VolumeComponent>();
	}
};
static_assert(alignof(UFNE_VolumeComponent) == 0x000010, "Wrong alignment on UFNE_VolumeComponent");
static_assert(sizeof(UFNE_VolumeComponent) == 0x000310, "Wrong size on UFNE_VolumeComponent");
static_assert(offsetof(UFNE_VolumeComponent, OnPlayerStateBeginOverlap) == 0x000270, "Member 'UFNE_VolumeComponent::OnPlayerStateBeginOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, OnPlayerStateEndOverlap) == 0x000280, "Member 'UFNE_VolumeComponent::OnPlayerStateEndOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, OnOtherActorBeginOverlap) == 0x000290, "Member 'UFNE_VolumeComponent::OnOtherActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, OnOtherActorEndOverlap) == 0x0002A0, "Member 'UFNE_VolumeComponent::OnOtherActorEndOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, bEnableOverlap) == 0x0002B0, "Member 'UFNE_VolumeComponent::bEnableOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, FNEVolumeShapeMap) == 0x0002B8, "Member 'UFNE_VolumeComponent::FNEVolumeShapeMap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeComponent, SpatialGameplayActorTracker) == 0x000308, "Member 'UFNE_VolumeComponent::SpatialGameplayActorTracker' has a wrong offset!");

// Class FNE_VolumeRuntime.FNE_VolumeOverlapComponent
// 0x0130 (0x06F0 - 0x05C0)
class UFNE_VolumeOverlapComponent final : public UStaticMeshComponent
{
public:
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> OnPlayerStateBeginOverlap;                         // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> OnPlayerStateEndOverlap;                           // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* OtherActor)> OnOtherActorBeginOverlap;                          // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* OtherActor)> OnOtherActorEndOverlap;                            // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableOverlap;                                    // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFNEVolumeShapeTypeEnum, class UStaticMesh*> FNEVolumeShapeMap;                                 // 0x0608(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EFNEVolumeShapeTypeEnum                       SceneQueryShape;                                   // 0x0658(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SceneQueryObjectTypes;                             // 0x0660(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_670[0x20];                                     // 0x0670(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortMinigame>           CachedMinigame;                                    // 0x0690(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x58];                                     // 0x0698(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActorEnteredVolume(class AActor* EnteringActor);
	void ActorExitVolume(class AActor* LeavingActor);
	bool BindToOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	bool BindToOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	void CheckCollidingActorsSceneQuery();
	void HandleTrackedActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnBeginActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnMinigameEnded();
	void OnMinigameRoundEnded(class AFortPlayerController* Instigator, EFortMinigameEnd EndMethod, EFortMinigameState NextState);
	void OnMinigameStarted();
	void SetEnableOverlap(const bool bEnable);
	void SetRelativeScale3DForBoundsComponent(const struct FVector& Scale3D);
	bool SetStaticMeshForBoundsComponent(class UStaticMesh* NewMesh);
	void SetVolumeMaterial(TSoftObjectPtr<class UMaterialInterface> MaterialToLoad, int32 ElementIndex);
	bool ShouldAllowOverlapEventToFire(class AActor* OverlapActor);
	void UnBindFromOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	void UnBindFromOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent);
	void UpdateOverLapShape(EFNEVolumeShapeTypeEnum EShape, const bool bUseCustomShape, class UStaticMesh* CustomShape);

	TArray<class APawn*> GetAllPlayerPawns() const;
	TArray<class APlayerState*> GetAllPlayerStates() const;
	TArray<class AActor*> GetAllTrackedActors() const;
	bool GetEnableOverlap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FNE_VolumeOverlapComponent">();
	}
	static class UFNE_VolumeOverlapComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFNE_VolumeOverlapComponent>();
	}
};
static_assert(alignof(UFNE_VolumeOverlapComponent) == 0x000010, "Wrong alignment on UFNE_VolumeOverlapComponent");
static_assert(sizeof(UFNE_VolumeOverlapComponent) == 0x0006F0, "Wrong size on UFNE_VolumeOverlapComponent");
static_assert(offsetof(UFNE_VolumeOverlapComponent, OnPlayerStateBeginOverlap) == 0x0005C0, "Member 'UFNE_VolumeOverlapComponent::OnPlayerStateBeginOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, OnPlayerStateEndOverlap) == 0x0005D0, "Member 'UFNE_VolumeOverlapComponent::OnPlayerStateEndOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, OnOtherActorBeginOverlap) == 0x0005E0, "Member 'UFNE_VolumeOverlapComponent::OnOtherActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, OnOtherActorEndOverlap) == 0x0005F0, "Member 'UFNE_VolumeOverlapComponent::OnOtherActorEndOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, bEnableOverlap) == 0x000600, "Member 'UFNE_VolumeOverlapComponent::bEnableOverlap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, FNEVolumeShapeMap) == 0x000608, "Member 'UFNE_VolumeOverlapComponent::FNEVolumeShapeMap' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, SceneQueryShape) == 0x000658, "Member 'UFNE_VolumeOverlapComponent::SceneQueryShape' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, SceneQueryObjectTypes) == 0x000660, "Member 'UFNE_VolumeOverlapComponent::SceneQueryObjectTypes' has a wrong offset!");
static_assert(offsetof(UFNE_VolumeOverlapComponent, CachedMinigame) == 0x000690, "Member 'UFNE_VolumeOverlapComponent::CachedMinigame' has a wrong offset!");

}

