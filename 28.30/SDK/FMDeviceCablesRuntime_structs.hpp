#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMDeviceCablesRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FMDeviceCablesRuntime.EDeviceCableActivatedState
// NumValues: 0x0002
enum class EDeviceCableActivatedState : uint8
{
	Active                                   = 0,
	Dormant                                  = 1,
};

// Enum FMDeviceCablesRuntime.EPortSelectStatus
// NumValues: 0x000E
enum class EPortSelectStatus : uint8
{
	Error                                    = 0,
	ControllerCableUsed                      = 1,
	GaveControllerCable                      = 2,
	CableSwap                                = 3,
	NewCableUsed                             = 4,
	ConstantCableUsed                        = 5,
	ConnectionEnded                          = 6,
	NoCableAvailable                         = 7,
	TypeMismatch                             = 8,
	AttemptedMultiConnect                    = 9,
	SelfSelect                               = 10,
	InvalidConnection                        = 11,
	WouldCreateLoop                          = 12,
	Unselectable                             = 13,
};

// Enum FMDeviceCablesRuntime.EDeviceCablePortAnimationSyncType
// NumValues: 0x0003
enum class EDeviceCablePortAnimationSyncType : uint8
{
	Follower                                 = 0,
	Authority                                = 1,
	Independent                              = 2,
};

// Enum FMDeviceCablesRuntime.EDeviceCablePortFlowType
// NumValues: 0x0003
enum class EDeviceCablePortFlowType : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	Any                                      = 2,
};

// Enum FMDeviceCablesRuntime.EDeviceCablePortDataType
// NumValues: 0x0006
enum class EDeviceCablePortDataType : uint8
{
	Scalar                                   = 0,
	Note                                     = 1,
	Audio                                    = 2,
	Texture                                  = 3,
	Mesh                                     = 4,
	Any                                      = 5,
};

// Enum FMDeviceCablesRuntime.EDeviceCablePortSelectableState
// NumValues: 0x0002
enum class EDeviceCablePortSelectableState : uint8
{
	Selectable                               = 0,
	Unselectable                             = 1,
};

// Enum FMDeviceCablesRuntime.EFMDeviceCablePortComponentAllowMultipleConnections
// NumValues: 0x0003
enum class EFMDeviceCablePortComponentAllowMultipleConnections : uint32
{
	NoPreference                             = 0,
	ForceMultiple                            = 1,
	ForceSingle                              = 2,
};

// Enum FMDeviceCablesRuntime.EDeviceCableLoadableState
// NumValues: 0x0002
enum class EDeviceCableLoadableState : uint8
{
	Loadable                                 = 0,
	NotLoadable                              = 1,
};

// Enum FMDeviceCablesRuntime.EFMDeviceCableAnimationQuality
// NumValues: 0x0003
enum class EFMDeviceCableAnimationQuality : uint8
{
	High                                     = 0,
	Med                                      = 1,
	Low                                      = 2,
};

// Enum FMDeviceCablesRuntime.EDeviceCableInteractionType
// NumValues: 0x0002
enum class EDeviceCableInteractionType : uint8
{
	Free                                     = 0,
	StaticOutput                             = 1,
};

// Enum FMDeviceCablesRuntime.EFMDeviceCableWildcardOrderingState
// NumValues: 0x0003
enum class EFMDeviceCableWildcardOrderingState : uint32
{
	Inactive                                 = 0,
	Pending                                  = 1,
	Active                                   = 2,
};

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableTerminalDeviceInfo
// 0x0010 (0x0010 - 0x0000)
struct FFMDeviceCableTerminalDeviceInfo final
{
public:
	TWeakObjectPtr<class UFMDeviceCablePortComponent> TerminalPort;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TerminalActor;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCableTerminalDeviceInfo) == 0x000004, "Wrong alignment on FFMDeviceCableTerminalDeviceInfo");
static_assert(sizeof(FFMDeviceCableTerminalDeviceInfo) == 0x000010, "Wrong size on FFMDeviceCableTerminalDeviceInfo");
static_assert(offsetof(FFMDeviceCableTerminalDeviceInfo, TerminalPort) == 0x000000, "Member 'FFMDeviceCableTerminalDeviceInfo::TerminalPort' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableTerminalDeviceInfo, TerminalActor) == 0x000008, "Member 'FFMDeviceCableTerminalDeviceInfo::TerminalActor' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCablePassthroughDeviceInfo
// 0x0018 (0x0018 - 0x0000)
struct FFMDeviceCablePassthroughDeviceInfo final
{
public:
	TWeakObjectPtr<class UFMDeviceCablePortComponent> InputPort;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFMDeviceCablePortComponent> OutputPort;                                        // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  PassthroughActor;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCablePassthroughDeviceInfo) == 0x000004, "Wrong alignment on FFMDeviceCablePassthroughDeviceInfo");
static_assert(sizeof(FFMDeviceCablePassthroughDeviceInfo) == 0x000018, "Wrong size on FFMDeviceCablePassthroughDeviceInfo");
static_assert(offsetof(FFMDeviceCablePassthroughDeviceInfo, InputPort) == 0x000000, "Member 'FFMDeviceCablePassthroughDeviceInfo::InputPort' has a wrong offset!");
static_assert(offsetof(FFMDeviceCablePassthroughDeviceInfo, OutputPort) == 0x000008, "Member 'FFMDeviceCablePassthroughDeviceInfo::OutputPort' has a wrong offset!");
static_assert(offsetof(FFMDeviceCablePassthroughDeviceInfo, PassthroughActor) == 0x000010, "Member 'FFMDeviceCablePassthroughDeviceInfo::PassthroughActor' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableConnectedDevicesInfo
// 0x0030 (0x0030 - 0x0000)
struct FFMDeviceCableConnectedDevicesInfo final
{
public:
	struct FFMDeviceCableTerminalDeviceInfo       SourceDeviceInfo;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FFMDeviceCableTerminalDeviceInfo       DestinationDeviceInfo;                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FFMDeviceCablePassthroughDeviceInfo> PassthroughDeviceInfos;                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCableConnectedDevicesInfo) == 0x000008, "Wrong alignment on FFMDeviceCableConnectedDevicesInfo");
static_assert(sizeof(FFMDeviceCableConnectedDevicesInfo) == 0x000030, "Wrong size on FFMDeviceCableConnectedDevicesInfo");
static_assert(offsetof(FFMDeviceCableConnectedDevicesInfo, SourceDeviceInfo) == 0x000000, "Member 'FFMDeviceCableConnectedDevicesInfo::SourceDeviceInfo' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableConnectedDevicesInfo, DestinationDeviceInfo) == 0x000010, "Member 'FFMDeviceCableConnectedDevicesInfo::DestinationDeviceInfo' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableConnectedDevicesInfo, PassthroughDeviceInfos) == 0x000020, "Member 'FFMDeviceCableConnectedDevicesInfo::PassthroughDeviceInfos' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.PortUpdateInfo
// 0x0020 (0x0020 - 0x0000)
struct FPortUpdateInfo final
{
public:
	EPortSelectStatus                             PortSelectStatus;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMDeviceCablePortComponent*            ConstantPort;                                      // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMDeviceCablePortComponent*            ConnectedPort;                                     // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMDeviceCablePortComponent*            DisconnectedPort;                                  // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortUpdateInfo) == 0x000008, "Wrong alignment on FPortUpdateInfo");
static_assert(sizeof(FPortUpdateInfo) == 0x000020, "Wrong size on FPortUpdateInfo");
static_assert(offsetof(FPortUpdateInfo, PortSelectStatus) == 0x000000, "Member 'FPortUpdateInfo::PortSelectStatus' has a wrong offset!");
static_assert(offsetof(FPortUpdateInfo, ConstantPort) == 0x000008, "Member 'FPortUpdateInfo::ConstantPort' has a wrong offset!");
static_assert(offsetof(FPortUpdateInfo, ConnectedPort) == 0x000010, "Member 'FPortUpdateInfo::ConnectedPort' has a wrong offset!");
static_assert(offsetof(FPortUpdateInfo, DisconnectedPort) == 0x000018, "Member 'FPortUpdateInfo::DisconnectedPort' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableArtifact
// 0x0020 (0x0020 - 0x0000)
struct FFMDeviceCableArtifact final
{
public:
	class UFabricMeshTreeNode*                    MeshTreeNode;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFabricMetaSoundTreeNode*               MetaSoundTreeNode;                                 // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFabricTextureTreeNode*                 TextureTreeNode;                                   // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFabricModulationNode*                  ModulationNode;                                    // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCableArtifact) == 0x000008, "Wrong alignment on FFMDeviceCableArtifact");
static_assert(sizeof(FFMDeviceCableArtifact) == 0x000020, "Wrong size on FFMDeviceCableArtifact");
static_assert(offsetof(FFMDeviceCableArtifact, MeshTreeNode) == 0x000000, "Member 'FFMDeviceCableArtifact::MeshTreeNode' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableArtifact, MetaSoundTreeNode) == 0x000008, "Member 'FFMDeviceCableArtifact::MetaSoundTreeNode' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableArtifact, TextureTreeNode) == 0x000010, "Member 'FFMDeviceCableArtifact::TextureTreeNode' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableArtifact, ModulationNode) == 0x000018, "Member 'FFMDeviceCableArtifact::ModulationNode' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableDefaultOutputs
// 0x0008 (0x0008 - 0x0000)
struct FFMDeviceCableDefaultOutputs final
{
public:
	class USoundSourceBus*                        SourceBus;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCableDefaultOutputs) == 0x000008, "Wrong alignment on FFMDeviceCableDefaultOutputs");
static_assert(sizeof(FFMDeviceCableDefaultOutputs) == 0x000008, "Wrong size on FFMDeviceCableDefaultOutputs");
static_assert(offsetof(FFMDeviceCableDefaultOutputs, SourceBus) == 0x000000, "Member 'FFMDeviceCableDefaultOutputs::SourceBus' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableTopologyNode
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FFMDeviceCableTopologyNode final
{
public:
	TWeakObjectPtr<class UFMDeviceCablePortComponent> Port;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xA0];                                       // 0x0008(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMDeviceCableTopologyNode) == 0x000008, "Wrong alignment on FFMDeviceCableTopologyNode");
static_assert(sizeof(FFMDeviceCableTopologyNode) == 0x0000A8, "Wrong size on FFMDeviceCableTopologyNode");
static_assert(offsetof(FFMDeviceCableTopologyNode, Port) == 0x000000, "Member 'FFMDeviceCableTopologyNode::Port' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableActiveConnectionsList
// 0x0010 (0x0010 - 0x0000)
struct FFMDeviceCableActiveConnectionsList final
{
public:
	TArray<class UFMDeviceCableConnectionBase*>   ActiveConnections;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMDeviceCableActiveConnectionsList) == 0x000008, "Wrong alignment on FFMDeviceCableActiveConnectionsList");
static_assert(sizeof(FFMDeviceCableActiveConnectionsList) == 0x000010, "Wrong size on FFMDeviceCableActiveConnectionsList");
static_assert(offsetof(FFMDeviceCableActiveConnectionsList, ActiveConnections) == 0x000000, "Member 'FFMDeviceCableActiveConnectionsList::ActiveConnections' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.ModulatorPortSaveData
// 0x0020 (0x0020 - 0x0000)
struct FModulatorPortSaveData final
{
public:
	struct FGuid                                  ConnectionGuid;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ConnectedGuids;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModulatorPortSaveData) == 0x000008, "Wrong alignment on FModulatorPortSaveData");
static_assert(sizeof(FModulatorPortSaveData) == 0x000020, "Wrong size on FModulatorPortSaveData");
static_assert(offsetof(FModulatorPortSaveData, ConnectionGuid) == 0x000000, "Member 'FModulatorPortSaveData::ConnectionGuid' has a wrong offset!");
static_assert(offsetof(FModulatorPortSaveData, ConnectedGuids) == 0x000010, "Member 'FModulatorPortSaveData::ConnectedGuids' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableOrderingPortState
// 0x0018 (0x0018 - 0x0000)
struct FFMDeviceCableOrderingPortState final
{
public:
	class UFMDeviceCableWildcardPortComponent*    WildcardPort;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMDeviceCableWildcardOrderingState           VisualState;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMDeviceCableWildcardOrderingState           State;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMDeviceCableOrderingPortState) == 0x000008, "Wrong alignment on FFMDeviceCableOrderingPortState");
static_assert(sizeof(FFMDeviceCableOrderingPortState) == 0x000018, "Wrong size on FFMDeviceCableOrderingPortState");
static_assert(offsetof(FFMDeviceCableOrderingPortState, WildcardPort) == 0x000000, "Member 'FFMDeviceCableOrderingPortState::WildcardPort' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingPortState, VisualState) == 0x000008, "Member 'FFMDeviceCableOrderingPortState::VisualState' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingPortState, State) == 0x00000C, "Member 'FFMDeviceCableOrderingPortState::State' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingPortState, Slot) == 0x000010, "Member 'FFMDeviceCableOrderingPortState::Slot' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableOrderingMovementState
// 0x00A0 (0x00A0 - 0x0000)
struct FFMDeviceCableOrderingMovementState
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementTimeSeconds;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovementActive;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInvertVector;                                     // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMovementState;                                    // 0x002E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunningMovementTimeSeconds;                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFMDeviceCableWildcardPortComponent*> RelevantPorts;                                     // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x58];                                      // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMDeviceCableOrderingMovementState) == 0x000008, "Wrong alignment on FFMDeviceCableOrderingMovementState");
static_assert(sizeof(FFMDeviceCableOrderingMovementState) == 0x0000A0, "Wrong size on FFMDeviceCableOrderingMovementState");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, Curve) == 0x000008, "Member 'FFMDeviceCableOrderingMovementState::Curve' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, Vector) == 0x000010, "Member 'FFMDeviceCableOrderingMovementState::Vector' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, MovementTimeSeconds) == 0x000028, "Member 'FFMDeviceCableOrderingMovementState::MovementTimeSeconds' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, bMovementActive) == 0x00002C, "Member 'FFMDeviceCableOrderingMovementState::bMovementActive' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, bInvertVector) == 0x00002D, "Member 'FFMDeviceCableOrderingMovementState::bInvertVector' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, bMovementState) == 0x00002E, "Member 'FFMDeviceCableOrderingMovementState::bMovementState' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, RunningMovementTimeSeconds) == 0x000030, "Member 'FFMDeviceCableOrderingMovementState::RunningMovementTimeSeconds' has a wrong offset!");
static_assert(offsetof(FFMDeviceCableOrderingMovementState, RelevantPorts) == 0x000038, "Member 'FFMDeviceCableOrderingMovementState::RelevantPorts' has a wrong offset!");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableOrderingMovementStateSlot
// 0x0000 (0x00A0 - 0x00A0)
struct FFMDeviceCableOrderingMovementStateSlot final : public FFMDeviceCableOrderingMovementState
{
};
static_assert(alignof(FFMDeviceCableOrderingMovementStateSlot) == 0x000008, "Wrong alignment on FFMDeviceCableOrderingMovementStateSlot");
static_assert(sizeof(FFMDeviceCableOrderingMovementStateSlot) == 0x0000A0, "Wrong size on FFMDeviceCableOrderingMovementStateSlot");

// ScriptStruct FMDeviceCablesRuntime.FMDeviceCableOrderingMovementStateIndividual
// 0x00A0 (0x0140 - 0x00A0)
struct FFMDeviceCableOrderingMovementStateIndividual final : public FFMDeviceCableOrderingMovementState
{
public:
	uint8                                         Pad_A0[0xA0];                                      // 0x00A0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMDeviceCableOrderingMovementStateIndividual) == 0x000008, "Wrong alignment on FFMDeviceCableOrderingMovementStateIndividual");
static_assert(sizeof(FFMDeviceCableOrderingMovementStateIndividual) == 0x000140, "Wrong size on FFMDeviceCableOrderingMovementStateIndividual");

}

