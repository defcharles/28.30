#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoMusicRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum JunoMusicRuntime.EJunoActiveMusicElementState
// NumValues: 0x0004
enum class EJunoActiveMusicElementState : uint8
{
	Inactive                                 = 0,
	Scheduled                                = 1,
	Active                                   = 2,
	CoolingDown                              = 3,
};

// Enum JunoMusicRuntime.EMusicScheduleMode
// NumValues: 0x0005
enum class EMusicScheduleMode : uint8
{
	RelativeToDayPhaseChange                 = 0,
	RandomTimeDuringDayPhase                 = 1,
	PlayAtSpecificTimesOfDay                 = 2,
	OnlyBlueprintPlaybackConditions          = 3,
	Count                                    = 4,
};

// ScriptStruct JunoMusicRuntime.ElementControllerArray
// 0x0010 (0x0010 - 0x0000)
struct FElementControllerArray final
{
public:
	TArray<class UJunoActiveMusicElementController_Base*> ElementControllerArray;                            // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementControllerArray) == 0x000008, "Wrong alignment on FElementControllerArray");
static_assert(sizeof(FElementControllerArray) == 0x000010, "Wrong size on FElementControllerArray");
static_assert(offsetof(FElementControllerArray, ElementControllerArray) == 0x000000, "Member 'FElementControllerArray::ElementControllerArray' has a wrong offset!");

// ScriptStruct JunoMusicRuntime.JunoMusicDataAggregatorSettings
// 0x0010 (0x0010 - 0x0000)
struct FJunoMusicDataAggregatorSettings final
{
public:
	TArray<TSubclassOf<class UJunoMusicDataCollector>> JunoMusicDataCollectors;                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMusicDataAggregatorSettings) == 0x000008, "Wrong alignment on FJunoMusicDataAggregatorSettings");
static_assert(sizeof(FJunoMusicDataAggregatorSettings) == 0x000010, "Wrong size on FJunoMusicDataAggregatorSettings");
static_assert(offsetof(FJunoMusicDataAggregatorSettings, JunoMusicDataCollectors) == 0x000000, "Member 'FJunoMusicDataAggregatorSettings::JunoMusicDataCollectors' has a wrong offset!");

// ScriptStruct JunoMusicRuntime.JunoWorldMusicSystem
// 0x0018 (0x0018 - 0x0000)
struct FJunoWorldMusicSystem final
{
public:
	class UActiveJunoMusicPlayer*                 ActiveJunoMusicPlayer;                             // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoMusicDataAggregator*               JunoMusicDataAggregator;                           // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldMusicSystem) == 0x000008, "Wrong alignment on FJunoWorldMusicSystem");
static_assert(sizeof(FJunoWorldMusicSystem) == 0x000018, "Wrong size on FJunoWorldMusicSystem");
static_assert(offsetof(FJunoWorldMusicSystem, ActiveJunoMusicPlayer) == 0x000000, "Member 'FJunoWorldMusicSystem::ActiveJunoMusicPlayer' has a wrong offset!");
static_assert(offsetof(FJunoWorldMusicSystem, JunoMusicDataAggregator) == 0x000008, "Member 'FJunoWorldMusicSystem::JunoMusicDataAggregator' has a wrong offset!");

// ScriptStruct JunoMusicRuntime.ActiveJunoMusicManagerData
// 0x0010 (0x0010 - 0x0000)
struct FActiveJunoMusicManagerData final
{
public:
	struct FVector2D                              MainCooldownTimeInSeconds;                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveJunoMusicManagerData) == 0x000008, "Wrong alignment on FActiveJunoMusicManagerData");
static_assert(sizeof(FActiveJunoMusicManagerData) == 0x000010, "Wrong size on FActiveJunoMusicManagerData");
static_assert(offsetof(FActiveJunoMusicManagerData, MainCooldownTimeInSeconds) == 0x000000, "Member 'FActiveJunoMusicManagerData::MainCooldownTimeInSeconds' has a wrong offset!");

// ScriptStruct JunoMusicRuntime.JunoMusicPlaylistElement
// 0x00B8 (0x00B8 - 0x0000)
struct FJunoMusicPlaylistElement final
{
public:
	struct FSoftObjectPath                        Music;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FadeInOutValues;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicScheduleMode                            MusicScheduleMode;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RangeInSeconds;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RangeInGameHours;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateAtTickRate;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UpdatePeriodRange;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UJunoMusicPlaybackCondition>> CustomPlaybackConditions;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bFlipPlaybackConditions;                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackProbabilityPercent;                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackPriority;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptible;                                    // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PlaybackCooldownInSeconds;                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetCooldownOnFalseConditions;                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CooldownGroupNames;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMusicPlaylistElement) == 0x000008, "Wrong alignment on FJunoMusicPlaylistElement");
static_assert(sizeof(FJunoMusicPlaylistElement) == 0x0000B8, "Wrong size on FJunoMusicPlaylistElement");
static_assert(offsetof(FJunoMusicPlaylistElement, Music) == 0x000000, "Member 'FJunoMusicPlaylistElement::Music' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, FadeInOutValues) == 0x000018, "Member 'FJunoMusicPlaylistElement::FadeInOutValues' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, MusicScheduleMode) == 0x000028, "Member 'FJunoMusicPlaylistElement::MusicScheduleMode' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, RangeInSeconds) == 0x000030, "Member 'FJunoMusicPlaylistElement::RangeInSeconds' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, DayPhase) == 0x000040, "Member 'FJunoMusicPlaylistElement::DayPhase' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, RangeInGameHours) == 0x000048, "Member 'FJunoMusicPlaylistElement::RangeInGameHours' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, bUpdateAtTickRate) == 0x000058, "Member 'FJunoMusicPlaylistElement::bUpdateAtTickRate' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, UpdatePeriodRange) == 0x000060, "Member 'FJunoMusicPlaylistElement::UpdatePeriodRange' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, CustomPlaybackConditions) == 0x000070, "Member 'FJunoMusicPlaylistElement::CustomPlaybackConditions' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, bFlipPlaybackConditions) == 0x000080, "Member 'FJunoMusicPlaylistElement::bFlipPlaybackConditions' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, PlaybackProbabilityPercent) == 0x000084, "Member 'FJunoMusicPlaylistElement::PlaybackProbabilityPercent' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, PlaybackPriority) == 0x000088, "Member 'FJunoMusicPlaylistElement::PlaybackPriority' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, bInterruptible) == 0x00008C, "Member 'FJunoMusicPlaylistElement::bInterruptible' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, PlaybackCooldownInSeconds) == 0x000090, "Member 'FJunoMusicPlaylistElement::PlaybackCooldownInSeconds' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, bResetCooldownOnFalseConditions) == 0x0000A0, "Member 'FJunoMusicPlaylistElement::bResetCooldownOnFalseConditions' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylistElement, CooldownGroupNames) == 0x0000A8, "Member 'FJunoMusicPlaylistElement::CooldownGroupNames' has a wrong offset!");

// ScriptStruct JunoMusicRuntime.JunoMusicPlaylist
// 0x0078 (0x0078 - 0x0000)
struct FJunoMusicPlaylist final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoMusicPlaylistElement>      MusicPlaylist;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           CooldownGroups;                                    // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FJunoMusicDataAggregatorSettings       DataAggregatorSettings;                            // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMusicPlaylist) == 0x000008, "Wrong alignment on FJunoMusicPlaylist");
static_assert(sizeof(FJunoMusicPlaylist) == 0x000078, "Wrong size on FJunoMusicPlaylist");
static_assert(offsetof(FJunoMusicPlaylist, PlaylistName) == 0x000000, "Member 'FJunoMusicPlaylist::PlaylistName' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylist, MusicPlaylist) == 0x000008, "Member 'FJunoMusicPlaylist::MusicPlaylist' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylist, CooldownGroups) == 0x000018, "Member 'FJunoMusicPlaylist::CooldownGroups' has a wrong offset!");
static_assert(offsetof(FJunoMusicPlaylist, DataAggregatorSettings) == 0x000068, "Member 'FJunoMusicPlaylist::DataAggregatorSettings' has a wrong offset!");

}

