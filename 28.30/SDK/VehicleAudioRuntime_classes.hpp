#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleAudioRuntime

#include "Basic.hpp"

#include "VehicleAudioRuntime_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "AudioMotorSim_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Class VehicleAudioRuntime.FortMotorSimComponent_PatternPlayer
// 0x00C0 (0x0170 - 0x00B0)
class UFortMotorSimComponent_PatternPlayer final : public UAudioMotorSimComponent
{
public:
	float                                         PatternResetCooldown;                              // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMotorSimPatternState              DriftState;                                        // 0x00B8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FFortMotorSimPatternState              AirState;                                          // 0x00E8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FFortMotorSimPatternState              StartlineState;                                    // 0x0118(0x0030)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x20];                                     // 0x0148(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CurrentCurve;                                      // 0x0168(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMotorSimComponent_PatternPlayer">();
	}
	static class UFortMotorSimComponent_PatternPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMotorSimComponent_PatternPlayer>();
	}
};
static_assert(alignof(UFortMotorSimComponent_PatternPlayer) == 0x000008, "Wrong alignment on UFortMotorSimComponent_PatternPlayer");
static_assert(sizeof(UFortMotorSimComponent_PatternPlayer) == 0x000170, "Wrong size on UFortMotorSimComponent_PatternPlayer");
static_assert(offsetof(UFortMotorSimComponent_PatternPlayer, PatternResetCooldown) == 0x0000B0, "Member 'UFortMotorSimComponent_PatternPlayer::PatternResetCooldown' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_PatternPlayer, DriftState) == 0x0000B8, "Member 'UFortMotorSimComponent_PatternPlayer::DriftState' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_PatternPlayer, AirState) == 0x0000E8, "Member 'UFortMotorSimComponent_PatternPlayer::AirState' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_PatternPlayer, StartlineState) == 0x000118, "Member 'UFortMotorSimComponent_PatternPlayer::StartlineState' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_PatternPlayer, CurrentCurve) == 0x000168, "Member 'UFortMotorSimComponent_PatternPlayer::CurrentCurve' has a wrong offset!");

// Class VehicleAudioRuntime.FortMotorSimComponent_SurfaceModifier
// 0x0070 (0x0120 - 0x00B0)
class UFortMotorSimComponent_SurfaceModifier final : public UAudioMotorSimComponent
{
public:
	TMap<class FName, class UCurveFloat*>         Surfaces;                                          // 0x00B0(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FVector2f                              ThrottleRange;                                     // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OnsetInterpTime;                                   // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurrentCurve;                                      // 0x0110(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSurface(class FName NewSurface);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMotorSimComponent_SurfaceModifier">();
	}
	static class UFortMotorSimComponent_SurfaceModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMotorSimComponent_SurfaceModifier>();
	}
};
static_assert(alignof(UFortMotorSimComponent_SurfaceModifier) == 0x000008, "Wrong alignment on UFortMotorSimComponent_SurfaceModifier");
static_assert(sizeof(UFortMotorSimComponent_SurfaceModifier) == 0x000120, "Wrong size on UFortMotorSimComponent_SurfaceModifier");
static_assert(offsetof(UFortMotorSimComponent_SurfaceModifier, Surfaces) == 0x0000B0, "Member 'UFortMotorSimComponent_SurfaceModifier::Surfaces' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_SurfaceModifier, ThrottleRange) == 0x000100, "Member 'UFortMotorSimComponent_SurfaceModifier::ThrottleRange' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_SurfaceModifier, OnsetInterpTime) == 0x000108, "Member 'UFortMotorSimComponent_SurfaceModifier::OnsetInterpTime' has a wrong offset!");
static_assert(offsetof(UFortMotorSimComponent_SurfaceModifier, CurrentCurve) == 0x000110, "Member 'UFortMotorSimComponent_SurfaceModifier::CurrentCurve' has a wrong offset!");

// Class VehicleAudioRuntime.VehicleAudioLifecycleInterface
// 0x0000 (0x0028 - 0x0028)
class IVehicleAudioLifecycleInterface final : public IInterface
{
public:
	void OnInit();
	void OnShutdown();
	void OnUpdate(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAudioLifecycleInterface">();
	}
	static class IVehicleAudioLifecycleInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVehicleAudioLifecycleInterface>();
	}
};
static_assert(alignof(IVehicleAudioLifecycleInterface) == 0x000008, "Wrong alignment on IVehicleAudioLifecycleInterface");
static_assert(sizeof(IVehicleAudioLifecycleInterface) == 0x000028, "Wrong size on IVehicleAudioLifecycleInterface");

// Class VehicleAudioRuntime.FortVehicleAudioController
// 0x0070 (0x0300 - 0x0290)
class AFortVehicleAudioController : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVehicleSoundData*                  VehicleSoundData;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x4];                                      // 0x02A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSignificance;                               // 0x02A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bListenerInRange;                                  // 0x02A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceUpdatePastListenerRange;                     // 0x02A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRedlineAllowed;                                   // 0x02AA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AB[0x1];                                      // 0x02AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JitterTime;                                        // 0x02AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortAthenaVehicle*                     VehicleBase;                                       // 0x02B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortPhysicsVehicleConfigs*             PhysicsVehicleConfigs;                             // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             LayeredAudioComponent;                             // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioParameterComponent*               AudioParameterComponent;                           // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioMotorModelComponent*              AudioMotorModelComponent;                          // 0x02D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UREVComponent*                          REVComponent;                                      // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineComponent;                                   // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortVehicleSoundComponent*>     VehicleSoundComponents;                            // 0x02E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheJitterTime();
	void Init();
	void SetLayeredAudioComponent(class UFortLayeredAudioComponent* InComponent);
	void SetRedlineActive(bool bEnabled);
	void SetVehicle(class AFortAthenaVehicle* InVehicle);
	void Shutdown();
	void Update(float DeltaSeconds);
	void UpdateMotorModelNative(float DeltaSeconds);

	class UAudioMotorModelComponent* GetAudioMotorModelComponent() const;
	class UAudioParameterComponent* GetAudioParameterComponent() const;
	float GetBrakingNative() const;
	class UAudioComponent* GetEngineAudioComponent() const;
	float GetJitterTime() const;
	class UFortLayeredAudioComponent* GetLayeredAudioComponent() const;
	const class UFortPhysicsVehicleConfigs* GetPhysicsVehicleConfigs() const;
	bool GetRedlineActive() const;
	class UREVComponent* GetREVComponent() const;
	float GetThrottleNative() const;
	class AFortAthenaVehicle* GetVehicleActor() const;
	bool IsNativizationEnabled() const;
	bool UseMetasounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleAudioController">();
	}
	static class AFortVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortVehicleAudioController>();
	}
};
static_assert(alignof(AFortVehicleAudioController) == 0x000008, "Wrong alignment on AFortVehicleAudioController");
static_assert(sizeof(AFortVehicleAudioController) == 0x000300, "Wrong size on AFortVehicleAudioController");
static_assert(offsetof(AFortVehicleAudioController, VehicleSoundData) == 0x000298, "Member 'AFortVehicleAudioController::VehicleSoundData' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, CurrentSignificance) == 0x0002A4, "Member 'AFortVehicleAudioController::CurrentSignificance' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bListenerInRange) == 0x0002A8, "Member 'AFortVehicleAudioController::bListenerInRange' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bForceUpdatePastListenerRange) == 0x0002A9, "Member 'AFortVehicleAudioController::bForceUpdatePastListenerRange' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, bRedlineAllowed) == 0x0002AA, "Member 'AFortVehicleAudioController::bRedlineAllowed' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, JitterTime) == 0x0002AC, "Member 'AFortVehicleAudioController::JitterTime' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, VehicleBase) == 0x0002B0, "Member 'AFortVehicleAudioController::VehicleBase' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, PhysicsVehicleConfigs) == 0x0002B8, "Member 'AFortVehicleAudioController::PhysicsVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, LayeredAudioComponent) == 0x0002C0, "Member 'AFortVehicleAudioController::LayeredAudioComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, AudioParameterComponent) == 0x0002C8, "Member 'AFortVehicleAudioController::AudioParameterComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, AudioMotorModelComponent) == 0x0002D0, "Member 'AFortVehicleAudioController::AudioMotorModelComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, REVComponent) == 0x0002D8, "Member 'AFortVehicleAudioController::REVComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, EngineComponent) == 0x0002E0, "Member 'AFortVehicleAudioController::EngineComponent' has a wrong offset!");
static_assert(offsetof(AFortVehicleAudioController, VehicleSoundComponents) == 0x0002E8, "Member 'AFortVehicleAudioController::VehicleSoundComponents' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundComponent
// 0x0010 (0x00B0 - 0x00A0)
class UFortVehicleSoundComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortVehicleAudioController> AudioController;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init();
	void Shutdown();
	void Update(float DeltaSeconds);

	class AFortVehicleAudioController* GetAudioController() const;
	class UAudioParameterComponent* GetAudioParameterComponent() const;
	class UAudioComponent* GetEngineAudioComponent() const;
	class UFortLayeredAudioComponent* GetLayeredAudioComponent() const;
	class UAudioMotorModelComponent* GetMotorModelComponent() const;
	const class UFortPhysicsVehicleConfigs* GetPhysicsVehicleConfigs() const;
	class UREVComponent* GetREVComponent() const;
	class USceneComponent* GetRootComponent() const;
	bool GetUseMetasounds() const;
	class AFortAthenaVehicle* GetVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundComponent">();
	}
	static class UFortVehicleSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundComponent>();
	}
};
static_assert(alignof(UFortVehicleSoundComponent) == 0x000008, "Wrong alignment on UFortVehicleSoundComponent");
static_assert(sizeof(UFortVehicleSoundComponent) == 0x0000B0, "Wrong size on UFortVehicleSoundComponent");
static_assert(offsetof(UFortVehicleSoundComponent, AudioController) == 0x0000A8, "Member 'UFortVehicleSoundComponent::AudioController' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundComponent_Speed
// 0x0040 (0x00F0 - 0x00B0)
class UFortVehicleSoundComponent_Speed final : public UFortVehicleSoundComponent
{
public:
	struct FFortAudioFloatParameter               Speed;                                             // 0x00B0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnReversedChanged(bool bReversing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundComponent_Speed">();
	}
	static class UFortVehicleSoundComponent_Speed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundComponent_Speed>();
	}
};
static_assert(alignof(UFortVehicleSoundComponent_Speed) == 0x000008, "Wrong alignment on UFortVehicleSoundComponent_Speed");
static_assert(sizeof(UFortVehicleSoundComponent_Speed) == 0x0000F0, "Wrong size on UFortVehicleSoundComponent_Speed");
static_assert(offsetof(UFortVehicleSoundComponent_Speed, Speed) == 0x0000B0, "Member 'UFortVehicleSoundComponent_Speed::Speed' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundComponent_Surface
// 0x00A8 (0x0158 - 0x00B0)
class UFortVehicleSoundComponent_Surface final : public UFortVehicleSoundComponent
{
public:
	struct FFortVehicleSoundComponent_SurfaceContext Context;                                           // 0x00B0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void OnBrakingChanged(bool bNewState);
	void OnInAirChanged(bool bNewState);
	void OnSkiddingChanged(bool bNewState);
	void OnSurfaceChanged(EPhysicalSurface NewSurface);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundComponent_Surface">();
	}
	static class UFortVehicleSoundComponent_Surface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundComponent_Surface>();
	}
};
static_assert(alignof(UFortVehicleSoundComponent_Surface) == 0x000008, "Wrong alignment on UFortVehicleSoundComponent_Surface");
static_assert(sizeof(UFortVehicleSoundComponent_Surface) == 0x000158, "Wrong size on UFortVehicleSoundComponent_Surface");
static_assert(offsetof(UFortVehicleSoundComponent_Surface, Context) == 0x0000B0, "Member 'UFortVehicleSoundComponent_Surface::Context' has a wrong offset!");

// Class VehicleAudioRuntime.FortVehicleSoundData
// 0x0040 (0x0070 - 0x0030)
class UFortVehicleSoundData final : public UDataAsset
{
public:
	TArray<class UFortVehicleSoundComponent*>     SoundComponents;                                   // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         MaxListenerDistance;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateDataFromController;                         // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBrakeThreshold;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleMultiplier;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceFrictionModifier;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotorFrictionModifier;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FrictionJitter;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShiftOverride;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleSoundData">();
	}
	static class UFortVehicleSoundData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleSoundData>();
	}
};
static_assert(alignof(UFortVehicleSoundData) == 0x000008, "Wrong alignment on UFortVehicleSoundData");
static_assert(sizeof(UFortVehicleSoundData) == 0x000070, "Wrong size on UFortVehicleSoundData");
static_assert(offsetof(UFortVehicleSoundData, SoundComponents) == 0x000030, "Member 'UFortVehicleSoundData::SoundComponents' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MaxListenerDistance) == 0x000040, "Member 'UFortVehicleSoundData::MaxListenerDistance' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, bUpdateDataFromController) == 0x000044, "Member 'UFortVehicleSoundData::bUpdateDataFromController' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MaxBrakeThreshold) == 0x000048, "Member 'UFortVehicleSoundData::MaxBrakeThreshold' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, ThrottleMultiplier) == 0x00004C, "Member 'UFortVehicleSoundData::ThrottleMultiplier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, SurfaceFrictionModifier) == 0x000050, "Member 'UFortVehicleSoundData::SurfaceFrictionModifier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, MotorFrictionModifier) == 0x000054, "Member 'UFortVehicleSoundData::MotorFrictionModifier' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, FrictionJitter) == 0x000058, "Member 'UFortVehicleSoundData::FrictionJitter' has a wrong offset!");
static_assert(offsetof(UFortVehicleSoundData, bCanShiftOverride) == 0x000068, "Member 'UFortVehicleSoundData::bCanShiftOverride' has a wrong offset!");

}

