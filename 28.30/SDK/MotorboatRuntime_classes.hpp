#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotorboatRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class MotorboatRuntime.FortMeatballVehicleAnimInstance
// 0x00E0 (0x0700 - 0x0620)
class UFortMeatballVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	class AFortMeatballVehicle*                   Meatball;                                          // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeatballSpeed;                                     // 0x0620(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngle;                                     // 0x0624(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostCharge;                                       // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SeatOffset;                                        // 0x0630(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SeatRotation;                                      // 0x0648(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentDriveJiggle;                                // 0x0660(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SteeringRotator;                                   // 0x0678(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpeedGuageRotator;                                 // 0x0690(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BoostPercentRotator;                               // 0x06A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RandomJiggleRotatorMotorTop;                       // 0x06C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RandomJiggleRotatorMotorBase;                      // 0x06D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsMovingForward;                                  // 0x06F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrivingFast;                                    // 0x06F1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBraking;                                        // 0x06F2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoosting;                                       // 0x06F3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostReady;                                     // 0x06F4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostStarting;                                  // 0x06F5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostEnding;                                    // 0x06F6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRocketReady;                                    // 0x06F7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRocketOnCooldown;                               // 0x06F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSteeringLeft;                                   // 0x06F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSteeringRight;                                  // 0x06FA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FB[0x5];                                      // 0x06FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMeatballVehicleAnimInstance">();
	}
	static class UFortMeatballVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMeatballVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortMeatballVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortMeatballVehicleAnimInstance");
static_assert(sizeof(UFortMeatballVehicleAnimInstance) == 0x000700, "Wrong size on UFortMeatballVehicleAnimInstance");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, Meatball) == 0x000618, "Member 'UFortMeatballVehicleAnimInstance::Meatball' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, MeatballSpeed) == 0x000620, "Member 'UFortMeatballVehicleAnimInstance::MeatballSpeed' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, SteeringAngle) == 0x000624, "Member 'UFortMeatballVehicleAnimInstance::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, BoostCharge) == 0x000628, "Member 'UFortMeatballVehicleAnimInstance::BoostCharge' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, SeatOffset) == 0x000630, "Member 'UFortMeatballVehicleAnimInstance::SeatOffset' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, SeatRotation) == 0x000648, "Member 'UFortMeatballVehicleAnimInstance::SeatRotation' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, CurrentDriveJiggle) == 0x000660, "Member 'UFortMeatballVehicleAnimInstance::CurrentDriveJiggle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, SteeringRotator) == 0x000678, "Member 'UFortMeatballVehicleAnimInstance::SteeringRotator' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, SpeedGuageRotator) == 0x000690, "Member 'UFortMeatballVehicleAnimInstance::SpeedGuageRotator' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, BoostPercentRotator) == 0x0006A8, "Member 'UFortMeatballVehicleAnimInstance::BoostPercentRotator' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, RandomJiggleRotatorMotorTop) == 0x0006C0, "Member 'UFortMeatballVehicleAnimInstance::RandomJiggleRotatorMotorTop' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, RandomJiggleRotatorMotorBase) == 0x0006D8, "Member 'UFortMeatballVehicleAnimInstance::RandomJiggleRotatorMotorBase' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsMovingForward) == 0x0006F0, "Member 'UFortMeatballVehicleAnimInstance::bIsMovingForward' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsDrivingFast) == 0x0006F1, "Member 'UFortMeatballVehicleAnimInstance::bIsDrivingFast' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsBraking) == 0x0006F2, "Member 'UFortMeatballVehicleAnimInstance::bIsBraking' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsBoosting) == 0x0006F3, "Member 'UFortMeatballVehicleAnimInstance::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsBoostReady) == 0x0006F4, "Member 'UFortMeatballVehicleAnimInstance::bIsBoostReady' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsBoostStarting) == 0x0006F5, "Member 'UFortMeatballVehicleAnimInstance::bIsBoostStarting' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsBoostEnding) == 0x0006F6, "Member 'UFortMeatballVehicleAnimInstance::bIsBoostEnding' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsRocketReady) == 0x0006F7, "Member 'UFortMeatballVehicleAnimInstance::bIsRocketReady' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsRocketOnCooldown) == 0x0006F8, "Member 'UFortMeatballVehicleAnimInstance::bIsRocketOnCooldown' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsSteeringLeft) == 0x0006F9, "Member 'UFortMeatballVehicleAnimInstance::bIsSteeringLeft' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleAnimInstance, bIsSteeringRight) == 0x0006FA, "Member 'UFortMeatballVehicleAnimInstance::bIsSteeringRight' has a wrong offset!");

// Class MotorboatRuntime.FortMeatballPontoonsComponent
// 0x0000 (0x02C0 - 0x02C0)
class UFortMeatballPontoonsComponent final : public UFortVehiclePontoonsComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMeatballPontoonsComponent">();
	}
	static class UFortMeatballPontoonsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMeatballPontoonsComponent>();
	}
};
static_assert(alignof(UFortMeatballPontoonsComponent) == 0x000008, "Wrong alignment on UFortMeatballPontoonsComponent");
static_assert(sizeof(UFortMeatballPontoonsComponent) == 0x0002C0, "Wrong size on UFortMeatballPontoonsComponent");

// Class MotorboatRuntime.FortMeatballVehicle
// 0x02F0 (0x2210 - 0x1F20)
class AFortMeatballVehicle final : public AFortAthenaSKVehicle
{
public:
	struct FFortRechargingActionTimer             BoostAction;                                       // 0x1F18(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         FxNormalizationMaxSpeedKmh;                        // 0x1FF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF4[0x4];                                     // 0x1FF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVehicleAudioVoice*                 CacheAudioEngineUp;                                // 0x1FF8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 CacheAudioEngineDown;                              // 0x2000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 CacheAudioWakeTurn;                                // 0x2008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 CacheAudioWakeSpeed;                               // 0x2010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 CacheAudioScrape;                                  // 0x2018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 CacheAudioEngineOutOfFuel;                         // 0x2020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               BoostMID;                                          // 0x2028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CachedGroundFXComponent;                           // 0x2030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      DrivingPlayerController;                           // 0x2038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULegacyCameraShake*                     LandCameraShake;                                   // 0x2040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         LandCameraShakeClass;                              // 0x2048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULegacyCameraShake*                     DriverCameraShake;                                 // 0x2050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         DriverCameraShakeClass;                            // 0x2058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandRumbleIntensity;                               // 0x2060(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2064[0x4];                                     // 0x2064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        LandForceFeedbackHandle;                           // 0x2068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRumbleIntensity;                               // 0x2070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2074[0x4];                                     // 0x2074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        TurnForceFeedbackHandle;                           // 0x2078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSnowAltitude;                               // 0x2080(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSnow;                                          // 0x2084(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLargeRumble;                                      // 0x2085(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnRumbleActive;                                 // 0x2086(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaterDropsOnScreen;                               // 0x2087(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GCVehicleScreenDrips;                              // 0x2088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208C[0x4];                                     // 0x208C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x2090(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode>            BoostingCamera;                                    // 0x2160(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortCameraMode>            VehicleCameraNoWeaponOverride;                     // 0x2168(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2170[0x10];                                    // 0x2170(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMeatballVehicleConfigs*            FortMeatballVehicleConfigs;                        // 0x2180(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WaterLineStartPontoonIndex;                        // 0x2188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WaterLineEndPontoonIndex;                          // 0x218C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2190[0x40];                                    // 0x2190(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBoostFailed;                                      // 0x21D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21D1[0x3F];                                    // 0x21D1(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheAudioPointers(class UFortVehicleAudioVoice* InAudioEngineUp, class UFortVehicleAudioVoice* InAudioEngineDown, class UFortVehicleAudioVoice* InAudioWakeTurn, class UFortVehicleAudioVoice* InAudioWakeSpeed, class UFortVehicleAudioVoice* InAudioScrape, class UFortVehicleAudioVoice* InAudioEngineOutOfFuel);
	void CacheGroundFXComponent(class UNiagaraComponent* InGroundFXComponent);
	void LandShakeEnd();
	void OnBoostFailed();
	void OnBoostFinished();
	void OnBoostReady();
	void OnBoostStarted();
	void ShowCooldownCue(class AFortPlayerPawn* Pawn, float duration);
	void SmashedThroughBuildingPiece(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const class ABuildingActor* BuildingHitActor);
	void StopDriverCameraShake();
	void StopLandRumble();
	void StopTurnRumble();
	void UpdateSnowAndDirtParams(float NormalizedForwardSpeed);

	float GetBoostCharge() const;
	struct FVector GetSeatOffset() const;
	struct FQuat GetSeatRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMeatballVehicle">();
	}
	static class AFortMeatballVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortMeatballVehicle>();
	}
};
static_assert(alignof(AFortMeatballVehicle) == 0x000010, "Wrong alignment on AFortMeatballVehicle");
static_assert(sizeof(AFortMeatballVehicle) == 0x002210, "Wrong size on AFortMeatballVehicle");
static_assert(offsetof(AFortMeatballVehicle, BoostAction) == 0x001F18, "Member 'AFortMeatballVehicle::BoostAction' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, FxNormalizationMaxSpeedKmh) == 0x001FF0, "Member 'AFortMeatballVehicle::FxNormalizationMaxSpeedKmh' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioEngineUp) == 0x001FF8, "Member 'AFortMeatballVehicle::CacheAudioEngineUp' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioEngineDown) == 0x002000, "Member 'AFortMeatballVehicle::CacheAudioEngineDown' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioWakeTurn) == 0x002008, "Member 'AFortMeatballVehicle::CacheAudioWakeTurn' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioWakeSpeed) == 0x002010, "Member 'AFortMeatballVehicle::CacheAudioWakeSpeed' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioScrape) == 0x002018, "Member 'AFortMeatballVehicle::CacheAudioScrape' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CacheAudioEngineOutOfFuel) == 0x002020, "Member 'AFortMeatballVehicle::CacheAudioEngineOutOfFuel' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, BoostMID) == 0x002028, "Member 'AFortMeatballVehicle::BoostMID' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CachedGroundFXComponent) == 0x002030, "Member 'AFortMeatballVehicle::CachedGroundFXComponent' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, DrivingPlayerController) == 0x002038, "Member 'AFortMeatballVehicle::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, LandCameraShake) == 0x002040, "Member 'AFortMeatballVehicle::LandCameraShake' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, LandCameraShakeClass) == 0x002048, "Member 'AFortMeatballVehicle::LandCameraShakeClass' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, DriverCameraShake) == 0x002050, "Member 'AFortMeatballVehicle::DriverCameraShake' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, DriverCameraShakeClass) == 0x002058, "Member 'AFortMeatballVehicle::DriverCameraShakeClass' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, LandRumbleIntensity) == 0x002060, "Member 'AFortMeatballVehicle::LandRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, LandForceFeedbackHandle) == 0x002068, "Member 'AFortMeatballVehicle::LandForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, TurnRumbleIntensity) == 0x002070, "Member 'AFortMeatballVehicle::TurnRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, TurnForceFeedbackHandle) == 0x002078, "Member 'AFortMeatballVehicle::TurnForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, CurrentSnowAltitude) == 0x002080, "Member 'AFortMeatballVehicle::CurrentSnowAltitude' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, bHasSnow) == 0x002084, "Member 'AFortMeatballVehicle::bHasSnow' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, bLargeRumble) == 0x002085, "Member 'AFortMeatballVehicle::bLargeRumble' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, bTurnRumbleActive) == 0x002086, "Member 'AFortMeatballVehicle::bTurnRumbleActive' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, bWaterDropsOnScreen) == 0x002087, "Member 'AFortMeatballVehicle::bWaterDropsOnScreen' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, GCVehicleScreenDrips) == 0x002088, "Member 'AFortMeatballVehicle::GCVehicleScreenDrips' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, GCParamsEmpty) == 0x002090, "Member 'AFortMeatballVehicle::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, BoostingCamera) == 0x002160, "Member 'AFortMeatballVehicle::BoostingCamera' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, VehicleCameraNoWeaponOverride) == 0x002168, "Member 'AFortMeatballVehicle::VehicleCameraNoWeaponOverride' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, FortMeatballVehicleConfigs) == 0x002180, "Member 'AFortMeatballVehicle::FortMeatballVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, WaterLineStartPontoonIndex) == 0x002188, "Member 'AFortMeatballVehicle::WaterLineStartPontoonIndex' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, WaterLineEndPontoonIndex) == 0x00218C, "Member 'AFortMeatballVehicle::WaterLineEndPontoonIndex' has a wrong offset!");
static_assert(offsetof(AFortMeatballVehicle, bBoostFailed) == 0x0021D0, "Member 'AFortMeatballVehicle::bBoostFailed' has a wrong offset!");

// Class MotorboatRuntime.FortMeatballVehicleConfigs
// 0x00D0 (0x0A18 - 0x0948)
class UFortMeatballVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	float                                         WaterSteerRollFactor;                              // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerTurnPontoonOffsetMultiplier;                  // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterTurnPontoonOffsetMultiplier;                  // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedToBankOnTurn;                       // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMinPushForce;                                 // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPontoonOffsetPerSecond;                         // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandTopSpeedMultiplier;                            // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandPushForceMultiplier;                           // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPushPontoonsForWaterDriving;                    // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaterPitchAngle;                                // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedToPitch;                            // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForMaxPitch;                        // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForwardSpeedForMaxPitch;                        // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFowrardSpeedPitchFactor;                        // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMaxForwardSpeedPitchFactor;                   // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontLateralFrictionFactor;                        // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearLateralFrictionFactor;                         // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandFrontLateralFrictionFactor;                    // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandRearLateralFrictionFactor;                     // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralFrictionModStartSpeedKmh;                   // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearLateralFrictionModPerSpeedKmh;                 // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontLateralFrictionModPerSpeedKmh;                // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeatOffsetScaleX;                                  // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeatOffsetScaleY;                                  // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeatYawAngleMax;                                   // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeatPitchAngleMax;                                 // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplier;                           // 0x09B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplierRampTime;                   // 0x09BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandSteeringMultiplier;                            // 0x09C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandMinSpeedSteeringAngle;                         // 0x09C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandMaxSpeedSteeringAngle;                         // 0x09C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientNoAccel;                            // 0x09CC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient2NoAccel;                           // 0x09D0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierRoad;                     // 0x09D4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierGrass;                    // 0x09D8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierDirt;                     // 0x09DC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierSnow;                     // 0x09E0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierIce;                      // 0x09E4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientMultiplierMud;                      // 0x09E8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteerAlphaForWaterFriction;                     // 0x09EC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceYawStiff;                               // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceYawDamp;                                // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSteerRollAngle;                                 // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTurnInPlaceYawAngle;                            // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightSpringSteerStrength;                        // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceYawStrength;                            // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedForTurnInPlaceKmH;                         // 0x0A08(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutExtraSpeedTurnInPlaceKmH;                  // 0x0A0C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchForCameraInPlaceSteer;                     // 0x0A10(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringLengthMutliplierWater;                       // 0x0A14(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMeatballVehicleConfigs">();
	}
	static class UFortMeatballVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMeatballVehicleConfigs>();
	}
};
static_assert(alignof(UFortMeatballVehicleConfigs) == 0x000008, "Wrong alignment on UFortMeatballVehicleConfigs");
static_assert(sizeof(UFortMeatballVehicleConfigs) == 0x000A18, "Wrong size on UFortMeatballVehicleConfigs");
static_assert(offsetof(UFortMeatballVehicleConfigs, WaterSteerRollFactor) == 0x000948, "Member 'UFortMeatballVehicleConfigs::WaterSteerRollFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, InnerTurnPontoonOffsetMultiplier) == 0x00094C, "Member 'UFortMeatballVehicleConfigs::InnerTurnPontoonOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, OuterTurnPontoonOffsetMultiplier) == 0x000950, "Member 'UFortMeatballVehicleConfigs::OuterTurnPontoonOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MinForwardSpeedToBankOnTurn) == 0x000954, "Member 'UFortMeatballVehicleConfigs::MinForwardSpeedToBankOnTurn' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostMinPushForce) == 0x000958, "Member 'UFortMeatballVehicleConfigs::BoostMinPushForce' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostTopSpeedForceMultiplier) == 0x00095C, "Member 'UFortMeatballVehicleConfigs::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostTopSpeedMultiplier) == 0x000960, "Member 'UFortMeatballVehicleConfigs::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxPontoonOffsetPerSecond) == 0x000964, "Member 'UFortMeatballVehicleConfigs::MaxPontoonOffsetPerSecond' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandTopSpeedMultiplier) == 0x000968, "Member 'UFortMeatballVehicleConfigs::LandTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandPushForceMultiplier) == 0x00096C, "Member 'UFortMeatballVehicleConfigs::LandPushForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MinPushPontoonsForWaterDriving) == 0x000970, "Member 'UFortMeatballVehicleConfigs::MinPushPontoonsForWaterDriving' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxWaterPitchAngle) == 0x000974, "Member 'UFortMeatballVehicleConfigs::MaxWaterPitchAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MinForwardSpeedToPitch) == 0x000978, "Member 'UFortMeatballVehicleConfigs::MinForwardSpeedToPitch' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MinForwardSpeedForMaxPitch) == 0x00097C, "Member 'UFortMeatballVehicleConfigs::MinForwardSpeedForMaxPitch' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxForwardSpeedForMaxPitch) == 0x000980, "Member 'UFortMeatballVehicleConfigs::MaxForwardSpeedForMaxPitch' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxFowrardSpeedPitchFactor) == 0x000984, "Member 'UFortMeatballVehicleConfigs::MaxFowrardSpeedPitchFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostMaxForwardSpeedPitchFactor) == 0x000988, "Member 'UFortMeatballVehicleConfigs::BoostMaxForwardSpeedPitchFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, FrontLateralFrictionFactor) == 0x00098C, "Member 'UFortMeatballVehicleConfigs::FrontLateralFrictionFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, RearLateralFrictionFactor) == 0x000990, "Member 'UFortMeatballVehicleConfigs::RearLateralFrictionFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandFrontLateralFrictionFactor) == 0x000994, "Member 'UFortMeatballVehicleConfigs::LandFrontLateralFrictionFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandRearLateralFrictionFactor) == 0x000998, "Member 'UFortMeatballVehicleConfigs::LandRearLateralFrictionFactor' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LateralFrictionModStartSpeedKmh) == 0x00099C, "Member 'UFortMeatballVehicleConfigs::LateralFrictionModStartSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, RearLateralFrictionModPerSpeedKmh) == 0x0009A0, "Member 'UFortMeatballVehicleConfigs::RearLateralFrictionModPerSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, FrontLateralFrictionModPerSpeedKmh) == 0x0009A4, "Member 'UFortMeatballVehicleConfigs::FrontLateralFrictionModPerSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, SeatOffsetScaleX) == 0x0009A8, "Member 'UFortMeatballVehicleConfigs::SeatOffsetScaleX' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, SeatOffsetScaleY) == 0x0009AC, "Member 'UFortMeatballVehicleConfigs::SeatOffsetScaleY' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, SeatYawAngleMax) == 0x0009B0, "Member 'UFortMeatballVehicleConfigs::SeatYawAngleMax' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, SeatPitchAngleMax) == 0x0009B4, "Member 'UFortMeatballVehicleConfigs::SeatPitchAngleMax' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostSteeringMultiplier) == 0x0009B8, "Member 'UFortMeatballVehicleConfigs::BoostSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BoostSteeringMultiplierRampTime) == 0x0009BC, "Member 'UFortMeatballVehicleConfigs::BoostSteeringMultiplierRampTime' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandSteeringMultiplier) == 0x0009C0, "Member 'UFortMeatballVehicleConfigs::LandSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandMinSpeedSteeringAngle) == 0x0009C4, "Member 'UFortMeatballVehicleConfigs::LandMinSpeedSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, LandMaxSpeedSteeringAngle) == 0x0009C8, "Member 'UFortMeatballVehicleConfigs::LandMaxSpeedSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientNoAccel) == 0x0009CC, "Member 'UFortMeatballVehicleConfigs::DragCoefficientNoAccel' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficient2NoAccel) == 0x0009D0, "Member 'UFortMeatballVehicleConfigs::DragCoefficient2NoAccel' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierRoad) == 0x0009D4, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierRoad' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierGrass) == 0x0009D8, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierGrass' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierDirt) == 0x0009DC, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierDirt' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierSnow) == 0x0009E0, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierSnow' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierIce) == 0x0009E4, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierIce' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, DragCoefficientMultiplierMud) == 0x0009E8, "Member 'UFortMeatballVehicleConfigs::DragCoefficientMultiplierMud' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MinSteerAlphaForWaterFriction) == 0x0009EC, "Member 'UFortMeatballVehicleConfigs::MinSteerAlphaForWaterFriction' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, TurnInPlaceYawStiff) == 0x0009F0, "Member 'UFortMeatballVehicleConfigs::TurnInPlaceYawStiff' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, TurnInPlaceYawDamp) == 0x0009F4, "Member 'UFortMeatballVehicleConfigs::TurnInPlaceYawDamp' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxSteerRollAngle) == 0x0009F8, "Member 'UFortMeatballVehicleConfigs::MaxSteerRollAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxTurnInPlaceYawAngle) == 0x0009FC, "Member 'UFortMeatballVehicleConfigs::MaxTurnInPlaceYawAngle' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, UprightSpringSteerStrength) == 0x000A00, "Member 'UFortMeatballVehicleConfigs::UprightSpringSteerStrength' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, TurnInPlaceYawStrength) == 0x000A04, "Member 'UFortMeatballVehicleConfigs::TurnInPlaceYawStrength' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxSpeedForTurnInPlaceKmH) == 0x000A08, "Member 'UFortMeatballVehicleConfigs::MaxSpeedForTurnInPlaceKmH' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, BlendOutExtraSpeedTurnInPlaceKmH) == 0x000A0C, "Member 'UFortMeatballVehicleConfigs::BlendOutExtraSpeedTurnInPlaceKmH' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, MaxPitchForCameraInPlaceSteer) == 0x000A10, "Member 'UFortMeatballVehicleConfigs::MaxPitchForCameraInPlaceSteer' has a wrong offset!");
static_assert(offsetof(UFortMeatballVehicleConfigs, SpringLengthMutliplierWater) == 0x000A14, "Member 'UFortMeatballVehicleConfigs::SpringLengthMutliplierWater' has a wrong offset!");

}

