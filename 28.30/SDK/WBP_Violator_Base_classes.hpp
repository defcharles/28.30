#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Violator_Base

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Violator_Base.WBP_Violator_Base_C
// 0x01E8 (0x04A8 - 0x02C0)
class UWBP_Violator_Base_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hovered;                                           // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hide;                                              // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal;                                            // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_Background;                                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Preview_ViolatorText;                              // 0x02F8(0x0018)(Edit, BlueprintVisible)
	EViolatorIntensity                            Preview_ViolatorIntensity;                         // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Height;                                            // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxWidth;                                          // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             AppearSound;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HideSound;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMaxWidth;                                       // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextPadding;                                       // 0x0334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextTransformPolicy                          TextTransformPolicy;                               // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         LowIntensityFontInfo;                              // 0x0348(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateFontInfo                         MediumIntensityFontInfo;                           // 0x03A0(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateFontInfo                         HighIntensityFontInfo;                             // 0x03F8(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateColor                            LowIntensityTextColor;                             // 0x0450(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            MediumIntensityTextColor;                          // 0x0464(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            HighIntensityTextColor;                            // 0x0478(0x0014)(Edit, BlueprintVisible)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LowIntensityBackgroundMaterial;                    // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MediumIntensityBackgroundMaterial;                 // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     HighIntensityBackgroundMaterial;                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_Violator_Base(int32 EntryPoint);
	void OnActivated();
	void OnDeactivated();
	void OnHovered();
	void OnUnhovered();
	void PreConstruct(bool IsDesignTime);
	void Set_Violator_Intensity(EViolatorIntensity ViolatorIntensity);
	void SetSizeBox(float HeightOverride, float MaxDesiredWidth);
	void SetViolatorText(const class FText& Text_0);
	void UpdateTextProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Violator_Base_C">();
	}
	static class UWBP_Violator_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Violator_Base_C>();
	}
};
static_assert(alignof(UWBP_Violator_Base_C) == 0x000008, "Wrong alignment on UWBP_Violator_Base_C");
static_assert(sizeof(UWBP_Violator_Base_C) == 0x0004A8, "Wrong size on UWBP_Violator_Base_C");
static_assert(offsetof(UWBP_Violator_Base_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_Violator_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Hovered) == 0x0002C8, "Member 'UWBP_Violator_Base_C::Hovered' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Hide) == 0x0002D0, "Member 'UWBP_Violator_Base_C::Hide' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Reveal) == 0x0002D8, "Member 'UWBP_Violator_Base_C::Reveal' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Border_Background) == 0x0002E0, "Member 'UWBP_Violator_Base_C::Border_Background' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, SizeBox) == 0x0002E8, "Member 'UWBP_Violator_Base_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Text) == 0x0002F0, "Member 'UWBP_Violator_Base_C::Text' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Preview_ViolatorText) == 0x0002F8, "Member 'UWBP_Violator_Base_C::Preview_ViolatorText' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Preview_ViolatorIntensity) == 0x000310, "Member 'UWBP_Violator_Base_C::Preview_ViolatorIntensity' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, Height) == 0x000314, "Member 'UWBP_Violator_Base_C::Height' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, MaxWidth) == 0x000318, "Member 'UWBP_Violator_Base_C::MaxWidth' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, AppearSound) == 0x000320, "Member 'UWBP_Violator_Base_C::AppearSound' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, HideSound) == 0x000328, "Member 'UWBP_Violator_Base_C::HideSound' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, IsActive) == 0x000330, "Member 'UWBP_Violator_Base_C::IsActive' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, HasMaxWidth) == 0x000331, "Member 'UWBP_Violator_Base_C::HasMaxWidth' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, TextPadding) == 0x000334, "Member 'UWBP_Violator_Base_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, TextTransformPolicy) == 0x000344, "Member 'UWBP_Violator_Base_C::TextTransformPolicy' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, LowIntensityFontInfo) == 0x000348, "Member 'UWBP_Violator_Base_C::LowIntensityFontInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, MediumIntensityFontInfo) == 0x0003A0, "Member 'UWBP_Violator_Base_C::MediumIntensityFontInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, HighIntensityFontInfo) == 0x0003F8, "Member 'UWBP_Violator_Base_C::HighIntensityFontInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, LowIntensityTextColor) == 0x000450, "Member 'UWBP_Violator_Base_C::LowIntensityTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, MediumIntensityTextColor) == 0x000464, "Member 'UWBP_Violator_Base_C::MediumIntensityTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, HighIntensityTextColor) == 0x000478, "Member 'UWBP_Violator_Base_C::HighIntensityTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, LowIntensityBackgroundMaterial) == 0x000490, "Member 'UWBP_Violator_Base_C::LowIntensityBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, MediumIntensityBackgroundMaterial) == 0x000498, "Member 'UWBP_Violator_Base_C::MediumIntensityBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_Violator_Base_C, HighIntensityBackgroundMaterial) == 0x0004A0, "Member 'UWBP_Violator_Base_C::HighIntensityBackgroundMaterial' has a wrong offset!");

}

