#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgents

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "LearningAgents_structs.hpp"


namespace SDK::Params
{

// Function LearningAgents.FloatAction.AddFloatAction
// 0x0018 (0x0018 - 0x0000)
struct FloatAction_AddFloatAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFloatAction*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatAction_AddFloatAction) == 0x000008, "Wrong alignment on FloatAction_AddFloatAction");
static_assert(sizeof(FloatAction_AddFloatAction) == 0x000018, "Wrong size on FloatAction_AddFloatAction");
static_assert(offsetof(FloatAction_AddFloatAction, InInteractor) == 0x000000, "Member 'FloatAction_AddFloatAction::InInteractor' has a wrong offset!");
static_assert(offsetof(FloatAction_AddFloatAction, Name_0) == 0x000008, "Member 'FloatAction_AddFloatAction::Name_0' has a wrong offset!");
static_assert(offsetof(FloatAction_AddFloatAction, Scale) == 0x00000C, "Member 'FloatAction_AddFloatAction::Scale' has a wrong offset!");
static_assert(offsetof(FloatAction_AddFloatAction, ReturnValue) == 0x000010, "Member 'FloatAction_AddFloatAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.FloatAction.GetFloatAction
// 0x0008 (0x0008 - 0x0000)
struct FloatAction_GetFloatAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatAction_GetFloatAction) == 0x000004, "Wrong alignment on FloatAction_GetFloatAction");
static_assert(sizeof(FloatAction_GetFloatAction) == 0x000008, "Wrong size on FloatAction_GetFloatAction");
static_assert(offsetof(FloatAction_GetFloatAction, AgentId) == 0x000000, "Member 'FloatAction_GetFloatAction::AgentId' has a wrong offset!");
static_assert(offsetof(FloatAction_GetFloatAction, ReturnValue) == 0x000004, "Member 'FloatAction_GetFloatAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.FloatAction.SetFloatAction
// 0x0008 (0x0008 - 0x0000)
struct FloatAction_SetFloatAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatAction_SetFloatAction) == 0x000004, "Wrong alignment on FloatAction_SetFloatAction");
static_assert(sizeof(FloatAction_SetFloatAction) == 0x000008, "Wrong size on FloatAction_SetFloatAction");
static_assert(offsetof(FloatAction_SetFloatAction, AgentId) == 0x000000, "Member 'FloatAction_SetFloatAction::AgentId' has a wrong offset!");
static_assert(offsetof(FloatAction_SetFloatAction, Value) == 0x000004, "Member 'FloatAction_SetFloatAction::Value' has a wrong offset!");

// Function LearningAgents.FloatArrayAction.AddFloatArrayAction
// 0x0020 (0x0020 - 0x0000)
struct FloatArrayAction_AddFloatArrayAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFloatArrayAction*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatArrayAction_AddFloatArrayAction) == 0x000008, "Wrong alignment on FloatArrayAction_AddFloatArrayAction");
static_assert(sizeof(FloatArrayAction_AddFloatArrayAction) == 0x000020, "Wrong size on FloatArrayAction_AddFloatArrayAction");
static_assert(offsetof(FloatArrayAction_AddFloatArrayAction, InInteractor) == 0x000000, "Member 'FloatArrayAction_AddFloatArrayAction::InInteractor' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_AddFloatArrayAction, Name_0) == 0x000008, "Member 'FloatArrayAction_AddFloatArrayAction::Name_0' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_AddFloatArrayAction, Num) == 0x00000C, "Member 'FloatArrayAction_AddFloatArrayAction::Num' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_AddFloatArrayAction, Scale) == 0x000010, "Member 'FloatArrayAction_AddFloatArrayAction::Scale' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_AddFloatArrayAction, ReturnValue) == 0x000018, "Member 'FloatArrayAction_AddFloatArrayAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.FloatArrayAction.GetFloatArrayAction
// 0x0018 (0x0018 - 0x0000)
struct FloatArrayAction_GetFloatArrayAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OutValues;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatArrayAction_GetFloatArrayAction) == 0x000008, "Wrong alignment on FloatArrayAction_GetFloatArrayAction");
static_assert(sizeof(FloatArrayAction_GetFloatArrayAction) == 0x000018, "Wrong size on FloatArrayAction_GetFloatArrayAction");
static_assert(offsetof(FloatArrayAction_GetFloatArrayAction, AgentId) == 0x000000, "Member 'FloatArrayAction_GetFloatArrayAction::AgentId' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_GetFloatArrayAction, OutValues) == 0x000008, "Member 'FloatArrayAction_GetFloatArrayAction::OutValues' has a wrong offset!");

// Function LearningAgents.FloatArrayAction.SetFloatArrayAction
// 0x0018 (0x0018 - 0x0000)
struct FloatArrayAction_SetFloatArrayAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Values;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatArrayAction_SetFloatArrayAction) == 0x000008, "Wrong alignment on FloatArrayAction_SetFloatArrayAction");
static_assert(sizeof(FloatArrayAction_SetFloatArrayAction) == 0x000018, "Wrong size on FloatArrayAction_SetFloatArrayAction");
static_assert(offsetof(FloatArrayAction_SetFloatArrayAction, AgentId) == 0x000000, "Member 'FloatArrayAction_SetFloatArrayAction::AgentId' has a wrong offset!");
static_assert(offsetof(FloatArrayAction_SetFloatArrayAction, Values) == 0x000008, "Member 'FloatArrayAction_SetFloatArrayAction::Values' has a wrong offset!");

// Function LearningAgents.VectorAction.AddVectorAction
// 0x0018 (0x0018 - 0x0000)
struct VectorAction_AddVectorAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVectorAction*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorAction_AddVectorAction) == 0x000008, "Wrong alignment on VectorAction_AddVectorAction");
static_assert(sizeof(VectorAction_AddVectorAction) == 0x000018, "Wrong size on VectorAction_AddVectorAction");
static_assert(offsetof(VectorAction_AddVectorAction, InInteractor) == 0x000000, "Member 'VectorAction_AddVectorAction::InInteractor' has a wrong offset!");
static_assert(offsetof(VectorAction_AddVectorAction, Name_0) == 0x000008, "Member 'VectorAction_AddVectorAction::Name_0' has a wrong offset!");
static_assert(offsetof(VectorAction_AddVectorAction, Scale) == 0x00000C, "Member 'VectorAction_AddVectorAction::Scale' has a wrong offset!");
static_assert(offsetof(VectorAction_AddVectorAction, ReturnValue) == 0x000010, "Member 'VectorAction_AddVectorAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.VectorAction.GetVectorAction
// 0x0020 (0x0020 - 0x0000)
struct VectorAction_GetVectorAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorAction_GetVectorAction) == 0x000008, "Wrong alignment on VectorAction_GetVectorAction");
static_assert(sizeof(VectorAction_GetVectorAction) == 0x000020, "Wrong size on VectorAction_GetVectorAction");
static_assert(offsetof(VectorAction_GetVectorAction, AgentId) == 0x000000, "Member 'VectorAction_GetVectorAction::AgentId' has a wrong offset!");
static_assert(offsetof(VectorAction_GetVectorAction, ReturnValue) == 0x000008, "Member 'VectorAction_GetVectorAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.VectorAction.SetVectorAction
// 0x0020 (0x0020 - 0x0000)
struct VectorAction_SetVectorAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorAction_SetVectorAction) == 0x000008, "Wrong alignment on VectorAction_SetVectorAction");
static_assert(sizeof(VectorAction_SetVectorAction) == 0x000020, "Wrong size on VectorAction_SetVectorAction");
static_assert(offsetof(VectorAction_SetVectorAction, AgentId) == 0x000000, "Member 'VectorAction_SetVectorAction::AgentId' has a wrong offset!");
static_assert(offsetof(VectorAction_SetVectorAction, Value) == 0x000008, "Member 'VectorAction_SetVectorAction::Value' has a wrong offset!");

// Function LearningAgents.VectorArrayAction.AddVectorArrayAction
// 0x0020 (0x0020 - 0x0000)
struct VectorArrayAction_AddVectorArrayAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVectorArrayAction*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorArrayAction_AddVectorArrayAction) == 0x000008, "Wrong alignment on VectorArrayAction_AddVectorArrayAction");
static_assert(sizeof(VectorArrayAction_AddVectorArrayAction) == 0x000020, "Wrong size on VectorArrayAction_AddVectorArrayAction");
static_assert(offsetof(VectorArrayAction_AddVectorArrayAction, InInteractor) == 0x000000, "Member 'VectorArrayAction_AddVectorArrayAction::InInteractor' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_AddVectorArrayAction, Name_0) == 0x000008, "Member 'VectorArrayAction_AddVectorArrayAction::Name_0' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_AddVectorArrayAction, Num) == 0x00000C, "Member 'VectorArrayAction_AddVectorArrayAction::Num' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_AddVectorArrayAction, Scale) == 0x000010, "Member 'VectorArrayAction_AddVectorArrayAction::Scale' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_AddVectorArrayAction, ReturnValue) == 0x000018, "Member 'VectorArrayAction_AddVectorArrayAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.VectorArrayAction.GetVectorArrayAction
// 0x0018 (0x0018 - 0x0000)
struct VectorArrayAction_GetVectorArrayAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OutVectors;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorArrayAction_GetVectorArrayAction) == 0x000008, "Wrong alignment on VectorArrayAction_GetVectorArrayAction");
static_assert(sizeof(VectorArrayAction_GetVectorArrayAction) == 0x000018, "Wrong size on VectorArrayAction_GetVectorArrayAction");
static_assert(offsetof(VectorArrayAction_GetVectorArrayAction, AgentId) == 0x000000, "Member 'VectorArrayAction_GetVectorArrayAction::AgentId' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_GetVectorArrayAction, OutVectors) == 0x000008, "Member 'VectorArrayAction_GetVectorArrayAction::OutVectors' has a wrong offset!");

// Function LearningAgents.VectorArrayAction.SetVectorArrayAction
// 0x0018 (0x0018 - 0x0000)
struct VectorArrayAction_SetVectorArrayAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vectors;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorArrayAction_SetVectorArrayAction) == 0x000008, "Wrong alignment on VectorArrayAction_SetVectorArrayAction");
static_assert(sizeof(VectorArrayAction_SetVectorArrayAction) == 0x000018, "Wrong size on VectorArrayAction_SetVectorArrayAction");
static_assert(offsetof(VectorArrayAction_SetVectorArrayAction, AgentId) == 0x000000, "Member 'VectorArrayAction_SetVectorArrayAction::AgentId' has a wrong offset!");
static_assert(offsetof(VectorArrayAction_SetVectorArrayAction, Vectors) == 0x000008, "Member 'VectorArrayAction_SetVectorArrayAction::Vectors' has a wrong offset!");

// Function LearningAgents.PlanarVelocityAction.AddPlanarVelocityAction
// 0x0048 (0x0048 - 0x0000)
struct PlanarVelocityAction_AddPlanarVelocityAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis0;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarVelocityAction*                  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityAction_AddPlanarVelocityAction) == 0x000008, "Wrong alignment on PlanarVelocityAction_AddPlanarVelocityAction");
static_assert(sizeof(PlanarVelocityAction_AddPlanarVelocityAction) == 0x000048, "Wrong size on PlanarVelocityAction_AddPlanarVelocityAction");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, InInteractor) == 0x000000, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, Name_0) == 0x000008, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, Scale) == 0x00000C, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::Scale' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, Axis0) == 0x000010, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, Axis1) == 0x000028, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_AddPlanarVelocityAction, ReturnValue) == 0x000040, "Member 'PlanarVelocityAction_AddPlanarVelocityAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarVelocityAction.GetPlanarVelocityAction
// 0x0020 (0x0020 - 0x0000)
struct PlanarVelocityAction_GetPlanarVelocityAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityAction_GetPlanarVelocityAction) == 0x000008, "Wrong alignment on PlanarVelocityAction_GetPlanarVelocityAction");
static_assert(sizeof(PlanarVelocityAction_GetPlanarVelocityAction) == 0x000020, "Wrong size on PlanarVelocityAction_GetPlanarVelocityAction");
static_assert(offsetof(PlanarVelocityAction_GetPlanarVelocityAction, AgentId) == 0x000000, "Member 'PlanarVelocityAction_GetPlanarVelocityAction::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_GetPlanarVelocityAction, ReturnValue) == 0x000008, "Member 'PlanarVelocityAction_GetPlanarVelocityAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarVelocityAction.SetPlanarVelocityAction
// 0x0020 (0x0020 - 0x0000)
struct PlanarVelocityAction_SetPlanarVelocityAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityAction_SetPlanarVelocityAction) == 0x000008, "Wrong alignment on PlanarVelocityAction_SetPlanarVelocityAction");
static_assert(sizeof(PlanarVelocityAction_SetPlanarVelocityAction) == 0x000020, "Wrong size on PlanarVelocityAction_SetPlanarVelocityAction");
static_assert(offsetof(PlanarVelocityAction_SetPlanarVelocityAction, AgentId) == 0x000000, "Member 'PlanarVelocityAction_SetPlanarVelocityAction::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarVelocityAction_SetPlanarVelocityAction, Velocity) == 0x000008, "Member 'PlanarVelocityAction_SetPlanarVelocityAction::Velocity' has a wrong offset!");

// Function LearningAgents.RotationAction.AddRotationAction
// 0x0018 (0x0018 - 0x0000)
struct RotationAction_AddRotationAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URotationAction*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationAction_AddRotationAction) == 0x000008, "Wrong alignment on RotationAction_AddRotationAction");
static_assert(sizeof(RotationAction_AddRotationAction) == 0x000018, "Wrong size on RotationAction_AddRotationAction");
static_assert(offsetof(RotationAction_AddRotationAction, InInteractor) == 0x000000, "Member 'RotationAction_AddRotationAction::InInteractor' has a wrong offset!");
static_assert(offsetof(RotationAction_AddRotationAction, Name_0) == 0x000008, "Member 'RotationAction_AddRotationAction::Name_0' has a wrong offset!");
static_assert(offsetof(RotationAction_AddRotationAction, Scale) == 0x00000C, "Member 'RotationAction_AddRotationAction::Scale' has a wrong offset!");
static_assert(offsetof(RotationAction_AddRotationAction, ReturnValue) == 0x000010, "Member 'RotationAction_AddRotationAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationAction.GetRotationAction
// 0x0020 (0x0020 - 0x0000)
struct RotationAction_GetRotationAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationAction_GetRotationAction) == 0x000008, "Wrong alignment on RotationAction_GetRotationAction");
static_assert(sizeof(RotationAction_GetRotationAction) == 0x000020, "Wrong size on RotationAction_GetRotationAction");
static_assert(offsetof(RotationAction_GetRotationAction, AgentId) == 0x000000, "Member 'RotationAction_GetRotationAction::AgentId' has a wrong offset!");
static_assert(offsetof(RotationAction_GetRotationAction, ReturnValue) == 0x000008, "Member 'RotationAction_GetRotationAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationAction.GetRotationActionAsQuat
// 0x0030 (0x0030 - 0x0000)
struct RotationAction_GetRotationActionAsQuat final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationAction_GetRotationActionAsQuat) == 0x000010, "Wrong alignment on RotationAction_GetRotationActionAsQuat");
static_assert(sizeof(RotationAction_GetRotationActionAsQuat) == 0x000030, "Wrong size on RotationAction_GetRotationActionAsQuat");
static_assert(offsetof(RotationAction_GetRotationActionAsQuat, AgentId) == 0x000000, "Member 'RotationAction_GetRotationActionAsQuat::AgentId' has a wrong offset!");
static_assert(offsetof(RotationAction_GetRotationActionAsQuat, ReturnValue) == 0x000010, "Member 'RotationAction_GetRotationActionAsQuat::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationAction.GetRotationActionAsRotationVector
// 0x0020 (0x0020 - 0x0000)
struct RotationAction_GetRotationActionAsRotationVector final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationAction_GetRotationActionAsRotationVector) == 0x000008, "Wrong alignment on RotationAction_GetRotationActionAsRotationVector");
static_assert(sizeof(RotationAction_GetRotationActionAsRotationVector) == 0x000020, "Wrong size on RotationAction_GetRotationActionAsRotationVector");
static_assert(offsetof(RotationAction_GetRotationActionAsRotationVector, AgentId) == 0x000000, "Member 'RotationAction_GetRotationActionAsRotationVector::AgentId' has a wrong offset!");
static_assert(offsetof(RotationAction_GetRotationActionAsRotationVector, ReturnValue) == 0x000008, "Member 'RotationAction_GetRotationActionAsRotationVector::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationArrayAction.AddRotationArrayAction
// 0x0020 (0x0020 - 0x0000)
struct RotationArrayAction_AddRotationArrayAction final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URotationArrayAction*                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayAction_AddRotationArrayAction) == 0x000008, "Wrong alignment on RotationArrayAction_AddRotationArrayAction");
static_assert(sizeof(RotationArrayAction_AddRotationArrayAction) == 0x000020, "Wrong size on RotationArrayAction_AddRotationArrayAction");
static_assert(offsetof(RotationArrayAction_AddRotationArrayAction, InInteractor) == 0x000000, "Member 'RotationArrayAction_AddRotationArrayAction::InInteractor' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_AddRotationArrayAction, Name_0) == 0x000008, "Member 'RotationArrayAction_AddRotationArrayAction::Name_0' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_AddRotationArrayAction, RotationNum) == 0x00000C, "Member 'RotationArrayAction_AddRotationArrayAction::RotationNum' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_AddRotationArrayAction, Scale) == 0x000010, "Member 'RotationArrayAction_AddRotationArrayAction::Scale' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_AddRotationArrayAction, ReturnValue) == 0x000018, "Member 'RotationArrayAction_AddRotationArrayAction::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationArrayAction.GetRotationArrayAction
// 0x0018 (0x0018 - 0x0000)
struct RotationArrayAction_GetRotationArrayAction final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotator>                       OutRotations;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayAction_GetRotationArrayAction) == 0x000008, "Wrong alignment on RotationArrayAction_GetRotationArrayAction");
static_assert(sizeof(RotationArrayAction_GetRotationArrayAction) == 0x000018, "Wrong size on RotationArrayAction_GetRotationArrayAction");
static_assert(offsetof(RotationArrayAction_GetRotationArrayAction, AgentId) == 0x000000, "Member 'RotationArrayAction_GetRotationArrayAction::AgentId' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_GetRotationArrayAction, OutRotations) == 0x000008, "Member 'RotationArrayAction_GetRotationArrayAction::OutRotations' has a wrong offset!");

// Function LearningAgents.RotationArrayAction.GetRotationArrayActionAsQuats
// 0x0018 (0x0018 - 0x0000)
struct RotationArrayAction_GetRotationArrayActionAsQuats final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuat>                          OutRotations;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayAction_GetRotationArrayActionAsQuats) == 0x000008, "Wrong alignment on RotationArrayAction_GetRotationArrayActionAsQuats");
static_assert(sizeof(RotationArrayAction_GetRotationArrayActionAsQuats) == 0x000018, "Wrong size on RotationArrayAction_GetRotationArrayActionAsQuats");
static_assert(offsetof(RotationArrayAction_GetRotationArrayActionAsQuats, AgentId) == 0x000000, "Member 'RotationArrayAction_GetRotationArrayActionAsQuats::AgentId' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_GetRotationArrayActionAsQuats, OutRotations) == 0x000008, "Member 'RotationArrayAction_GetRotationArrayActionAsQuats::OutRotations' has a wrong offset!");

// Function LearningAgents.RotationArrayAction.GetRotationArrayActionAsRotationVectors
// 0x0018 (0x0018 - 0x0000)
struct RotationArrayAction_GetRotationArrayActionAsRotationVectors final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OutRotationVectors;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayAction_GetRotationArrayActionAsRotationVectors) == 0x000008, "Wrong alignment on RotationArrayAction_GetRotationArrayActionAsRotationVectors");
static_assert(sizeof(RotationArrayAction_GetRotationArrayActionAsRotationVectors) == 0x000018, "Wrong size on RotationArrayAction_GetRotationArrayActionAsRotationVectors");
static_assert(offsetof(RotationArrayAction_GetRotationArrayActionAsRotationVectors, AgentId) == 0x000000, "Member 'RotationArrayAction_GetRotationArrayActionAsRotationVectors::AgentId' has a wrong offset!");
static_assert(offsetof(RotationArrayAction_GetRotationArrayActionAsRotationVectors, OutRotationVectors) == 0x000008, "Member 'RotationArrayAction_GetRotationArrayActionAsRotationVectors::OutRotationVectors' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.AgentsAdded
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManagerComponent_AgentsAdded final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_AgentsAdded) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_AgentsAdded");
static_assert(sizeof(LearningAgentsManagerComponent_AgentsAdded) == 0x000010, "Wrong size on LearningAgentsManagerComponent_AgentsAdded");
static_assert(offsetof(LearningAgentsManagerComponent_AgentsAdded, AgentIds) == 0x000000, "Member 'LearningAgentsManagerComponent_AgentsAdded::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.AgentsRemoved
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManagerComponent_AgentsRemoved final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_AgentsRemoved) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_AgentsRemoved");
static_assert(sizeof(LearningAgentsManagerComponent_AgentsRemoved) == 0x000010, "Wrong size on LearningAgentsManagerComponent_AgentsRemoved");
static_assert(offsetof(LearningAgentsManagerComponent_AgentsRemoved, AgentIds) == 0x000000, "Member 'LearningAgentsManagerComponent_AgentsRemoved::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.AgentsReset
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManagerComponent_AgentsReset final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_AgentsReset) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_AgentsReset");
static_assert(sizeof(LearningAgentsManagerComponent_AgentsReset) == 0x000010, "Wrong size on LearningAgentsManagerComponent_AgentsReset");
static_assert(offsetof(LearningAgentsManagerComponent_AgentsReset, AgentIds) == 0x000000, "Member 'LearningAgentsManagerComponent_AgentsReset::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.GetAgent
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsManagerComponent_GetAgent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_GetAgent) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_GetAgent");
static_assert(sizeof(LearningAgentsManagerComponent_GetAgent) == 0x000018, "Wrong size on LearningAgentsManagerComponent_GetAgent");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgent, AgentId) == 0x000000, "Member 'LearningAgentsManagerComponent_GetAgent::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgent, AgentClass) == 0x000008, "Member 'LearningAgentsManagerComponent_GetAgent::AgentClass' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgent, ReturnValue) == 0x000010, "Member 'LearningAgentsManagerComponent_GetAgent::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.GetAgentManager
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManagerComponent_GetAgentManager final
{
public:
	TSubclassOf<class ALearningAgentsManager>     AgentManagerClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALearningAgentsManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_GetAgentManager) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_GetAgentManager");
static_assert(sizeof(LearningAgentsManagerComponent_GetAgentManager) == 0x000010, "Wrong size on LearningAgentsManagerComponent_GetAgentManager");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgentManager, AgentManagerClass) == 0x000000, "Member 'LearningAgentsManagerComponent_GetAgentManager::AgentManagerClass' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgentManager, ReturnValue) == 0x000008, "Member 'LearningAgentsManagerComponent_GetAgentManager::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.GetAgents
// 0x0028 (0x0028 - 0x0000)
struct LearningAgentsManagerComponent_GetAgents final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutAgents;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_GetAgents) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_GetAgents");
static_assert(sizeof(LearningAgentsManagerComponent_GetAgents) == 0x000028, "Wrong size on LearningAgentsManagerComponent_GetAgents");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgents, AgentIds) == 0x000000, "Member 'LearningAgentsManagerComponent_GetAgents::AgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgents, AgentClass) == 0x000010, "Member 'LearningAgentsManagerComponent_GetAgents::AgentClass' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAgents, OutAgents) == 0x000018, "Member 'LearningAgentsManagerComponent_GetAgents::OutAgents' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.GetAllAgents
// 0x0028 (0x0028 - 0x0000)
struct LearningAgentsManagerComponent_GetAllAgents final
{
public:
	TArray<class UObject*>                        OutAgents;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutAgentIds;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_GetAllAgents) == 0x000008, "Wrong alignment on LearningAgentsManagerComponent_GetAllAgents");
static_assert(sizeof(LearningAgentsManagerComponent_GetAllAgents) == 0x000028, "Wrong size on LearningAgentsManagerComponent_GetAllAgents");
static_assert(offsetof(LearningAgentsManagerComponent_GetAllAgents, OutAgents) == 0x000000, "Member 'LearningAgentsManagerComponent_GetAllAgents::OutAgents' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAllAgents, OutAgentIds) == 0x000010, "Member 'LearningAgentsManagerComponent_GetAllAgents::OutAgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManagerComponent_GetAllAgents, AgentClass) == 0x000020, "Member 'LearningAgentsManagerComponent_GetAllAgents::AgentClass' has a wrong offset!");

// Function LearningAgents.LearningAgentsManagerComponent.IsSetup
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsManagerComponent_IsSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManagerComponent_IsSetup) == 0x000001, "Wrong alignment on LearningAgentsManagerComponent_IsSetup");
static_assert(sizeof(LearningAgentsManagerComponent_IsSetup) == 0x000001, "Wrong size on LearningAgentsManagerComponent_IsSetup");
static_assert(offsetof(LearningAgentsManagerComponent_IsSetup, ReturnValue) == 0x000000, "Member 'LearningAgentsManagerComponent_IsSetup::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsController.SetActions
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsController_SetActions final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsController_SetActions) == 0x000008, "Wrong alignment on LearningAgentsController_SetActions");
static_assert(sizeof(LearningAgentsController_SetActions) == 0x000010, "Wrong size on LearningAgentsController_SetActions");
static_assert(offsetof(LearningAgentsController_SetActions, AgentIds) == 0x000000, "Member 'LearningAgentsController_SetActions::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsController.SetupController
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsController_SetupController final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsController_SetupController) == 0x000008, "Wrong alignment on LearningAgentsController_SetupController");
static_assert(sizeof(LearningAgentsController_SetupController) == 0x000008, "Wrong size on LearningAgentsController_SetupController");
static_assert(offsetof(LearningAgentsController_SetupController, InInteractor) == 0x000000, "Member 'LearningAgentsController_SetupController::InInteractor' has a wrong offset!");

// Function LearningAgents.LearningAgentsController.GetInteractor
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsController_GetInteractor final
{
public:
	TSubclassOf<class ULearningAgentsInteractor>  InteractorClass;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULearningAgentsInteractor*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsController_GetInteractor) == 0x000008, "Wrong alignment on LearningAgentsController_GetInteractor");
static_assert(sizeof(LearningAgentsController_GetInteractor) == 0x000010, "Wrong size on LearningAgentsController_GetInteractor");
static_assert(offsetof(LearningAgentsController_GetInteractor, InteractorClass) == 0x000000, "Member 'LearningAgentsController_GetInteractor::InteractorClass' has a wrong offset!");
static_assert(offsetof(LearningAgentsController_GetInteractor, ReturnValue) == 0x000008, "Member 'LearningAgentsController_GetInteractor::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.LoadCriticFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsCritic_LoadCriticFromAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_LoadCriticFromAsset) == 0x000008, "Wrong alignment on LearningAgentsCritic_LoadCriticFromAsset");
static_assert(sizeof(LearningAgentsCritic_LoadCriticFromAsset) == 0x000008, "Wrong size on LearningAgentsCritic_LoadCriticFromAsset");
static_assert(offsetof(LearningAgentsCritic_LoadCriticFromAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsCritic_LoadCriticFromAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.LoadCriticFromSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsCritic_LoadCriticFromSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_LoadCriticFromSnapshot) == 0x000008, "Wrong alignment on LearningAgentsCritic_LoadCriticFromSnapshot");
static_assert(sizeof(LearningAgentsCritic_LoadCriticFromSnapshot) == 0x000010, "Wrong size on LearningAgentsCritic_LoadCriticFromSnapshot");
static_assert(offsetof(LearningAgentsCritic_LoadCriticFromSnapshot, File) == 0x000000, "Member 'LearningAgentsCritic_LoadCriticFromSnapshot::File' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.SaveCriticToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsCritic_SaveCriticToAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_SaveCriticToAsset) == 0x000008, "Wrong alignment on LearningAgentsCritic_SaveCriticToAsset");
static_assert(sizeof(LearningAgentsCritic_SaveCriticToAsset) == 0x000008, "Wrong size on LearningAgentsCritic_SaveCriticToAsset");
static_assert(offsetof(LearningAgentsCritic_SaveCriticToAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsCritic_SaveCriticToAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.SetupCritic
// 0x0028 (0x0028 - 0x0000)
struct LearningAgentsCritic_SetupCritic final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULearningAgentsPolicy*                  InPolicy;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsCriticSettings          CriticSettings;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_SetupCritic) == 0x000008, "Wrong alignment on LearningAgentsCritic_SetupCritic");
static_assert(sizeof(LearningAgentsCritic_SetupCritic) == 0x000028, "Wrong size on LearningAgentsCritic_SetupCritic");
static_assert(offsetof(LearningAgentsCritic_SetupCritic, InInteractor) == 0x000000, "Member 'LearningAgentsCritic_SetupCritic::InInteractor' has a wrong offset!");
static_assert(offsetof(LearningAgentsCritic_SetupCritic, InPolicy) == 0x000008, "Member 'LearningAgentsCritic_SetupCritic::InPolicy' has a wrong offset!");
static_assert(offsetof(LearningAgentsCritic_SetupCritic, CriticSettings) == 0x000010, "Member 'LearningAgentsCritic_SetupCritic::CriticSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsCritic_SetupCritic, NeuralNetworkAsset) == 0x000020, "Member 'LearningAgentsCritic_SetupCritic::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.UseCriticFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsCritic_UseCriticFromAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_UseCriticFromAsset) == 0x000008, "Wrong alignment on LearningAgentsCritic_UseCriticFromAsset");
static_assert(sizeof(LearningAgentsCritic_UseCriticFromAsset) == 0x000008, "Wrong size on LearningAgentsCritic_UseCriticFromAsset");
static_assert(offsetof(LearningAgentsCritic_UseCriticFromAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsCritic_UseCriticFromAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.GetEstimatedDiscountedReturn
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsCritic_GetEstimatedDiscountedReturn final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_GetEstimatedDiscountedReturn) == 0x000004, "Wrong alignment on LearningAgentsCritic_GetEstimatedDiscountedReturn");
static_assert(sizeof(LearningAgentsCritic_GetEstimatedDiscountedReturn) == 0x000008, "Wrong size on LearningAgentsCritic_GetEstimatedDiscountedReturn");
static_assert(offsetof(LearningAgentsCritic_GetEstimatedDiscountedReturn, AgentId) == 0x000000, "Member 'LearningAgentsCritic_GetEstimatedDiscountedReturn::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsCritic_GetEstimatedDiscountedReturn, ReturnValue) == 0x000004, "Member 'LearningAgentsCritic_GetEstimatedDiscountedReturn::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsCritic.SaveCriticToSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsCritic_SaveCriticToSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsCritic_SaveCriticToSnapshot) == 0x000008, "Wrong alignment on LearningAgentsCritic_SaveCriticToSnapshot");
static_assert(sizeof(LearningAgentsCritic_SaveCriticToSnapshot) == 0x000010, "Wrong size on LearningAgentsCritic_SaveCriticToSnapshot");
static_assert(offsetof(LearningAgentsCritic_SaveCriticToSnapshot, File) == 0x000000, "Member 'LearningAgentsCritic_SaveCriticToSnapshot::File' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.AddSplineComponentHelper
// 0x0018 (0x0018 - 0x0000)
struct SplineComponentHelper_AddSplineComponentHelper final
{
public:
	class ULearningAgentsManagerComponent*        InManagerComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponentHelper*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_AddSplineComponentHelper) == 0x000008, "Wrong alignment on SplineComponentHelper_AddSplineComponentHelper");
static_assert(sizeof(SplineComponentHelper_AddSplineComponentHelper) == 0x000018, "Wrong size on SplineComponentHelper_AddSplineComponentHelper");
static_assert(offsetof(SplineComponentHelper_AddSplineComponentHelper, InManagerComponent) == 0x000000, "Member 'SplineComponentHelper_AddSplineComponentHelper::InManagerComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_AddSplineComponentHelper, Name_0) == 0x000008, "Member 'SplineComponentHelper_AddSplineComponentHelper::Name_0' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_AddSplineComponentHelper, ReturnValue) == 0x000010, "Member 'SplineComponentHelper_AddSplineComponentHelper::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetDirectionAtDistanceAlongSpline
// 0x0030 (0x0030 - 0x0000)
struct SplineComponentHelper_GetDirectionAtDistanceAlongSpline final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetDirectionAtDistanceAlongSpline");
static_assert(sizeof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline) == 0x000030, "Wrong size on SplineComponentHelper_GetDirectionAtDistanceAlongSpline");
static_assert(offsetof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetDirectionAtDistanceAlongSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetDirectionAtDistanceAlongSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline, DistanceAlongSpline) == 0x000010, "Member 'SplineComponentHelper_GetDirectionAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline, CoordinateSpace) == 0x000014, "Member 'SplineComponentHelper_GetDirectionAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDirectionAtDistanceAlongSpline, ReturnValue) == 0x000018, "Member 'SplineComponentHelper_GetDirectionAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetDistanceAlongSplineAtPosition
// 0x0030 (0x0030 - 0x0000)
struct SplineComponentHelper_GetDistanceAlongSplineAtPosition final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetDistanceAlongSplineAtPosition) == 0x000008, "Wrong alignment on SplineComponentHelper_GetDistanceAlongSplineAtPosition");
static_assert(sizeof(SplineComponentHelper_GetDistanceAlongSplineAtPosition) == 0x000030, "Wrong size on SplineComponentHelper_GetDistanceAlongSplineAtPosition");
static_assert(offsetof(SplineComponentHelper_GetDistanceAlongSplineAtPosition, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetDistanceAlongSplineAtPosition::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDistanceAlongSplineAtPosition, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetDistanceAlongSplineAtPosition::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDistanceAlongSplineAtPosition, Position) == 0x000010, "Member 'SplineComponentHelper_GetDistanceAlongSplineAtPosition::Position' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDistanceAlongSplineAtPosition, CoordinateSpace) == 0x000028, "Member 'SplineComponentHelper_GetDistanceAlongSplineAtPosition::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetDistanceAlongSplineAtPosition, ReturnValue) == 0x00002C, "Member 'SplineComponentHelper_GetDistanceAlongSplineAtPosition::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetNearestPositionOnSpline
// 0x0048 (0x0048 - 0x0000)
struct SplineComponentHelper_GetNearestPositionOnSpline final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetNearestPositionOnSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetNearestPositionOnSpline");
static_assert(sizeof(SplineComponentHelper_GetNearestPositionOnSpline) == 0x000048, "Wrong size on SplineComponentHelper_GetNearestPositionOnSpline");
static_assert(offsetof(SplineComponentHelper_GetNearestPositionOnSpline, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetNearestPositionOnSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetNearestPositionOnSpline, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetNearestPositionOnSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetNearestPositionOnSpline, Position) == 0x000010, "Member 'SplineComponentHelper_GetNearestPositionOnSpline::Position' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetNearestPositionOnSpline, CoordinateSpace) == 0x000028, "Member 'SplineComponentHelper_GetNearestPositionOnSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetNearestPositionOnSpline, ReturnValue) == 0x000030, "Member 'SplineComponentHelper_GetNearestPositionOnSpline::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetPositionAtDistanceAlongSpline
// 0x0030 (0x0030 - 0x0000)
struct SplineComponentHelper_GetPositionAtDistanceAlongSpline final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetPositionAtDistanceAlongSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetPositionAtDistanceAlongSpline");
static_assert(sizeof(SplineComponentHelper_GetPositionAtDistanceAlongSpline) == 0x000030, "Wrong size on SplineComponentHelper_GetPositionAtDistanceAlongSpline");
static_assert(offsetof(SplineComponentHelper_GetPositionAtDistanceAlongSpline, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetPositionAtDistanceAlongSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionAtDistanceAlongSpline, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetPositionAtDistanceAlongSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionAtDistanceAlongSpline, DistanceAlongSpline) == 0x000010, "Member 'SplineComponentHelper_GetPositionAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionAtDistanceAlongSpline, CoordinateSpace) == 0x000014, "Member 'SplineComponentHelper_GetPositionAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionAtDistanceAlongSpline, ReturnValue) == 0x000018, "Member 'SplineComponentHelper_GetPositionAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetPositionsAlongSpline
// 0x0030 (0x0030 - 0x0000)
struct SplineComponentHelper_GetPositionsAlongSpline final
{
public:
	TArray<struct FVector>                        OutPositions;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionNum;                                       // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceAlongSpline;                          // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDistanceAlongSpline;                           // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineComponentHelper_GetPositionsAlongSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetPositionsAlongSpline");
static_assert(sizeof(SplineComponentHelper_GetPositionsAlongSpline) == 0x000030, "Wrong size on SplineComponentHelper_GetPositionsAlongSpline");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, OutPositions) == 0x000000, "Member 'SplineComponentHelper_GetPositionsAlongSpline::OutPositions' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, AgentId) == 0x000010, "Member 'SplineComponentHelper_GetPositionsAlongSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, SplineComponent) == 0x000018, "Member 'SplineComponentHelper_GetPositionsAlongSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, PositionNum) == 0x000020, "Member 'SplineComponentHelper_GetPositionsAlongSpline::PositionNum' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, StartDistanceAlongSpline) == 0x000024, "Member 'SplineComponentHelper_GetPositionsAlongSpline::StartDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, StopDistanceAlongSpline) == 0x000028, "Member 'SplineComponentHelper_GetPositionsAlongSpline::StopDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetPositionsAlongSpline, CoordinateSpace) == 0x00002C, "Member 'SplineComponentHelper_GetPositionsAlongSpline::CoordinateSpace' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetProportionAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct SplineComponentHelper_GetProportionAlongSpline final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetProportionAlongSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetProportionAlongSpline");
static_assert(sizeof(SplineComponentHelper_GetProportionAlongSpline) == 0x000018, "Wrong size on SplineComponentHelper_GetProportionAlongSpline");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSpline, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetProportionAlongSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSpline, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetProportionAlongSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSpline, DistanceAlongSpline) == 0x000010, "Member 'SplineComponentHelper_GetProportionAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSpline, ReturnValue) == 0x000014, "Member 'SplineComponentHelper_GetProportionAlongSpline::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetProportionAlongSplineAsAngle
// 0x0018 (0x0018 - 0x0000)
struct SplineComponentHelper_GetProportionAlongSplineAsAngle final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineComponentHelper_GetProportionAlongSplineAsAngle) == 0x000008, "Wrong alignment on SplineComponentHelper_GetProportionAlongSplineAsAngle");
static_assert(sizeof(SplineComponentHelper_GetProportionAlongSplineAsAngle) == 0x000018, "Wrong size on SplineComponentHelper_GetProportionAlongSplineAsAngle");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSplineAsAngle, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetProportionAlongSplineAsAngle::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSplineAsAngle, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetProportionAlongSplineAsAngle::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSplineAsAngle, DistanceAlongSpline) == 0x000010, "Member 'SplineComponentHelper_GetProportionAlongSplineAsAngle::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetProportionAlongSplineAsAngle, ReturnValue) == 0x000014, "Member 'SplineComponentHelper_GetProportionAlongSplineAsAngle::ReturnValue' has a wrong offset!");

// Function LearningAgents.SplineComponentHelper.GetVelocityAlongSpline
// 0x0050 (0x0050 - 0x0000)
struct SplineComponentHelper_GetVelocityAlongSpline final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 SplineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FiniteDifferenceDelta;                             // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0044(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineComponentHelper_GetVelocityAlongSpline) == 0x000008, "Wrong alignment on SplineComponentHelper_GetVelocityAlongSpline");
static_assert(sizeof(SplineComponentHelper_GetVelocityAlongSpline) == 0x000050, "Wrong size on SplineComponentHelper_GetVelocityAlongSpline");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, AgentId) == 0x000000, "Member 'SplineComponentHelper_GetVelocityAlongSpline::AgentId' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, SplineComponent) == 0x000008, "Member 'SplineComponentHelper_GetVelocityAlongSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, Position) == 0x000010, "Member 'SplineComponentHelper_GetVelocityAlongSpline::Position' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, Velocity) == 0x000028, "Member 'SplineComponentHelper_GetVelocityAlongSpline::Velocity' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, FiniteDifferenceDelta) == 0x000040, "Member 'SplineComponentHelper_GetVelocityAlongSpline::FiniteDifferenceDelta' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, CoordinateSpace) == 0x000044, "Member 'SplineComponentHelper_GetVelocityAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(SplineComponentHelper_GetVelocityAlongSpline, ReturnValue) == 0x000048, "Member 'SplineComponentHelper_GetVelocityAlongSpline::ReturnValue' has a wrong offset!");

// Function LearningAgents.ProjectionHelper.AddProjectionHelper
// 0x0018 (0x0018 - 0x0000)
struct ProjectionHelper_AddProjectionHelper final
{
public:
	class ULearningAgentsManagerComponent*        InManagerComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectionHelper*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectionHelper_AddProjectionHelper) == 0x000008, "Wrong alignment on ProjectionHelper_AddProjectionHelper");
static_assert(sizeof(ProjectionHelper_AddProjectionHelper) == 0x000018, "Wrong size on ProjectionHelper_AddProjectionHelper");
static_assert(offsetof(ProjectionHelper_AddProjectionHelper, InManagerComponent) == 0x000000, "Member 'ProjectionHelper_AddProjectionHelper::InManagerComponent' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_AddProjectionHelper, Name_0) == 0x000008, "Member 'ProjectionHelper_AddProjectionHelper::Name_0' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_AddProjectionHelper, ReturnValue) == 0x000010, "Member 'ProjectionHelper_AddProjectionHelper::ReturnValue' has a wrong offset!");

// Function LearningAgents.ProjectionHelper.ProjectPositionRotationOntoGroundPlane
// 0x0080 (0x0080 - 0x0000)
struct ProjectionHelper_ProjectPositionRotationOntoGroundPlane final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0050(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalForwardVector;                                // 0x0068(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane) == 0x000008, "Wrong alignment on ProjectionHelper_ProjectPositionRotationOntoGroundPlane");
static_assert(sizeof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane) == 0x000080, "Wrong size on ProjectionHelper_ProjectPositionRotationOntoGroundPlane");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, OutPosition) == 0x000000, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::OutPosition' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, OutRotation) == 0x000018, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::OutRotation' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, AgentId) == 0x000030, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::AgentId' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, InPosition) == 0x000038, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::InPosition' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, InRotation) == 0x000050, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::InRotation' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectPositionRotationOntoGroundPlane, LocalForwardVector) == 0x000068, "Member 'ProjectionHelper_ProjectPositionRotationOntoGroundPlane::LocalForwardVector' has a wrong offset!");

// Function LearningAgents.ProjectionHelper.ProjectTransformOntoGroundPlane
// 0x00F0 (0x00F0 - 0x0000)
struct ProjectionHelper_ProjectTransformOntoGroundPlane final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalForwardVector;                                // 0x0070(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0090(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectionHelper_ProjectTransformOntoGroundPlane) == 0x000010, "Wrong alignment on ProjectionHelper_ProjectTransformOntoGroundPlane");
static_assert(sizeof(ProjectionHelper_ProjectTransformOntoGroundPlane) == 0x0000F0, "Wrong size on ProjectionHelper_ProjectTransformOntoGroundPlane");
static_assert(offsetof(ProjectionHelper_ProjectTransformOntoGroundPlane, AgentId) == 0x000000, "Member 'ProjectionHelper_ProjectTransformOntoGroundPlane::AgentId' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectTransformOntoGroundPlane, Transform) == 0x000010, "Member 'ProjectionHelper_ProjectTransformOntoGroundPlane::Transform' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectTransformOntoGroundPlane, LocalForwardVector) == 0x000070, "Member 'ProjectionHelper_ProjectTransformOntoGroundPlane::LocalForwardVector' has a wrong offset!");
static_assert(offsetof(ProjectionHelper_ProjectTransformOntoGroundPlane, ReturnValue) == 0x000090, "Member 'ProjectionHelper_ProjectTransformOntoGroundPlane::ReturnValue' has a wrong offset!");

// Function LearningAgents.MeshComponentHelper.AddMeshComponentHelper
// 0x0018 (0x0018 - 0x0000)
struct MeshComponentHelper_AddMeshComponentHelper final
{
public:
	class ULearningAgentsManagerComponent*        InManagerComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponentHelper*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshComponentHelper_AddMeshComponentHelper) == 0x000008, "Wrong alignment on MeshComponentHelper_AddMeshComponentHelper");
static_assert(sizeof(MeshComponentHelper_AddMeshComponentHelper) == 0x000018, "Wrong size on MeshComponentHelper_AddMeshComponentHelper");
static_assert(offsetof(MeshComponentHelper_AddMeshComponentHelper, InManagerComponent) == 0x000000, "Member 'MeshComponentHelper_AddMeshComponentHelper::InManagerComponent' has a wrong offset!");
static_assert(offsetof(MeshComponentHelper_AddMeshComponentHelper, Name_0) == 0x000008, "Member 'MeshComponentHelper_AddMeshComponentHelper::Name_0' has a wrong offset!");
static_assert(offsetof(MeshComponentHelper_AddMeshComponentHelper, ReturnValue) == 0x000010, "Member 'MeshComponentHelper_AddMeshComponentHelper::ReturnValue' has a wrong offset!");

// Function LearningAgents.MeshComponentHelper.GetMeshBonePositions
// 0x0030 (0x0030 - 0x0000)
struct MeshComponentHelper_GetMeshBonePositions final
{
public:
	TArray<struct FVector>                        OutBonePositions;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMeshComponent*                   MeshComponent;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshComponentHelper_GetMeshBonePositions) == 0x000008, "Wrong alignment on MeshComponentHelper_GetMeshBonePositions");
static_assert(sizeof(MeshComponentHelper_GetMeshBonePositions) == 0x000030, "Wrong size on MeshComponentHelper_GetMeshBonePositions");
static_assert(offsetof(MeshComponentHelper_GetMeshBonePositions, OutBonePositions) == 0x000000, "Member 'MeshComponentHelper_GetMeshBonePositions::OutBonePositions' has a wrong offset!");
static_assert(offsetof(MeshComponentHelper_GetMeshBonePositions, AgentId) == 0x000010, "Member 'MeshComponentHelper_GetMeshBonePositions::AgentId' has a wrong offset!");
static_assert(offsetof(MeshComponentHelper_GetMeshBonePositions, MeshComponent) == 0x000018, "Member 'MeshComponentHelper_GetMeshBonePositions::MeshComponent' has a wrong offset!");
static_assert(offsetof(MeshComponentHelper_GetMeshBonePositions, BoneNames) == 0x000020, "Member 'MeshComponentHelper_GetMeshBonePositions::BoneNames' has a wrong offset!");

// Function LearningAgents.RayCastHelper.AddRayCastHelper
// 0x0018 (0x0018 - 0x0000)
struct RayCastHelper_AddRayCastHelper final
{
public:
	class ULearningAgentsManagerComponent*        InManagerComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URayCastHelper*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RayCastHelper_AddRayCastHelper) == 0x000008, "Wrong alignment on RayCastHelper_AddRayCastHelper");
static_assert(sizeof(RayCastHelper_AddRayCastHelper) == 0x000018, "Wrong size on RayCastHelper_AddRayCastHelper");
static_assert(offsetof(RayCastHelper_AddRayCastHelper, InManagerComponent) == 0x000000, "Member 'RayCastHelper_AddRayCastHelper::InManagerComponent' has a wrong offset!");
static_assert(offsetof(RayCastHelper_AddRayCastHelper, Name_0) == 0x000008, "Member 'RayCastHelper_AddRayCastHelper::Name_0' has a wrong offset!");
static_assert(offsetof(RayCastHelper_AddRayCastHelper, ReturnValue) == 0x000010, "Member 'RayCastHelper_AddRayCastHelper::ReturnValue' has a wrong offset!");

// Function LearningAgents.RayCastHelper.RayCastGridHeights
// 0x0068 (0x0068 - 0x0000)
struct RayCastHelper_RayCastGridHeights final
{
public:
	TArray<float>                                 OutHeights;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RowNum;                                            // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColNum;                                            // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RowWidth;                                          // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColWidth;                                          // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RayCastHelper_RayCastGridHeights) == 0x000008, "Wrong alignment on RayCastHelper_RayCastGridHeights");
static_assert(sizeof(RayCastHelper_RayCastGridHeights) == 0x000068, "Wrong size on RayCastHelper_RayCastGridHeights");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, OutHeights) == 0x000000, "Member 'RayCastHelper_RayCastGridHeights::OutHeights' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, AgentId) == 0x000010, "Member 'RayCastHelper_RayCastGridHeights::AgentId' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, Position) == 0x000018, "Member 'RayCastHelper_RayCastGridHeights::Position' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, Rotation) == 0x000030, "Member 'RayCastHelper_RayCastGridHeights::Rotation' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, RowNum) == 0x000048, "Member 'RayCastHelper_RayCastGridHeights::RowNum' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, ColNum) == 0x00004C, "Member 'RayCastHelper_RayCastGridHeights::ColNum' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, RowWidth) == 0x000050, "Member 'RayCastHelper_RayCastGridHeights::RowWidth' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, ColWidth) == 0x000054, "Member 'RayCastHelper_RayCastGridHeights::ColWidth' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, MaxHeight) == 0x000058, "Member 'RayCastHelper_RayCastGridHeights::MaxHeight' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, MinHeight) == 0x00005C, "Member 'RayCastHelper_RayCastGridHeights::MinHeight' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastGridHeights, CollisionChannel) == 0x000060, "Member 'RayCastHelper_RayCastGridHeights::CollisionChannel' has a wrong offset!");

// Function LearningAgents.RayCastHelper.RayCastRadial
// 0x0078 (0x0078 - 0x0000)
struct RayCastHelper_RayCastRadial final
{
public:
	TArray<float>                                 OutDistances;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RayNum;                                            // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRayDist;                                        // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalForward;                                      // 0x0058(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RayCastHelper_RayCastRadial) == 0x000008, "Wrong alignment on RayCastHelper_RayCastRadial");
static_assert(sizeof(RayCastHelper_RayCastRadial) == 0x000078, "Wrong size on RayCastHelper_RayCastRadial");
static_assert(offsetof(RayCastHelper_RayCastRadial, OutDistances) == 0x000000, "Member 'RayCastHelper_RayCastRadial::OutDistances' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, AgentId) == 0x000010, "Member 'RayCastHelper_RayCastRadial::AgentId' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, Position) == 0x000018, "Member 'RayCastHelper_RayCastRadial::Position' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, Rotation) == 0x000030, "Member 'RayCastHelper_RayCastRadial::Rotation' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, RayNum) == 0x000048, "Member 'RayCastHelper_RayCastRadial::RayNum' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, MinAngle) == 0x00004C, "Member 'RayCastHelper_RayCastRadial::MinAngle' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, MaxAngle) == 0x000050, "Member 'RayCastHelper_RayCastRadial::MaxAngle' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, MaxRayDist) == 0x000054, "Member 'RayCastHelper_RayCastRadial::MaxRayDist' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, LocalForward) == 0x000058, "Member 'RayCastHelper_RayCastRadial::LocalForward' has a wrong offset!");
static_assert(offsetof(RayCastHelper_RayCastRadial, CollisionChannel) == 0x000070, "Member 'RayCastHelper_RayCastRadial::CollisionChannel' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.AddCollisionMonitorHelper
// 0x0018 (0x0018 - 0x0000)
struct CollisionMonitorHelper_AddCollisionMonitorHelper final
{
public:
	class ULearningAgentsManagerComponent*        InManagerComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCollisionMonitorHelper*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionMonitorHelper_AddCollisionMonitorHelper) == 0x000008, "Wrong alignment on CollisionMonitorHelper_AddCollisionMonitorHelper");
static_assert(sizeof(CollisionMonitorHelper_AddCollisionMonitorHelper) == 0x000018, "Wrong size on CollisionMonitorHelper_AddCollisionMonitorHelper");
static_assert(offsetof(CollisionMonitorHelper_AddCollisionMonitorHelper, InManagerComponent) == 0x000000, "Member 'CollisionMonitorHelper_AddCollisionMonitorHelper::InManagerComponent' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_AddCollisionMonitorHelper, Name_0) == 0x000008, "Member 'CollisionMonitorHelper_AddCollisionMonitorHelper::Name_0' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_AddCollisionMonitorHelper, ReturnValue) == 0x000010, "Member 'CollisionMonitorHelper_AddCollisionMonitorHelper::ReturnValue' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.GetAndResetCollisionOccurred
// 0x0008 (0x0008 - 0x0000)
struct CollisionMonitorHelper_GetAndResetCollisionOccurred final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionMonitorHelper_GetAndResetCollisionOccurred) == 0x000004, "Wrong alignment on CollisionMonitorHelper_GetAndResetCollisionOccurred");
static_assert(sizeof(CollisionMonitorHelper_GetAndResetCollisionOccurred) == 0x000008, "Wrong size on CollisionMonitorHelper_GetAndResetCollisionOccurred");
static_assert(offsetof(CollisionMonitorHelper_GetAndResetCollisionOccurred, AgentId) == 0x000000, "Member 'CollisionMonitorHelper_GetAndResetCollisionOccurred::AgentId' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_GetAndResetCollisionOccurred, ReturnValue) == 0x000004, "Member 'CollisionMonitorHelper_GetAndResetCollisionOccurred::ReturnValue' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.HandleOnHit
// 0x0118 (0x0118 - 0x0000)
struct CollisionMonitorHelper_HandleOnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionMonitorHelper_HandleOnHit) == 0x000008, "Wrong alignment on CollisionMonitorHelper_HandleOnHit");
static_assert(sizeof(CollisionMonitorHelper_HandleOnHit) == 0x000118, "Wrong size on CollisionMonitorHelper_HandleOnHit");
static_assert(offsetof(CollisionMonitorHelper_HandleOnHit, HitComponent) == 0x000000, "Member 'CollisionMonitorHelper_HandleOnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_HandleOnHit, OtherActor) == 0x000008, "Member 'CollisionMonitorHelper_HandleOnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_HandleOnHit, OtherComp) == 0x000010, "Member 'CollisionMonitorHelper_HandleOnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_HandleOnHit, NormalImpulse) == 0x000018, "Member 'CollisionMonitorHelper_HandleOnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_HandleOnHit, Hit) == 0x000030, "Member 'CollisionMonitorHelper_HandleOnHit::Hit' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.ResetCollisionOccurred
// 0x0004 (0x0004 - 0x0000)
struct CollisionMonitorHelper_ResetCollisionOccurred final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionMonitorHelper_ResetCollisionOccurred) == 0x000004, "Wrong alignment on CollisionMonitorHelper_ResetCollisionOccurred");
static_assert(sizeof(CollisionMonitorHelper_ResetCollisionOccurred) == 0x000004, "Wrong size on CollisionMonitorHelper_ResetCollisionOccurred");
static_assert(offsetof(CollisionMonitorHelper_ResetCollisionOccurred, AgentId) == 0x000000, "Member 'CollisionMonitorHelper_ResetCollisionOccurred::AgentId' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.SetComponent
// 0x0018 (0x0018 - 0x0000)
struct CollisionMonitorHelper_SetComponent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OtherComponentTag;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionMonitorHelper_SetComponent) == 0x000008, "Wrong alignment on CollisionMonitorHelper_SetComponent");
static_assert(sizeof(CollisionMonitorHelper_SetComponent) == 0x000018, "Wrong size on CollisionMonitorHelper_SetComponent");
static_assert(offsetof(CollisionMonitorHelper_SetComponent, AgentId) == 0x000000, "Member 'CollisionMonitorHelper_SetComponent::AgentId' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_SetComponent, Component) == 0x000008, "Member 'CollisionMonitorHelper_SetComponent::Component' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_SetComponent, OtherComponentTag) == 0x000010, "Member 'CollisionMonitorHelper_SetComponent::OtherComponentTag' has a wrong offset!");

// Function LearningAgents.CollisionMonitorHelper.GetCollisionOccurred
// 0x0008 (0x0008 - 0x0000)
struct CollisionMonitorHelper_GetCollisionOccurred final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionMonitorHelper_GetCollisionOccurred) == 0x000004, "Wrong alignment on CollisionMonitorHelper_GetCollisionOccurred");
static_assert(sizeof(CollisionMonitorHelper_GetCollisionOccurred) == 0x000008, "Wrong size on CollisionMonitorHelper_GetCollisionOccurred");
static_assert(offsetof(CollisionMonitorHelper_GetCollisionOccurred, AgentId) == 0x000000, "Member 'CollisionMonitorHelper_GetCollisionOccurred::AgentId' has a wrong offset!");
static_assert(offsetof(CollisionMonitorHelper_GetCollisionOccurred, ReturnValue) == 0x000004, "Member 'CollisionMonitorHelper_GetCollisionOccurred::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsInteractor.GetActions
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsInteractor_GetActions final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsInteractor_GetActions) == 0x000008, "Wrong alignment on LearningAgentsInteractor_GetActions");
static_assert(sizeof(LearningAgentsInteractor_GetActions) == 0x000010, "Wrong size on LearningAgentsInteractor_GetActions");
static_assert(offsetof(LearningAgentsInteractor_GetActions, AgentIds) == 0x000000, "Member 'LearningAgentsInteractor_GetActions::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsInteractor.SetObservations
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsInteractor_SetObservations final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsInteractor_SetObservations) == 0x000008, "Wrong alignment on LearningAgentsInteractor_SetObservations");
static_assert(sizeof(LearningAgentsInteractor_SetObservations) == 0x000010, "Wrong size on LearningAgentsInteractor_SetObservations");
static_assert(offsetof(LearningAgentsInteractor_SetObservations, AgentIds) == 0x000000, "Member 'LearningAgentsInteractor_SetObservations::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsInteractor.GetActionVector
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsInteractor_GetActionVector final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OutActionVector;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsInteractor_GetActionVector) == 0x000008, "Wrong alignment on LearningAgentsInteractor_GetActionVector");
static_assert(sizeof(LearningAgentsInteractor_GetActionVector) == 0x000018, "Wrong size on LearningAgentsInteractor_GetActionVector");
static_assert(offsetof(LearningAgentsInteractor_GetActionVector, AgentId) == 0x000000, "Member 'LearningAgentsInteractor_GetActionVector::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsInteractor_GetActionVector, OutActionVector) == 0x000008, "Member 'LearningAgentsInteractor_GetActionVector::OutActionVector' has a wrong offset!");

// Function LearningAgents.LearningAgentsInteractor.GetObservationVector
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsInteractor_GetObservationVector final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OutObservationVector;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsInteractor_GetObservationVector) == 0x000008, "Wrong alignment on LearningAgentsInteractor_GetObservationVector");
static_assert(sizeof(LearningAgentsInteractor_GetObservationVector) == 0x000018, "Wrong size on LearningAgentsInteractor_GetObservationVector");
static_assert(offsetof(LearningAgentsInteractor_GetObservationVector, AgentId) == 0x000000, "Member 'LearningAgentsInteractor_GetObservationVector::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsInteractor_GetObservationVector, OutObservationVector) == 0x000008, "Member 'LearningAgentsInteractor_GetObservationVector::OutObservationVector' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.AddAgent
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_AddAgent final
{
public:
	class UObject*                                Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsManager_AddAgent) == 0x000008, "Wrong alignment on LearningAgentsManager_AddAgent");
static_assert(sizeof(LearningAgentsManager_AddAgent) == 0x000010, "Wrong size on LearningAgentsManager_AddAgent");
static_assert(offsetof(LearningAgentsManager_AddAgent, Agent) == 0x000000, "Member 'LearningAgentsManager_AddAgent::Agent' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_AddAgent, ReturnValue) == 0x000008, "Member 'LearningAgentsManager_AddAgent::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.AddAgents
// 0x0020 (0x0020 - 0x0000)
struct LearningAgentsManager_AddAgents final
{
public:
	TArray<int32>                                 OutAgentIds;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        InAgents;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_AddAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_AddAgents");
static_assert(sizeof(LearningAgentsManager_AddAgents) == 0x000020, "Wrong size on LearningAgentsManager_AddAgents");
static_assert(offsetof(LearningAgentsManager_AddAgents, OutAgentIds) == 0x000000, "Member 'LearningAgentsManager_AddAgents::OutAgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_AddAgents, InAgents) == 0x000010, "Member 'LearningAgentsManager_AddAgents::InAgents' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.AddAgentsAsTickPrerequisiteOfManager
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager final
{
public:
	TArray<class AActor*>                         InAgents;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager) == 0x000008, "Wrong alignment on LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager");
static_assert(sizeof(LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager) == 0x000010, "Wrong size on LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager");
static_assert(offsetof(LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager, InAgents) == 0x000000, "Member 'LearningAgentsManager_AddAgentsAsTickPrerequisiteOfManager::InAgents' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.AddManagerAsTickPrerequisiteOfAgents
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents final
{
public:
	TArray<class AActor*>                         InAgents;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents");
static_assert(sizeof(LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents) == 0x000010, "Wrong size on LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents");
static_assert(offsetof(LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents, InAgents) == 0x000000, "Member 'LearningAgentsManager_AddManagerAsTickPrerequisiteOfAgents::InAgents' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.RemoveAgent
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsManager_RemoveAgent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_RemoveAgent) == 0x000004, "Wrong alignment on LearningAgentsManager_RemoveAgent");
static_assert(sizeof(LearningAgentsManager_RemoveAgent) == 0x000004, "Wrong size on LearningAgentsManager_RemoveAgent");
static_assert(offsetof(LearningAgentsManager_RemoveAgent, AgentId) == 0x000000, "Member 'LearningAgentsManager_RemoveAgent::AgentId' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.RemoveAgents
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_RemoveAgents final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_RemoveAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_RemoveAgents");
static_assert(sizeof(LearningAgentsManager_RemoveAgents) == 0x000010, "Wrong size on LearningAgentsManager_RemoveAgents");
static_assert(offsetof(LearningAgentsManager_RemoveAgents, AgentIds) == 0x000000, "Member 'LearningAgentsManager_RemoveAgents::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.ResetAgent
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsManager_ResetAgent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_ResetAgent) == 0x000004, "Wrong alignment on LearningAgentsManager_ResetAgent");
static_assert(sizeof(LearningAgentsManager_ResetAgent) == 0x000004, "Wrong size on LearningAgentsManager_ResetAgent");
static_assert(offsetof(LearningAgentsManager_ResetAgent, AgentId) == 0x000000, "Member 'LearningAgentsManager_ResetAgent::AgentId' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.ResetAgents
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_ResetAgents final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_ResetAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_ResetAgents");
static_assert(sizeof(LearningAgentsManager_ResetAgents) == 0x000010, "Wrong size on LearningAgentsManager_ResetAgents");
static_assert(offsetof(LearningAgentsManager_ResetAgents, AgentIds) == 0x000000, "Member 'LearningAgentsManager_ResetAgents::AgentIds' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAgent
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsManager_GetAgent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetAgent) == 0x000008, "Wrong alignment on LearningAgentsManager_GetAgent");
static_assert(sizeof(LearningAgentsManager_GetAgent) == 0x000018, "Wrong size on LearningAgentsManager_GetAgent");
static_assert(offsetof(LearningAgentsManager_GetAgent, AgentId) == 0x000000, "Member 'LearningAgentsManager_GetAgent::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgent, AgentClass) == 0x000008, "Member 'LearningAgentsManager_GetAgent::AgentClass' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgent, ReturnValue) == 0x000010, "Member 'LearningAgentsManager_GetAgent::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAgentId
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_GetAgentId final
{
public:
	class UObject*                                Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsManager_GetAgentId) == 0x000008, "Wrong alignment on LearningAgentsManager_GetAgentId");
static_assert(sizeof(LearningAgentsManager_GetAgentId) == 0x000010, "Wrong size on LearningAgentsManager_GetAgentId");
static_assert(offsetof(LearningAgentsManager_GetAgentId, Agent) == 0x000000, "Member 'LearningAgentsManager_GetAgentId::Agent' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgentId, ReturnValue) == 0x000008, "Member 'LearningAgentsManager_GetAgentId::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAgentIds
// 0x0020 (0x0020 - 0x0000)
struct LearningAgentsManager_GetAgentIds final
{
public:
	TArray<int32>                                 OutAgentIds;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        InAgents;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetAgentIds) == 0x000008, "Wrong alignment on LearningAgentsManager_GetAgentIds");
static_assert(sizeof(LearningAgentsManager_GetAgentIds) == 0x000020, "Wrong size on LearningAgentsManager_GetAgentIds");
static_assert(offsetof(LearningAgentsManager_GetAgentIds, OutAgentIds) == 0x000000, "Member 'LearningAgentsManager_GetAgentIds::OutAgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgentIds, InAgents) == 0x000010, "Member 'LearningAgentsManager_GetAgentIds::InAgents' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAgentNum
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsManager_GetAgentNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetAgentNum) == 0x000004, "Wrong alignment on LearningAgentsManager_GetAgentNum");
static_assert(sizeof(LearningAgentsManager_GetAgentNum) == 0x000004, "Wrong size on LearningAgentsManager_GetAgentNum");
static_assert(offsetof(LearningAgentsManager_GetAgentNum, ReturnValue) == 0x000000, "Member 'LearningAgentsManager_GetAgentNum::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAgents
// 0x0028 (0x0028 - 0x0000)
struct LearningAgentsManager_GetAgents final
{
public:
	TArray<class UObject*>                        OutAgents;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AgentIds;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_GetAgents");
static_assert(sizeof(LearningAgentsManager_GetAgents) == 0x000028, "Wrong size on LearningAgentsManager_GetAgents");
static_assert(offsetof(LearningAgentsManager_GetAgents, OutAgents) == 0x000000, "Member 'LearningAgentsManager_GetAgents::OutAgents' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgents, AgentIds) == 0x000010, "Member 'LearningAgentsManager_GetAgents::AgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAgents, AgentClass) == 0x000020, "Member 'LearningAgentsManager_GetAgents::AgentClass' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetAllAgents
// 0x0028 (0x0028 - 0x0000)
struct LearningAgentsManager_GetAllAgents final
{
public:
	TArray<class UObject*>                        OutAgents;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutAgentIds;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AgentClass;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetAllAgents) == 0x000008, "Wrong alignment on LearningAgentsManager_GetAllAgents");
static_assert(sizeof(LearningAgentsManager_GetAllAgents) == 0x000028, "Wrong size on LearningAgentsManager_GetAllAgents");
static_assert(offsetof(LearningAgentsManager_GetAllAgents, OutAgents) == 0x000000, "Member 'LearningAgentsManager_GetAllAgents::OutAgents' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAllAgents, OutAgentIds) == 0x000010, "Member 'LearningAgentsManager_GetAllAgents::OutAgentIds' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_GetAllAgents, AgentClass) == 0x000020, "Member 'LearningAgentsManager_GetAllAgents::AgentClass' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.GetMaxAgentNum
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsManager_GetMaxAgentNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsManager_GetMaxAgentNum) == 0x000004, "Wrong alignment on LearningAgentsManager_GetMaxAgentNum");
static_assert(sizeof(LearningAgentsManager_GetMaxAgentNum) == 0x000004, "Wrong size on LearningAgentsManager_GetMaxAgentNum");
static_assert(offsetof(LearningAgentsManager_GetMaxAgentNum, ReturnValue) == 0x000000, "Member 'LearningAgentsManager_GetMaxAgentNum::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.HasAgent
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsManager_HasAgent final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsManager_HasAgent) == 0x000004, "Wrong alignment on LearningAgentsManager_HasAgent");
static_assert(sizeof(LearningAgentsManager_HasAgent) == 0x000008, "Wrong size on LearningAgentsManager_HasAgent");
static_assert(offsetof(LearningAgentsManager_HasAgent, AgentId) == 0x000000, "Member 'LearningAgentsManager_HasAgent::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_HasAgent, ReturnValue) == 0x000004, "Member 'LearningAgentsManager_HasAgent::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsManager.HasAgentObject
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsManager_HasAgentObject final
{
public:
	class UObject*                                Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsManager_HasAgentObject) == 0x000008, "Wrong alignment on LearningAgentsManager_HasAgentObject");
static_assert(sizeof(LearningAgentsManager_HasAgentObject) == 0x000010, "Wrong size on LearningAgentsManager_HasAgentObject");
static_assert(offsetof(LearningAgentsManager_HasAgentObject, Agent) == 0x000000, "Member 'LearningAgentsManager_HasAgentObject::Agent' has a wrong offset!");
static_assert(offsetof(LearningAgentsManager_HasAgentObject, ReturnValue) == 0x000008, "Member 'LearningAgentsManager_HasAgentObject::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsNeuralNetwork.LoadNetworkFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsNeuralNetwork_LoadNetworkFromAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsNeuralNetwork_LoadNetworkFromAsset) == 0x000008, "Wrong alignment on LearningAgentsNeuralNetwork_LoadNetworkFromAsset");
static_assert(sizeof(LearningAgentsNeuralNetwork_LoadNetworkFromAsset) == 0x000008, "Wrong size on LearningAgentsNeuralNetwork_LoadNetworkFromAsset");
static_assert(offsetof(LearningAgentsNeuralNetwork_LoadNetworkFromAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsNeuralNetwork_LoadNetworkFromAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsNeuralNetwork.LoadNetworkFromSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot) == 0x000008, "Wrong alignment on LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot");
static_assert(sizeof(LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot) == 0x000010, "Wrong size on LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot");
static_assert(offsetof(LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot, File) == 0x000000, "Member 'LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot::File' has a wrong offset!");

// Function LearningAgents.LearningAgentsNeuralNetwork.SaveNetworkToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsNeuralNetwork_SaveNetworkToAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsNeuralNetwork_SaveNetworkToAsset) == 0x000008, "Wrong alignment on LearningAgentsNeuralNetwork_SaveNetworkToAsset");
static_assert(sizeof(LearningAgentsNeuralNetwork_SaveNetworkToAsset) == 0x000008, "Wrong size on LearningAgentsNeuralNetwork_SaveNetworkToAsset");
static_assert(offsetof(LearningAgentsNeuralNetwork_SaveNetworkToAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsNeuralNetwork_SaveNetworkToAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsNeuralNetwork.SaveNetworkToSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsNeuralNetwork_SaveNetworkToSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsNeuralNetwork_SaveNetworkToSnapshot) == 0x000008, "Wrong alignment on LearningAgentsNeuralNetwork_SaveNetworkToSnapshot");
static_assert(sizeof(LearningAgentsNeuralNetwork_SaveNetworkToSnapshot) == 0x000010, "Wrong size on LearningAgentsNeuralNetwork_SaveNetworkToSnapshot");
static_assert(offsetof(LearningAgentsNeuralNetwork_SaveNetworkToSnapshot, File) == 0x000000, "Member 'LearningAgentsNeuralNetwork_SaveNetworkToSnapshot::File' has a wrong offset!");

// Function LearningAgents.FloatObservation.AddFloatObservation
// 0x0018 (0x0018 - 0x0000)
struct FloatObservation_AddFloatObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFloatObservation*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatObservation_AddFloatObservation) == 0x000008, "Wrong alignment on FloatObservation_AddFloatObservation");
static_assert(sizeof(FloatObservation_AddFloatObservation) == 0x000018, "Wrong size on FloatObservation_AddFloatObservation");
static_assert(offsetof(FloatObservation_AddFloatObservation, InInteractor) == 0x000000, "Member 'FloatObservation_AddFloatObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(FloatObservation_AddFloatObservation, Name_0) == 0x000008, "Member 'FloatObservation_AddFloatObservation::Name_0' has a wrong offset!");
static_assert(offsetof(FloatObservation_AddFloatObservation, Scale) == 0x00000C, "Member 'FloatObservation_AddFloatObservation::Scale' has a wrong offset!");
static_assert(offsetof(FloatObservation_AddFloatObservation, ReturnValue) == 0x000010, "Member 'FloatObservation_AddFloatObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.FloatObservation.SetFloatObservation
// 0x0008 (0x0008 - 0x0000)
struct FloatObservation_SetFloatObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Observation;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatObservation_SetFloatObservation) == 0x000004, "Wrong alignment on FloatObservation_SetFloatObservation");
static_assert(sizeof(FloatObservation_SetFloatObservation) == 0x000008, "Wrong size on FloatObservation_SetFloatObservation");
static_assert(offsetof(FloatObservation_SetFloatObservation, AgentId) == 0x000000, "Member 'FloatObservation_SetFloatObservation::AgentId' has a wrong offset!");
static_assert(offsetof(FloatObservation_SetFloatObservation, Observation) == 0x000004, "Member 'FloatObservation_SetFloatObservation::Observation' has a wrong offset!");

// Function LearningAgents.FloatArrayObservation.AddFloatArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct FloatArrayObservation_AddFloatArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFloatArrayObservation*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatArrayObservation_AddFloatArrayObservation) == 0x000008, "Wrong alignment on FloatArrayObservation_AddFloatArrayObservation");
static_assert(sizeof(FloatArrayObservation_AddFloatArrayObservation) == 0x000020, "Wrong size on FloatArrayObservation_AddFloatArrayObservation");
static_assert(offsetof(FloatArrayObservation_AddFloatArrayObservation, InInteractor) == 0x000000, "Member 'FloatArrayObservation_AddFloatArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(FloatArrayObservation_AddFloatArrayObservation, Name_0) == 0x000008, "Member 'FloatArrayObservation_AddFloatArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(FloatArrayObservation_AddFloatArrayObservation, Num) == 0x00000C, "Member 'FloatArrayObservation_AddFloatArrayObservation::Num' has a wrong offset!");
static_assert(offsetof(FloatArrayObservation_AddFloatArrayObservation, Scale) == 0x000010, "Member 'FloatArrayObservation_AddFloatArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(FloatArrayObservation_AddFloatArrayObservation, ReturnValue) == 0x000018, "Member 'FloatArrayObservation_AddFloatArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.FloatArrayObservation.SetFloatArrayObservation
// 0x0018 (0x0018 - 0x0000)
struct FloatArrayObservation_SetFloatArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Observation;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatArrayObservation_SetFloatArrayObservation) == 0x000008, "Wrong alignment on FloatArrayObservation_SetFloatArrayObservation");
static_assert(sizeof(FloatArrayObservation_SetFloatArrayObservation) == 0x000018, "Wrong size on FloatArrayObservation_SetFloatArrayObservation");
static_assert(offsetof(FloatArrayObservation_SetFloatArrayObservation, AgentId) == 0x000000, "Member 'FloatArrayObservation_SetFloatArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(FloatArrayObservation_SetFloatArrayObservation, Observation) == 0x000008, "Member 'FloatArrayObservation_SetFloatArrayObservation::Observation' has a wrong offset!");

// Function LearningAgents.VectorObservation.AddVectorObservation
// 0x0018 (0x0018 - 0x0000)
struct VectorObservation_AddVectorObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVectorObservation*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorObservation_AddVectorObservation) == 0x000008, "Wrong alignment on VectorObservation_AddVectorObservation");
static_assert(sizeof(VectorObservation_AddVectorObservation) == 0x000018, "Wrong size on VectorObservation_AddVectorObservation");
static_assert(offsetof(VectorObservation_AddVectorObservation, InInteractor) == 0x000000, "Member 'VectorObservation_AddVectorObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(VectorObservation_AddVectorObservation, Name_0) == 0x000008, "Member 'VectorObservation_AddVectorObservation::Name_0' has a wrong offset!");
static_assert(offsetof(VectorObservation_AddVectorObservation, Scale) == 0x00000C, "Member 'VectorObservation_AddVectorObservation::Scale' has a wrong offset!");
static_assert(offsetof(VectorObservation_AddVectorObservation, ReturnValue) == 0x000010, "Member 'VectorObservation_AddVectorObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.VectorObservation.SetVectorObservation
// 0x0020 (0x0020 - 0x0000)
struct VectorObservation_SetVectorObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Observation;                                       // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorObservation_SetVectorObservation) == 0x000008, "Wrong alignment on VectorObservation_SetVectorObservation");
static_assert(sizeof(VectorObservation_SetVectorObservation) == 0x000020, "Wrong size on VectorObservation_SetVectorObservation");
static_assert(offsetof(VectorObservation_SetVectorObservation, AgentId) == 0x000000, "Member 'VectorObservation_SetVectorObservation::AgentId' has a wrong offset!");
static_assert(offsetof(VectorObservation_SetVectorObservation, Observation) == 0x000008, "Member 'VectorObservation_SetVectorObservation::Observation' has a wrong offset!");

// Function LearningAgents.VectorArrayObservation.AddVectorArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct VectorArrayObservation_AddVectorArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVectorArrayObservation*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorArrayObservation_AddVectorArrayObservation) == 0x000008, "Wrong alignment on VectorArrayObservation_AddVectorArrayObservation");
static_assert(sizeof(VectorArrayObservation_AddVectorArrayObservation) == 0x000020, "Wrong size on VectorArrayObservation_AddVectorArrayObservation");
static_assert(offsetof(VectorArrayObservation_AddVectorArrayObservation, InInteractor) == 0x000000, "Member 'VectorArrayObservation_AddVectorArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(VectorArrayObservation_AddVectorArrayObservation, Name_0) == 0x000008, "Member 'VectorArrayObservation_AddVectorArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(VectorArrayObservation_AddVectorArrayObservation, Num) == 0x00000C, "Member 'VectorArrayObservation_AddVectorArrayObservation::Num' has a wrong offset!");
static_assert(offsetof(VectorArrayObservation_AddVectorArrayObservation, Scale) == 0x000010, "Member 'VectorArrayObservation_AddVectorArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(VectorArrayObservation_AddVectorArrayObservation, ReturnValue) == 0x000018, "Member 'VectorArrayObservation_AddVectorArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.VectorArrayObservation.SetVectorArrayObservation
// 0x0018 (0x0018 - 0x0000)
struct VectorArrayObservation_SetVectorArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Observation;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorArrayObservation_SetVectorArrayObservation) == 0x000008, "Wrong alignment on VectorArrayObservation_SetVectorArrayObservation");
static_assert(sizeof(VectorArrayObservation_SetVectorArrayObservation) == 0x000018, "Wrong size on VectorArrayObservation_SetVectorArrayObservation");
static_assert(offsetof(VectorArrayObservation_SetVectorArrayObservation, AgentId) == 0x000000, "Member 'VectorArrayObservation_SetVectorArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(VectorArrayObservation_SetVectorArrayObservation, Observation) == 0x000008, "Member 'VectorArrayObservation_SetVectorArrayObservation::Observation' has a wrong offset!");

// Function LearningAgents.EnumObservation.AddEnumObservation
// 0x0020 (0x0020 - 0x0000)
struct EnumObservation_AddEnumObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UEnum*                            EnumType;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnumObservation*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumObservation_AddEnumObservation) == 0x000008, "Wrong alignment on EnumObservation_AddEnumObservation");
static_assert(sizeof(EnumObservation_AddEnumObservation) == 0x000020, "Wrong size on EnumObservation_AddEnumObservation");
static_assert(offsetof(EnumObservation_AddEnumObservation, InInteractor) == 0x000000, "Member 'EnumObservation_AddEnumObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(EnumObservation_AddEnumObservation, EnumType) == 0x000008, "Member 'EnumObservation_AddEnumObservation::EnumType' has a wrong offset!");
static_assert(offsetof(EnumObservation_AddEnumObservation, Name_0) == 0x000010, "Member 'EnumObservation_AddEnumObservation::Name_0' has a wrong offset!");
static_assert(offsetof(EnumObservation_AddEnumObservation, ReturnValue) == 0x000018, "Member 'EnumObservation_AddEnumObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.EnumObservation.SetEnumObservation
// 0x0008 (0x0008 - 0x0000)
struct EnumObservation_SetEnumObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnumObservation_SetEnumObservation) == 0x000004, "Wrong alignment on EnumObservation_SetEnumObservation");
static_assert(sizeof(EnumObservation_SetEnumObservation) == 0x000008, "Wrong size on EnumObservation_SetEnumObservation");
static_assert(offsetof(EnumObservation_SetEnumObservation, AgentId) == 0x000000, "Member 'EnumObservation_SetEnumObservation::AgentId' has a wrong offset!");
static_assert(offsetof(EnumObservation_SetEnumObservation, Value) == 0x000004, "Member 'EnumObservation_SetEnumObservation::Value' has a wrong offset!");

// Function LearningAgents.EnumArrayObservation.AddEnumArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct EnumArrayObservation_AddEnumArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UEnum*                            EnumType;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnumNum;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnumArrayObservation*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumArrayObservation_AddEnumArrayObservation) == 0x000008, "Wrong alignment on EnumArrayObservation_AddEnumArrayObservation");
static_assert(sizeof(EnumArrayObservation_AddEnumArrayObservation) == 0x000020, "Wrong size on EnumArrayObservation_AddEnumArrayObservation");
static_assert(offsetof(EnumArrayObservation_AddEnumArrayObservation, InInteractor) == 0x000000, "Member 'EnumArrayObservation_AddEnumArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(EnumArrayObservation_AddEnumArrayObservation, EnumType) == 0x000008, "Member 'EnumArrayObservation_AddEnumArrayObservation::EnumType' has a wrong offset!");
static_assert(offsetof(EnumArrayObservation_AddEnumArrayObservation, Name_0) == 0x000010, "Member 'EnumArrayObservation_AddEnumArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(EnumArrayObservation_AddEnumArrayObservation, EnumNum) == 0x000014, "Member 'EnumArrayObservation_AddEnumArrayObservation::EnumNum' has a wrong offset!");
static_assert(offsetof(EnumArrayObservation_AddEnumArrayObservation, ReturnValue) == 0x000018, "Member 'EnumArrayObservation_AddEnumArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.EnumArrayObservation.SetEnumArrayObservation
// 0x0018 (0x0018 - 0x0000)
struct EnumArrayObservation_SetEnumArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Values;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumArrayObservation_SetEnumArrayObservation) == 0x000008, "Wrong alignment on EnumArrayObservation_SetEnumArrayObservation");
static_assert(sizeof(EnumArrayObservation_SetEnumArrayObservation) == 0x000018, "Wrong size on EnumArrayObservation_SetEnumArrayObservation");
static_assert(offsetof(EnumArrayObservation_SetEnumArrayObservation, AgentId) == 0x000000, "Member 'EnumArrayObservation_SetEnumArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(EnumArrayObservation_SetEnumArrayObservation, Values) == 0x000008, "Member 'EnumArrayObservation_SetEnumArrayObservation::Values' has a wrong offset!");

// Function LearningAgents.TimeObservation.AddTimeObservation
// 0x0018 (0x0018 - 0x0000)
struct TimeObservation_AddTimeObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimeObservation*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeObservation_AddTimeObservation) == 0x000008, "Wrong alignment on TimeObservation_AddTimeObservation");
static_assert(sizeof(TimeObservation_AddTimeObservation) == 0x000018, "Wrong size on TimeObservation_AddTimeObservation");
static_assert(offsetof(TimeObservation_AddTimeObservation, InInteractor) == 0x000000, "Member 'TimeObservation_AddTimeObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(TimeObservation_AddTimeObservation, Name_0) == 0x000008, "Member 'TimeObservation_AddTimeObservation::Name_0' has a wrong offset!");
static_assert(offsetof(TimeObservation_AddTimeObservation, Scale) == 0x00000C, "Member 'TimeObservation_AddTimeObservation::Scale' has a wrong offset!");
static_assert(offsetof(TimeObservation_AddTimeObservation, ReturnValue) == 0x000010, "Member 'TimeObservation_AddTimeObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.TimeObservation.SetTimeObservation
// 0x000C (0x000C - 0x0000)
struct TimeObservation_SetTimeObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeTime;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeObservation_SetTimeObservation) == 0x000004, "Wrong alignment on TimeObservation_SetTimeObservation");
static_assert(sizeof(TimeObservation_SetTimeObservation) == 0x00000C, "Wrong size on TimeObservation_SetTimeObservation");
static_assert(offsetof(TimeObservation_SetTimeObservation, AgentId) == 0x000000, "Member 'TimeObservation_SetTimeObservation::AgentId' has a wrong offset!");
static_assert(offsetof(TimeObservation_SetTimeObservation, Time) == 0x000004, "Member 'TimeObservation_SetTimeObservation::Time' has a wrong offset!");
static_assert(offsetof(TimeObservation_SetTimeObservation, RelativeTime) == 0x000008, "Member 'TimeObservation_SetTimeObservation::RelativeTime' has a wrong offset!");

// Function LearningAgents.TimeArrayObservation.AddTimeArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct TimeArrayObservation_AddTimeArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeNum;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimeArrayObservation*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeArrayObservation_AddTimeArrayObservation) == 0x000008, "Wrong alignment on TimeArrayObservation_AddTimeArrayObservation");
static_assert(sizeof(TimeArrayObservation_AddTimeArrayObservation) == 0x000020, "Wrong size on TimeArrayObservation_AddTimeArrayObservation");
static_assert(offsetof(TimeArrayObservation_AddTimeArrayObservation, InInteractor) == 0x000000, "Member 'TimeArrayObservation_AddTimeArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_AddTimeArrayObservation, Name_0) == 0x000008, "Member 'TimeArrayObservation_AddTimeArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_AddTimeArrayObservation, TimeNum) == 0x00000C, "Member 'TimeArrayObservation_AddTimeArrayObservation::TimeNum' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_AddTimeArrayObservation, Scale) == 0x000010, "Member 'TimeArrayObservation_AddTimeArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_AddTimeArrayObservation, ReturnValue) == 0x000018, "Member 'TimeArrayObservation_AddTimeArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.TimeArrayObservation.SetTimeArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct TimeArrayObservation_SetTimeArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Times;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         RelativeTime;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeArrayObservation_SetTimeArrayObservation) == 0x000008, "Wrong alignment on TimeArrayObservation_SetTimeArrayObservation");
static_assert(sizeof(TimeArrayObservation_SetTimeArrayObservation) == 0x000020, "Wrong size on TimeArrayObservation_SetTimeArrayObservation");
static_assert(offsetof(TimeArrayObservation_SetTimeArrayObservation, AgentId) == 0x000000, "Member 'TimeArrayObservation_SetTimeArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_SetTimeArrayObservation, Times) == 0x000008, "Member 'TimeArrayObservation_SetTimeArrayObservation::Times' has a wrong offset!");
static_assert(offsetof(TimeArrayObservation_SetTimeArrayObservation, RelativeTime) == 0x000018, "Member 'TimeArrayObservation_SetTimeArrayObservation::RelativeTime' has a wrong offset!");

// Function LearningAgents.AngleObservation.AddAngleObservation
// 0x0018 (0x0018 - 0x0000)
struct AngleObservation_AddAngleObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAngleObservation*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngleObservation_AddAngleObservation) == 0x000008, "Wrong alignment on AngleObservation_AddAngleObservation");
static_assert(sizeof(AngleObservation_AddAngleObservation) == 0x000018, "Wrong size on AngleObservation_AddAngleObservation");
static_assert(offsetof(AngleObservation_AddAngleObservation, InInteractor) == 0x000000, "Member 'AngleObservation_AddAngleObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(AngleObservation_AddAngleObservation, Name_0) == 0x000008, "Member 'AngleObservation_AddAngleObservation::Name_0' has a wrong offset!");
static_assert(offsetof(AngleObservation_AddAngleObservation, Scale) == 0x00000C, "Member 'AngleObservation_AddAngleObservation::Scale' has a wrong offset!");
static_assert(offsetof(AngleObservation_AddAngleObservation, ReturnValue) == 0x000010, "Member 'AngleObservation_AddAngleObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.AngleObservation.SetAngleObservation
// 0x000C (0x000C - 0x0000)
struct AngleObservation_SetAngleObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeAngle;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngleObservation_SetAngleObservation) == 0x000004, "Wrong alignment on AngleObservation_SetAngleObservation");
static_assert(sizeof(AngleObservation_SetAngleObservation) == 0x00000C, "Wrong size on AngleObservation_SetAngleObservation");
static_assert(offsetof(AngleObservation_SetAngleObservation, AgentId) == 0x000000, "Member 'AngleObservation_SetAngleObservation::AgentId' has a wrong offset!");
static_assert(offsetof(AngleObservation_SetAngleObservation, Angle) == 0x000004, "Member 'AngleObservation_SetAngleObservation::Angle' has a wrong offset!");
static_assert(offsetof(AngleObservation_SetAngleObservation, RelativeAngle) == 0x000008, "Member 'AngleObservation_SetAngleObservation::RelativeAngle' has a wrong offset!");

// Function LearningAgents.AngleArrayObservation.AddAngleArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct AngleArrayObservation_AddAngleArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngleNum;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAngleArrayObservation*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngleArrayObservation_AddAngleArrayObservation) == 0x000008, "Wrong alignment on AngleArrayObservation_AddAngleArrayObservation");
static_assert(sizeof(AngleArrayObservation_AddAngleArrayObservation) == 0x000020, "Wrong size on AngleArrayObservation_AddAngleArrayObservation");
static_assert(offsetof(AngleArrayObservation_AddAngleArrayObservation, InInteractor) == 0x000000, "Member 'AngleArrayObservation_AddAngleArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_AddAngleArrayObservation, Name_0) == 0x000008, "Member 'AngleArrayObservation_AddAngleArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_AddAngleArrayObservation, AngleNum) == 0x00000C, "Member 'AngleArrayObservation_AddAngleArrayObservation::AngleNum' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_AddAngleArrayObservation, Scale) == 0x000010, "Member 'AngleArrayObservation_AddAngleArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_AddAngleArrayObservation, ReturnValue) == 0x000018, "Member 'AngleArrayObservation_AddAngleArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.AngleArrayObservation.SetAngleArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct AngleArrayObservation_SetAngleArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Angles;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         RelativeAngle;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AngleArrayObservation_SetAngleArrayObservation) == 0x000008, "Wrong alignment on AngleArrayObservation_SetAngleArrayObservation");
static_assert(sizeof(AngleArrayObservation_SetAngleArrayObservation) == 0x000020, "Wrong size on AngleArrayObservation_SetAngleArrayObservation");
static_assert(offsetof(AngleArrayObservation_SetAngleArrayObservation, AgentId) == 0x000000, "Member 'AngleArrayObservation_SetAngleArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_SetAngleArrayObservation, Angles) == 0x000008, "Member 'AngleArrayObservation_SetAngleArrayObservation::Angles' has a wrong offset!");
static_assert(offsetof(AngleArrayObservation_SetAngleArrayObservation, RelativeAngle) == 0x000018, "Member 'AngleArrayObservation_SetAngleArrayObservation::RelativeAngle' has a wrong offset!");

// Function LearningAgents.RotationObservation.AddRotationObservation
// 0x0018 (0x0018 - 0x0000)
struct RotationObservation_AddRotationObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URotationObservation*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationObservation_AddRotationObservation) == 0x000008, "Wrong alignment on RotationObservation_AddRotationObservation");
static_assert(sizeof(RotationObservation_AddRotationObservation) == 0x000018, "Wrong size on RotationObservation_AddRotationObservation");
static_assert(offsetof(RotationObservation_AddRotationObservation, InInteractor) == 0x000000, "Member 'RotationObservation_AddRotationObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(RotationObservation_AddRotationObservation, Name_0) == 0x000008, "Member 'RotationObservation_AddRotationObservation::Name_0' has a wrong offset!");
static_assert(offsetof(RotationObservation_AddRotationObservation, Scale) == 0x00000C, "Member 'RotationObservation_AddRotationObservation::Scale' has a wrong offset!");
static_assert(offsetof(RotationObservation_AddRotationObservation, ReturnValue) == 0x000010, "Member 'RotationObservation_AddRotationObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationObservation.SetRotationObservation
// 0x0038 (0x0038 - 0x0000)
struct RotationObservation_SetRotationObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationObservation_SetRotationObservation) == 0x000008, "Wrong alignment on RotationObservation_SetRotationObservation");
static_assert(sizeof(RotationObservation_SetRotationObservation) == 0x000038, "Wrong size on RotationObservation_SetRotationObservation");
static_assert(offsetof(RotationObservation_SetRotationObservation, AgentId) == 0x000000, "Member 'RotationObservation_SetRotationObservation::AgentId' has a wrong offset!");
static_assert(offsetof(RotationObservation_SetRotationObservation, Rotation) == 0x000008, "Member 'RotationObservation_SetRotationObservation::Rotation' has a wrong offset!");
static_assert(offsetof(RotationObservation_SetRotationObservation, RelativeRotation) == 0x000020, "Member 'RotationObservation_SetRotationObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.RotationObservation.SetRotationObservationFromQuat
// 0x0050 (0x0050 - 0x0000)
struct RotationObservation_SetRotationObservationFromQuat final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0010(0x0020)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  RelativeRotation;                                  // 0x0030(0x0020)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationObservation_SetRotationObservationFromQuat) == 0x000010, "Wrong alignment on RotationObservation_SetRotationObservationFromQuat");
static_assert(sizeof(RotationObservation_SetRotationObservationFromQuat) == 0x000050, "Wrong size on RotationObservation_SetRotationObservationFromQuat");
static_assert(offsetof(RotationObservation_SetRotationObservationFromQuat, AgentId) == 0x000000, "Member 'RotationObservation_SetRotationObservationFromQuat::AgentId' has a wrong offset!");
static_assert(offsetof(RotationObservation_SetRotationObservationFromQuat, Rotation) == 0x000010, "Member 'RotationObservation_SetRotationObservationFromQuat::Rotation' has a wrong offset!");
static_assert(offsetof(RotationObservation_SetRotationObservationFromQuat, RelativeRotation) == 0x000030, "Member 'RotationObservation_SetRotationObservationFromQuat::RelativeRotation' has a wrong offset!");

// Function LearningAgents.RotationArrayObservation.AddRotationArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct RotationArrayObservation_AddRotationArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URotationArrayObservation*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayObservation_AddRotationArrayObservation) == 0x000008, "Wrong alignment on RotationArrayObservation_AddRotationArrayObservation");
static_assert(sizeof(RotationArrayObservation_AddRotationArrayObservation) == 0x000020, "Wrong size on RotationArrayObservation_AddRotationArrayObservation");
static_assert(offsetof(RotationArrayObservation_AddRotationArrayObservation, InInteractor) == 0x000000, "Member 'RotationArrayObservation_AddRotationArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_AddRotationArrayObservation, Name_0) == 0x000008, "Member 'RotationArrayObservation_AddRotationArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_AddRotationArrayObservation, RotationNum) == 0x00000C, "Member 'RotationArrayObservation_AddRotationArrayObservation::RotationNum' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_AddRotationArrayObservation, Scale) == 0x000010, "Member 'RotationArrayObservation_AddRotationArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_AddRotationArrayObservation, ReturnValue) == 0x000018, "Member 'RotationArrayObservation_AddRotationArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.RotationArrayObservation.SetRotationArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct RotationArrayObservation_SetRotationArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotator>                       Rotations;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayObservation_SetRotationArrayObservation) == 0x000008, "Wrong alignment on RotationArrayObservation_SetRotationArrayObservation");
static_assert(sizeof(RotationArrayObservation_SetRotationArrayObservation) == 0x000030, "Wrong size on RotationArrayObservation_SetRotationArrayObservation");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservation, AgentId) == 0x000000, "Member 'RotationArrayObservation_SetRotationArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservation, Rotations) == 0x000008, "Member 'RotationArrayObservation_SetRotationArrayObservation::Rotations' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservation, RelativeRotation) == 0x000018, "Member 'RotationArrayObservation_SetRotationArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.RotationArrayObservation.SetRotationArrayObservationFromQuats
// 0x0040 (0x0040 - 0x0000)
struct RotationArrayObservation_SetRotationArrayObservationFromQuats final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuat>                          Rotations;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RelativeRotation;                                  // 0x0020(0x0020)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationArrayObservation_SetRotationArrayObservationFromQuats) == 0x000010, "Wrong alignment on RotationArrayObservation_SetRotationArrayObservationFromQuats");
static_assert(sizeof(RotationArrayObservation_SetRotationArrayObservationFromQuats) == 0x000040, "Wrong size on RotationArrayObservation_SetRotationArrayObservationFromQuats");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservationFromQuats, AgentId) == 0x000000, "Member 'RotationArrayObservation_SetRotationArrayObservationFromQuats::AgentId' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservationFromQuats, Rotations) == 0x000008, "Member 'RotationArrayObservation_SetRotationArrayObservationFromQuats::Rotations' has a wrong offset!");
static_assert(offsetof(RotationArrayObservation_SetRotationArrayObservationFromQuats, RelativeRotation) == 0x000020, "Member 'RotationArrayObservation_SetRotationArrayObservationFromQuats::RelativeRotation' has a wrong offset!");

// Function LearningAgents.DirectionObservation.AddDirectionObservation
// 0x0018 (0x0018 - 0x0000)
struct DirectionObservation_AddDirectionObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionObservation*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionObservation_AddDirectionObservation) == 0x000008, "Wrong alignment on DirectionObservation_AddDirectionObservation");
static_assert(sizeof(DirectionObservation_AddDirectionObservation) == 0x000018, "Wrong size on DirectionObservation_AddDirectionObservation");
static_assert(offsetof(DirectionObservation_AddDirectionObservation, InInteractor) == 0x000000, "Member 'DirectionObservation_AddDirectionObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(DirectionObservation_AddDirectionObservation, Name_0) == 0x000008, "Member 'DirectionObservation_AddDirectionObservation::Name_0' has a wrong offset!");
static_assert(offsetof(DirectionObservation_AddDirectionObservation, Scale) == 0x00000C, "Member 'DirectionObservation_AddDirectionObservation::Scale' has a wrong offset!");
static_assert(offsetof(DirectionObservation_AddDirectionObservation, ReturnValue) == 0x000010, "Member 'DirectionObservation_AddDirectionObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.DirectionObservation.SetDirectionObservation
// 0x0038 (0x0038 - 0x0000)
struct DirectionObservation_SetDirectionObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionObservation_SetDirectionObservation) == 0x000008, "Wrong alignment on DirectionObservation_SetDirectionObservation");
static_assert(sizeof(DirectionObservation_SetDirectionObservation) == 0x000038, "Wrong size on DirectionObservation_SetDirectionObservation");
static_assert(offsetof(DirectionObservation_SetDirectionObservation, AgentId) == 0x000000, "Member 'DirectionObservation_SetDirectionObservation::AgentId' has a wrong offset!");
static_assert(offsetof(DirectionObservation_SetDirectionObservation, Direction) == 0x000008, "Member 'DirectionObservation_SetDirectionObservation::Direction' has a wrong offset!");
static_assert(offsetof(DirectionObservation_SetDirectionObservation, RelativeRotation) == 0x000020, "Member 'DirectionObservation_SetDirectionObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.DirectionArrayObservation.AddDirectionArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct DirectionArrayObservation_AddDirectionArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionNum;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDirectionArrayObservation*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionArrayObservation_AddDirectionArrayObservation) == 0x000008, "Wrong alignment on DirectionArrayObservation_AddDirectionArrayObservation");
static_assert(sizeof(DirectionArrayObservation_AddDirectionArrayObservation) == 0x000020, "Wrong size on DirectionArrayObservation_AddDirectionArrayObservation");
static_assert(offsetof(DirectionArrayObservation_AddDirectionArrayObservation, InInteractor) == 0x000000, "Member 'DirectionArrayObservation_AddDirectionArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_AddDirectionArrayObservation, Name_0) == 0x000008, "Member 'DirectionArrayObservation_AddDirectionArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_AddDirectionArrayObservation, DirectionNum) == 0x00000C, "Member 'DirectionArrayObservation_AddDirectionArrayObservation::DirectionNum' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_AddDirectionArrayObservation, Scale) == 0x000010, "Member 'DirectionArrayObservation_AddDirectionArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_AddDirectionArrayObservation, ReturnValue) == 0x000018, "Member 'DirectionArrayObservation_AddDirectionArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.DirectionArrayObservation.SetDirectionArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct DirectionArrayObservation_SetDirectionArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Directions;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionArrayObservation_SetDirectionArrayObservation) == 0x000008, "Wrong alignment on DirectionArrayObservation_SetDirectionArrayObservation");
static_assert(sizeof(DirectionArrayObservation_SetDirectionArrayObservation) == 0x000030, "Wrong size on DirectionArrayObservation_SetDirectionArrayObservation");
static_assert(offsetof(DirectionArrayObservation_SetDirectionArrayObservation, AgentId) == 0x000000, "Member 'DirectionArrayObservation_SetDirectionArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_SetDirectionArrayObservation, Directions) == 0x000008, "Member 'DirectionArrayObservation_SetDirectionArrayObservation::Directions' has a wrong offset!");
static_assert(offsetof(DirectionArrayObservation_SetDirectionArrayObservation, RelativeRotation) == 0x000018, "Member 'DirectionArrayObservation_SetDirectionArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PlanarDirectionObservation.AddPlanarDirectionObservation
// 0x0048 (0x0048 - 0x0000)
struct PlanarDirectionObservation_AddPlanarDirectionObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis0;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarDirectionObservation*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarDirectionObservation_AddPlanarDirectionObservation) == 0x000008, "Wrong alignment on PlanarDirectionObservation_AddPlanarDirectionObservation");
static_assert(sizeof(PlanarDirectionObservation_AddPlanarDirectionObservation) == 0x000048, "Wrong size on PlanarDirectionObservation_AddPlanarDirectionObservation");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, InInteractor) == 0x000000, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, Name_0) == 0x000008, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, Scale) == 0x00000C, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, Axis0) == 0x000010, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, Axis1) == 0x000028, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_AddPlanarDirectionObservation, ReturnValue) == 0x000040, "Member 'PlanarDirectionObservation_AddPlanarDirectionObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarDirectionObservation.SetPlanarDirectionObservation
// 0x0038 (0x0038 - 0x0000)
struct PlanarDirectionObservation_SetPlanarDirectionObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarDirectionObservation_SetPlanarDirectionObservation) == 0x000008, "Wrong alignment on PlanarDirectionObservation_SetPlanarDirectionObservation");
static_assert(sizeof(PlanarDirectionObservation_SetPlanarDirectionObservation) == 0x000038, "Wrong size on PlanarDirectionObservation_SetPlanarDirectionObservation");
static_assert(offsetof(PlanarDirectionObservation_SetPlanarDirectionObservation, AgentId) == 0x000000, "Member 'PlanarDirectionObservation_SetPlanarDirectionObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_SetPlanarDirectionObservation, Direction) == 0x000008, "Member 'PlanarDirectionObservation_SetPlanarDirectionObservation::Direction' has a wrong offset!");
static_assert(offsetof(PlanarDirectionObservation_SetPlanarDirectionObservation, RelativeRotation) == 0x000020, "Member 'PlanarDirectionObservation_SetPlanarDirectionObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PlanarDirectionArrayObservation.AddPlanarDirectionArrayObservation
// 0x0050 (0x0050 - 0x0000)
struct PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionNum;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarDirectionArrayObservation*       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation) == 0x000008, "Wrong alignment on PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation");
static_assert(sizeof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation) == 0x000050, "Wrong size on PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, InInteractor) == 0x000000, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, Name_0) == 0x000008, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, DirectionNum) == 0x00000C, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::DirectionNum' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, Scale) == 0x000010, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, Axis0) == 0x000018, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, Axis1) == 0x000030, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation, ReturnValue) == 0x000048, "Member 'PlanarDirectionArrayObservation_AddPlanarDirectionArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarDirectionArrayObservation.SetPlanarDirectionArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Directions;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation) == 0x000008, "Wrong alignment on PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation");
static_assert(sizeof(PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation) == 0x000030, "Wrong size on PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation");
static_assert(offsetof(PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation, AgentId) == 0x000000, "Member 'PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation, Directions) == 0x000008, "Member 'PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation::Directions' has a wrong offset!");
static_assert(offsetof(PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation, RelativeRotation) == 0x000018, "Member 'PlanarDirectionArrayObservation_SetPlanarDirectionArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PositionObservation.AddPositionObservation
// 0x0018 (0x0018 - 0x0000)
struct PositionObservation_AddPositionObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPositionObservation*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionObservation_AddPositionObservation) == 0x000008, "Wrong alignment on PositionObservation_AddPositionObservation");
static_assert(sizeof(PositionObservation_AddPositionObservation) == 0x000018, "Wrong size on PositionObservation_AddPositionObservation");
static_assert(offsetof(PositionObservation_AddPositionObservation, InInteractor) == 0x000000, "Member 'PositionObservation_AddPositionObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PositionObservation_AddPositionObservation, Name_0) == 0x000008, "Member 'PositionObservation_AddPositionObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PositionObservation_AddPositionObservation, Scale) == 0x00000C, "Member 'PositionObservation_AddPositionObservation::Scale' has a wrong offset!");
static_assert(offsetof(PositionObservation_AddPositionObservation, ReturnValue) == 0x000010, "Member 'PositionObservation_AddPositionObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PositionObservation.SetPositionObservation
// 0x0050 (0x0050 - 0x0000)
struct PositionObservation_SetPositionObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionObservation_SetPositionObservation) == 0x000008, "Wrong alignment on PositionObservation_SetPositionObservation");
static_assert(sizeof(PositionObservation_SetPositionObservation) == 0x000050, "Wrong size on PositionObservation_SetPositionObservation");
static_assert(offsetof(PositionObservation_SetPositionObservation, AgentId) == 0x000000, "Member 'PositionObservation_SetPositionObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PositionObservation_SetPositionObservation, Position) == 0x000008, "Member 'PositionObservation_SetPositionObservation::Position' has a wrong offset!");
static_assert(offsetof(PositionObservation_SetPositionObservation, RelativePosition) == 0x000020, "Member 'PositionObservation_SetPositionObservation::RelativePosition' has a wrong offset!");
static_assert(offsetof(PositionObservation_SetPositionObservation, RelativeRotation) == 0x000038, "Member 'PositionObservation_SetPositionObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PositionArrayObservation.AddPositionArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct PositionArrayObservation_AddPositionArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPositionArrayObservation*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionArrayObservation_AddPositionArrayObservation) == 0x000008, "Wrong alignment on PositionArrayObservation_AddPositionArrayObservation");
static_assert(sizeof(PositionArrayObservation_AddPositionArrayObservation) == 0x000020, "Wrong size on PositionArrayObservation_AddPositionArrayObservation");
static_assert(offsetof(PositionArrayObservation_AddPositionArrayObservation, InInteractor) == 0x000000, "Member 'PositionArrayObservation_AddPositionArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_AddPositionArrayObservation, Name_0) == 0x000008, "Member 'PositionArrayObservation_AddPositionArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_AddPositionArrayObservation, PositionNum) == 0x00000C, "Member 'PositionArrayObservation_AddPositionArrayObservation::PositionNum' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_AddPositionArrayObservation, Scale) == 0x000010, "Member 'PositionArrayObservation_AddPositionArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_AddPositionArrayObservation, ReturnValue) == 0x000018, "Member 'PositionArrayObservation_AddPositionArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PositionArrayObservation.SetPositionArrayObservation
// 0x0048 (0x0048 - 0x0000)
struct PositionArrayObservation_SetPositionArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionArrayObservation_SetPositionArrayObservation) == 0x000008, "Wrong alignment on PositionArrayObservation_SetPositionArrayObservation");
static_assert(sizeof(PositionArrayObservation_SetPositionArrayObservation) == 0x000048, "Wrong size on PositionArrayObservation_SetPositionArrayObservation");
static_assert(offsetof(PositionArrayObservation_SetPositionArrayObservation, AgentId) == 0x000000, "Member 'PositionArrayObservation_SetPositionArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_SetPositionArrayObservation, Positions) == 0x000008, "Member 'PositionArrayObservation_SetPositionArrayObservation::Positions' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_SetPositionArrayObservation, RelativePosition) == 0x000018, "Member 'PositionArrayObservation_SetPositionArrayObservation::RelativePosition' has a wrong offset!");
static_assert(offsetof(PositionArrayObservation_SetPositionArrayObservation, RelativeRotation) == 0x000030, "Member 'PositionArrayObservation_SetPositionArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.ScalarPositionObservation.AddScalarPositionObservation
// 0x0018 (0x0018 - 0x0000)
struct ScalarPositionObservation_AddScalarPositionObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScalarPositionObservation*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarPositionObservation_AddScalarPositionObservation) == 0x000008, "Wrong alignment on ScalarPositionObservation_AddScalarPositionObservation");
static_assert(sizeof(ScalarPositionObservation_AddScalarPositionObservation) == 0x000018, "Wrong size on ScalarPositionObservation_AddScalarPositionObservation");
static_assert(offsetof(ScalarPositionObservation_AddScalarPositionObservation, InInteractor) == 0x000000, "Member 'ScalarPositionObservation_AddScalarPositionObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_AddScalarPositionObservation, Name_0) == 0x000008, "Member 'ScalarPositionObservation_AddScalarPositionObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_AddScalarPositionObservation, Scale) == 0x00000C, "Member 'ScalarPositionObservation_AddScalarPositionObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_AddScalarPositionObservation, ReturnValue) == 0x000010, "Member 'ScalarPositionObservation_AddScalarPositionObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarPositionObservation.SetScalarPositionObservation
// 0x000C (0x000C - 0x0000)
struct ScalarPositionObservation_SetScalarPositionObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativePosition;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarPositionObservation_SetScalarPositionObservation) == 0x000004, "Wrong alignment on ScalarPositionObservation_SetScalarPositionObservation");
static_assert(sizeof(ScalarPositionObservation_SetScalarPositionObservation) == 0x00000C, "Wrong size on ScalarPositionObservation_SetScalarPositionObservation");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservation, AgentId) == 0x000000, "Member 'ScalarPositionObservation_SetScalarPositionObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservation, Position) == 0x000004, "Member 'ScalarPositionObservation_SetScalarPositionObservation::Position' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservation, RelativePosition) == 0x000008, "Member 'ScalarPositionObservation_SetScalarPositionObservation::RelativePosition' has a wrong offset!");

// Function LearningAgents.ScalarPositionObservation.SetScalarPositionObservationWithAxis
// 0x0050 (0x0050 - 0x0000)
struct ScalarPositionObservation_SetScalarPositionObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarPositionObservation_SetScalarPositionObservationWithAxis) == 0x000008, "Wrong alignment on ScalarPositionObservation_SetScalarPositionObservationWithAxis");
static_assert(sizeof(ScalarPositionObservation_SetScalarPositionObservationWithAxis) == 0x000050, "Wrong size on ScalarPositionObservation_SetScalarPositionObservationWithAxis");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarPositionObservation_SetScalarPositionObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservationWithAxis, Position) == 0x000008, "Member 'ScalarPositionObservation_SetScalarPositionObservationWithAxis::Position' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservationWithAxis, RelativePosition) == 0x000020, "Member 'ScalarPositionObservation_SetScalarPositionObservationWithAxis::RelativePosition' has a wrong offset!");
static_assert(offsetof(ScalarPositionObservation_SetScalarPositionObservationWithAxis, Axis) == 0x000038, "Member 'ScalarPositionObservation_SetScalarPositionObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.ScalarPositionArrayObservation.AddScalarPositionArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct ScalarPositionArrayObservation_AddScalarPositionArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScalarPositionArrayObservation*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation) == 0x000008, "Wrong alignment on ScalarPositionArrayObservation_AddScalarPositionArrayObservation");
static_assert(sizeof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation) == 0x000020, "Wrong size on ScalarPositionArrayObservation_AddScalarPositionArrayObservation");
static_assert(offsetof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation, InInteractor) == 0x000000, "Member 'ScalarPositionArrayObservation_AddScalarPositionArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation, Name_0) == 0x000008, "Member 'ScalarPositionArrayObservation_AddScalarPositionArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation, PositionNum) == 0x00000C, "Member 'ScalarPositionArrayObservation_AddScalarPositionArrayObservation::PositionNum' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation, Scale) == 0x000010, "Member 'ScalarPositionArrayObservation_AddScalarPositionArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_AddScalarPositionArrayObservation, ReturnValue) == 0x000018, "Member 'ScalarPositionArrayObservation_AddScalarPositionArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarPositionArrayObservation.SetScalarPositionArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct ScalarPositionArrayObservation_SetScalarPositionArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         RelativePosition;                                  // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScalarPositionArrayObservation_SetScalarPositionArrayObservation) == 0x000008, "Wrong alignment on ScalarPositionArrayObservation_SetScalarPositionArrayObservation");
static_assert(sizeof(ScalarPositionArrayObservation_SetScalarPositionArrayObservation) == 0x000020, "Wrong size on ScalarPositionArrayObservation_SetScalarPositionArrayObservation");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservation, AgentId) == 0x000000, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservation, Positions) == 0x000008, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservation::Positions' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservation, RelativePosition) == 0x000018, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservation::RelativePosition' has a wrong offset!");

// Function LearningAgents.ScalarPositionArrayObservation.SetScalarPositionArrayObservationWithAxis
// 0x0048 (0x0048 - 0x0000)
struct ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis) == 0x000008, "Wrong alignment on ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis");
static_assert(sizeof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis) == 0x000048, "Wrong size on ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis, Positions) == 0x000008, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis::Positions' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis, RelativePosition) == 0x000018, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis::RelativePosition' has a wrong offset!");
static_assert(offsetof(ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis, Axis) == 0x000030, "Member 'ScalarPositionArrayObservation_SetScalarPositionArrayObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.PlanarPositionObservation.AddPlanarPositionObservation
// 0x0048 (0x0048 - 0x0000)
struct PlanarPositionObservation_AddPlanarPositionObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis0;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarPositionObservation*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionObservation_AddPlanarPositionObservation) == 0x000008, "Wrong alignment on PlanarPositionObservation_AddPlanarPositionObservation");
static_assert(sizeof(PlanarPositionObservation_AddPlanarPositionObservation) == 0x000048, "Wrong size on PlanarPositionObservation_AddPlanarPositionObservation");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, InInteractor) == 0x000000, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, Name_0) == 0x000008, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, Scale) == 0x00000C, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, Axis0) == 0x000010, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, Axis1) == 0x000028, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_AddPlanarPositionObservation, ReturnValue) == 0x000040, "Member 'PlanarPositionObservation_AddPlanarPositionObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarPositionObservation.SetPlanarPositionObservation
// 0x0050 (0x0050 - 0x0000)
struct PlanarPositionObservation_SetPlanarPositionObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionObservation_SetPlanarPositionObservation) == 0x000008, "Wrong alignment on PlanarPositionObservation_SetPlanarPositionObservation");
static_assert(sizeof(PlanarPositionObservation_SetPlanarPositionObservation) == 0x000050, "Wrong size on PlanarPositionObservation_SetPlanarPositionObservation");
static_assert(offsetof(PlanarPositionObservation_SetPlanarPositionObservation, AgentId) == 0x000000, "Member 'PlanarPositionObservation_SetPlanarPositionObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_SetPlanarPositionObservation, Position) == 0x000008, "Member 'PlanarPositionObservation_SetPlanarPositionObservation::Position' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_SetPlanarPositionObservation, RelativePosition) == 0x000020, "Member 'PlanarPositionObservation_SetPlanarPositionObservation::RelativePosition' has a wrong offset!");
static_assert(offsetof(PlanarPositionObservation_SetPlanarPositionObservation, RelativeRotation) == 0x000038, "Member 'PlanarPositionObservation_SetPlanarPositionObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PlanarPositionArrayObservation.AddPlanarPositionArrayObservation
// 0x0050 (0x0050 - 0x0000)
struct PlanarPositionArrayObservation_AddPlanarPositionArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarPositionArrayObservation*        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation) == 0x000008, "Wrong alignment on PlanarPositionArrayObservation_AddPlanarPositionArrayObservation");
static_assert(sizeof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation) == 0x000050, "Wrong size on PlanarPositionArrayObservation_AddPlanarPositionArrayObservation");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, InInteractor) == 0x000000, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, Name_0) == 0x000008, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, PositionNum) == 0x00000C, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::PositionNum' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, Scale) == 0x000010, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, Axis0) == 0x000018, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, Axis1) == 0x000030, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_AddPlanarPositionArrayObservation, ReturnValue) == 0x000048, "Member 'PlanarPositionArrayObservation_AddPlanarPositionArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarPositionArrayObservation.SetPlanarPositionArrayObservation
// 0x0048 (0x0048 - 0x0000)
struct PlanarPositionArrayObservation_SetPlanarPositionArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Positions;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation) == 0x000008, "Wrong alignment on PlanarPositionArrayObservation_SetPlanarPositionArrayObservation");
static_assert(sizeof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation) == 0x000048, "Wrong size on PlanarPositionArrayObservation_SetPlanarPositionArrayObservation");
static_assert(offsetof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation, AgentId) == 0x000000, "Member 'PlanarPositionArrayObservation_SetPlanarPositionArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation, Positions) == 0x000008, "Member 'PlanarPositionArrayObservation_SetPlanarPositionArrayObservation::Positions' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation, RelativePosition) == 0x000018, "Member 'PlanarPositionArrayObservation_SetPlanarPositionArrayObservation::RelativePosition' has a wrong offset!");
static_assert(offsetof(PlanarPositionArrayObservation_SetPlanarPositionArrayObservation, RelativeRotation) == 0x000030, "Member 'PlanarPositionArrayObservation_SetPlanarPositionArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.VelocityObservation.AddVelocityObservation
// 0x0018 (0x0018 - 0x0000)
struct VelocityObservation_AddVelocityObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVelocityObservation*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityObservation_AddVelocityObservation) == 0x000008, "Wrong alignment on VelocityObservation_AddVelocityObservation");
static_assert(sizeof(VelocityObservation_AddVelocityObservation) == 0x000018, "Wrong size on VelocityObservation_AddVelocityObservation");
static_assert(offsetof(VelocityObservation_AddVelocityObservation, InInteractor) == 0x000000, "Member 'VelocityObservation_AddVelocityObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(VelocityObservation_AddVelocityObservation, Name_0) == 0x000008, "Member 'VelocityObservation_AddVelocityObservation::Name_0' has a wrong offset!");
static_assert(offsetof(VelocityObservation_AddVelocityObservation, Scale) == 0x00000C, "Member 'VelocityObservation_AddVelocityObservation::Scale' has a wrong offset!");
static_assert(offsetof(VelocityObservation_AddVelocityObservation, ReturnValue) == 0x000010, "Member 'VelocityObservation_AddVelocityObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.VelocityObservation.SetVelocityObservation
// 0x0038 (0x0038 - 0x0000)
struct VelocityObservation_SetVelocityObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityObservation_SetVelocityObservation) == 0x000008, "Wrong alignment on VelocityObservation_SetVelocityObservation");
static_assert(sizeof(VelocityObservation_SetVelocityObservation) == 0x000038, "Wrong size on VelocityObservation_SetVelocityObservation");
static_assert(offsetof(VelocityObservation_SetVelocityObservation, AgentId) == 0x000000, "Member 'VelocityObservation_SetVelocityObservation::AgentId' has a wrong offset!");
static_assert(offsetof(VelocityObservation_SetVelocityObservation, Velocity) == 0x000008, "Member 'VelocityObservation_SetVelocityObservation::Velocity' has a wrong offset!");
static_assert(offsetof(VelocityObservation_SetVelocityObservation, RelativeRotation) == 0x000020, "Member 'VelocityObservation_SetVelocityObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.VelocityArrayObservation.AddVelocityArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct VelocityArrayObservation_AddVelocityArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVelocityArrayObservation*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityArrayObservation_AddVelocityArrayObservation) == 0x000008, "Wrong alignment on VelocityArrayObservation_AddVelocityArrayObservation");
static_assert(sizeof(VelocityArrayObservation_AddVelocityArrayObservation) == 0x000020, "Wrong size on VelocityArrayObservation_AddVelocityArrayObservation");
static_assert(offsetof(VelocityArrayObservation_AddVelocityArrayObservation, InInteractor) == 0x000000, "Member 'VelocityArrayObservation_AddVelocityArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_AddVelocityArrayObservation, Name_0) == 0x000008, "Member 'VelocityArrayObservation_AddVelocityArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_AddVelocityArrayObservation, VelocityNum) == 0x00000C, "Member 'VelocityArrayObservation_AddVelocityArrayObservation::VelocityNum' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_AddVelocityArrayObservation, Scale) == 0x000010, "Member 'VelocityArrayObservation_AddVelocityArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_AddVelocityArrayObservation, ReturnValue) == 0x000018, "Member 'VelocityArrayObservation_AddVelocityArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.VelocityArrayObservation.SetVelocityArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct VelocityArrayObservation_SetVelocityArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Velocities;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityArrayObservation_SetVelocityArrayObservation) == 0x000008, "Wrong alignment on VelocityArrayObservation_SetVelocityArrayObservation");
static_assert(sizeof(VelocityArrayObservation_SetVelocityArrayObservation) == 0x000030, "Wrong size on VelocityArrayObservation_SetVelocityArrayObservation");
static_assert(offsetof(VelocityArrayObservation_SetVelocityArrayObservation, AgentId) == 0x000000, "Member 'VelocityArrayObservation_SetVelocityArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_SetVelocityArrayObservation, Velocities) == 0x000008, "Member 'VelocityArrayObservation_SetVelocityArrayObservation::Velocities' has a wrong offset!");
static_assert(offsetof(VelocityArrayObservation_SetVelocityArrayObservation, RelativeRotation) == 0x000018, "Member 'VelocityArrayObservation_SetVelocityArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.ScalarVelocityObservation.AddScalarVelocityObservation
// 0x0018 (0x0018 - 0x0000)
struct ScalarVelocityObservation_AddScalarVelocityObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScalarVelocityObservation*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityObservation_AddScalarVelocityObservation) == 0x000008, "Wrong alignment on ScalarVelocityObservation_AddScalarVelocityObservation");
static_assert(sizeof(ScalarVelocityObservation_AddScalarVelocityObservation) == 0x000018, "Wrong size on ScalarVelocityObservation_AddScalarVelocityObservation");
static_assert(offsetof(ScalarVelocityObservation_AddScalarVelocityObservation, InInteractor) == 0x000000, "Member 'ScalarVelocityObservation_AddScalarVelocityObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_AddScalarVelocityObservation, Name_0) == 0x000008, "Member 'ScalarVelocityObservation_AddScalarVelocityObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_AddScalarVelocityObservation, Scale) == 0x00000C, "Member 'ScalarVelocityObservation_AddScalarVelocityObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_AddScalarVelocityObservation, ReturnValue) == 0x000010, "Member 'ScalarVelocityObservation_AddScalarVelocityObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarVelocityObservation.SetScalarVelocityObservation
// 0x0008 (0x0008 - 0x0000)
struct ScalarVelocityObservation_SetScalarVelocityObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityObservation_SetScalarVelocityObservation) == 0x000004, "Wrong alignment on ScalarVelocityObservation_SetScalarVelocityObservation");
static_assert(sizeof(ScalarVelocityObservation_SetScalarVelocityObservation) == 0x000008, "Wrong size on ScalarVelocityObservation_SetScalarVelocityObservation");
static_assert(offsetof(ScalarVelocityObservation_SetScalarVelocityObservation, AgentId) == 0x000000, "Member 'ScalarVelocityObservation_SetScalarVelocityObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_SetScalarVelocityObservation, Velocity) == 0x000004, "Member 'ScalarVelocityObservation_SetScalarVelocityObservation::Velocity' has a wrong offset!");

// Function LearningAgents.ScalarVelocityObservation.SetScalarVelocityObservationWithAxis
// 0x0038 (0x0038 - 0x0000)
struct ScalarVelocityObservation_SetScalarVelocityObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityObservation_SetScalarVelocityObservationWithAxis) == 0x000008, "Wrong alignment on ScalarVelocityObservation_SetScalarVelocityObservationWithAxis");
static_assert(sizeof(ScalarVelocityObservation_SetScalarVelocityObservationWithAxis) == 0x000038, "Wrong size on ScalarVelocityObservation_SetScalarVelocityObservationWithAxis");
static_assert(offsetof(ScalarVelocityObservation_SetScalarVelocityObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarVelocityObservation_SetScalarVelocityObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_SetScalarVelocityObservationWithAxis, Velocity) == 0x000008, "Member 'ScalarVelocityObservation_SetScalarVelocityObservationWithAxis::Velocity' has a wrong offset!");
static_assert(offsetof(ScalarVelocityObservation_SetScalarVelocityObservationWithAxis, Axis) == 0x000020, "Member 'ScalarVelocityObservation_SetScalarVelocityObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.ScalarVelocityArrayObservation.AddScalarVelocityArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScalarVelocityArrayObservation*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation) == 0x000008, "Wrong alignment on ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation");
static_assert(sizeof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation) == 0x000020, "Wrong size on ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation");
static_assert(offsetof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation, InInteractor) == 0x000000, "Member 'ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation, Name_0) == 0x000008, "Member 'ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation, VelocityNum) == 0x00000C, "Member 'ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation::VelocityNum' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation, Scale) == 0x000010, "Member 'ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation, ReturnValue) == 0x000018, "Member 'ScalarVelocityArrayObservation_AddScalarVelocityArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarVelocityArrayObservation.SetScalarVelocityArrayObservation
// 0x0018 (0x0018 - 0x0000)
struct ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Velocities;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation) == 0x000008, "Wrong alignment on ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation");
static_assert(sizeof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation) == 0x000018, "Wrong size on ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation");
static_assert(offsetof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation, AgentId) == 0x000000, "Member 'ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation, Velocities) == 0x000008, "Member 'ScalarVelocityArrayObservation_SetScalarVelocityArrayObservation::Velocities' has a wrong offset!");

// Function LearningAgents.ScalarVelocityArrayObservation.SetScalarVelocityArrayObservationWithAxis
// 0x0030 (0x0030 - 0x0000)
struct ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Velocities;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis) == 0x000008, "Wrong alignment on ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis");
static_assert(sizeof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis) == 0x000030, "Wrong size on ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis");
static_assert(offsetof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis, Velocities) == 0x000008, "Member 'ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis::Velocities' has a wrong offset!");
static_assert(offsetof(ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis, Axis) == 0x000018, "Member 'ScalarVelocityArrayObservation_SetScalarVelocityArrayObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.PlanarVelocityObservation.AddPlanarVelocityObservation
// 0x0048 (0x0048 - 0x0000)
struct PlanarVelocityObservation_AddPlanarVelocityObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis0;                                             // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarVelocityObservation*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityObservation_AddPlanarVelocityObservation) == 0x000008, "Wrong alignment on PlanarVelocityObservation_AddPlanarVelocityObservation");
static_assert(sizeof(PlanarVelocityObservation_AddPlanarVelocityObservation) == 0x000048, "Wrong size on PlanarVelocityObservation_AddPlanarVelocityObservation");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, InInteractor) == 0x000000, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, Name_0) == 0x000008, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, Scale) == 0x00000C, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, Axis0) == 0x000010, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, Axis1) == 0x000028, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_AddPlanarVelocityObservation, ReturnValue) == 0x000040, "Member 'PlanarVelocityObservation_AddPlanarVelocityObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarVelocityObservation.SetPlanarVelocityObservation
// 0x0038 (0x0038 - 0x0000)
struct PlanarVelocityObservation_SetPlanarVelocityObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityObservation_SetPlanarVelocityObservation) == 0x000008, "Wrong alignment on PlanarVelocityObservation_SetPlanarVelocityObservation");
static_assert(sizeof(PlanarVelocityObservation_SetPlanarVelocityObservation) == 0x000038, "Wrong size on PlanarVelocityObservation_SetPlanarVelocityObservation");
static_assert(offsetof(PlanarVelocityObservation_SetPlanarVelocityObservation, AgentId) == 0x000000, "Member 'PlanarVelocityObservation_SetPlanarVelocityObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_SetPlanarVelocityObservation, Velocity) == 0x000008, "Member 'PlanarVelocityObservation_SetPlanarVelocityObservation::Velocity' has a wrong offset!");
static_assert(offsetof(PlanarVelocityObservation_SetPlanarVelocityObservation, RelativeRotation) == 0x000020, "Member 'PlanarVelocityObservation_SetPlanarVelocityObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.PlanarVelocityArrayObservation.AddPlanarVelocityArrayObservation
// 0x0050 (0x0050 - 0x0000)
struct PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarVelocityArrayObservation*        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation) == 0x000008, "Wrong alignment on PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation");
static_assert(sizeof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation) == 0x000050, "Wrong size on PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, InInteractor) == 0x000000, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, Name_0) == 0x000008, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, VelocityNum) == 0x00000C, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::VelocityNum' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, Scale) == 0x000010, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, Axis0) == 0x000018, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, Axis1) == 0x000030, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation, ReturnValue) == 0x000048, "Member 'PlanarVelocityArrayObservation_AddPlanarVelocityArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.PlanarVelocityArrayObservation.SetPlanarVelocityArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Velocities;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation) == 0x000008, "Wrong alignment on PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation");
static_assert(sizeof(PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation) == 0x000030, "Wrong size on PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation");
static_assert(offsetof(PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation, AgentId) == 0x000000, "Member 'PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation, Velocities) == 0x000008, "Member 'PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation::Velocities' has a wrong offset!");
static_assert(offsetof(PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation, RelativeRotation) == 0x000018, "Member 'PlanarVelocityArrayObservation_SetPlanarVelocityArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.AngularVelocityObservation.AddAngularVelocityObservation
// 0x0018 (0x0018 - 0x0000)
struct AngularVelocityObservation_AddAngularVelocityObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAngularVelocityObservation*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngularVelocityObservation_AddAngularVelocityObservation) == 0x000008, "Wrong alignment on AngularVelocityObservation_AddAngularVelocityObservation");
static_assert(sizeof(AngularVelocityObservation_AddAngularVelocityObservation) == 0x000018, "Wrong size on AngularVelocityObservation_AddAngularVelocityObservation");
static_assert(offsetof(AngularVelocityObservation_AddAngularVelocityObservation, InInteractor) == 0x000000, "Member 'AngularVelocityObservation_AddAngularVelocityObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(AngularVelocityObservation_AddAngularVelocityObservation, Name_0) == 0x000008, "Member 'AngularVelocityObservation_AddAngularVelocityObservation::Name_0' has a wrong offset!");
static_assert(offsetof(AngularVelocityObservation_AddAngularVelocityObservation, Scale) == 0x00000C, "Member 'AngularVelocityObservation_AddAngularVelocityObservation::Scale' has a wrong offset!");
static_assert(offsetof(AngularVelocityObservation_AddAngularVelocityObservation, ReturnValue) == 0x000010, "Member 'AngularVelocityObservation_AddAngularVelocityObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.AngularVelocityObservation.SetAngularVelocityObservation
// 0x0038 (0x0038 - 0x0000)
struct AngularVelocityObservation_SetAngularVelocityObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularVelocity;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngularVelocityObservation_SetAngularVelocityObservation) == 0x000008, "Wrong alignment on AngularVelocityObservation_SetAngularVelocityObservation");
static_assert(sizeof(AngularVelocityObservation_SetAngularVelocityObservation) == 0x000038, "Wrong size on AngularVelocityObservation_SetAngularVelocityObservation");
static_assert(offsetof(AngularVelocityObservation_SetAngularVelocityObservation, AgentId) == 0x000000, "Member 'AngularVelocityObservation_SetAngularVelocityObservation::AgentId' has a wrong offset!");
static_assert(offsetof(AngularVelocityObservation_SetAngularVelocityObservation, AngularVelocity) == 0x000008, "Member 'AngularVelocityObservation_SetAngularVelocityObservation::AngularVelocity' has a wrong offset!");
static_assert(offsetof(AngularVelocityObservation_SetAngularVelocityObservation, RelativeRotation) == 0x000020, "Member 'AngularVelocityObservation_SetAngularVelocityObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.AngularVelocityArrayObservation.AddAngularVelocityArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct AngularVelocityArrayObservation_AddAngularVelocityArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngularVelocityNum;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAngularVelocityArrayObservation*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on AngularVelocityArrayObservation_AddAngularVelocityArrayObservation");
static_assert(sizeof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation) == 0x000020, "Wrong size on AngularVelocityArrayObservation_AddAngularVelocityArrayObservation");
static_assert(offsetof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation, InInteractor) == 0x000000, "Member 'AngularVelocityArrayObservation_AddAngularVelocityArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation, Name_0) == 0x000008, "Member 'AngularVelocityArrayObservation_AddAngularVelocityArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation, AngularVelocityNum) == 0x00000C, "Member 'AngularVelocityArrayObservation_AddAngularVelocityArrayObservation::AngularVelocityNum' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation, Scale) == 0x000010, "Member 'AngularVelocityArrayObservation_AddAngularVelocityArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_AddAngularVelocityArrayObservation, ReturnValue) == 0x000018, "Member 'AngularVelocityArrayObservation_AddAngularVelocityArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.AngularVelocityArrayObservation.SetAngularVelocityArrayObservation
// 0x0030 (0x0030 - 0x0000)
struct AngularVelocityArrayObservation_SetAngularVelocityArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AngularVelocities;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AngularVelocityArrayObservation_SetAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on AngularVelocityArrayObservation_SetAngularVelocityArrayObservation");
static_assert(sizeof(AngularVelocityArrayObservation_SetAngularVelocityArrayObservation) == 0x000030, "Wrong size on AngularVelocityArrayObservation_SetAngularVelocityArrayObservation");
static_assert(offsetof(AngularVelocityArrayObservation_SetAngularVelocityArrayObservation, AgentId) == 0x000000, "Member 'AngularVelocityArrayObservation_SetAngularVelocityArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_SetAngularVelocityArrayObservation, AngularVelocities) == 0x000008, "Member 'AngularVelocityArrayObservation_SetAngularVelocityArrayObservation::AngularVelocities' has a wrong offset!");
static_assert(offsetof(AngularVelocityArrayObservation_SetAngularVelocityArrayObservation, RelativeRotation) == 0x000018, "Member 'AngularVelocityArrayObservation_SetAngularVelocityArrayObservation::RelativeRotation' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityObservation.AddScalarAngularVelocityObservation
// 0x0018 (0x0018 - 0x0000)
struct ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScalarAngularVelocityObservation*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation) == 0x000008, "Wrong alignment on ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation");
static_assert(sizeof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation) == 0x000018, "Wrong size on ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation");
static_assert(offsetof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation, InInteractor) == 0x000000, "Member 'ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation, Name_0) == 0x000008, "Member 'ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation, Scale) == 0x00000C, "Member 'ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation, ReturnValue) == 0x000010, "Member 'ScalarAngularVelocityObservation_AddScalarAngularVelocityObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityObservation.SetScalarAngularVelocityObservation
// 0x0008 (0x0008 - 0x0000)
struct ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularVelocity;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation) == 0x000004, "Wrong alignment on ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation");
static_assert(sizeof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation) == 0x000008, "Wrong size on ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation");
static_assert(offsetof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation, AgentId) == 0x000000, "Member 'ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation, AngularVelocity) == 0x000004, "Member 'ScalarAngularVelocityObservation_SetScalarAngularVelocityObservation::AngularVelocity' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityObservation.SetScalarAngularVelocityObservationWithAxis
// 0x0038 (0x0038 - 0x0000)
struct ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularVelocity;                                   // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis) == 0x000008, "Wrong alignment on ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis");
static_assert(sizeof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis) == 0x000038, "Wrong size on ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis");
static_assert(offsetof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis, AngularVelocity) == 0x000008, "Member 'ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis::AngularVelocity' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis, Axis) == 0x000020, "Member 'ScalarAngularVelocityObservation_SetScalarAngularVelocityObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityArrayObservation.AddScalarAngularVelocityArrayObservation
// 0x0020 (0x0020 - 0x0000)
struct ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngularVelocityNum;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScalarAngularVelocityArrayObservation* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation");
static_assert(sizeof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation) == 0x000020, "Wrong size on ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation, InInteractor) == 0x000000, "Member 'ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation::InInteractor' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation, Name_0) == 0x000008, "Member 'ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation, AngularVelocityNum) == 0x00000C, "Member 'ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation::AngularVelocityNum' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation, Scale) == 0x000010, "Member 'ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation::Scale' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation, ReturnValue) == 0x000018, "Member 'ScalarAngularVelocityArrayObservation_AddScalarAngularVelocityArrayObservation::ReturnValue' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityArrayObservation.SetScalarAngularVelocityArrayObservation
// 0x0018 (0x0018 - 0x0000)
struct ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AngularVelocities;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation");
static_assert(sizeof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation) == 0x000018, "Wrong size on ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation, AgentId) == 0x000000, "Member 'ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation, AngularVelocities) == 0x000008, "Member 'ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservation::AngularVelocities' has a wrong offset!");

// Function LearningAgents.ScalarAngularVelocityArrayObservation.SetScalarAngularVelocityArrayObservationWithAxis
// 0x0030 (0x0030 - 0x0000)
struct ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AngularVelocities;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis) == 0x000008, "Wrong alignment on ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis");
static_assert(sizeof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis) == 0x000030, "Wrong size on ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis, AgentId) == 0x000000, "Member 'ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis, AngularVelocities) == 0x000008, "Member 'ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis::AngularVelocities' has a wrong offset!");
static_assert(offsetof(ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis, Axis) == 0x000018, "Member 'ScalarAngularVelocityArrayObservation_SetScalarAngularVelocityArrayObservationWithAxis::Axis' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.LoadPolicyFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsPolicy_LoadPolicyFromAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_LoadPolicyFromAsset) == 0x000008, "Wrong alignment on LearningAgentsPolicy_LoadPolicyFromAsset");
static_assert(sizeof(LearningAgentsPolicy_LoadPolicyFromAsset) == 0x000008, "Wrong size on LearningAgentsPolicy_LoadPolicyFromAsset");
static_assert(offsetof(LearningAgentsPolicy_LoadPolicyFromAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsPolicy_LoadPolicyFromAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.LoadPolicyFromSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsPolicy_LoadPolicyFromSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_LoadPolicyFromSnapshot) == 0x000008, "Wrong alignment on LearningAgentsPolicy_LoadPolicyFromSnapshot");
static_assert(sizeof(LearningAgentsPolicy_LoadPolicyFromSnapshot) == 0x000010, "Wrong size on LearningAgentsPolicy_LoadPolicyFromSnapshot");
static_assert(offsetof(LearningAgentsPolicy_LoadPolicyFromSnapshot, File) == 0x000000, "Member 'LearningAgentsPolicy_LoadPolicyFromSnapshot::File' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.SavePolicyToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsPolicy_SavePolicyToAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_SavePolicyToAsset) == 0x000008, "Wrong alignment on LearningAgentsPolicy_SavePolicyToAsset");
static_assert(sizeof(LearningAgentsPolicy_SavePolicyToAsset) == 0x000008, "Wrong size on LearningAgentsPolicy_SavePolicyToAsset");
static_assert(offsetof(LearningAgentsPolicy_SavePolicyToAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsPolicy_SavePolicyToAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.SetActionNoiseScale
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsPolicy_SetActionNoiseScale final
{
public:
	float                                         ActionNoiseScale;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_SetActionNoiseScale) == 0x000004, "Wrong alignment on LearningAgentsPolicy_SetActionNoiseScale");
static_assert(sizeof(LearningAgentsPolicy_SetActionNoiseScale) == 0x000004, "Wrong size on LearningAgentsPolicy_SetActionNoiseScale");
static_assert(offsetof(LearningAgentsPolicy_SetActionNoiseScale, ActionNoiseScale) == 0x000000, "Member 'LearningAgentsPolicy_SetActionNoiseScale::ActionNoiseScale' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.SetMemoryState
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsPolicy_SetMemoryState final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 InMemoryState;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_SetMemoryState) == 0x000008, "Wrong alignment on LearningAgentsPolicy_SetMemoryState");
static_assert(sizeof(LearningAgentsPolicy_SetMemoryState) == 0x000018, "Wrong size on LearningAgentsPolicy_SetMemoryState");
static_assert(offsetof(LearningAgentsPolicy_SetMemoryState, AgentId) == 0x000000, "Member 'LearningAgentsPolicy_SetMemoryState::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsPolicy_SetMemoryState, InMemoryState) == 0x000008, "Member 'LearningAgentsPolicy_SetMemoryState::InMemoryState' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.SetupPolicy
// 0x0030 (0x0030 - 0x0000)
struct LearningAgentsPolicy_SetupPolicy final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsPolicySettings          PolicySettings;                                    // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_SetupPolicy) == 0x000008, "Wrong alignment on LearningAgentsPolicy_SetupPolicy");
static_assert(sizeof(LearningAgentsPolicy_SetupPolicy) == 0x000030, "Wrong size on LearningAgentsPolicy_SetupPolicy");
static_assert(offsetof(LearningAgentsPolicy_SetupPolicy, InInteractor) == 0x000000, "Member 'LearningAgentsPolicy_SetupPolicy::InInteractor' has a wrong offset!");
static_assert(offsetof(LearningAgentsPolicy_SetupPolicy, PolicySettings) == 0x000008, "Member 'LearningAgentsPolicy_SetupPolicy::PolicySettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsPolicy_SetupPolicy, NeuralNetworkAsset) == 0x000028, "Member 'LearningAgentsPolicy_SetupPolicy::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.UsePolicyFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsPolicy_UsePolicyFromAsset final
{
public:
	class ULearningAgentsNeuralNetwork*           NeuralNetworkAsset;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_UsePolicyFromAsset) == 0x000008, "Wrong alignment on LearningAgentsPolicy_UsePolicyFromAsset");
static_assert(sizeof(LearningAgentsPolicy_UsePolicyFromAsset) == 0x000008, "Wrong size on LearningAgentsPolicy_UsePolicyFromAsset");
static_assert(offsetof(LearningAgentsPolicy_UsePolicyFromAsset, NeuralNetworkAsset) == 0x000000, "Member 'LearningAgentsPolicy_UsePolicyFromAsset::NeuralNetworkAsset' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.GetActionNoiseScale
// 0x0004 (0x0004 - 0x0000)
struct LearningAgentsPolicy_GetActionNoiseScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_GetActionNoiseScale) == 0x000004, "Wrong alignment on LearningAgentsPolicy_GetActionNoiseScale");
static_assert(sizeof(LearningAgentsPolicy_GetActionNoiseScale) == 0x000004, "Wrong size on LearningAgentsPolicy_GetActionNoiseScale");
static_assert(offsetof(LearningAgentsPolicy_GetActionNoiseScale, ReturnValue) == 0x000000, "Member 'LearningAgentsPolicy_GetActionNoiseScale::ReturnValue' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.GetMemoryState
// 0x0018 (0x0018 - 0x0000)
struct LearningAgentsPolicy_GetMemoryState final
{
public:
	TArray<float>                                 OutMemoryState;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AgentId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsPolicy_GetMemoryState) == 0x000008, "Wrong alignment on LearningAgentsPolicy_GetMemoryState");
static_assert(sizeof(LearningAgentsPolicy_GetMemoryState) == 0x000018, "Wrong size on LearningAgentsPolicy_GetMemoryState");
static_assert(offsetof(LearningAgentsPolicy_GetMemoryState, OutMemoryState) == 0x000000, "Member 'LearningAgentsPolicy_GetMemoryState::OutMemoryState' has a wrong offset!");
static_assert(offsetof(LearningAgentsPolicy_GetMemoryState, AgentId) == 0x000010, "Member 'LearningAgentsPolicy_GetMemoryState::AgentId' has a wrong offset!");

// Function LearningAgents.LearningAgentsPolicy.SavePolicyToSnapshot
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsPolicy_SavePolicyToSnapshot final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsPolicy_SavePolicyToSnapshot) == 0x000008, "Wrong alignment on LearningAgentsPolicy_SavePolicyToSnapshot");
static_assert(sizeof(LearningAgentsPolicy_SavePolicyToSnapshot) == 0x000010, "Wrong size on LearningAgentsPolicy_SavePolicyToSnapshot");
static_assert(offsetof(LearningAgentsPolicy_SavePolicyToSnapshot, File) == 0x000000, "Member 'LearningAgentsPolicy_SavePolicyToSnapshot::File' has a wrong offset!");

}

